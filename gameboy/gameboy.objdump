
gameboy.elf:     file format elf32-littlenios2
gameboy.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001c6ac memsz 0x0001c6ac flags r-x
    LOAD off    0x0001d6cc vaddr 0x0001c6cc paddr 0x0001e1c8 align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x0001fcc4 vaddr 0x0001fcc4 paddr 0x0001fcc4 align 2**12
         filesz 0x00000000 memsz 0x00000564 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c0f4  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a8  0001c324  0001c324  0001d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  0001c6cc  0001e1c8  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000564  0001fcc4  0001fcc4  0001fcc4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00020228  00020228  0001f1c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001f1c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e98  00000000  00000000  0001f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028eb1  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000914d  00000000  00000000  00048f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c98f  00000000  00000000  00052086  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006004  00000000  00000000  0005ea18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ff0  00000000  00000000  00064a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00068a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00080278  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001900  00000000  00000000  00080288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00086e3a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00086e3d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00086e49  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00086e4a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00086e4b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00086e4f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00086e53  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00086e57  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00086e62  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00086e6d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00086e78  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  00086e81  2**0
                  CONTENTS, READONLY
 29 .jdi          00005240  00000000  00000000  00086ead  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007252f  00000000  00000000  0008c0ed  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001c324 l    d  .rodata	00000000 .rodata
0001c6cc l    d  .rwdata	00000000 .rwdata
0001fcc4 l    d  .bss	00000000 .bss
00020228 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../gameboy_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0001c6cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c416 l     O .rodata	00000010 zeroes.4404
0000f42c l     F .text	000000bc __sbprintf
0001c426 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000f7bc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011314 l     F .text	00000008 __fp_unlock
00011328 l     F .text	0000019c __sinit.part.1
000114c4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001cb10 l     O .rwdata	00000020 lc_ctype_charset
0001caf0 l     O .rwdata	00000020 lc_message_charset
0001cb30 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001c454 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014998 l     F .text	000000fc __sprint_r.part.0
0001c578 l     O .rodata	00000010 zeroes.4349
00015fd4 l     F .text	000000bc __sbprintf
0001c588 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019e40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019f54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019fb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a0a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a190 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a27c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a458 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001e1b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a6cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a808 l     F .text	00000034 alt_dev_reg
0001d118 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001aae8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0001acf4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b478 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b8d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001ba38 l     F .text	0000003c alt_get_errno
0001ba74 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
0001fcfc g     O .bss	00000004 alt_instruction_exception_handler
0000aef4 g     F .text	00000038 xC4
0001e178 g     O .rwdata	00000004 base
00013fdc g     F .text	00000074 _mprec_log10
0000a2c4 g     F .text	0000003c x8D
000097d8 g     F .text	0000003c x5F
000092e0 g     F .text	0000003c x4A
000140c8 g     F .text	0000008c __any_on
00016588 g     F .text	00000054 _isatty_r
0001c460 g     O .rodata	00000028 __mprec_tinytens
0001a394 g     F .text	0000007c alt_main
000033a0 g     F .text	00000088 LDrrar
0000cfc8 g     F .text	000000c0 _puts_r
00020128 g     O .bss	00000100 alt_irq
00009578 g     F .text	0000003c x55
000165dc g     F .text	00000060 _lseek_r
00007f30 g     F .text	0000003c x01
000087a0 g     F .text	00000038 x1E
0000ae88 g     F .text	00000038 xC2
0000b044 g     F .text	00000038 xCA
0001e1c8 g       *ABS*	00000000 __flash_rwdata_start
0000b6d0 g     F .text	0000003c xF1
0000abdc g     F .text	0000003c xB6
00018818 g     F .text	00000088 .hidden __eqdf2
0001e182 g     O .rwdata	00000002 TIMA_addr
0000ada0 g     F .text	0000003c xBE
00002df4 g     F .text	00000030 pause
00004f48 g     F .text	00000078 SUBrra
0000988c g     F .text	0000003c x62
000014c0 g     F .text	000000d8 copySpriteTileLine
00009a70 g     F .text	0000003c x6A
00008ab4 g     F .text	00000038 x28
0000b278 g     F .text	00000034 xD6
00020228 g       *ABS*	00000000 __alt_heap_start
0000aa8c g     F .text	00000038 xB0
0000cf8c g     F .text	0000003c printf
00003f98 g     F .text	00000070 INCsp
00002534 g     F .text	0000003c reset_CPU
000167f4 g     F .text	0000009c _wcrtomb_r
00009d1c g     F .text	00000040 x75
00008cb0 g     F .text	00000038 x30
0000ad30 g     F .text	00000038 xBC
0000b5b8 g     F .text	0000003c xE9
00014858 g     F .text	0000005c __sseek
00011674 g     F .text	00000010 __sinit
0001669c g     F .text	00000140 __swbuf_r
00008f74 g     F .text	00000034 x3B
00012148 g     F .text	0000007c _setlocale_r
000114cc g     F .text	00000078 __sfmoreglue
0001a434 g     F .text	00000024 __malloc_unlock
0000386c g     F .text	000000c8 LDrnna
000041b0 g     F .text	00000074 DECsp
00009b60 g     F .text	00000040 x6E
00008b98 g     F .text	0000003c x2B
00007340 g     F .text	00000094 JRn
00006e64 g     F .text	000000b0 SWAPrra
00003588 g     F .text	00000084 LDrar
00012e18 g     F .text	0000015c memmove
0000b42c g     F .text	00000038 xE0
0000a24c g     F .text	0000003c x8B
0000044c g     F .text	00000168 initGPU
0000b89c g     F .text	00000038 xFA
0000addc g     F .text	00000038 xBF
00006c1c g     F .text	000000a4 SETirra
0001165c g     F .text	00000018 _cleanup
00009f38 g     F .text	00000040 x7E
0001309c g     F .text	000000a8 _Balloc
00006740 g     F .text	000000f8 SLArra
0000446c g     F .text	0000006c ADDrr
00002f18 g     F .text	00000038 i3
0000ae4c g     F .text	0000003c xC1
000188a0 g     F .text	000000dc .hidden __gtdf2
0001be60 g     F .text	00000024 altera_nios2_gen2_irq_init
00000f3c g     F .text	000000b8 copyLineToBuffer
000071d4 g     F .text	000000e4 JPccnn
00000000 g     F .entry	0000000c __reset
00009850 g     F .text	0000003c x61
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002078 g     F .text	00000090 getPalette
00007e2c g     F .text	00000048 DI
00004008 g     F .text	00000100 INCr
0001652c g     F .text	0000005c _fstat_r
0001fce0 g     O .bss	00000004 errno
00007de4 g     F .text	00000048 HALT
000147d4 g     F .text	00000008 __seofread
0000a938 g     F .text	00000038 xAA
0000a774 g     F .text	00000038 xA2
0001fce8 g     O .bss	00000004 alt_argv
00026178 g       *ABS*	00000000 _gp
0000847c g     F .text	0000003c x13
0000a540 g     F .text	00000038 x98
00009500 g     F .text	0000003c x53
0000b974 g     F .text	0000136c initOpcodes
0000922c g     F .text	0000003c x47
0000b824 g     F .text	0000003c xF8
0000b70c g     F .text	0000003c xF2
0000ac18 g     F .text	00000038 xB7
00002918 g     F .text	000000d0 rr8
00003738 g     F .text	0000006c LDsprr
0001cf98 g     O .rwdata	00000180 alt_fd_list
0000b7ec g     F .text	00000038 xF7
00005644 g     F .text	000000a4 ANDn
00009dd0 g     F .text	0000003c x78
00008d80 g     F .text	00000034 x33
0001be84 g     F .text	00000090 alt_find_dev
00012cd0 g     F .text	00000148 memcpy
00008e9c g     F .text	00000038 x38
000074b4 g     F .text	000000d8 POPrr
00004794 g     F .text	00000130 ADDspn
0001131c g     F .text	0000000c _cleanup_r
00019c58 g     F .text	000000dc .hidden __floatsidf
00009630 g     F .text	0000003c x58
00008730 g     F .text	00000038 x1C
0000a02c g     F .text	0000003c x82
00008148 g     F .text	00000034 x08
0001b9bc g     F .text	0000007c alt_io_redirect
0001897c g     F .text	000000f4 .hidden __ltdf2
0000a300 g     F .text	00000040 x8E
0000931c g     F .text	0000003c x4B
0001c324 g       *ABS*	00000000 __DTOR_END__
0000b93c g     F .text	00000038 xFF
0000d088 g     F .text	00000014 puts
0001c0e0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000997c g     F .text	00000040 x66
0000899c g     F .text	0000003c x23
0000a854 g     F .text	0000003c xA6
0000a7ac g     F .text	00000038 xA3
00005964 g     F .text	00000064 CPr
000146b8 g     F .text	00000074 __fpclassifyd
0000b2e4 g     F .text	00000038 xD8
00013f38 g     F .text	000000a4 __ratio
00015fb8 g     F .text	0000001c __vfiprintf_internal
00007ef8 g     F .text	00000038 x00
0000a0a4 g     F .text	0000003c x84
000090c0 g     F .text	0000003c x41
0001aeec g     F .text	0000021c altera_avalon_jtag_uart_read
0000cf5c g     F .text	00000030 _printf_r
00008240 g     F .text	00000038 x0C
0000ce40 g     F .text	00000064 .hidden __udivsi3
0001a0e4 g     F .text	000000ac isatty
00005c94 g     F .text	0000011c RRCrra
0001c4b0 g     O .rodata	000000c8 __mprec_tens
00000364 g     F .text	0000004c writeData
00004d0c g     F .text	00000160 ADDrrra
00007ebc g     F .text	0000003c RETI
0000b2ac g     F .text	00000038 xD7
000121c4 g     F .text	0000000c __locale_charset
0000a508 g     F .text	00000038 x97
000094c4 g     F .text	0000003c x52
00000ea8 g     F .text	00000094 copyBGTileLine
0000aac4 g     F .text	00000038 xB1
00002ee0 g     F .text	00000038 i2
0000a5e8 g     F .text	00000038 x9B
0001fcdc g     O .bss	00000004 __malloc_top_pad
0000975c g     F .text	0000003c x5D
0001e190 g     O .rwdata	00000004 __mb_cur_max
000121f4 g     F .text	0000000c _localeconv_r
000134d0 g     F .text	0000003c __i2b
00011af8 g     F .text	000004c8 __sfvwrite_r
0000b23c g     F .text	0000003c xD5
00005db0 g     F .text	000000e8 RLCr
00007fe8 g     F .text	00000038 x04
0001472c g     F .text	00000054 _sbrk_r
00006cc0 g     F .text	00000088 RESir
00001144 g     F .text	0000037c drawSprites
00002c78 g     F .text	00000120 wr16
00004108 g     F .text	000000a8 DECrr
000048c4 g     F .text	00000170 _ADDrrn
0001663c g     F .text	00000060 _read_r
000029e8 g     F .text	00000194 rr16
0001e1b0 g     O .rwdata	00000004 alt_max_fd
0000a3b4 g     F .text	00000038 x91
00008560 g     F .text	000000d8 x17
000096e4 g     F .text	0000003c x5B
00016220 g     F .text	000000f0 _fclose_r
000112e4 g     F .text	00000030 fflush
0001fcd8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b464 g     F .text	0000003c xE1
00008df0 g     F .text	0000003c x35
00004224 g     F .text	00000118 DECr
0001759c g     F .text	000008ac .hidden __adddf3
0000a4cc g     F .text	0000003c x96
00009488 g     F .text	0000003c x51
000056e8 g     F .text	000000a4 ANDrra
00013ce0 g     F .text	0000010c __b2d
00008c7c g     F .text	00000034 x2F
00016fd8 g     F .text	000005c4 .hidden __umoddi3
0001a2b8 g     F .text	000000dc lseek
00006d48 g     F .text	000000a8 RESirra
0001e188 g     O .rwdata	00000004 _global_impure_ptr
00009410 g     F .text	0000003c x4F
00014154 g     F .text	00000564 _realloc_r
00009d5c g     F .text	00000034 x76
00008ce8 g     F .text	00000034 x31
00020228 g       *ABS*	00000000 __bss_end
00007ac8 g     F .text	000000a0 CCF
0001b7e8 g     F .text	000000f0 alt_iic_isr_register
0001bd58 g     F .text	00000108 alt_tick
000169dc g     F .text	000005fc .hidden __udivdi3
00004ed0 g     F .text	00000078 SUBn
00016488 g     F .text	00000024 _fputwc_r
00002020 g     F .text	00000058 getPixel
0001c488 g     O .rodata	00000028 __mprec_bigtens
000132b4 g     F .text	00000104 __s2b
0000afd8 g     F .text	00000038 xC8
00019d34 g     F .text	000000a8 .hidden __floatunsidf
000073d4 g     F .text	000000e0 PUSHrr
00009720 g     F .text	0000003c x5C
00013a20 g     F .text	00000060 __mcmp
000082e8 g     F .text	000000c8 x0F
0000654c g     F .text	0000011c SRArra
0000283c g     F .text	000000dc executeOpcode
00011694 g     F .text	00000018 __fp_lock_all
0001b79c g     F .text	0000004c alt_ic_irq_enabled
0000758c g     F .text	000000ec RSTn
00005e98 g     F .text	00000108 RLCrra
000037a4 g     F .text	000000c8 LDnnar
0001bcbc g     F .text	0000009c alt_alarm_stop
0000b120 g     F .text	00000038 xCF
0000b07c g     F .text	00000038 xCC
0001fcf0 g     O .bss	00000004 alt_irq_active
0000acc0 g     F .text	00000038 xBA
00008e2c g     F .text	0000003c x36
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001cf70 g     O .rwdata	00000028 alt_dev_null
0000360c g     F .text	0000007c LDrra
00009814 g     F .text	0000003c x60
00009ae8 g     F .text	0000003c x6C
000084b8 g     F .text	00000038 x14
0000a37c g     F .text	00000038 x90
00008528 g     F .text	00000038 x16
000034a4 g     F .text	0000007c LDrn
00009e0c g     F .text	0000003c x79
00008db4 g     F .text	0000003c x34
0001b458 g     F .text	00000020 alt_dcache_flush_all
000133b8 g     F .text	00000068 __hi0bits
00019bd8 g     F .text	00000080 .hidden __fixdfsi
000002a8 g     F .text	000000bc dmaTransfer
0000aa54 g     F .text	00000038 xAF
000031a4 g     F .text	00000030 enableInterrupts
00008c44 g     F .text	00000038 x2E
00007750 g     F .text	00000104 RETcc
0001e1c8 g       *ABS*	00000000 __ram_rwdata_end
0000a198 g     F .text	0000003c x88
000091b0 g     F .text	0000003c x45
0001e1a8 g     O .rwdata	00000008 alt_dev_list
0000b698 g     F .text	00000038 xF0
0000aba4 g     F .text	00000038 xB5
0001a708 g     F .text	00000100 write
00009ec0 g     F .text	0000003c x7C
0000b584 g     F .text	00000034 xE8
00003e84 g     F .text	00000114 INCrra
0000a9a8 g     F .text	00000038 xAC
0001c6cc g       *ABS*	00000000 __ram_rodata_end
00019ff0 g     F .text	000000b8 fstat
0001897c g     F .text	000000f4 .hidden __ledf2
0000690c g     F .text	000000f4 SRLrra
00008278 g     F .text	00000038 x0D
0000ab34 g     F .text	00000038 xB3
00013798 g     F .text	00000140 __pow5mult
0000acf8 g     F .text	00000038 xBB
00014aac g     F .text	0000150c ___vfiprintf_internal_r
0001fcd0 g     O .bss	00000004 __nlocale_changed
0000cea4 g     F .text	00000058 .hidden __umodsi3
00020228 g       *ABS*	00000000 end
0000b010 g     F .text	00000034 xC9
0000aec0 g     F .text	00000034 xC3
0000af2c g     F .text	0000003c xC5
0000b748 g     F .text	00000034 xF3
0000ac50 g     F .text	00000038 xB8
00006df0 g     F .text	00000074 SWAPr
00009904 g     F .text	0000003c x64
000088fc g     F .text	0000003c x21
0000b660 g     F .text	00000038 xEF
0000a900 g     F .text	00000038 xA9
0001aa28 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001c324 g       *ABS*	00000000 __CTOR_LIST__
000005b4 g     F .text	00000208 gpuUpdate
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000a658 g     F .text	00000038 x9D
00019ddc g     F .text	00000064 .hidden __clzsi2
00004684 g     F .text	000000a4 ADDrrrr
0001b108 g     F .text	00000224 altera_avalon_jtag_uart_write
00006f14 g     F .text	0000005c _SWAPn
00011684 g     F .text	00000004 __sfp_lock_acquire
00012bec g     F .text	000000e4 memchr
00009cdc g     F .text	00000040 x74
0000d134 g     F .text	000022dc ___vfprintf_internal_r
00005a40 g     F .text	00000078 CPrra
000117e8 g     F .text	00000310 _free_r
0000a890 g     F .text	00000038 xA7
000121d0 g     F .text	00000010 __locale_mb_cur_max
0000a970 g     F .text	00000038 xAB
00008c0c g     F .text	00000038 x2D
0000f63c g     F .text	00000180 __call_exitprocs
000095f4 g     F .text	0000003c x57
000086f4 g     F .text	0000003c x1B
00009ff0 g     F .text	0000003c x81
00008090 g     F .text	000000b8 x07
0001fccc g     O .bss	00000004 __mlocale_changed
0001e194 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0001fcf4 g     O .bss	00000004 _alt_tick_rate
00002f88 g     F .text	00000168 checkInterrupt
000053d0 g     F .text	0000009c ORr
00009f78 g     F .text	0000003c x7F
00008f10 g     F .text	00000064 x3A
00009b24 g     F .text	0000003c x6D
00008b34 g     F .text	00000064 x2A
00004a34 g     F .text	0000006c ADCrr
0001e186 g     O .rwdata	00000002 TAC_addr
00003428 g     F .text	0000007c LDrrra
000138d8 g     F .text	00000148 __lshift
0001fcf8 g     O .bss	00000004 _alt_nticks
0000a620 g     F .text	00000038 x9C
0001a494 g     F .text	00000104 read
0001a874 g     F .text	00000050 alt_sys_init
0000b0e8 g     F .text	00000038 xCE
00003688 g     F .text	000000b0 LDspnn
0000aafc g     F .text	00000038 xB2
00002570 g     F .text	00000074 get_RAM_size
0001c20c g     F .text	00000118 __register_exitproc
00003c68 g     F .text	00000050 _LDav
00002108 g     F .text	000000c4 render
00005158 g     F .text	00000064 SBCr
00005264 g     F .text	0000016c _SBCn
0001350c g     F .text	0000028c __multiply
0001ad94 g     F .text	00000068 altera_avalon_jtag_uart_close
0000cefc g     F .text	00000028 .hidden __mulsi3
0001c6cc g       *ABS*	00000000 __ram_rwdata_start
0001c324 g       *ABS*	00000000 __ram_rodata_start
0001fd00 g     O .bss	00000028 __malloc_current_mallinfo
00013dec g     F .text	0000014c __d2b
00003934 g     F .text	00000174 LDrrspn
00002dc8 g     F .text	0000002c unHalt
0000b62c g     F .text	00000034 xEE
0000a8c8 g     F .text	00000038 xA8
0000b158 g     F .text	00000038 xD0
00005510 g     F .text	000000a4 ORrra
0000a45c g     F .text	00000038 x94
0000b388 g     F .text	00000038 xDC
00000940 g     F .text	0000007c drawScanLine
0001a8c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001c01c g     F .text	000000c4 alt_get_fd
00007f6c g     F .text	00000040 x02
00006f70 g     F .text	000000a4 JPnn
000082b0 g     F .text	00000038 x0E
000003b0 g     F .text	0000009c resetMemory
000160f0 g     F .text	00000054 _close_r
000009bc g     F .text	000000bc drawFrame
0001c190 g     F .text	0000007c memcmp
000095b4 g     F .text	00000040 x56
000086b4 g     F .text	00000040 x1A
0001a984 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00020228 g       *ABS*	00000000 __alt_stack_base
00003bc8 g     F .text	000000a0 LDrran
0001a9d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000af68 g     F .text	00000038 xC6
0000f4e8 g     F .text	00000154 __swsetup_r
00002720 g     F .text	000000d0 fetch
00017e48 g     F .text	000009d0 .hidden __divdf3
00011544 g     F .text	00000118 __sfp
00014050 g     F .text	00000078 __copybits
0001cb68 g     O .rwdata	00000408 __malloc_av_
00008aec g     F .text	00000048 x29
00011690 g     F .text	00000004 __sinit_lock_release
00018a70 g     F .text	0000086c .hidden __muldf3
0000a690 g     F .text	0000003c x9E
00014780 g     F .text	00000054 __sread
0000a1d4 g     F .text	0000003c x89
000091ec g     F .text	00000040 x46
0001bf14 g     F .text	00000108 alt_find_file
000092a4 g     F .text	0000003c x49
00008204 g     F .text	0000003c x0B
00006ac0 g     F .text	000000d8 BITirra
000024d4 g     F .text	00000060 init_CPU
0001b4b4 g     F .text	000000a4 alt_dev_llist_insert
0001a410 g     F .text	00000024 __malloc_lock
0001a61c g     F .text	000000b0 sbrk
0000a704 g     F .text	00000038 xA0
00003154 g     F .text	00000050 isInterruptEnable
000031d4 g     F .text	0000002c disableInterrupts
00011288 g     F .text	0000005c _fflush_r
00016144 g     F .text	000000dc _calloc_r
0000a9e0 g     F .text	00000038 xAD
00003aa8 g     F .text	00000120 LDnnsp
0000843c g     F .text	00000040 x12
000032ec g     F .text	000000b4 LDrrnn
0000578c g     F .text	00000090 XORr
0000a424 g     F .text	00000038 x93
0000866c g     F .text	00000048 x19
00006450 g     F .text	000000fc SRAr
0000b0b4 g     F .text	00000034 xCD
0001fcc4 g       *ABS*	00000000 __bss_start
0000b7b8 g     F .text	00000034 xF6
00012f74 g     F .text	00000128 memset
00009d90 g     F .text	00000040 x77
00008d1c g     F .text	00000064 x32
00009c9c g     F .text	00000040 x73
000021cc g     F .text	00000034 initTimer
0000cce0 g     F .text	00000068 main
00009e84 g     F .text	0000003c x7B
00008e68 g     F .text	00000034 x37
0000b4dc g     F .text	0000003c xE5
0000b54c g     F .text	00000038 xE7
0001fcec g     O .bss	00000004 alt_envp
0001fcd4 g     O .bss	00000004 __malloc_max_total_mem
0001a924 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008400 g     F .text	0000003c x11
000167dc g     F .text	00000018 __swbuf
00009ba0 g     F .text	0000003c x6F
00008bd4 g     F .text	00000038 x2C
00007014 g     F .text	000000e4 testFlag
0000a11c g     F .text	00000040 x86
00009138 g     F .text	0000003c x43
0000789c g     F .text	00000090 CALLccnn
0001e17c g     O .rwdata	00000004 screenBase
000148b4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00016310 g     F .text	00000014 fclose
00001598 g     F .text	0000012c copySpriteLineToBuffer
000058c0 g     F .text	000000a4 XORrra
00002e24 g     F .text	0000004c unPause
0000f9e4 g     F .text	00001688 _dtoa_r
0000ae14 g     F .text	00000038 xC0
000123e0 g     F .text	0000080c _malloc_r
0001fd28 g     O .bss	00000400 opcodeArray
00016950 g     F .text	00000030 __ascii_wctomb
0001e1b4 g     O .rwdata	00000004 alt_errno
00006838 g     F .text	000000d4 SRLr
00011fc0 g     F .text	000000c4 _fwalk
000070f8 g     F .text	000000dc JRccn
0000b190 g     F .text	0000003c xD1
00004c8c g     F .text	00000080 ADCrrra
00009e48 g     F .text	0000003c x7A
0000cd48 g     F .text	00000084 .hidden __divsi3
00009050 g     F .text	00000034 x3F
000116c4 g     F .text	00000124 _malloc_trim_r
00002200 g     F .text	000001a0 updateTimer
0001c324 g       *ABS*	00000000 __CTOR_END__
000148bc g     F .text	000000dc strcmp
0000a340 g     F .text	0000003c x8F
00009358 g     F .text	0000003c x4C
000025e4 g     F .text	00000088 getGameName
0001c324 g       *ABS*	00000000 __flash_rodata_start
0001c324 g       *ABS*	00000000 __DTOR_LIST__
0000546c g     F .text	000000a4 ORn
00003d50 g     F .text	00000090 LDHrna
0000b5f4 g     F .text	00000038 xEA
0000a7e4 g     F .text	00000038 xA4
00009a34 g     F .text	0000003c x69
00008a48 g     F .text	00000038 x26
0000b204 g     F .text	00000038 xD4
00018818 g     F .text	00000088 .hidden __nedf2
00007678 g     F .text	000000d8 RET
000016c4 g     F .text	000001c4 drawTile
0001a83c g     F .text	00000038 alt_irq_init
0001a598 g     F .text	00000084 alt_release_fd
00004fc0 g     F .text	00000120 _SUBn
0000a0e0 g     F .text	0000003c x85
000090fc g     F .text	0000003c x42
0000b908 g     F .text	00000034 xFE
00009bdc g     F .text	00000040 x70
0001c598 g     O .rodata	00000100 .hidden __clz_tab
00009c5c g     F .text	00000040 x72
0001fcc8 g     O .bss	00000004 _PathLocale
000051bc g     F .text	000000a8 SBCrra
0000266c g     F .text	0000005c run
0001c17c g     F .text	00000014 atexit
00016090 g     F .text	00000060 _write_r
00002e70 g     F .text	00000038 i0
00012200 g     F .text	00000018 setlocale
00000a78 g     F .text	00000430 drawBackground
00009798 g     F .text	00000040 x5E
0000a15c g     F .text	0000003c x87
00009174 g     F .text	0000003c x44
000007bc g     F .text	000000f0 updateLY
0001e18c g     O .rwdata	00000004 _impure_ptr
0001fce4 g     O .bss	00000004 alt_argc
000060c0 g     F .text	00000140 RLrra
0001106c g     F .text	0000021c __sflush_r
00006a00 g     F .text	000000c0 BITir
0000aa18 g     F .text	0000003c xAE
0001b5b8 g     F .text	00000060 _do_dtors
000055b4 g     F .text	00000090 ANDr
000121ec g     F .text	00000008 __locale_cjk_lang
0000a5b0 g     F .text	00000038 x9A
0000433c g     F .text	00000130 DECrra
0000ad68 g     F .text	00000038 xBD
00000020 g       .exceptions	00000000 alt_irq_entry
00013c7c g     F .text	00000064 __ulp
000099bc g     F .text	0000003c x67
000089d8 g     F .text	00000038 x24
000116ac g     F .text	00000018 __fp_unlock_all
00008a80 g     F .text	00000034 x27
000044d8 g     F .text	00000080 ADDrn
0001e1a0 g     O .rwdata	00000008 alt_fs_list
00002f50 g     F .text	00000038 i4
00007fac g     F .text	0000003c x03
000026c8 g     F .text	00000058 updateInput
00009c1c g     F .text	00000040 x71
00008ed4 g     F .text	0000003c x39
0001e180 g     O .rwdata	00000002 DIV_addr
00001fb8 g     F .text	00000068 drawPixel
00005fa0 g     F .text	00000120 RLr
0000248c g     F .text	00000048 resetDiv
000083b0 g     F .text	00000050 x10
0000b350 g     F .text	00000038 xDA
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a6cc g     F .text	00000038 x9F
000096a8 g     F .text	0000003c x5A
00012218 g     F .text	0000000c localeconv
0000026c g     F .text	0000003c readData
00004b20 g     F .text	0000016c _ADCrn
0001b638 g     F .text	00000050 alt_ic_isr_register
00007a50 g     F .text	00000078 CPL
00009aac g     F .text	0000003c x6B
00008fe0 g     F .text	00000038 x3D
00000ff4 g     F .text	00000150 drawTileLine
00007e74 g     F .text	00000048 EI
0000a578 g     F .text	00000038 x99
0000953c g     F .text	0000003c x54
0001e1c8 g       *ABS*	00000000 _edata
0000a494 g     F .text	00000038 x95
0000944c g     F .text	0000003c x50
0000966c g     F .text	0000003c x59
00008768 g     F .text	00000038 x1D
00020228 g       *ABS*	00000000 _end
0000a210 g     F .text	0000003c x8A
00003de0 g     F .text	000000a4 INCrr
00016324 g     F .text	00000164 __fputwc
000093d0 g     F .text	00000040 x4E
00000230 g       *ABS*	00000000 __ram_exceptions_end
00007b68 g     F .text	0000006c SCF
0001adfc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000b518 g     F .text	00000034 xE6
00002d98 g     F .text	00000030 halt
00006200 g     F .text	00000100 RRr
0001b710 g     F .text	0000008c alt_ic_irq_disable
0001fcc4 g     O .bss	00000004 backup
00007854 g     F .text	00000048 CALLnn
0000b4a0 g     F .text	0000003c xE2
0000b77c g     F .text	0000003c xF5
0000ab6c g     F .text	00000038 xB4
000147dc g     F .text	0000007c __swrite
0000581c g     F .text	000000a4 XORn
0001e198 g     O .rwdata	00000004 __malloc_trim_threshold
000121e0 g     F .text	0000000c __locale_msgcharset
0000cf24 g     F .text	00000038 exit
000084f0 g     F .text	00000038 x15
00012084 g     F .text	000000c4 _fwalk_reent
00013a80 g     F .text	000001fc __mdiff
00002ea8 g     F .text	00000038 i1
0000afa0 g     F .text	00000038 xC7
0000cdcc g     F .text	00000074 .hidden __modsi3
00009fb4 g     F .text	0000003c x80
00008058 g     F .text	00000038 x06
0000a288 g     F .text	0000003c x8C
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00011688 g     F .text	00000004 __sfp_lock_release
00004728 g     F .text	0000006c ADDrrsp
0000b1cc g     F .text	00000038 xD2
00001940 g     F .text	00000678 drawWindow
00000000 g       *ABS*	00000000 __alt_mem_sdram
00003520 g     F .text	00000068 LDrr
000098c8 g     F .text	0000003c x63
000088c4 g     F .text	00000038 x20
00001888 g     F .text	000000b8 readTileData
00004aa0 g     F .text	00000080 ADCrn
000030f0 g     F .text	00000064 requestInterrupt
000050e0 g     F .text	00000078 SBCn
0000b3c0 g     F .text	00000034 xDE
00002444 g     F .text	00000048 update
0001e184 g     O .rwdata	00000002 TMA_addr
00009268 g     F .text	0000003c x48
000081c4 g     F .text	00000040 x0A
00007bd4 g     F .text	00000210 DAA
00004e6c g     F .text	00000064 SUBr
0000b860 g     F .text	0000003c xF9
00019f80 g     F .text	00000034 _exit
0000792c g     F .text	00000124 _CALLnn
0001b32c g     F .text	0000012c alt_alarm_start
00008fa8 g     F .text	00000038 x3C
0000327c g     F .text	00000070 getSignedValue
00009018 g     F .text	00000038 x3E
00009940 g     F .text	0000003c x65
00008938 g     F .text	00000064 x22
000059c8 g     F .text	00000078 CPn
00012224 g     F .text	000001bc __smakebuf_r
0000a3ec g     F .text	00000038 x92
00008638 g     F .text	00000034 x18
0000d09c g     F .text	00000098 strlen
0001bb60 g     F .text	0000015c open
00005ab8 g     F .text	000000e4 _CPn
000023a0 g     F .text	000000a4 updateDiv
000188a0 g     F .text	000000dc .hidden __gedf2
0000ac88 g     F .text	00000038 xB9
00009394 g     F .text	0000003c x4D
0001e19c g     O .rwdata	00000004 __wctomb
00004558 g     F .text	0000012c _ADDrn
00014a94 g     F .text	00000018 __sprint_r
0001b618 g     F .text	00000020 alt_icache_flush_all
0001e1bc g     O .rwdata	00000004 alt_priority_mask
000072b8 g     F .text	00000088 JPrr
0000b8d4 g     F .text	00000034 xFB
0001b688 g     F .text	00000088 alt_ic_irq_enable
0000f410 g     F .text	0000001c __vfprintf_internal
0000a73c g     F .text	00000038 xA1
00016980 g     F .text	0000005c _wctomb_r
0000b3f4 g     F .text	00000038 xDF
000192dc g     F .text	000008fc .hidden __subdf3
00008020 g     F .text	00000038 x05
00003cb8 g     F .text	00000098 LDHnar
0000a068 g     F .text	0000003c x83
00009084 g     F .text	0000003c x40
0000817c g     F .text	00000048 x09
00013420 g     F .text	000000b0 __lo0bits
0001e1c0 g     O .rwdata	00000008 alt_alarm_list
0001b558 g     F .text	00000060 _do_ctors
00009efc g     F .text	0000003c x7D
00006300 g     F .text	00000150 RRrra
000099f8 g     F .text	0000003c x68
00008a10 g     F .text	00000038 x25
0000a81c g     F .text	00000038 xA5
00016890 g     F .text	000000c0 wcrtomb
00005b9c g     F .text	000000f8 RRCr
00019e7c g     F .text	000000d8 close
00006668 g     F .text	000000d8 SLAr
000087d8 g     F .text	000000ec x1F
000027f0 g     F .text	0000004c fetchOpcode
00006b98 g     F .text	00000084 SETir
0001a1f8 g     F .text	00000084 alt_load
00002b7c g     F .text	000000fc wr8
000164ac g     F .text	00000080 fputwc
0001168c g     F .text	00000004 __sinit_lock_acquire
0001316c g     F .text	00000148 __multadd
00003200 g     F .text	0000007c readAddr
00013144 g     F .text	00000028 _Bfree
0000b31c g     F .text	00000034 xD9
000008ac g     F .text	00000094 setMode



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10804a04 	addi	r2,r2,296
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10804a04 	addi	r2,r2,296
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6e117 	ldw	r2,-25724(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6e117 	ldw	r2,-25724(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d6985e14 	ori	gp,gp,24952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10bf3114 	ori	r2,r2,64708

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18c08a14 	ori	r3,r3,552

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001a1f80 	call	1a1f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001a3940 	call	1a394 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <readData>:
void requestInterrupt(interupt_name index);
// Memory Start
byte* base = (0x1900000 * 2);
//byte* ppu_base = 0x04000000;

byte readData(word address) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	df000215 	stw	fp,8(sp)
     274:	df000204 	addi	fp,sp,8
     278:	2005883a 	mov	r2,r4
     27c:	e0bfff0d 	sth	r2,-4(fp)
	byte* val = base + address;
     280:	d0e00017 	ldw	r3,-32768(gp)
     284:	e0bfff0b 	ldhu	r2,-4(fp)
     288:	1885883a 	add	r2,r3,r2
     28c:	e0bffe15 	stw	r2,-8(fp)
	return *val;
     290:	e0bffe17 	ldw	r2,-8(fp)
     294:	10800003 	ldbu	r2,0(r2)
}
     298:	e037883a 	mov	sp,fp
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00104 	addi	sp,sp,4
     2a4:	f800283a 	ret

000002a8 <dmaTransfer>:

void resetDiv(Timer* timer);

void writeData(word address, byte data);
void dmaTransfer(GPU* gpu, byte startPrefix){
     2a8:	defff904 	addi	sp,sp,-28
     2ac:	dfc00615 	stw	ra,24(sp)
     2b0:	df000515 	stw	fp,20(sp)
     2b4:	dc000415 	stw	r16,16(sp)
     2b8:	df000504 	addi	fp,sp,20
     2bc:	e13ffd15 	stw	r4,-12(fp)
     2c0:	2805883a 	mov	r2,r5
     2c4:	e0bffe05 	stb	r2,-8(fp)
	printf("DMA Trans\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	2130c904 	addi	r4,r4,-15580
     2d0:	000d0880 	call	d088 <puts>
	word startAddress = startPrefix;
     2d4:	e0bffe03 	ldbu	r2,-8(fp)
     2d8:	e0bffc0d 	sth	r2,-16(fp)
	startAddress = startAddress << 8;
     2dc:	e0bffc0b 	ldhu	r2,-16(fp)
     2e0:	1004923a 	slli	r2,r2,8
     2e4:	e0bffc0d 	sth	r2,-16(fp)
	for(int i = 0; i < 0xA0; i++) {
     2e8:	e03ffb15 	stw	zero,-20(fp)
     2ec:	00001306 	br	33c <dmaTransfer+0x94>
		writeData(gpu->OAM_START + i, readData(startAddress + i));
     2f0:	e0bffd17 	ldw	r2,-12(fp)
     2f4:	1080058b 	ldhu	r2,22(r2)
     2f8:	e0fffb17 	ldw	r3,-20(fp)
     2fc:	10c5883a 	add	r2,r2,r3
     300:	143fffcc 	andi	r16,r2,65535
     304:	e0bffb17 	ldw	r2,-20(fp)
     308:	1007883a 	mov	r3,r2
     30c:	e0bffc0b 	ldhu	r2,-16(fp)
     310:	1885883a 	add	r2,r3,r2
     314:	10bfffcc 	andi	r2,r2,65535
     318:	1009883a 	mov	r4,r2
     31c:	000026c0 	call	26c <readData>
     320:	10803fcc 	andi	r2,r2,255
     324:	100b883a 	mov	r5,r2
     328:	8009883a 	mov	r4,r16
     32c:	00003640 	call	364 <writeData>
void writeData(word address, byte data);
void dmaTransfer(GPU* gpu, byte startPrefix){
	printf("DMA Trans\n");
	word startAddress = startPrefix;
	startAddress = startAddress << 8;
	for(int i = 0; i < 0xA0; i++) {
     330:	e0bffb17 	ldw	r2,-20(fp)
     334:	10800044 	addi	r2,r2,1
     338:	e0bffb15 	stw	r2,-20(fp)
     33c:	e0bffb17 	ldw	r2,-20(fp)
     340:	10802810 	cmplti	r2,r2,160
     344:	103fea1e 	bne	r2,zero,2f0 <__alt_data_end+0xfc0002f0>
		writeData(gpu->OAM_START + i, readData(startAddress + i));
	}
}
     348:	0001883a 	nop
     34c:	e6ffff04 	addi	sp,fp,-4
     350:	dfc00217 	ldw	ra,8(sp)
     354:	df000117 	ldw	fp,4(sp)
     358:	dc000017 	ldw	r16,0(sp)
     35c:	dec00304 	addi	sp,sp,12
     360:	f800283a 	ret

00000364 <writeData>:

void writeData(word address, byte data) {
     364:	defffc04 	addi	sp,sp,-16
     368:	df000315 	stw	fp,12(sp)
     36c:	df000304 	addi	fp,sp,12
     370:	2007883a 	mov	r3,r4
     374:	2805883a 	mov	r2,r5
     378:	e0fffe0d 	sth	r3,-8(fp)
     37c:	e0bfff05 	stb	r2,-4(fp)
//
//	}else if(address == 0xFF00) {
//		byte* val = base + address;
//		*val = (readData(address) & 0x0F) | (data & 0x30);
//	}else {
		byte* val = base + address;
     380:	d0e00017 	ldw	r3,-32768(gp)
     384:	e0bffe0b 	ldhu	r2,-8(fp)
     388:	1885883a 	add	r2,r3,r2
     38c:	e0bffd15 	stw	r2,-12(fp)
		*val = data;
     390:	e0bffd17 	ldw	r2,-12(fp)
     394:	e0ffff03 	ldbu	r3,-4(fp)
     398:	10c00005 	stb	r3,0(r2)
//				dmaTransfer(backup->gpu, data);
//			}
//		}
//	}

}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <resetMemory>:

void resetMemory() {
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	dfc00215 	stw	ra,8(sp)
     3b8:	df000115 	stw	fp,4(sp)
     3bc:	df000104 	addi	fp,sp,4
	word addr = 0x8000;
     3c0:	00a00004 	movi	r2,-32768
     3c4:	e0bfff0d 	sth	r2,-4(fp)
	while(addr != 0xA000) {
     3c8:	00000706 	br	3e8 <resetMemory+0x38>
		writeData(addr, 0);
     3cc:	e0bfff0b 	ldhu	r2,-4(fp)
     3d0:	000b883a 	mov	r5,zero
     3d4:	1009883a 	mov	r4,r2
     3d8:	00003640 	call	364 <writeData>
		addr += 1;
     3dc:	e0bfff0b 	ldhu	r2,-4(fp)
     3e0:	10800044 	addi	r2,r2,1
     3e4:	e0bfff0d 	sth	r2,-4(fp)

}

void resetMemory() {
	word addr = 0x8000;
	while(addr != 0xA000) {
     3e8:	e0ffff0b 	ldhu	r3,-4(fp)
     3ec:	00a80014 	movui	r2,40960
     3f0:	18bff61e 	bne	r3,r2,3cc <__alt_data_end+0xfc0003cc>
		writeData(addr, 0);
		addr += 1;
	}
	addr = 0xFF00;
     3f4:	00bfc004 	movi	r2,-256
     3f8:	e0bfff0d 	sth	r2,-4(fp)
	while(addr != 0xFF80) {
     3fc:	00000706 	br	41c <resetMemory+0x6c>
		writeData(addr, 0);
     400:	e0bfff0b 	ldhu	r2,-4(fp)
     404:	000b883a 	mov	r5,zero
     408:	1009883a 	mov	r4,r2
     40c:	00003640 	call	364 <writeData>
		addr += 1;
     410:	e0bfff0b 	ldhu	r2,-4(fp)
     414:	10800044 	addi	r2,r2,1
     418:	e0bfff0d 	sth	r2,-4(fp)
	while(addr != 0xA000) {
		writeData(addr, 0);
		addr += 1;
	}
	addr = 0xFF00;
	while(addr != 0xFF80) {
     41c:	e0ffff0b 	ldhu	r3,-4(fp)
     420:	00bfe014 	movui	r2,65408
     424:	18bff61e 	bne	r3,r2,400 <__alt_data_end+0xfc000400>
		writeData(addr, 0);
		addr += 1;
	}
	writeData(0xFFFF, 0);
     428:	000b883a 	mov	r5,zero
     42c:	013fffd4 	movui	r4,65535
     430:	00003640 	call	364 <writeData>
}
     434:	0001883a 	nop
     438:	e037883a 	mov	sp,fp
     43c:	dfc00117 	ldw	ra,4(sp)
     440:	df000017 	ldw	fp,0(sp)
     444:	dec00204 	addi	sp,sp,8
     448:	f800283a 	ret

0000044c <initGPU>:

//Start PPU
int* screenBase = 0x04000000;


void initGPU(GPU* gpu) {
     44c:	defffd04 	addi	sp,sp,-12
     450:	df000215 	stw	fp,8(sp)
     454:	df000204 	addi	fp,sp,8
     458:	e13fff15 	stw	r4,-4(fp)
    gpu->LCDC= 0xFF40;
     45c:	e0bfff17 	ldw	r2,-4(fp)
     460:	00ffd004 	movi	r3,-192
     464:	10c0000d 	sth	r3,0(r2)
    gpu->STAT= 0xFF41;
     468:	e0bfff17 	ldw	r2,-4(fp)
     46c:	00ffd044 	movi	r3,-191
     470:	10c0008d 	sth	r3,2(r2)
    gpu->SCY = 0xFF42;
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	00ffd084 	movi	r3,-190
     47c:	10c0010d 	sth	r3,4(r2)
    gpu->SCX = 0xFF43;
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	00ffd0c4 	movi	r3,-189
     488:	10c0018d 	sth	r3,6(r2)
    gpu->LY  = 0xFF44;
     48c:	e0bfff17 	ldw	r2,-4(fp)
     490:	00ffd104 	movi	r3,-188
     494:	10c0020d 	sth	r3,8(r2)
    gpu->LYC = 0xFF45;
     498:	e0bfff17 	ldw	r2,-4(fp)
     49c:	00ffd144 	movi	r3,-187
     4a0:	10c0028d 	sth	r3,10(r2)
    gpu->BGP = 0xFF47;
     4a4:	e0bfff17 	ldw	r2,-4(fp)
     4a8:	00ffd1c4 	movi	r3,-185
     4ac:	10c0030d 	sth	r3,12(r2)
    gpu->OBP0= 0xFF48;
     4b0:	e0bfff17 	ldw	r2,-4(fp)
     4b4:	00ffd204 	movi	r3,-184
     4b8:	10c0038d 	sth	r3,14(r2)
    gpu->OBP1= 0xFF49;
     4bc:	e0bfff17 	ldw	r2,-4(fp)
     4c0:	00ffd244 	movi	r3,-183
     4c4:	10c0040d 	sth	r3,16(r2)
    gpu->WY  = 0xFF4A;
     4c8:	e0bfff17 	ldw	r2,-4(fp)
     4cc:	00ffd284 	movi	r3,-182
     4d0:	10c0048d 	sth	r3,18(r2)
    gpu->WX  = 0xFF4B;
     4d4:	e0bfff17 	ldw	r2,-4(fp)
     4d8:	00ffd2c4 	movi	r3,-181
     4dc:	10c0050d 	sth	r3,20(r2)

    gpu->OAM_START = 0xFE00;
     4e0:	e0bfff17 	ldw	r2,-4(fp)
     4e4:	00ff8004 	movi	r3,-512
     4e8:	10c0058d 	sth	r3,22(r2)
    gpu->OAM_END   = 0xFE9F;
     4ec:	e0bfff17 	ldw	r2,-4(fp)
     4f0:	00ffa7c4 	movi	r3,-353
     4f4:	10c0060d 	sth	r3,24(r2)

    gpu->HEIGHT = 32;
     4f8:	e0bfff17 	ldw	r2,-4(fp)
     4fc:	00c00804 	movi	r3,32
     500:	10c00715 	stw	r3,28(r2)
    gpu->WIDTH = 32;
     504:	e0bfff17 	ldw	r2,-4(fp)
     508:	00c00804 	movi	r3,32
     50c:	10c00815 	stw	r3,32(r2)
    gpu->START_0 = 0x9800;
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	00e60004 	movi	r3,-26624
     518:	10c0090d 	sth	r3,36(r2)
    gpu->START_1 = 0x9C00;
     51c:	e0bfff17 	ldw	r2,-4(fp)
     520:	00e70004 	movi	r3,-25600
     524:	10c0098d 	sth	r3,38(r2)
    gpu->LENGTH = 0x0400;
     528:	e0bfff17 	ldw	r2,-4(fp)
     52c:	00c10004 	movi	r3,1024
     530:	10c00a0d 	sth	r3,40(r2)

    gpu->VBLANK_TIME = 70224;
     534:	e0ffff17 	ldw	r3,-4(fp)
     538:	00800074 	movhi	r2,1
     53c:	10849404 	addi	r2,r2,4688
     540:	18800b15 	stw	r2,44(r3)
    gpu->clock = 0;
     544:	e0bfff17 	ldw	r2,-4(fp)
     548:	10000c15 	stw	zero,48(r2)
    gpu->mode = 2;
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	00c00084 	movi	r3,2
     554:	10c00d15 	stw	r3,52(r2)
    gpu->line = 0;
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	10000e15 	stw	zero,56(r2)

    //gpu.buffer = new Array(Screen.physics.WIDTH * Screen.physics.HEIGHT);
    //gpu.tileBuffer = new Array(8);
    //gpu.bgTileCache = {};
    for(int i = 0; i < 64; i++){
     560:	e03ffe15 	stw	zero,-8(fp)
     564:	00000b06 	br	594 <initGPU+0x148>
    	gpu->usedCache[i] = -1;
     568:	e0ffff17 	ldw	r3,-4(fp)
     56c:	e0bffe17 	ldw	r2,-8(fp)
     570:	1085e444 	addi	r2,r2,6033
     574:	1085883a 	add	r2,r2,r2
     578:	1085883a 	add	r2,r2,r2
     57c:	1885883a 	add	r2,r3,r2
     580:	00ffffc4 	movi	r3,-1
     584:	10c00015 	stw	r3,0(r2)
    gpu->line = 0;

    //gpu.buffer = new Array(Screen.physics.WIDTH * Screen.physics.HEIGHT);
    //gpu.tileBuffer = new Array(8);
    //gpu.bgTileCache = {};
    for(int i = 0; i < 64; i++){
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10800044 	addi	r2,r2,1
     590:	e0bffe15 	stw	r2,-8(fp)
     594:	e0bffe17 	ldw	r2,-8(fp)
     598:	10801010 	cmplti	r2,r2,64
     59c:	103ff21e 	bne	r2,zero,568 <__alt_data_end+0xfc000568>
    	gpu->usedCache[i] = -1;
    }
}
     5a0:	0001883a 	nop
     5a4:	e037883a 	mov	sp,fp
     5a8:	df000017 	ldw	fp,0(sp)
     5ac:	dec00104 	addi	sp,sp,4
     5b0:	f800283a 	ret

000005b4 <gpuUpdate>:
void updateLY(GPU* gpu);
void setMode(GPU* gpu, int mode);
void drawFrame(GPU* gpu);
void drawScanLine(GPU* gpu, int line);
bool gpuUpdate(GPU* gpu, int clockElapsed) {
     5b4:	defffb04 	addi	sp,sp,-20
     5b8:	dfc00415 	stw	ra,16(sp)
     5bc:	df000315 	stw	fp,12(sp)
     5c0:	df000304 	addi	fp,sp,12
     5c4:	e13ffe15 	stw	r4,-8(fp)
     5c8:	e17fff15 	stw	r5,-4(fp)
    gpu->clock += clockElapsed;
     5cc:	e0bffe17 	ldw	r2,-8(fp)
     5d0:	10c00c17 	ldw	r3,48(r2)
     5d4:	e0bfff17 	ldw	r2,-4(fp)
     5d8:	1887883a 	add	r3,r3,r2
     5dc:	e0bffe17 	ldw	r2,-8(fp)
     5e0:	10c00c15 	stw	r3,48(r2)
    bool vblank = false;
     5e4:	e03ffd15 	stw	zero,-12(fp)

    switch (gpu->mode) {
     5e8:	e0bffe17 	ldw	r2,-8(fp)
     5ec:	10800d17 	ldw	r2,52(r2)
     5f0:	10c00060 	cmpeqi	r3,r2,1
     5f4:	18002b1e 	bne	r3,zero,6a4 <gpuUpdate+0xf0>
     5f8:	10c00088 	cmpgei	r3,r2,2
     5fc:	1800021e 	bne	r3,zero,608 <gpuUpdate+0x54>
     600:	10000626 	beq	r2,zero,61c <gpuUpdate+0x68>
     604:	00006706 	br	7a4 <gpuUpdate+0x1f0>
     608:	10c000a0 	cmpeqi	r3,r2,2
     60c:	18003f1e 	bne	r3,zero,70c <gpuUpdate+0x158>
     610:	108000e0 	cmpeqi	r2,r2,3
     614:	10004a1e 	bne	r2,zero,740 <gpuUpdate+0x18c>
     618:	00006206 	br	7a4 <gpuUpdate+0x1f0>
        case 0: // HBLANK
            if (gpu->clock >= 204) {
     61c:	e0bffe17 	ldw	r2,-8(fp)
     620:	10800c17 	ldw	r2,48(r2)
     624:	10803310 	cmplti	r2,r2,204
     628:	1000571e 	bne	r2,zero,788 <gpuUpdate+0x1d4>
                gpu->clock -= 204;
     62c:	e0bffe17 	ldw	r2,-8(fp)
     630:	10800c17 	ldw	r2,48(r2)
     634:	10ffcd04 	addi	r3,r2,-204
     638:	e0bffe17 	ldw	r2,-8(fp)
     63c:	10c00c15 	stw	r3,48(r2)
                gpu->line++;
     640:	e0bffe17 	ldw	r2,-8(fp)
     644:	10800e17 	ldw	r2,56(r2)
     648:	10c00044 	addi	r3,r2,1
     64c:	e0bffe17 	ldw	r2,-8(fp)
     650:	10c00e15 	stw	r3,56(r2)
                updateLY(gpu);
     654:	e13ffe17 	ldw	r4,-8(fp)
     658:	00007bc0 	call	7bc <updateLY>
                if (gpu->line == 144) {
     65c:	e0bffe17 	ldw	r2,-8(fp)
     660:	10800e17 	ldw	r2,56(r2)
     664:	10802418 	cmpnei	r2,r2,144
     668:	10000a1e 	bne	r2,zero,694 <gpuUpdate+0xe0>
                    setMode(gpu, 1);
     66c:	01400044 	movi	r5,1
     670:	e13ffe17 	ldw	r4,-8(fp)
     674:	00008ac0 	call	8ac <setMode>
                    vblank = true;
     678:	00800044 	movi	r2,1
     67c:	e0bffd15 	stw	r2,-12(fp)
                    requestInterrupt(VBLANK);
     680:	0009883a 	mov	r4,zero
     684:	00030f00 	call	30f0 <requestInterrupt>
                    drawFrame(gpu);
     688:	e13ffe17 	ldw	r4,-8(fp)
     68c:	00009bc0 	call	9bc <drawFrame>
                } else {
                    setMode(gpu, 2);
                }
            }
            break;
     690:	00003d06 	br	788 <gpuUpdate+0x1d4>
                    setMode(gpu, 1);
                    vblank = true;
                    requestInterrupt(VBLANK);
                    drawFrame(gpu);
                } else {
                    setMode(gpu, 2);
     694:	01400084 	movi	r5,2
     698:	e13ffe17 	ldw	r4,-8(fp)
     69c:	00008ac0 	call	8ac <setMode>
                }
            }
            break;
     6a0:	00003906 	br	788 <gpuUpdate+0x1d4>
        case 1: // VBLANK
            if (gpu->clock >= 456) {
     6a4:	e0bffe17 	ldw	r2,-8(fp)
     6a8:	10800c17 	ldw	r2,48(r2)
     6ac:	10807210 	cmplti	r2,r2,456
     6b0:	1000371e 	bne	r2,zero,790 <gpuUpdate+0x1dc>
                gpu->clock -= 456;
     6b4:	e0bffe17 	ldw	r2,-8(fp)
     6b8:	10800c17 	ldw	r2,48(r2)
     6bc:	10ff8e04 	addi	r3,r2,-456
     6c0:	e0bffe17 	ldw	r2,-8(fp)
     6c4:	10c00c15 	stw	r3,48(r2)
                gpu->line++;
     6c8:	e0bffe17 	ldw	r2,-8(fp)
     6cc:	10800e17 	ldw	r2,56(r2)
     6d0:	10c00044 	addi	r3,r2,1
     6d4:	e0bffe17 	ldw	r2,-8(fp)
     6d8:	10c00e15 	stw	r3,56(r2)
                if (gpu->line > 153) {
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	10800e17 	ldw	r2,56(r2)
     6e4:	10802690 	cmplti	r2,r2,154
     6e8:	1000051e 	bne	r2,zero,700 <gpuUpdate+0x14c>
                    gpu->line = 0;
     6ec:	e0bffe17 	ldw	r2,-8(fp)
     6f0:	10000e15 	stw	zero,56(r2)
                    setMode(gpu, 2);
     6f4:	01400084 	movi	r5,2
     6f8:	e13ffe17 	ldw	r4,-8(fp)
     6fc:	00008ac0 	call	8ac <setMode>
                }
                updateLY(gpu);
     700:	e13ffe17 	ldw	r4,-8(fp)
     704:	00007bc0 	call	7bc <updateLY>
            }

            break;
     708:	00002106 	br	790 <gpuUpdate+0x1dc>
        case 2: // SCANLINE OAM
            if (gpu->clock >= 80) {
     70c:	e0bffe17 	ldw	r2,-8(fp)
     710:	10800c17 	ldw	r2,48(r2)
     714:	10801410 	cmplti	r2,r2,80
     718:	10001f1e 	bne	r2,zero,798 <gpuUpdate+0x1e4>
                gpu->clock -= 80;
     71c:	e0bffe17 	ldw	r2,-8(fp)
     720:	10800c17 	ldw	r2,48(r2)
     724:	10ffec04 	addi	r3,r2,-80
     728:	e0bffe17 	ldw	r2,-8(fp)
     72c:	10c00c15 	stw	r3,48(r2)
                setMode(gpu, 3);
     730:	014000c4 	movi	r5,3
     734:	e13ffe17 	ldw	r4,-8(fp)
     738:	00008ac0 	call	8ac <setMode>
            }
            break;
     73c:	00001606 	br	798 <gpuUpdate+0x1e4>
        case 3: // SCANLINE VRAM
            if (gpu->clock >= 172) {
     740:	e0bffe17 	ldw	r2,-8(fp)
     744:	10800c17 	ldw	r2,48(r2)
     748:	10802b10 	cmplti	r2,r2,172
     74c:	1000141e 	bne	r2,zero,7a0 <gpuUpdate+0x1ec>
                gpu->clock -= 172;
     750:	e0bffe17 	ldw	r2,-8(fp)
     754:	10800c17 	ldw	r2,48(r2)
     758:	10ffd504 	addi	r3,r2,-172
     75c:	e0bffe17 	ldw	r2,-8(fp)
     760:	10c00c15 	stw	r3,48(r2)
                drawScanLine(gpu, gpu->line);
     764:	e0bffe17 	ldw	r2,-8(fp)
     768:	10800e17 	ldw	r2,56(r2)
     76c:	100b883a 	mov	r5,r2
     770:	e13ffe17 	ldw	r4,-8(fp)
     774:	00009400 	call	940 <drawScanLine>
                setMode(gpu, 0);
     778:	000b883a 	mov	r5,zero
     77c:	e13ffe17 	ldw	r4,-8(fp)
     780:	00008ac0 	call	8ac <setMode>
            }
            break;
     784:	00000606 	br	7a0 <gpuUpdate+0x1ec>
                    drawFrame(gpu);
                } else {
                    setMode(gpu, 2);
                }
            }
            break;
     788:	0001883a 	nop
     78c:	00000506 	br	7a4 <gpuUpdate+0x1f0>
                    setMode(gpu, 2);
                }
                updateLY(gpu);
            }

            break;
     790:	0001883a 	nop
     794:	00000306 	br	7a4 <gpuUpdate+0x1f0>
        case 2: // SCANLINE OAM
            if (gpu->clock >= 80) {
                gpu->clock -= 80;
                setMode(gpu, 3);
            }
            break;
     798:	0001883a 	nop
     79c:	00000106 	br	7a4 <gpuUpdate+0x1f0>
            if (gpu->clock >= 172) {
                gpu->clock -= 172;
                drawScanLine(gpu, gpu->line);
                setMode(gpu, 0);
            }
            break;
     7a0:	0001883a 	nop
    }

    return vblank;
     7a4:	e0bffd17 	ldw	r2,-12(fp)
}
     7a8:	e037883a 	mov	sp,fp
     7ac:	dfc00117 	ldw	ra,4(sp)
     7b0:	df000017 	ldw	fp,0(sp)
     7b4:	dec00204 	addi	sp,sp,8
     7b8:	f800283a 	ret

000007bc <updateLY>:

void updateLY(GPU* gpu) {
     7bc:	defffb04 	addi	sp,sp,-20
     7c0:	dfc00415 	stw	ra,16(sp)
     7c4:	df000315 	stw	fp,12(sp)
     7c8:	dc000215 	stw	r16,8(sp)
     7cc:	df000304 	addi	fp,sp,12
     7d0:	e13ffe15 	stw	r4,-8(fp)
    writeData(gpu->LY, gpu->line);
     7d4:	e0bffe17 	ldw	r2,-8(fp)
     7d8:	1080020b 	ldhu	r2,8(r2)
     7dc:	10ffffcc 	andi	r3,r2,65535
     7e0:	e0bffe17 	ldw	r2,-8(fp)
     7e4:	10800e17 	ldw	r2,56(r2)
     7e8:	10803fcc 	andi	r2,r2,255
     7ec:	100b883a 	mov	r5,r2
     7f0:	1809883a 	mov	r4,r3
     7f4:	00003640 	call	364 <writeData>
    byte STAT = readData(gpu->STAT);
     7f8:	e0bffe17 	ldw	r2,-8(fp)
     7fc:	1080008b 	ldhu	r2,2(r2)
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1009883a 	mov	r4,r2
     808:	000026c0 	call	26c <readData>
     80c:	e0bffd05 	stb	r2,-12(fp)
    if (readData(gpu->LY) == readData(gpu->LYC)) {
     810:	e0bffe17 	ldw	r2,-8(fp)
     814:	1080020b 	ldhu	r2,8(r2)
     818:	10bfffcc 	andi	r2,r2,65535
     81c:	1009883a 	mov	r4,r2
     820:	000026c0 	call	26c <readData>
     824:	1021883a 	mov	r16,r2
     828:	e0bffe17 	ldw	r2,-8(fp)
     82c:	1080028b 	ldhu	r2,10(r2)
     830:	10bfffcc 	andi	r2,r2,65535
     834:	1009883a 	mov	r4,r2
     838:	000026c0 	call	26c <readData>
     83c:	80c03fcc 	andi	r3,r16,255
     840:	10803fcc 	andi	r2,r2,255
     844:	18800a1e 	bne	r3,r2,870 <updateLY+0xb4>
        writeData(gpu->STAT, STAT | (1 << 2));
     848:	e0bffe17 	ldw	r2,-8(fp)
     84c:	1080008b 	ldhu	r2,2(r2)
     850:	10ffffcc 	andi	r3,r2,65535
     854:	e0bffd03 	ldbu	r2,-12(fp)
     858:	10800114 	ori	r2,r2,4
     85c:	10803fcc 	andi	r2,r2,255
     860:	100b883a 	mov	r5,r2
     864:	1809883a 	mov	r4,r3
     868:	00003640 	call	364 <writeData>
//            requestInterrupt(LCDC);
        }
    } else {
        writeData(gpu->STAT, STAT & (0xFF - (1 << 2)));
    }
}
     86c:	00000806 	br	890 <updateLY+0xd4>
        writeData(gpu->STAT, STAT | (1 << 2));
        if (STAT & (1 << 6)) {
//            requestInterrupt(LCDC);
        }
    } else {
        writeData(gpu->STAT, STAT & (0xFF - (1 << 2)));
     870:	e0bffe17 	ldw	r2,-8(fp)
     874:	1080008b 	ldhu	r2,2(r2)
     878:	10ffffcc 	andi	r3,r2,65535
     87c:	e0bffd03 	ldbu	r2,-12(fp)
     880:	10803ecc 	andi	r2,r2,251
     884:	100b883a 	mov	r5,r2
     888:	1809883a 	mov	r4,r3
     88c:	00003640 	call	364 <writeData>
    }
}
     890:	0001883a 	nop
     894:	e6ffff04 	addi	sp,fp,-4
     898:	dfc00217 	ldw	ra,8(sp)
     89c:	df000117 	ldw	fp,4(sp)
     8a0:	dc000017 	ldw	r16,0(sp)
     8a4:	dec00304 	addi	sp,sp,12
     8a8:	f800283a 	ret

000008ac <setMode>:

void setMode(GPU* gpu, int mode) {
     8ac:	defff904 	addi	sp,sp,-28
     8b0:	dfc00615 	stw	ra,24(sp)
     8b4:	df000515 	stw	fp,20(sp)
     8b8:	df000504 	addi	fp,sp,20
     8bc:	e13ffc15 	stw	r4,-16(fp)
     8c0:	e17ffd15 	stw	r5,-12(fp)
    gpu->mode = mode;
     8c4:	e0bffc17 	ldw	r2,-16(fp)
     8c8:	e0fffd17 	ldw	r3,-12(fp)
     8cc:	10c00d15 	stw	r3,52(r2)
    byte newSTAT = readData(gpu->STAT);
     8d0:	e0bffc17 	ldw	r2,-16(fp)
     8d4:	1080008b 	ldhu	r2,2(r2)
     8d8:	10bfffcc 	andi	r2,r2,65535
     8dc:	1009883a 	mov	r4,r2
     8e0:	000026c0 	call	26c <readData>
     8e4:	e0bffb05 	stb	r2,-20(fp)
    newSTAT &= 0xFC;
     8e8:	e0fffb03 	ldbu	r3,-20(fp)
     8ec:	00bfff04 	movi	r2,-4
     8f0:	1884703a 	and	r2,r3,r2
     8f4:	e0bffb05 	stb	r2,-20(fp)
    newSTAT |= mode;
     8f8:	e0bffd17 	ldw	r2,-12(fp)
     8fc:	1007883a 	mov	r3,r2
     900:	e0bffb03 	ldbu	r2,-20(fp)
     904:	1884b03a 	or	r2,r3,r2
     908:	e0bffb05 	stb	r2,-20(fp)
    writeData(gpu->STAT, newSTAT);
     90c:	e0bffc17 	ldw	r2,-16(fp)
     910:	1080008b 	ldhu	r2,2(r2)
     914:	10bfffcc 	andi	r2,r2,65535
     918:	e0fffb03 	ldbu	r3,-20(fp)
     91c:	180b883a 	mov	r5,r3
     920:	1009883a 	mov	r4,r2
     924:	00003640 	call	364 <writeData>
    if (mode < 3) {
        if (newSTAT & (1 << (3+mode))) {
//            requestInterrupt(LCDC);
        }
    }
}
     928:	0001883a 	nop
     92c:	e037883a 	mov	sp,fp
     930:	dfc00117 	ldw	ra,4(sp)
     934:	df000017 	ldw	fp,0(sp)
     938:	dec00204 	addi	sp,sp,8
     93c:	f800283a 	ret

00000940 <drawScanLine>:
void drawBackground(GPU* gpu, byte LCDC, int line, byte* lineBuffer);
void drawSprites(GPU* gpu, byte LCDC, int line, byte* lineBuffer);
void drawScanLine(GPU* gpu, int line) {
     940:	deffd304 	addi	sp,sp,-180
     944:	dfc02c15 	stw	ra,176(sp)
     948:	df002b15 	stw	fp,172(sp)
     94c:	df002b04 	addi	fp,sp,172
     950:	e13ffe15 	stw	r4,-8(fp)
     954:	e17fff15 	stw	r5,-4(fp)
    byte LCDC = readData(gpu->LCDC);
     958:	e0bffe17 	ldw	r2,-8(fp)
     95c:	1080000b 	ldhu	r2,0(r2)
     960:	10bfffcc 	andi	r2,r2,65535
     964:	1009883a 	mov	r4,r2
     968:	000026c0 	call	26c <readData>
     96c:	e0bfd505 	stb	r2,-172(fp)
    byte enable = (LCDC >> 7) & 0x1;
     970:	e0bfd503 	ldbu	r2,-172(fp)
     974:	1004d1fa 	srli	r2,r2,7
     978:	e0bfd545 	stb	r2,-171(fp)
    if (enable == 1) {
     97c:	e0bfd543 	ldbu	r2,-171(fp)
     980:	10800058 	cmpnei	r2,r2,1
     984:	1000071e 	bne	r2,zero,9a4 <drawScanLine+0x64>
        byte lineBuffer[160];
//        drawBackground(gpu, LCDC, line, lineBuffer);
        drawSprites(gpu, LCDC, line, lineBuffer);
     988:	e0bfd503 	ldbu	r2,-172(fp)
     98c:	e0ffd584 	addi	r3,fp,-170
     990:	180f883a 	mov	r7,r3
     994:	e1bfff17 	ldw	r6,-4(fp)
     998:	100b883a 	mov	r5,r2
     99c:	e13ffe17 	ldw	r4,-8(fp)
     9a0:	00011440 	call	1144 <drawSprites>
    }
}
     9a4:	0001883a 	nop
     9a8:	e037883a 	mov	sp,fp
     9ac:	dfc00117 	ldw	ra,4(sp)
     9b0:	df000017 	ldw	fp,0(sp)
     9b4:	dec00204 	addi	sp,sp,8
     9b8:	f800283a 	ret

000009bc <drawFrame>:

void drawWindow(GPU* gpu, byte LCDC);
void render(byte* buffer);
void drawFrame(GPU* gpu) {
     9bc:	defffb04 	addi	sp,sp,-20
     9c0:	dfc00415 	stw	ra,16(sp)
     9c4:	df000315 	stw	fp,12(sp)
     9c8:	df000304 	addi	fp,sp,12
     9cc:	e13fff15 	stw	r4,-4(fp)
    byte LCDC = readData(gpu->LCDC);
     9d0:	e0bfff17 	ldw	r2,-4(fp)
     9d4:	1080000b 	ldhu	r2,0(r2)
     9d8:	10bfffcc 	andi	r2,r2,65535
     9dc:	1009883a 	mov	r4,r2
     9e0:	000026c0 	call	26c <readData>
     9e4:	e0bffe05 	stb	r2,-8(fp)
    byte enable = (LCDC >> 7) & 0x1;
     9e8:	e0bffe03 	ldbu	r2,-8(fp)
     9ec:	1004d1fa 	srli	r2,r2,7
     9f0:	e0bffe45 	stb	r2,-7(fp)
    if (enable == 1) {
     9f4:	e0bffe43 	ldbu	r2,-7(fp)
     9f8:	10800058 	cmpnei	r2,r2,1
     9fc:	1000041e 	bne	r2,zero,a10 <drawFrame+0x54>
        drawWindow(gpu, LCDC);
     a00:	e0bffe03 	ldbu	r2,-8(fp)
     a04:	100b883a 	mov	r5,r2
     a08:	e13fff17 	ldw	r4,-4(fp)
     a0c:	00019400 	call	1940 <drawWindow>
    }
    for(int i = 0; i < 64; i++){
     a10:	e03ffd15 	stw	zero,-12(fp)
     a14:	00000b06 	br	a44 <drawFrame+0x88>
		gpu->usedCache[i] = -1;
     a18:	e0ffff17 	ldw	r3,-4(fp)
     a1c:	e0bffd17 	ldw	r2,-12(fp)
     a20:	1085e444 	addi	r2,r2,6033
     a24:	1085883a 	add	r2,r2,r2
     a28:	1085883a 	add	r2,r2,r2
     a2c:	1885883a 	add	r2,r3,r2
     a30:	00ffffc4 	movi	r3,-1
     a34:	10c00015 	stw	r3,0(r2)
    byte LCDC = readData(gpu->LCDC);
    byte enable = (LCDC >> 7) & 0x1;
    if (enable == 1) {
        drawWindow(gpu, LCDC);
    }
    for(int i = 0; i < 64; i++){
     a38:	e0bffd17 	ldw	r2,-12(fp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	e0bffd15 	stw	r2,-12(fp)
     a44:	e0bffd17 	ldw	r2,-12(fp)
     a48:	10801010 	cmplti	r2,r2,64
     a4c:	103ff21e 	bne	r2,zero,a18 <__alt_data_end+0xfc000a18>
		gpu->usedCache[i] = -1;
	}
    render(gpu->buffer);
     a50:	e0bfff17 	ldw	r2,-4(fp)
     a54:	10800f04 	addi	r2,r2,60
     a58:	1009883a 	mov	r4,r2
     a5c:	00021080 	call	2108 <render>
}
     a60:	0001883a 	nop
     a64:	e037883a 	mov	sp,fp
     a68:	dfc00117 	ldw	ra,4(sp)
     a6c:	df000017 	ldw	fp,0(sp)
     a70:	dec00204 	addi	sp,sp,8
     a74:	f800283a 	ret

00000a78 <drawBackground>:
int getSignedValue(byte v);
void readTileData(int tileIndex, word dataStart, int tileSize, byte* tileData);
void drawTileLine(GPU* gpu, byte* tileData, int line, int xflip, int yflip);
void copyBGTileLine(byte* lineBuffer, byte* tileBuffer, int x);
void copyLineToBuffer(GPU* gpu, byte* lineBuffer, int line);
void drawBackground(GPU* gpu, byte LCDC, int line, byte* lineBuffer) {
     a78:	deffe004 	addi	sp,sp,-128
     a7c:	dfc01f15 	stw	ra,124(sp)
     a80:	df001e15 	stw	fp,120(sp)
     a84:	df001e04 	addi	fp,sp,120
     a88:	e13ffc15 	stw	r4,-16(fp)
     a8c:	2805883a 	mov	r2,r5
     a90:	e1bffe15 	stw	r6,-8(fp)
     a94:	e1ffff15 	stw	r7,-4(fp)
     a98:	e0bffd05 	stb	r2,-12(fp)
    if ((LCDC & 0x1) == 0) {
     a9c:	e0bffd03 	ldbu	r2,-12(fp)
     aa0:	1080004c 	andi	r2,r2,1
     aa4:	1000fa26 	beq	r2,zero,e90 <drawBackground+0x418>
        return;
    }

    word mapStart = ((LCDC >> 3) & 0x1) ? gpu->START_1 : gpu->START_0;
     aa8:	e0bffd03 	ldbu	r2,-12(fp)
     aac:	1004d0fa 	srli	r2,r2,3
     ab0:	10803fcc 	andi	r2,r2,255
     ab4:	1080004c 	andi	r2,r2,1
     ab8:	10000326 	beq	r2,zero,ac8 <drawBackground+0x50>
     abc:	e0bffc17 	ldw	r2,-16(fp)
     ac0:	1080098b 	ldhu	r2,38(r2)
     ac4:	00000206 	br	ad0 <drawBackground+0x58>
     ac8:	e0bffc17 	ldw	r2,-16(fp)
     acc:	1080090b 	ldhu	r2,36(r2)
     ad0:	e0bfef0d 	sth	r2,-68(fp)

    word dataStart;
    bool signedIndex = false;
     ad4:	e03fe415 	stw	zero,-112(fp)

    if (((LCDC >> 4) & 0x1)) {
     ad8:	e0bffd03 	ldbu	r2,-12(fp)
     adc:	1004d13a 	srli	r2,r2,4
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	1080004c 	andi	r2,r2,1
     ae8:	10000326 	beq	r2,zero,af8 <drawBackground+0x80>
        dataStart = 0x8000;
     aec:	00a00004 	movi	r2,-32768
     af0:	e0bfe30d 	sth	r2,-116(fp)
     af4:	00000406 	br	b08 <drawBackground+0x90>
    } else {
        dataStart = 0x8800;
     af8:	00a20004 	movi	r2,-30720
     afc:	e0bfe30d 	sth	r2,-116(fp)
        signedIndex = true;
     b00:	00800044 	movi	r2,1
     b04:	e0bfe415 	stw	r2,-112(fp)
    }

    byte bgx = readData(gpu->SCX);
     b08:	e0bffc17 	ldw	r2,-16(fp)
     b0c:	1080018b 	ldhu	r2,6(r2)
     b10:	10bfffcc 	andi	r2,r2,65535
     b14:	1009883a 	mov	r4,r2
     b18:	000026c0 	call	26c <readData>
     b1c:	e0bfef85 	stb	r2,-66(fp)
    byte bgy = readData(gpu->SCY);
     b20:	e0bffc17 	ldw	r2,-16(fp)
     b24:	1080010b 	ldhu	r2,4(r2)
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	1009883a 	mov	r4,r2
     b30:	000026c0 	call	26c <readData>
     b34:	e0bfefc5 	stb	r2,-65(fp)
    int tileLine = ((line + bgy) & 7);
     b38:	e0ffefc3 	ldbu	r3,-65(fp)
     b3c:	e0bffe17 	ldw	r2,-8(fp)
     b40:	1885883a 	add	r2,r3,r2
     b44:	108001cc 	andi	r2,r2,7
     b48:	e0bff015 	stw	r2,-64(fp)

    // browse BG tilemap for the line to render
    int tileRow = ((((bgy + line) / 8) | 0) & 0x1F);
     b4c:	e0ffefc3 	ldbu	r3,-65(fp)
     b50:	e0bffe17 	ldw	r2,-8(fp)
     b54:	1885883a 	add	r2,r3,r2
     b58:	1000010e 	bge	r2,zero,b60 <drawBackground+0xe8>
     b5c:	108001c4 	addi	r2,r2,7
     b60:	1005d0fa 	srai	r2,r2,3
     b64:	108007cc 	andi	r2,r2,31
     b68:	e0bff115 	stw	r2,-60(fp)
    int firstTile = ((bgx / 8) | 0) + 32 * tileRow;
     b6c:	e0bfef83 	ldbu	r2,-66(fp)
     b70:	1004d0fa 	srli	r2,r2,3
     b74:	10c03fcc 	andi	r3,r2,255
     b78:	e0bff117 	ldw	r2,-60(fp)
     b7c:	1004917a 	slli	r2,r2,5
     b80:	1885883a 	add	r2,r3,r2
     b84:	e0bff215 	stw	r2,-56(fp)
    int lastTile = firstTile + 160 / 8 + 1;
     b88:	e0bff217 	ldw	r2,-56(fp)
     b8c:	10800544 	addi	r2,r2,21
     b90:	e0bfe515 	stw	r2,-108(fp)
    if ((lastTile & 0x1F) < (firstTile & 0x1F)) {
     b94:	e0bfe517 	ldw	r2,-108(fp)
     b98:	10c007cc 	andi	r3,r2,31
     b9c:	e0bff217 	ldw	r2,-56(fp)
     ba0:	108007cc 	andi	r2,r2,31
     ba4:	1880030e 	bge	r3,r2,bb4 <drawBackground+0x13c>
        lastTile -= 32;
     ba8:	e0bfe517 	ldw	r2,-108(fp)
     bac:	10bff804 	addi	r2,r2,-32
     bb0:	e0bfe515 	stw	r2,-108(fp)
    }
    int x = (firstTile & 0x1F) * 8 - bgx; // x position of the first tile's leftmost pixel
     bb4:	e0bff217 	ldw	r2,-56(fp)
     bb8:	108007cc 	andi	r2,r2,31
     bbc:	100690fa 	slli	r3,r2,3
     bc0:	e0bfef83 	ldbu	r2,-66(fp)
     bc4:	1885c83a 	sub	r2,r3,r2
     bc8:	e0bfe615 	stw	r2,-104(fp)
    for (int i = firstTile; i != lastTile; i++) {
     bcc:	e0bff217 	ldw	r2,-56(fp)
     bd0:	e0bfe715 	stw	r2,-100(fp)
     bd4:	0000a606 	br	e70 <drawBackground+0x3f8>
        if ((i & 0x1F) == 0) {
     bd8:	e0bfe717 	ldw	r2,-100(fp)
     bdc:	108007cc 	andi	r2,r2,31
     be0:	1000031e 	bne	r2,zero,bf0 <drawBackground+0x178>
            i -= 32;
     be4:	e0bfe717 	ldw	r2,-100(fp)
     be8:	10bff804 	addi	r2,r2,-32
     bec:	e0bfe715 	stw	r2,-100(fp)
        }
        byte tileIndex = readData(i + mapStart);
     bf0:	e0bfe717 	ldw	r2,-100(fp)
     bf4:	1007883a 	mov	r3,r2
     bf8:	e0bfef0b 	ldhu	r2,-68(fp)
     bfc:	1885883a 	add	r2,r3,r2
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	1009883a 	mov	r4,r2
     c08:	000026c0 	call	26c <readData>
     c0c:	e0bff305 	stb	r2,-52(fp)

        if (signedIndex == true) {
     c10:	e0bfe417 	ldw	r2,-112(fp)
     c14:	10800058 	cmpnei	r2,r2,1
     c18:	1000061e 	bne	r2,zero,c34 <drawBackground+0x1bc>
            int tileIndex = getSignedValue(tileIndex) + 128;
     c1c:	e0bfe817 	ldw	r2,-96(fp)
     c20:	10803fcc 	andi	r2,r2,255
     c24:	1009883a 	mov	r4,r2
     c28:	000327c0 	call	327c <getSignedValue>
     c2c:	10802004 	addi	r2,r2,128
     c30:	e0bfe815 	stw	r2,-96(fp)
        }


        if(tileIndex >= 64){
     c34:	e0bff303 	ldbu	r2,-52(fp)
     c38:	10801030 	cmpltui	r2,r2,64
     c3c:	1000061e 	bne	r2,zero,c58 <drawBackground+0x1e0>
        	printf("TILE INDEX IS %d", tileIndex);
     c40:	e0bff303 	ldbu	r2,-52(fp)
     c44:	100b883a 	mov	r5,r2
     c48:	010000b4 	movhi	r4,2
     c4c:	2130cc04 	addi	r4,r4,-15568
     c50:	000cf8c0 	call	cf8c <printf>
     c54:	00008306 	br	e64 <drawBackground+0x3ec>
        	//exit(-1);
        	continue;
        }
        bool used = false;
     c58:	e03fe915 	stw	zero,-92(fp)
        for(int u = 0; u < 64; u++){
     c5c:	e03fea15 	stw	zero,-88(fp)
     c60:	00000f06 	br	ca0 <drawBackground+0x228>
        	if(gpu->usedCache[u] == tileIndex) {
     c64:	e0fffc17 	ldw	r3,-16(fp)
     c68:	e0bfea17 	ldw	r2,-88(fp)
     c6c:	1085e444 	addi	r2,r2,6033
     c70:	1085883a 	add	r2,r2,r2
     c74:	1085883a 	add	r2,r2,r2
     c78:	1885883a 	add	r2,r3,r2
     c7c:	10c00017 	ldw	r3,0(r2)
     c80:	e0bff303 	ldbu	r2,-52(fp)
     c84:	1880031e 	bne	r3,r2,c94 <drawBackground+0x21c>
        		used = true;
     c88:	00800044 	movi	r2,1
     c8c:	e0bfe915 	stw	r2,-92(fp)
        		break;
     c90:	00000606 	br	cac <drawBackground+0x234>
        	printf("TILE INDEX IS %d", tileIndex);
        	//exit(-1);
        	continue;
        }
        bool used = false;
        for(int u = 0; u < 64; u++){
     c94:	e0bfea17 	ldw	r2,-88(fp)
     c98:	10800044 	addi	r2,r2,1
     c9c:	e0bfea15 	stw	r2,-88(fp)
     ca0:	e0bfea17 	ldw	r2,-88(fp)
     ca4:	10801010 	cmplti	r2,r2,64
     ca8:	103fee1e 	bne	r2,zero,c64 <__alt_data_end+0xfc000c64>
        		used = true;
        		break;
        	}
        }
        byte tileData[16];
        if(used == true){
     cac:	e0bfe917 	ldw	r2,-92(fp)
     cb0:	10800058 	cmpnei	r2,r2,1
     cb4:	1000151e 	bne	r2,zero,d0c <drawBackground+0x294>
        	for(int k = 0; k < 16; k++) {
     cb8:	e03feb15 	stw	zero,-84(fp)
     cbc:	00000f06 	br	cfc <drawBackground+0x284>
        		tileData[k] = gpu->bgTileCache[tileIndex][k];
     cc0:	e0bff303 	ldbu	r2,-52(fp)
     cc4:	e0fffc17 	ldw	r3,-16(fp)
     cc8:	1004913a 	slli	r2,r2,4
     ccc:	1887883a 	add	r3,r3,r2
     cd0:	e0bfeb17 	ldw	r2,-84(fp)
     cd4:	1885883a 	add	r2,r3,r2
     cd8:	10969104 	addi	r2,r2,23108
     cdc:	10c00003 	ldbu	r3,0(r2)
     ce0:	e13ff344 	addi	r4,fp,-51
     ce4:	e0bfeb17 	ldw	r2,-84(fp)
     ce8:	2085883a 	add	r2,r4,r2
     cec:	10c00005 	stb	r3,0(r2)
        		break;
        	}
        }
        byte tileData[16];
        if(used == true){
        	for(int k = 0; k < 16; k++) {
     cf0:	e0bfeb17 	ldw	r2,-84(fp)
     cf4:	10800044 	addi	r2,r2,1
     cf8:	e0bfeb15 	stw	r2,-84(fp)
     cfc:	e0bfeb17 	ldw	r2,-84(fp)
     d00:	10800410 	cmplti	r2,r2,16
     d04:	103fee1e 	bne	r2,zero,cc0 <__alt_data_end+0xfc000cc0>
     d08:	00004606 	br	e24 <drawBackground+0x3ac>
        		tileData[k] = gpu->bgTileCache[tileIndex][k];
        	}
        }else {

        	byte td[16];
        	readTileData(tileIndex, dataStart, 16, td);
     d0c:	e0bff303 	ldbu	r2,-52(fp)
     d10:	e0ffe30b 	ldhu	r3,-116(fp)
     d14:	e13ff744 	addi	r4,fp,-35
     d18:	200f883a 	mov	r7,r4
     d1c:	01800404 	movi	r6,16
     d20:	180b883a 	mov	r5,r3
     d24:	1009883a 	mov	r4,r2
     d28:	00018880 	call	1888 <readTileData>
        	for(int k = 0; k < 16; k++){
     d2c:	e03fec15 	stw	zero,-80(fp)
     d30:	00000f06 	br	d70 <drawBackground+0x2f8>
        		gpu->bgTileCache[tileIndex][k] = td[k];
     d34:	e0bff303 	ldbu	r2,-52(fp)
     d38:	e13ff744 	addi	r4,fp,-35
     d3c:	e0ffec17 	ldw	r3,-80(fp)
     d40:	20c7883a 	add	r3,r4,r3
     d44:	18c00003 	ldbu	r3,0(r3)
     d48:	e13ffc17 	ldw	r4,-16(fp)
     d4c:	1004913a 	slli	r2,r2,4
     d50:	2089883a 	add	r4,r4,r2
     d54:	e0bfec17 	ldw	r2,-80(fp)
     d58:	2085883a 	add	r2,r4,r2
     d5c:	10969104 	addi	r2,r2,23108
     d60:	10c00005 	stb	r3,0(r2)
        	}
        }else {

        	byte td[16];
        	readTileData(tileIndex, dataStart, 16, td);
        	for(int k = 0; k < 16; k++){
     d64:	e0bfec17 	ldw	r2,-80(fp)
     d68:	10800044 	addi	r2,r2,1
     d6c:	e0bfec15 	stw	r2,-80(fp)
     d70:	e0bfec17 	ldw	r2,-80(fp)
     d74:	10800410 	cmplti	r2,r2,16
     d78:	103fee1e 	bne	r2,zero,d34 <__alt_data_end+0xfc000d34>
        		gpu->bgTileCache[tileIndex][k] = td[k];
        	}
        	for(int a = 0; a < 64; a++){
     d7c:	e03fed15 	stw	zero,-76(fp)
     d80:	00001506 	br	dd8 <drawBackground+0x360>
				if(gpu->usedCache[a] == -1) {
     d84:	e0fffc17 	ldw	r3,-16(fp)
     d88:	e0bfed17 	ldw	r2,-76(fp)
     d8c:	1085e444 	addi	r2,r2,6033
     d90:	1085883a 	add	r2,r2,r2
     d94:	1085883a 	add	r2,r2,r2
     d98:	1885883a 	add	r2,r3,r2
     d9c:	10800017 	ldw	r2,0(r2)
     da0:	10bfffd8 	cmpnei	r2,r2,-1
     da4:	1000091e 	bne	r2,zero,dcc <drawBackground+0x354>
					gpu->usedCache[a] = tileIndex;
     da8:	e0fff303 	ldbu	r3,-52(fp)
     dac:	e13ffc17 	ldw	r4,-16(fp)
     db0:	e0bfed17 	ldw	r2,-76(fp)
     db4:	1085e444 	addi	r2,r2,6033
     db8:	1085883a 	add	r2,r2,r2
     dbc:	1085883a 	add	r2,r2,r2
     dc0:	2085883a 	add	r2,r4,r2
     dc4:	10c00015 	stw	r3,0(r2)
					break;
     dc8:	00000606 	br	de4 <drawBackground+0x36c>
        	byte td[16];
        	readTileData(tileIndex, dataStart, 16, td);
        	for(int k = 0; k < 16; k++){
        		gpu->bgTileCache[tileIndex][k] = td[k];
        	}
        	for(int a = 0; a < 64; a++){
     dcc:	e0bfed17 	ldw	r2,-76(fp)
     dd0:	10800044 	addi	r2,r2,1
     dd4:	e0bfed15 	stw	r2,-76(fp)
     dd8:	e0bfed17 	ldw	r2,-76(fp)
     ddc:	10801010 	cmplti	r2,r2,64
     de0:	103fe81e 	bne	r2,zero,d84 <__alt_data_end+0xfc000d84>
				if(gpu->usedCache[a] == -1) {
					gpu->usedCache[a] = tileIndex;
					break;
				}
			}
        	for(int k = 0; k < 16; k++) {
     de4:	e03fee15 	stw	zero,-72(fp)
     de8:	00000b06 	br	e18 <drawBackground+0x3a0>
				tileData[k] = td[k];
     dec:	e0fff744 	addi	r3,fp,-35
     df0:	e0bfee17 	ldw	r2,-72(fp)
     df4:	1885883a 	add	r2,r3,r2
     df8:	10c00003 	ldbu	r3,0(r2)
     dfc:	e13ff344 	addi	r4,fp,-51
     e00:	e0bfee17 	ldw	r2,-72(fp)
     e04:	2085883a 	add	r2,r4,r2
     e08:	10c00005 	stb	r3,0(r2)
				if(gpu->usedCache[a] == -1) {
					gpu->usedCache[a] = tileIndex;
					break;
				}
			}
        	for(int k = 0; k < 16; k++) {
     e0c:	e0bfee17 	ldw	r2,-72(fp)
     e10:	10800044 	addi	r2,r2,1
     e14:	e0bfee15 	stw	r2,-72(fp)
     e18:	e0bfee17 	ldw	r2,-72(fp)
     e1c:	10800410 	cmplti	r2,r2,16
     e20:	103ff21e 	bne	r2,zero,dec <__alt_data_end+0xfc000dec>
				tileData[k] = td[k];
			}
        }

        drawTileLine(gpu, tileData, tileLine, 0, 0);
     e24:	e0bff344 	addi	r2,fp,-51
     e28:	d8000015 	stw	zero,0(sp)
     e2c:	000f883a 	mov	r7,zero
     e30:	e1bff017 	ldw	r6,-64(fp)
     e34:	100b883a 	mov	r5,r2
     e38:	e13ffc17 	ldw	r4,-16(fp)
     e3c:	0000ff40 	call	ff4 <drawTileLine>
        copyBGTileLine(lineBuffer, gpu->tileBuffer, x);
     e40:	e0bffc17 	ldw	r2,-16(fp)
     e44:	10968f04 	addi	r2,r2,23100
     e48:	e1bfe617 	ldw	r6,-104(fp)
     e4c:	100b883a 	mov	r5,r2
     e50:	e13fff17 	ldw	r4,-4(fp)
     e54:	0000ea80 	call	ea8 <copyBGTileLine>
        x += 8;
     e58:	e0bfe617 	ldw	r2,-104(fp)
     e5c:	10800204 	addi	r2,r2,8
     e60:	e0bfe615 	stw	r2,-104(fp)
    int lastTile = firstTile + 160 / 8 + 1;
    if ((lastTile & 0x1F) < (firstTile & 0x1F)) {
        lastTile -= 32;
    }
    int x = (firstTile & 0x1F) * 8 - bgx; // x position of the first tile's leftmost pixel
    for (int i = firstTile; i != lastTile; i++) {
     e64:	e0bfe717 	ldw	r2,-100(fp)
     e68:	10800044 	addi	r2,r2,1
     e6c:	e0bfe715 	stw	r2,-100(fp)
     e70:	e0ffe717 	ldw	r3,-100(fp)
     e74:	e0bfe517 	ldw	r2,-108(fp)
     e78:	18bf571e 	bne	r3,r2,bd8 <__alt_data_end+0xfc000bd8>
        drawTileLine(gpu, tileData, tileLine, 0, 0);
        copyBGTileLine(lineBuffer, gpu->tileBuffer, x);
        x += 8;
    }

    copyLineToBuffer(gpu, lineBuffer, line);
     e7c:	e1bffe17 	ldw	r6,-8(fp)
     e80:	e17fff17 	ldw	r5,-4(fp)
     e84:	e13ffc17 	ldw	r4,-16(fp)
     e88:	0000f3c0 	call	f3c <copyLineToBuffer>
     e8c:	00000106 	br	e94 <drawBackground+0x41c>
void drawTileLine(GPU* gpu, byte* tileData, int line, int xflip, int yflip);
void copyBGTileLine(byte* lineBuffer, byte* tileBuffer, int x);
void copyLineToBuffer(GPU* gpu, byte* lineBuffer, int line);
void drawBackground(GPU* gpu, byte LCDC, int line, byte* lineBuffer) {
    if ((LCDC & 0x1) == 0) {
        return;
     e90:	0001883a 	nop
        copyBGTileLine(lineBuffer, gpu->tileBuffer, x);
        x += 8;
    }

    copyLineToBuffer(gpu, lineBuffer, line);
}
     e94:	e037883a 	mov	sp,fp
     e98:	dfc00117 	ldw	ra,4(sp)
     e9c:	df000017 	ldw	fp,0(sp)
     ea0:	dec00204 	addi	sp,sp,8
     ea4:	f800283a 	ret

00000ea8 <copyBGTileLine>:

// Copy a tile line from a tileBuffer to a line buffer, at a given x position
void copyBGTileLine(byte* lineBuffer, byte* tileBuffer, int x) {
     ea8:	defffb04 	addi	sp,sp,-20
     eac:	df000415 	stw	fp,16(sp)
     eb0:	df000404 	addi	fp,sp,16
     eb4:	e13ffd15 	stw	r4,-12(fp)
     eb8:	e17ffe15 	stw	r5,-8(fp)
     ebc:	e1bfff15 	stw	r6,-4(fp)
    // copy tile line to buffer
    for (int k = 0; k < 8; k++, x++) {
     ec0:	e03ffc15 	stw	zero,-16(fp)
     ec4:	00001506 	br	f1c <copyBGTileLine+0x74>
        if (x < 0 || x >= 160) continue;
     ec8:	e0bfff17 	ldw	r2,-4(fp)
     ecc:	10000c16 	blt	r2,zero,f00 <copyBGTileLine+0x58>
     ed0:	e0bfff17 	ldw	r2,-4(fp)
     ed4:	10802810 	cmplti	r2,r2,160
     ed8:	10000926 	beq	r2,zero,f00 <copyBGTileLine+0x58>
        lineBuffer[x] = tileBuffer[k];
     edc:	e0bfff17 	ldw	r2,-4(fp)
     ee0:	e0fffd17 	ldw	r3,-12(fp)
     ee4:	1885883a 	add	r2,r3,r2
     ee8:	e0fffc17 	ldw	r3,-16(fp)
     eec:	e13ffe17 	ldw	r4,-8(fp)
     ef0:	20c7883a 	add	r3,r4,r3
     ef4:	18c00003 	ldbu	r3,0(r3)
     ef8:	10c00005 	stb	r3,0(r2)
     efc:	00000106 	br	f04 <copyBGTileLine+0x5c>

// Copy a tile line from a tileBuffer to a line buffer, at a given x position
void copyBGTileLine(byte* lineBuffer, byte* tileBuffer, int x) {
    // copy tile line to buffer
    for (int k = 0; k < 8; k++, x++) {
        if (x < 0 || x >= 160) continue;
     f00:	0001883a 	nop
}

// Copy a tile line from a tileBuffer to a line buffer, at a given x position
void copyBGTileLine(byte* lineBuffer, byte* tileBuffer, int x) {
    // copy tile line to buffer
    for (int k = 0; k < 8; k++, x++) {
     f04:	e0bffc17 	ldw	r2,-16(fp)
     f08:	10800044 	addi	r2,r2,1
     f0c:	e0bffc15 	stw	r2,-16(fp)
     f10:	e0bfff17 	ldw	r2,-4(fp)
     f14:	10800044 	addi	r2,r2,1
     f18:	e0bfff15 	stw	r2,-4(fp)
     f1c:	e0bffc17 	ldw	r2,-16(fp)
     f20:	10800210 	cmplti	r2,r2,8
     f24:	103fe81e 	bne	r2,zero,ec8 <__alt_data_end+0xfc000ec8>
        if (x < 0 || x >= 160) continue;
        lineBuffer[x] = tileBuffer[k];
    }
}
     f28:	0001883a 	nop
     f2c:	e037883a 	mov	sp,fp
     f30:	df000017 	ldw	fp,0(sp)
     f34:	dec00104 	addi	sp,sp,4
     f38:	f800283a 	ret

00000f3c <copyLineToBuffer>:

void getPalette(byte paletteByte, byte* palette);
void drawPixel(GPU* gpu, int x, int y, byte color);
void copyLineToBuffer(GPU* gpu, byte* lineBuffer, int line) {
     f3c:	defff804 	addi	sp,sp,-32
     f40:	dfc00715 	stw	ra,28(sp)
     f44:	df000615 	stw	fp,24(sp)
     f48:	df000604 	addi	fp,sp,24
     f4c:	e13ffd15 	stw	r4,-12(fp)
     f50:	e17ffe15 	stw	r5,-8(fp)
     f54:	e1bfff15 	stw	r6,-4(fp)
	byte bgPalette[4];
    getPalette(readData(gpu->BGP), bgPalette);
     f58:	e0bffd17 	ldw	r2,-12(fp)
     f5c:	1080030b 	ldhu	r2,12(r2)
     f60:	10bfffcc 	andi	r2,r2,65535
     f64:	1009883a 	mov	r4,r2
     f68:	000026c0 	call	26c <readData>
     f6c:	10803fcc 	andi	r2,r2,255
     f70:	e0fffb44 	addi	r3,fp,-19
     f74:	180b883a 	mov	r5,r3
     f78:	1009883a 	mov	r4,r2
     f7c:	00020780 	call	2078 <getPalette>

    for (int x = 0; x < 160; x++) {
     f80:	e03ffa15 	stw	zero,-24(fp)
     f84:	00001206 	br	fd0 <copyLineToBuffer+0x94>
        byte color = lineBuffer[x];
     f88:	e0bffa17 	ldw	r2,-24(fp)
     f8c:	e0fffe17 	ldw	r3,-8(fp)
     f90:	1885883a 	add	r2,r3,r2
     f94:	10800003 	ldbu	r2,0(r2)
     f98:	e0bffb05 	stb	r2,-20(fp)
        drawPixel(gpu, x, line, bgPalette[color]);
     f9c:	e0bffb03 	ldbu	r2,-20(fp)
     fa0:	e0fffb44 	addi	r3,fp,-19
     fa4:	1885883a 	add	r2,r3,r2
     fa8:	10800003 	ldbu	r2,0(r2)
     fac:	10803fcc 	andi	r2,r2,255
     fb0:	100f883a 	mov	r7,r2
     fb4:	e1bfff17 	ldw	r6,-4(fp)
     fb8:	e17ffa17 	ldw	r5,-24(fp)
     fbc:	e13ffd17 	ldw	r4,-12(fp)
     fc0:	0001fb80 	call	1fb8 <drawPixel>
void drawPixel(GPU* gpu, int x, int y, byte color);
void copyLineToBuffer(GPU* gpu, byte* lineBuffer, int line) {
	byte bgPalette[4];
    getPalette(readData(gpu->BGP), bgPalette);

    for (int x = 0; x < 160; x++) {
     fc4:	e0bffa17 	ldw	r2,-24(fp)
     fc8:	10800044 	addi	r2,r2,1
     fcc:	e0bffa15 	stw	r2,-24(fp)
     fd0:	e0bffa17 	ldw	r2,-24(fp)
     fd4:	10802810 	cmplti	r2,r2,160
     fd8:	103feb1e 	bne	r2,zero,f88 <__alt_data_end+0xfc000f88>
        byte color = lineBuffer[x];
        drawPixel(gpu, x, line, bgPalette[color]);
    }
}
     fdc:	0001883a 	nop
     fe0:	e037883a 	mov	sp,fp
     fe4:	dfc00117 	ldw	ra,4(sp)
     fe8:	df000017 	ldw	fp,0(sp)
     fec:	dec00204 	addi	sp,sp,8
     ff0:	f800283a 	ret

00000ff4 <drawTileLine>:

// Write a line of a tile (8 pixels) into a buffer array
void drawTileLine(GPU* gpu, byte* tileData, int line, int xflip, int yflip) {
     ff4:	defff304 	addi	sp,sp,-52
     ff8:	df000c15 	stw	fp,48(sp)
     ffc:	df000c04 	addi	fp,sp,48
    1000:	e13ffc15 	stw	r4,-16(fp)
    1004:	e17ffd15 	stw	r5,-12(fp)
    1008:	e1bffe15 	stw	r6,-8(fp)
    100c:	e1ffff15 	stw	r7,-4(fp)
    xflip = xflip | 0;
    yflip = yflip | 0;
    int l = (yflip == 1) ? 7 - line : line;
    1010:	e0800117 	ldw	r2,4(fp)
    1014:	10800058 	cmpnei	r2,r2,1
    1018:	1000041e 	bne	r2,zero,102c <drawTileLine+0x38>
    101c:	00c001c4 	movi	r3,7
    1020:	e0bffe17 	ldw	r2,-8(fp)
    1024:	1885c83a 	sub	r2,r3,r2
    1028:	00000106 	br	1030 <drawTileLine+0x3c>
    102c:	e0bffe17 	ldw	r2,-8(fp)
    1030:	e0bff615 	stw	r2,-40(fp)
    int byteIndex = l * 2;
    1034:	e0bff617 	ldw	r2,-40(fp)
    1038:	1085883a 	add	r2,r2,r2
    103c:	e0bff715 	stw	r2,-36(fp)
    byte b1 = tileData[byteIndex++];
    1040:	e0bff717 	ldw	r2,-36(fp)
    1044:	10c00044 	addi	r3,r2,1
    1048:	e0fff715 	stw	r3,-36(fp)
    104c:	1007883a 	mov	r3,r2
    1050:	e0bffd17 	ldw	r2,-12(fp)
    1054:	10c5883a 	add	r2,r2,r3
    1058:	10800003 	ldbu	r2,0(r2)
    105c:	e0bff805 	stb	r2,-32(fp)
    byte b2 = tileData[byteIndex++];
    1060:	e0bff717 	ldw	r2,-36(fp)
    1064:	10c00044 	addi	r3,r2,1
    1068:	e0fff715 	stw	r3,-36(fp)
    106c:	1007883a 	mov	r3,r2
    1070:	e0bffd17 	ldw	r2,-12(fp)
    1074:	10c5883a 	add	r2,r2,r3
    1078:	10800003 	ldbu	r2,0(r2)
    107c:	e0bff845 	stb	r2,-31(fp)

    int offset = 8;
    1080:	00800204 	movi	r2,8
    1084:	e0bff415 	stw	r2,-48(fp)
    for (int pixel = 0; pixel < 8; pixel++) {
    1088:	e03ff515 	stw	zero,-44(fp)
    108c:	00002506 	br	1124 <drawTileLine+0x130>
        offset--;
    1090:	e0bff417 	ldw	r2,-48(fp)
    1094:	10bfffc4 	addi	r2,r2,-1
    1098:	e0bff415 	stw	r2,-48(fp)
        int mask = (1 << offset);
    109c:	00c00044 	movi	r3,1
    10a0:	e0bff417 	ldw	r2,-48(fp)
    10a4:	1884983a 	sll	r2,r3,r2
    10a8:	e0bff915 	stw	r2,-28(fp)
        byte colorValue = ((b1 & mask) >> offset) + ((b2 & mask) >> offset)*2;
    10ac:	e0fff803 	ldbu	r3,-32(fp)
    10b0:	e0bff917 	ldw	r2,-28(fp)
    10b4:	1886703a 	and	r3,r3,r2
    10b8:	e0bff417 	ldw	r2,-48(fp)
    10bc:	1885d83a 	sra	r2,r3,r2
    10c0:	1009883a 	mov	r4,r2
    10c4:	e0fff843 	ldbu	r3,-31(fp)
    10c8:	e0bff917 	ldw	r2,-28(fp)
    10cc:	1886703a 	and	r3,r3,r2
    10d0:	e0bff417 	ldw	r2,-48(fp)
    10d4:	1885d83a 	sra	r2,r3,r2
    10d8:	1085883a 	add	r2,r2,r2
    10dc:	2085883a 	add	r2,r4,r2
    10e0:	e0bffa05 	stb	r2,-24(fp)
        int p = (xflip == 1) ? offset : pixel;
    10e4:	e0bfff17 	ldw	r2,-4(fp)
    10e8:	10800058 	cmpnei	r2,r2,1
    10ec:	1000021e 	bne	r2,zero,10f8 <drawTileLine+0x104>
    10f0:	e0bff417 	ldw	r2,-48(fp)
    10f4:	00000106 	br	10fc <drawTileLine+0x108>
    10f8:	e0bff517 	ldw	r2,-44(fp)
    10fc:	e0bffb15 	stw	r2,-20(fp)
        gpu->tileBuffer[p] = colorValue;
    1100:	e0fffc17 	ldw	r3,-16(fp)
    1104:	e0bffb17 	ldw	r2,-20(fp)
    1108:	1885883a 	add	r2,r3,r2
    110c:	10968f04 	addi	r2,r2,23100
    1110:	e0fffa03 	ldbu	r3,-24(fp)
    1114:	10c00005 	stb	r3,0(r2)
    int byteIndex = l * 2;
    byte b1 = tileData[byteIndex++];
    byte b2 = tileData[byteIndex++];

    int offset = 8;
    for (int pixel = 0; pixel < 8; pixel++) {
    1118:	e0bff517 	ldw	r2,-44(fp)
    111c:	10800044 	addi	r2,r2,1
    1120:	e0bff515 	stw	r2,-44(fp)
    1124:	e0bff517 	ldw	r2,-44(fp)
    1128:	10800210 	cmplti	r2,r2,8
    112c:	103fd81e 	bne	r2,zero,1090 <__alt_data_end+0xfc001090>
        int mask = (1 << offset);
        byte colorValue = ((b1 & mask) >> offset) + ((b2 & mask) >> offset)*2;
        int p = (xflip == 1) ? offset : pixel;
        gpu->tileBuffer[p] = colorValue;
    }
}
    1130:	0001883a 	nop
    1134:	e037883a 	mov	sp,fp
    1138:	df000017 	ldw	fp,0(sp)
    113c:	dec00104 	addi	sp,sp,4
    1140:	f800283a 	ret

00001144 <drawSprites>:
    byte palette;
}SpriteLine;

void copySpriteTileLine(SpriteLine* lineBuffer, byte* tileBuffer, int x, byte palette);
void copySpriteLineToBuffer(GPU* gpu, SpriteLine* spriteLineBuffer, int line);
void drawSprites(GPU* gpu, byte LCDC, int line, byte* lineBuffer) {
    1144:	deff8a04 	addi	sp,sp,-472
    1148:	dfc07515 	stw	ra,468(sp)
    114c:	df007415 	stw	fp,464(sp)
    1150:	ddc07315 	stw	r23,460(sp)
    1154:	dd807215 	stw	r22,456(sp)
    1158:	dd407115 	stw	r21,452(sp)
    115c:	dd007015 	stw	r20,448(sp)
    1160:	dcc06f15 	stw	r19,444(sp)
    1164:	dc806e15 	stw	r18,440(sp)
    1168:	dc406d15 	stw	r17,436(sp)
    116c:	dc006c15 	stw	r16,432(sp)
    1170:	df007404 	addi	fp,sp,464
    1174:	e13ff315 	stw	r4,-52(fp)
    1178:	2805883a 	mov	r2,r5
    117c:	e1bff515 	stw	r6,-44(fp)
    1180:	e1fff615 	stw	r7,-40(fp)
    1184:	e0bff405 	stb	r2,-48(fp)
    if (((LCDC >> 1) & 0x1) == 0) {
    1188:	e0bff403 	ldbu	r2,-48(fp)
    118c:	1004d07a 	srli	r2,r2,1
    1190:	10803fcc 	andi	r2,r2,255
    1194:	1080004c 	andi	r2,r2,1
    1198:	1000b926 	beq	r2,zero,1480 <drawSprites+0x33c>
        return;
    }

    int spriteHeight = ((LCDC >> 2) & 0x1) == 1 ? 16 : 8;
    119c:	e0bff403 	ldbu	r2,-48(fp)
    11a0:	1004d0ba 	srli	r2,r2,2
    11a4:	10803fcc 	andi	r2,r2,255
    11a8:	1080004c 	andi	r2,r2,1
    11ac:	10000226 	beq	r2,zero,11b8 <drawSprites+0x74>
    11b0:	00800404 	movi	r2,16
    11b4:	00000106 	br	11bc <drawSprites+0x78>
    11b8:	00800204 	movi	r2,8
    11bc:	e0bf9015 	stw	r2,-448(fp)

    Sprite sprites[9];
    int counter = 0;
    11c0:	e03f8d15 	stw	zero,-460(fp)

    for (word i = gpu->OAM_START; i < gpu->OAM_END && counter < 9; i += 4) {
    11c4:	e0bff317 	ldw	r2,-52(fp)
    11c8:	1080058b 	ldhu	r2,22(r2)
    11cc:	e0bf8e0d 	sth	r2,-456(fp)
    11d0:	00003806 	br	12b4 <drawSprites+0x170>
        byte y = readData(i);
    11d4:	e0bf8e0b 	ldhu	r2,-456(fp)
    11d8:	1009883a 	mov	r4,r2
    11dc:	000026c0 	call	26c <readData>
    11e0:	e0bf9105 	stb	r2,-444(fp)
        byte x = readData(i+1);
    11e4:	e0bf8e0b 	ldhu	r2,-456(fp)
    11e8:	10800044 	addi	r2,r2,1
    11ec:	10bfffcc 	andi	r2,r2,65535
    11f0:	1009883a 	mov	r4,r2
    11f4:	000026c0 	call	26c <readData>
    11f8:	e0bf9145 	stb	r2,-443(fp)
        byte index = readData(i+2);
    11fc:	e0bf8e0b 	ldhu	r2,-456(fp)
    1200:	10800084 	addi	r2,r2,2
    1204:	10bfffcc 	andi	r2,r2,65535
    1208:	1009883a 	mov	r4,r2
    120c:	000026c0 	call	26c <readData>
    1210:	e0bf9185 	stb	r2,-442(fp)
        byte flags = readData(i+3);
    1214:	e0bf8e0b 	ldhu	r2,-456(fp)
    1218:	108000c4 	addi	r2,r2,3
    121c:	10bfffcc 	andi	r2,r2,65535
    1220:	1009883a 	mov	r4,r2
    1224:	000026c0 	call	26c <readData>
    1228:	e0bf91c5 	stb	r2,-441(fp)

        if (y - 16 > line || y - 16 < line - spriteHeight) {
    122c:	e0bf9103 	ldbu	r2,-444(fp)
    1230:	10bffc04 	addi	r2,r2,-16
    1234:	e0fff517 	ldw	r3,-44(fp)
    1238:	18801a16 	blt	r3,r2,12a4 <drawSprites+0x160>
    123c:	e0bf9103 	ldbu	r2,-444(fp)
    1240:	10fffc04 	addi	r3,r2,-16
    1244:	e13ff517 	ldw	r4,-44(fp)
    1248:	e0bf9017 	ldw	r2,-448(fp)
    124c:	2085c83a 	sub	r2,r4,r2
    1250:	18801416 	blt	r3,r2,12a4 <drawSprites+0x160>
            continue;
        }

        Sprite s;
        s.x = x;
    1254:	e0bf9143 	ldbu	r2,-443(fp)
    1258:	e0bff105 	stb	r2,-60(fp)
        s.y = y;
    125c:	e0bf9103 	ldbu	r2,-444(fp)
    1260:	e0bff145 	stb	r2,-59(fp)
        s.index = index;
    1264:	e0bf9183 	ldbu	r2,-442(fp)
    1268:	e0bff185 	stb	r2,-58(fp)
        s.flags = flags;
    126c:	e0bf91c3 	ldbu	r2,-441(fp)
    1270:	e0bff1c5 	stb	r2,-57(fp)

        sprites[counter] = s;
    1274:	e0bf8d17 	ldw	r2,-460(fp)
    1278:	1085883a 	add	r2,r2,r2
    127c:	1085883a 	add	r2,r2,r2
    1280:	e0ff8d04 	addi	r3,fp,-460
    1284:	1885883a 	add	r2,r3,r2
    1288:	10800b04 	addi	r2,r2,44
    128c:	e0fff117 	ldw	r3,-60(fp)
    1290:	10c00015 	stw	r3,0(r2)
        counter++;
    1294:	e0bf8d17 	ldw	r2,-460(fp)
    1298:	10800044 	addi	r2,r2,1
    129c:	e0bf8d15 	stw	r2,-460(fp)
    12a0:	00000106 	br	12a8 <drawSprites+0x164>
        byte x = readData(i+1);
        byte index = readData(i+2);
        byte flags = readData(i+3);

        if (y - 16 > line || y - 16 < line - spriteHeight) {
            continue;
    12a4:	0001883a 	nop
    int spriteHeight = ((LCDC >> 2) & 0x1) == 1 ? 16 : 8;

    Sprite sprites[9];
    int counter = 0;

    for (word i = gpu->OAM_START; i < gpu->OAM_END && counter < 9; i += 4) {
    12a8:	e0bf8e0b 	ldhu	r2,-456(fp)
    12ac:	10800104 	addi	r2,r2,4
    12b0:	e0bf8e0d 	sth	r2,-456(fp)
    12b4:	e0bff317 	ldw	r2,-52(fp)
    12b8:	1080060b 	ldhu	r2,24(r2)
    12bc:	10bfffcc 	andi	r2,r2,65535
    12c0:	e0ff8e0b 	ldhu	r3,-456(fp)
    12c4:	1880032e 	bgeu	r3,r2,12d4 <drawSprites+0x190>
    12c8:	e0bf8d17 	ldw	r2,-460(fp)
    12cc:	10800250 	cmplti	r2,r2,9
    12d0:	103fc01e 	bne	r2,zero,11d4 <__alt_data_end+0xfc0011d4>

        sprites[counter] = s;
        counter++;
    }

    if (counter == 0) return;
    12d4:	e0bf8d17 	ldw	r2,-460(fp)
    12d8:	10006b26 	beq	r2,zero,1488 <drawSprites+0x344>

    // cache object to store read tiles from this frame
//    byte cacheTile[100][16];
    SpriteLine spriteLineBuffer[160];

    for (int i = 0; i < 9; i++) {
    12dc:	e03f8f15 	stw	zero,-452(fp)
    12e0:	00005e06 	br	145c <drawSprites+0x318>
    12e4:	d805883a 	mov	r2,sp
    12e8:	e0bff715 	stw	r2,-36(fp)
        Sprite sprite = sprites[i];
    12ec:	e0bf8f17 	ldw	r2,-452(fp)
    12f0:	1085883a 	add	r2,r2,r2
    12f4:	1085883a 	add	r2,r2,r2
    12f8:	e0ff8d04 	addi	r3,fp,-460
    12fc:	1885883a 	add	r2,r3,r2
    1300:	10800b04 	addi	r2,r2,44
    1304:	10800017 	ldw	r2,0(r2)
    1308:	e0bff215 	stw	r2,-56(fp)
        int tileLine = line - sprite.y + 16;
    130c:	e0bff243 	ldbu	r2,-55(fp)
    1310:	10803fcc 	andi	r2,r2,255
    1314:	e0fff517 	ldw	r3,-44(fp)
    1318:	1885c83a 	sub	r2,r3,r2
    131c:	10800404 	addi	r2,r2,16
    1320:	e0bf9215 	stw	r2,-440(fp)
        byte paletteNumber = (sprite.flags >> 4) & 0x1;
    1324:	e0bff2c3 	ldbu	r2,-53(fp)
    1328:	10803fcc 	andi	r2,r2,255
    132c:	1004d13a 	srli	r2,r2,4
    1330:	1080004c 	andi	r2,r2,1
    1334:	e0bf9305 	stb	r2,-436(fp)
        int xflip = (sprite.flags >> 5) & 0x1;
    1338:	e0bff2c3 	ldbu	r2,-53(fp)
    133c:	10803fcc 	andi	r2,r2,255
    1340:	1004d17a 	srli	r2,r2,5
    1344:	10803fcc 	andi	r2,r2,255
    1348:	1080004c 	andi	r2,r2,1
    134c:	e0bf9415 	stw	r2,-432(fp)
        int yflip = (sprite.flags >> 6) & 0x1;
    1350:	e0bff2c3 	ldbu	r2,-53(fp)
    1354:	10803fcc 	andi	r2,r2,255
    1358:	1004d1ba 	srli	r2,r2,6
    135c:	10803fcc 	andi	r2,r2,255
    1360:	1080004c 	andi	r2,r2,1
    1364:	e0bf9515 	stw	r2,-428(fp)
        byte tileData[spriteHeight * 2];
    1368:	e0bf9017 	ldw	r2,-448(fp)
    136c:	1085883a 	add	r2,r2,r2
    1370:	10ffffc4 	addi	r3,r2,-1
    1374:	e0ff9615 	stw	r3,-424(fp)
    1378:	1007883a 	mov	r3,r2
    137c:	1829883a 	mov	r20,r3
    1380:	002b883a 	mov	r21,zero
    1384:	a006d77a 	srli	r3,r20,29
    1388:	a82290fa 	slli	r17,r21,3
    138c:	1c62b03a 	or	r17,r3,r17
    1390:	a02090fa 	slli	r16,r20,3
    1394:	1007883a 	mov	r3,r2
    1398:	182d883a 	mov	r22,r3
    139c:	002f883a 	mov	r23,zero
    13a0:	b006d77a 	srli	r3,r22,29
    13a4:	b82690fa 	slli	r19,r23,3
    13a8:	1ce6b03a 	or	r19,r3,r19
    13ac:	b02490fa 	slli	r18,r22,3
    13b0:	108000c4 	addi	r2,r2,3
    13b4:	1004d0ba 	srli	r2,r2,2
    13b8:	1085883a 	add	r2,r2,r2
    13bc:	1085883a 	add	r2,r2,r2
    13c0:	d8b7c83a 	sub	sp,sp,r2
    13c4:	d8800104 	addi	r2,sp,4
    13c8:	1005883a 	mov	r2,r2
    13cc:	e0bf9715 	stw	r2,-420(fp)
        readTileData(sprite.index, 0x8000, spriteHeight * 2, tileData);
    13d0:	e0bff283 	ldbu	r2,-54(fp)
    13d4:	10c03fcc 	andi	r3,r2,255
    13d8:	e0bf9017 	ldw	r2,-448(fp)
    13dc:	1085883a 	add	r2,r2,r2
    13e0:	1009883a 	mov	r4,r2
    13e4:	e0bf9717 	ldw	r2,-420(fp)
    13e8:	100f883a 	mov	r7,r2
    13ec:	200d883a 	mov	r6,r4
    13f0:	01600014 	movui	r5,32768
    13f4:	1809883a 	mov	r4,r3
    13f8:	00018880 	call	1888 <readTileData>

        drawTileLine(gpu, tileData, tileLine, xflip, yflip);
    13fc:	e0ff9717 	ldw	r3,-420(fp)
    1400:	e0bf9517 	ldw	r2,-428(fp)
    1404:	d8800015 	stw	r2,0(sp)
    1408:	e1ff9417 	ldw	r7,-432(fp)
    140c:	e1bf9217 	ldw	r6,-440(fp)
    1410:	180b883a 	mov	r5,r3
    1414:	e13ff317 	ldw	r4,-52(fp)
    1418:	0000ff40 	call	ff4 <drawTileLine>
        copySpriteTileLine(spriteLineBuffer, gpu->tileBuffer, sprite.x - 8, paletteNumber);
    141c:	e0bff317 	ldw	r2,-52(fp)
    1420:	10d68f04 	addi	r3,r2,23100
    1424:	e0bff203 	ldbu	r2,-56(fp)
    1428:	10803fcc 	andi	r2,r2,255
    142c:	113ffe04 	addi	r4,r2,-8
    1430:	e17f9303 	ldbu	r5,-436(fp)
    1434:	e0bfa104 	addi	r2,fp,-380
    1438:	280f883a 	mov	r7,r5
    143c:	200d883a 	mov	r6,r4
    1440:	180b883a 	mov	r5,r3
    1444:	1009883a 	mov	r4,r2
    1448:	00014c00 	call	14c0 <copySpriteTileLine>
    144c:	e6fff717 	ldw	sp,-36(fp)

    // cache object to store read tiles from this frame
//    byte cacheTile[100][16];
    SpriteLine spriteLineBuffer[160];

    for (int i = 0; i < 9; i++) {
    1450:	e0bf8f17 	ldw	r2,-452(fp)
    1454:	10800044 	addi	r2,r2,1
    1458:	e0bf8f15 	stw	r2,-452(fp)
    145c:	e0bf8f17 	ldw	r2,-452(fp)
    1460:	10800250 	cmplti	r2,r2,9
    1464:	103f9f1e 	bne	r2,zero,12e4 <__alt_data_end+0xfc0012e4>

        drawTileLine(gpu, tileData, tileLine, xflip, yflip);
        copySpriteTileLine(spriteLineBuffer, gpu->tileBuffer, sprite.x - 8, paletteNumber);
    }

    copySpriteLineToBuffer(gpu, spriteLineBuffer, line);
    1468:	e0bfa104 	addi	r2,fp,-380
    146c:	e1bff517 	ldw	r6,-44(fp)
    1470:	100b883a 	mov	r5,r2
    1474:	e13ff317 	ldw	r4,-52(fp)
    1478:	00015980 	call	1598 <copySpriteLineToBuffer>
    147c:	00000306 	br	148c <drawSprites+0x348>

void copySpriteTileLine(SpriteLine* lineBuffer, byte* tileBuffer, int x, byte palette);
void copySpriteLineToBuffer(GPU* gpu, SpriteLine* spriteLineBuffer, int line);
void drawSprites(GPU* gpu, byte LCDC, int line, byte* lineBuffer) {
    if (((LCDC >> 1) & 0x1) == 0) {
        return;
    1480:	0001883a 	nop
    1484:	00000106 	br	148c <drawSprites+0x348>

        sprites[counter] = s;
        counter++;
    }

    if (counter == 0) return;
    1488:	0001883a 	nop
        drawTileLine(gpu, tileData, tileLine, xflip, yflip);
        copySpriteTileLine(spriteLineBuffer, gpu->tileBuffer, sprite.x - 8, paletteNumber);
    }

    copySpriteLineToBuffer(gpu, spriteLineBuffer, line);
};
    148c:	e6fff804 	addi	sp,fp,-32
    1490:	dfc00917 	ldw	ra,36(sp)
    1494:	df000817 	ldw	fp,32(sp)
    1498:	ddc00717 	ldw	r23,28(sp)
    149c:	dd800617 	ldw	r22,24(sp)
    14a0:	dd400517 	ldw	r21,20(sp)
    14a4:	dd000417 	ldw	r20,16(sp)
    14a8:	dcc00317 	ldw	r19,12(sp)
    14ac:	dc800217 	ldw	r18,8(sp)
    14b0:	dc400117 	ldw	r17,4(sp)
    14b4:	dc000017 	ldw	r16,0(sp)
    14b8:	dec00a04 	addi	sp,sp,40
    14bc:	f800283a 	ret

000014c0 <copySpriteTileLine>:

void copySpriteTileLine(SpriteLine* lineBuffer, byte* tileBuffer, int x, byte palette) {
    14c0:	defffa04 	addi	sp,sp,-24
    14c4:	df000515 	stw	fp,20(sp)
    14c8:	df000504 	addi	fp,sp,20
    14cc:	e13ffc15 	stw	r4,-16(fp)
    14d0:	e17ffd15 	stw	r5,-12(fp)
    14d4:	e1bffe15 	stw	r6,-8(fp)
    14d8:	3805883a 	mov	r2,r7
    14dc:	e0bfff05 	stb	r2,-4(fp)
    // copy tile line to buffer
    for (int k = 0; k < 8; k++, x++) {
    14e0:	e03ffb15 	stw	zero,-20(fp)
    14e4:	00002406 	br	1578 <copySpriteTileLine+0xb8>
        if (x < 0 || x >= 160 || tileBuffer[k] == 0) continue;
    14e8:	e0bffe17 	ldw	r2,-8(fp)
    14ec:	10001b16 	blt	r2,zero,155c <copySpriteTileLine+0x9c>
    14f0:	e0bffe17 	ldw	r2,-8(fp)
    14f4:	10802808 	cmpgei	r2,r2,160
    14f8:	1000181e 	bne	r2,zero,155c <copySpriteTileLine+0x9c>
    14fc:	e0bffb17 	ldw	r2,-20(fp)
    1500:	e0fffd17 	ldw	r3,-12(fp)
    1504:	1885883a 	add	r2,r3,r2
    1508:	10800003 	ldbu	r2,0(r2)
    150c:	10803fcc 	andi	r2,r2,255
    1510:	10001226 	beq	r2,zero,155c <copySpriteTileLine+0x9c>
        lineBuffer[x].color = tileBuffer[k];
    1514:	e0bffe17 	ldw	r2,-8(fp)
    1518:	1085883a 	add	r2,r2,r2
    151c:	1007883a 	mov	r3,r2
    1520:	e0bffc17 	ldw	r2,-16(fp)
    1524:	10c5883a 	add	r2,r2,r3
    1528:	e0fffb17 	ldw	r3,-20(fp)
    152c:	e13ffd17 	ldw	r4,-12(fp)
    1530:	20c7883a 	add	r3,r4,r3
    1534:	18c00003 	ldbu	r3,0(r3)
    1538:	10c00005 	stb	r3,0(r2)
    	lineBuffer[x].palette = palette;
    153c:	e0bffe17 	ldw	r2,-8(fp)
    1540:	1085883a 	add	r2,r2,r2
    1544:	1007883a 	mov	r3,r2
    1548:	e0bffc17 	ldw	r2,-16(fp)
    154c:	10c5883a 	add	r2,r2,r3
    1550:	e0ffff03 	ldbu	r3,-4(fp)
    1554:	10c00045 	stb	r3,1(r2)
    1558:	00000106 	br	1560 <copySpriteTileLine+0xa0>
};

void copySpriteTileLine(SpriteLine* lineBuffer, byte* tileBuffer, int x, byte palette) {
    // copy tile line to buffer
    for (int k = 0; k < 8; k++, x++) {
        if (x < 0 || x >= 160 || tileBuffer[k] == 0) continue;
    155c:	0001883a 	nop
    copySpriteLineToBuffer(gpu, spriteLineBuffer, line);
};

void copySpriteTileLine(SpriteLine* lineBuffer, byte* tileBuffer, int x, byte palette) {
    // copy tile line to buffer
    for (int k = 0; k < 8; k++, x++) {
    1560:	e0bffb17 	ldw	r2,-20(fp)
    1564:	10800044 	addi	r2,r2,1
    1568:	e0bffb15 	stw	r2,-20(fp)
    156c:	e0bffe17 	ldw	r2,-8(fp)
    1570:	10800044 	addi	r2,r2,1
    1574:	e0bffe15 	stw	r2,-8(fp)
    1578:	e0bffb17 	ldw	r2,-20(fp)
    157c:	10800210 	cmplti	r2,r2,8
    1580:	103fd91e 	bne	r2,zero,14e8 <__alt_data_end+0xfc0014e8>
        if (x < 0 || x >= 160 || tileBuffer[k] == 0) continue;
        lineBuffer[x].color = tileBuffer[k];
    	lineBuffer[x].palette = palette;
    }
}
    1584:	0001883a 	nop
    1588:	e037883a 	mov	sp,fp
    158c:	df000017 	ldw	fp,0(sp)
    1590:	dec00104 	addi	sp,sp,4
    1594:	f800283a 	ret

00001598 <copySpriteLineToBuffer>:
void copySpriteLineToBuffer(GPU* gpu, SpriteLine* spriteLineBuffer, int line) {
    1598:	defff704 	addi	sp,sp,-36
    159c:	dfc00815 	stw	ra,32(sp)
    15a0:	df000715 	stw	fp,28(sp)
    15a4:	df000704 	addi	fp,sp,28
    15a8:	e13ffd15 	stw	r4,-12(fp)
    15ac:	e17ffe15 	stw	r5,-8(fp)
    15b0:	e1bfff15 	stw	r6,-4(fp)
    byte spritePalettes[2][4];
    getPalette(readData(gpu->OBP0), spritePalettes[0]);
    15b4:	e0bffd17 	ldw	r2,-12(fp)
    15b8:	1080038b 	ldhu	r2,14(r2)
    15bc:	10bfffcc 	andi	r2,r2,65535
    15c0:	1009883a 	mov	r4,r2
    15c4:	000026c0 	call	26c <readData>
    15c8:	10803fcc 	andi	r2,r2,255
    15cc:	e0fffa84 	addi	r3,fp,-22
    15d0:	180b883a 	mov	r5,r3
    15d4:	1009883a 	mov	r4,r2
    15d8:	00020780 	call	2078 <getPalette>
    getPalette(readData(gpu->OBP1), spritePalettes[1]);
    15dc:	e0bffd17 	ldw	r2,-12(fp)
    15e0:	1080040b 	ldhu	r2,16(r2)
    15e4:	10bfffcc 	andi	r2,r2,65535
    15e8:	1009883a 	mov	r4,r2
    15ec:	000026c0 	call	26c <readData>
    15f0:	10c03fcc 	andi	r3,r2,255
    15f4:	e0bffa84 	addi	r2,fp,-22
    15f8:	10800104 	addi	r2,r2,4
    15fc:	100b883a 	mov	r5,r2
    1600:	1809883a 	mov	r4,r3
    1604:	00020780 	call	2078 <getPalette>

    for (int x = 0; x < 160; x++) {
    1608:	e03ff915 	stw	zero,-28(fp)
    160c:	00002406 	br	16a0 <copySpriteLineToBuffer+0x108>
//        if (spriteLineBuffer[x] == 0) continue; TODO: DOn;t know how to implement Maybe its fine
        byte color = spriteLineBuffer[x].color;
    1610:	e0bff917 	ldw	r2,-28(fp)
    1614:	1085883a 	add	r2,r2,r2
    1618:	1007883a 	mov	r3,r2
    161c:	e0bffe17 	ldw	r2,-8(fp)
    1620:	10c5883a 	add	r2,r2,r3
    1624:	10800003 	ldbu	r2,0(r2)
    1628:	e0bffa05 	stb	r2,-24(fp)
        if (color == 0) continue;
    162c:	e0bffa03 	ldbu	r2,-24(fp)
    1630:	10001726 	beq	r2,zero,1690 <copySpriteLineToBuffer+0xf8>
        byte paletteNumber = spriteLineBuffer[x].palette;
    1634:	e0bff917 	ldw	r2,-28(fp)
    1638:	1085883a 	add	r2,r2,r2
    163c:	1007883a 	mov	r3,r2
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10c5883a 	add	r2,r2,r3
    1648:	10800043 	ldbu	r2,1(r2)
    164c:	e0bffa45 	stb	r2,-23(fp)
        drawPixel(gpu, x, line, spritePalettes[paletteNumber][color]);
    1650:	e0bffa43 	ldbu	r2,-23(fp)
    1654:	e0fffa03 	ldbu	r3,-24(fp)
    1658:	1085883a 	add	r2,r2,r2
    165c:	1085883a 	add	r2,r2,r2
    1660:	e13ff904 	addi	r4,fp,-28
    1664:	2085883a 	add	r2,r4,r2
    1668:	10c5883a 	add	r2,r2,r3
    166c:	10800184 	addi	r2,r2,6
    1670:	10800003 	ldbu	r2,0(r2)
    1674:	10803fcc 	andi	r2,r2,255
    1678:	100f883a 	mov	r7,r2
    167c:	e1bfff17 	ldw	r6,-4(fp)
    1680:	e17ff917 	ldw	r5,-28(fp)
    1684:	e13ffd17 	ldw	r4,-12(fp)
    1688:	0001fb80 	call	1fb8 <drawPixel>
    168c:	00000106 	br	1694 <copySpriteLineToBuffer+0xfc>
    getPalette(readData(gpu->OBP1), spritePalettes[1]);

    for (int x = 0; x < 160; x++) {
//        if (spriteLineBuffer[x] == 0) continue; TODO: DOn;t know how to implement Maybe its fine
        byte color = spriteLineBuffer[x].color;
        if (color == 0) continue;
    1690:	0001883a 	nop
void copySpriteLineToBuffer(GPU* gpu, SpriteLine* spriteLineBuffer, int line) {
    byte spritePalettes[2][4];
    getPalette(readData(gpu->OBP0), spritePalettes[0]);
    getPalette(readData(gpu->OBP1), spritePalettes[1]);

    for (int x = 0; x < 160; x++) {
    1694:	e0bff917 	ldw	r2,-28(fp)
    1698:	10800044 	addi	r2,r2,1
    169c:	e0bff915 	stw	r2,-28(fp)
    16a0:	e0bff917 	ldw	r2,-28(fp)
    16a4:	10802810 	cmplti	r2,r2,160
    16a8:	103fd91e 	bne	r2,zero,1610 <__alt_data_end+0xfc001610>
        byte color = spriteLineBuffer[x].color;
        if (color == 0) continue;
        byte paletteNumber = spriteLineBuffer[x].palette;
        drawPixel(gpu, x, line, spritePalettes[paletteNumber][color]);
    }
}
    16ac:	0001883a 	nop
    16b0:	e037883a 	mov	sp,fp
    16b4:	dfc00117 	ldw	ra,4(sp)
    16b8:	df000017 	ldw	fp,0(sp)
    16bc:	dec00204 	addi	sp,sp,8
    16c0:	f800283a 	ret

000016c4 <drawTile>:

void drawTile(byte* tileData, int x, int y, byte* buffer, int bufferWidth, int xflip, int yflip, int spriteMode) {
    16c4:	defff004 	addi	sp,sp,-64
    16c8:	dfc00f15 	stw	ra,60(sp)
    16cc:	df000e15 	stw	fp,56(sp)
    16d0:	dc000d15 	stw	r16,52(sp)
    16d4:	df000e04 	addi	fp,sp,56
    16d8:	e13ffb15 	stw	r4,-20(fp)
    16dc:	e17ffc15 	stw	r5,-16(fp)
    16e0:	e1bffd15 	stw	r6,-12(fp)
    16e4:	e1fffe15 	stw	r7,-8(fp)
    xflip = xflip | 0;
    yflip = yflip | 0;
    spriteMode = spriteMode | 0;
    int byteIndex = 0;
    16e8:	e03ff215 	stw	zero,-56(fp)
    for (int line = 0; line < 8; line++) {
    16ec:	e03ff315 	stw	zero,-52(fp)
    16f0:	00005b06 	br	1860 <drawTile+0x19c>
        int l = yflip == 1 ? 7 - line : line;
    16f4:	e0800417 	ldw	r2,16(fp)
    16f8:	10800058 	cmpnei	r2,r2,1
    16fc:	1000041e 	bne	r2,zero,1710 <drawTile+0x4c>
    1700:	00c001c4 	movi	r3,7
    1704:	e0bff317 	ldw	r2,-52(fp)
    1708:	1885c83a 	sub	r2,r3,r2
    170c:	00000106 	br	1714 <drawTile+0x50>
    1710:	e0bff317 	ldw	r2,-52(fp)
    1714:	e0bff515 	stw	r2,-44(fp)
        byte b1 = tileData[byteIndex++];
    1718:	e0bff217 	ldw	r2,-56(fp)
    171c:	10c00044 	addi	r3,r2,1
    1720:	e0fff215 	stw	r3,-56(fp)
    1724:	1007883a 	mov	r3,r2
    1728:	e0bffb17 	ldw	r2,-20(fp)
    172c:	10c5883a 	add	r2,r2,r3
    1730:	10800003 	ldbu	r2,0(r2)
    1734:	e0bff605 	stb	r2,-40(fp)
        byte b2 = tileData[byteIndex++];
    1738:	e0bff217 	ldw	r2,-56(fp)
    173c:	10c00044 	addi	r3,r2,1
    1740:	e0fff215 	stw	r3,-56(fp)
    1744:	1007883a 	mov	r3,r2
    1748:	e0bffb17 	ldw	r2,-20(fp)
    174c:	10c5883a 	add	r2,r2,r3
    1750:	10800003 	ldbu	r2,0(r2)
    1754:	e0bff645 	stb	r2,-39(fp)

        for (int pixel = 0; pixel < 8; pixel++) {
    1758:	e03ff415 	stw	zero,-48(fp)
    175c:	00003a06 	br	1848 <drawTile+0x184>
            int mask = (1 << (7-pixel));
    1760:	00c001c4 	movi	r3,7
    1764:	e0bff417 	ldw	r2,-48(fp)
    1768:	1885c83a 	sub	r2,r3,r2
    176c:	00c00044 	movi	r3,1
    1770:	1884983a 	sll	r2,r3,r2
    1774:	e0bff715 	stw	r2,-36(fp)
            byte colorValue = ((b1 & mask) >> (7-pixel)) + ((b2 & mask) >> (7-pixel))*2;
    1778:	e0fff603 	ldbu	r3,-40(fp)
    177c:	e0bff717 	ldw	r2,-36(fp)
    1780:	1886703a 	and	r3,r3,r2
    1784:	010001c4 	movi	r4,7
    1788:	e0bff417 	ldw	r2,-48(fp)
    178c:	2085c83a 	sub	r2,r4,r2
    1790:	1885d83a 	sra	r2,r3,r2
    1794:	100b883a 	mov	r5,r2
    1798:	e0fff643 	ldbu	r3,-39(fp)
    179c:	e0bff717 	ldw	r2,-36(fp)
    17a0:	1886703a 	and	r3,r3,r2
    17a4:	010001c4 	movi	r4,7
    17a8:	e0bff417 	ldw	r2,-48(fp)
    17ac:	2085c83a 	sub	r2,r4,r2
    17b0:	1885d83a 	sra	r2,r3,r2
    17b4:	1085883a 	add	r2,r2,r2
    17b8:	2885883a 	add	r2,r5,r2
    17bc:	e0bff805 	stb	r2,-32(fp)
            if (spriteMode && colorValue == 0) continue;
    17c0:	e0800517 	ldw	r2,20(fp)
    17c4:	10000226 	beq	r2,zero,17d0 <drawTile+0x10c>
    17c8:	e0bff803 	ldbu	r2,-32(fp)
    17cc:	10001a26 	beq	r2,zero,1838 <drawTile+0x174>
            int p = xflip == 1 ? 7 - pixel : pixel;
    17d0:	e0800317 	ldw	r2,12(fp)
    17d4:	10800058 	cmpnei	r2,r2,1
    17d8:	1000041e 	bne	r2,zero,17ec <drawTile+0x128>
    17dc:	00c001c4 	movi	r3,7
    17e0:	e0bff417 	ldw	r2,-48(fp)
    17e4:	1885c83a 	sub	r2,r3,r2
    17e8:	00000106 	br	17f0 <drawTile+0x12c>
    17ec:	e0bff417 	ldw	r2,-48(fp)
    17f0:	e0bff915 	stw	r2,-28(fp)
            int bufferIndex = (x + p) + (y + l) * bufferWidth;
    17f4:	e0fffc17 	ldw	r3,-16(fp)
    17f8:	e0bff917 	ldw	r2,-28(fp)
    17fc:	18a1883a 	add	r16,r3,r2
    1800:	e0fffd17 	ldw	r3,-12(fp)
    1804:	e0bff517 	ldw	r2,-44(fp)
    1808:	1885883a 	add	r2,r3,r2
    180c:	e1400217 	ldw	r5,8(fp)
    1810:	1009883a 	mov	r4,r2
    1814:	000cefc0 	call	cefc <__mulsi3>
    1818:	8085883a 	add	r2,r16,r2
    181c:	e0bffa15 	stw	r2,-24(fp)
            buffer[bufferIndex] = colorValue;
    1820:	e0bffa17 	ldw	r2,-24(fp)
    1824:	e0fffe17 	ldw	r3,-8(fp)
    1828:	1885883a 	add	r2,r3,r2
    182c:	e0fff803 	ldbu	r3,-32(fp)
    1830:	10c00005 	stb	r3,0(r2)
    1834:	00000106 	br	183c <drawTile+0x178>
        byte b2 = tileData[byteIndex++];

        for (int pixel = 0; pixel < 8; pixel++) {
            int mask = (1 << (7-pixel));
            byte colorValue = ((b1 & mask) >> (7-pixel)) + ((b2 & mask) >> (7-pixel))*2;
            if (spriteMode && colorValue == 0) continue;
    1838:	0001883a 	nop
    for (int line = 0; line < 8; line++) {
        int l = yflip == 1 ? 7 - line : line;
        byte b1 = tileData[byteIndex++];
        byte b2 = tileData[byteIndex++];

        for (int pixel = 0; pixel < 8; pixel++) {
    183c:	e0bff417 	ldw	r2,-48(fp)
    1840:	10800044 	addi	r2,r2,1
    1844:	e0bff415 	stw	r2,-48(fp)
    1848:	e0bff417 	ldw	r2,-48(fp)
    184c:	10800210 	cmplti	r2,r2,8
    1850:	103fc31e 	bne	r2,zero,1760 <__alt_data_end+0xfc001760>
void drawTile(byte* tileData, int x, int y, byte* buffer, int bufferWidth, int xflip, int yflip, int spriteMode) {
    xflip = xflip | 0;
    yflip = yflip | 0;
    spriteMode = spriteMode | 0;
    int byteIndex = 0;
    for (int line = 0; line < 8; line++) {
    1854:	e0bff317 	ldw	r2,-52(fp)
    1858:	10800044 	addi	r2,r2,1
    185c:	e0bff315 	stw	r2,-52(fp)
    1860:	e0bff317 	ldw	r2,-52(fp)
    1864:	10800210 	cmplti	r2,r2,8
    1868:	103fa21e 	bne	r2,zero,16f4 <__alt_data_end+0xfc0016f4>
            int p = xflip == 1 ? 7 - pixel : pixel;
            int bufferIndex = (x + p) + (y + l) * bufferWidth;
            buffer[bufferIndex] = colorValue;
        }
    }
}
    186c:	0001883a 	nop
    1870:	e6ffff04 	addi	sp,fp,-4
    1874:	dfc00217 	ldw	ra,8(sp)
    1878:	df000117 	ldw	fp,4(sp)
    187c:	dc000017 	ldw	r16,0(sp)
    1880:	dec00304 	addi	sp,sp,12
    1884:	f800283a 	ret

00001888 <readTileData>:

void readTileData(int tileIndex, word dataStart, int tileSize, byte* tileData) {
    1888:	defff604 	addi	sp,sp,-40
    188c:	dfc00915 	stw	ra,36(sp)
    1890:	df000815 	stw	fp,32(sp)
    1894:	dc000715 	stw	r16,28(sp)
    1898:	df000804 	addi	fp,sp,32
    189c:	e13ffb15 	stw	r4,-20(fp)
    18a0:	2805883a 	mov	r2,r5
    18a4:	e1bffd15 	stw	r6,-12(fp)
    18a8:	e1fffe15 	stw	r7,-8(fp)
    18ac:	e0bffc0d 	sth	r2,-16(fp)
    word tileAddressStart = dataStart + (tileIndex * 0x10);
    18b0:	e0bffb17 	ldw	r2,-20(fp)
    18b4:	1004913a 	slli	r2,r2,4
    18b8:	1007883a 	mov	r3,r2
    18bc:	e0bffc0b 	ldhu	r2,-16(fp)
    18c0:	1885883a 	add	r2,r3,r2
    18c4:	e0bffa0d 	sth	r2,-24(fp)
    int counter = 0;
    18c8:	e03ff815 	stw	zero,-32(fp)
    for (int i = tileAddressStart; i < tileAddressStart + tileSize; i++) {
    18cc:	e0bffa0b 	ldhu	r2,-24(fp)
    18d0:	e0bff915 	stw	r2,-28(fp)
    18d4:	00000e06 	br	1910 <readTileData+0x88>
        tileData[counter] = readData(i);
    18d8:	e0bff817 	ldw	r2,-32(fp)
    18dc:	e0fffe17 	ldw	r3,-8(fp)
    18e0:	18a1883a 	add	r16,r3,r2
    18e4:	e0bff917 	ldw	r2,-28(fp)
    18e8:	10bfffcc 	andi	r2,r2,65535
    18ec:	1009883a 	mov	r4,r2
    18f0:	000026c0 	call	26c <readData>
    18f4:	80800005 	stb	r2,0(r16)
        counter++;
    18f8:	e0bff817 	ldw	r2,-32(fp)
    18fc:	10800044 	addi	r2,r2,1
    1900:	e0bff815 	stw	r2,-32(fp)
}

void readTileData(int tileIndex, word dataStart, int tileSize, byte* tileData) {
    word tileAddressStart = dataStart + (tileIndex * 0x10);
    int counter = 0;
    for (int i = tileAddressStart; i < tileAddressStart + tileSize; i++) {
    1904:	e0bff917 	ldw	r2,-28(fp)
    1908:	10800044 	addi	r2,r2,1
    190c:	e0bff915 	stw	r2,-28(fp)
    1910:	e0fffa0b 	ldhu	r3,-24(fp)
    1914:	e0bffd17 	ldw	r2,-12(fp)
    1918:	1885883a 	add	r2,r3,r2
    191c:	e0fff917 	ldw	r3,-28(fp)
    1920:	18bfed16 	blt	r3,r2,18d8 <__alt_data_end+0xfc0018d8>
        tileData[counter] = readData(i);
        counter++;
    }

}
    1924:	0001883a 	nop
    1928:	e6ffff04 	addi	sp,fp,-4
    192c:	dfc00217 	ldw	ra,8(sp)
    1930:	df000117 	ldw	fp,4(sp)
    1934:	dc000017 	ldw	r16,0(sp)
    1938:	dec00304 	addi	sp,sp,12
    193c:	f800283a 	ret

00001940 <drawWindow>:

void drawWindow(GPU* gpu, byte LCDC) {
    1940:	defffe04 	addi	sp,sp,-8
    1944:	dfc00115 	stw	ra,4(sp)
    1948:	df000015 	stw	fp,0(sp)
    194c:	d839883a 	mov	fp,sp
    1950:	023ffff4 	movhi	r8,65535
    1954:	423fec04 	addi	r8,r8,-80
    1958:	da37883a 	add	sp,sp,r8
    195c:	00800074 	movhi	r2,1
    1960:	10800e04 	addi	r2,r2,56
    1964:	00fffff4 	movhi	r3,65535
    1968:	18fff004 	addi	r3,r3,-64
    196c:	1f07883a 	add	r3,r3,fp
    1970:	1885883a 	add	r2,r3,r2
    1974:	11000015 	stw	r4,0(r2)
    1978:	2807883a 	mov	r3,r5
    197c:	00800074 	movhi	r2,1
    1980:	10800f04 	addi	r2,r2,60
    1984:	013ffff4 	movhi	r4,65535
    1988:	213ff004 	addi	r4,r4,-64
    198c:	2709883a 	add	r4,r4,fp
    1990:	2085883a 	add	r2,r4,r2
    1994:	10c00005 	stb	r3,0(r2)
    if (((LCDC >> 5) & 0x1) == 0) {
    1998:	00800074 	movhi	r2,1
    199c:	10800f04 	addi	r2,r2,60
    19a0:	017ffff4 	movhi	r5,65535
    19a4:	297ff004 	addi	r5,r5,-64
    19a8:	2f0b883a 	add	r5,r5,fp
    19ac:	2885883a 	add	r2,r5,r2
    19b0:	10800003 	ldbu	r2,0(r2)
    19b4:	1004d17a 	srli	r2,r2,5
    19b8:	10803fcc 	andi	r2,r2,255
    19bc:	1080004c 	andi	r2,r2,1
    19c0:	10017726 	beq	r2,zero,1fa0 <drawWindow+0x660>
        return;
    }

    byte buffer[65536];
    word mapStart = (((LCDC >> 6) & 0x1) == 1) ? gpu->START_1 : gpu->START_0;
    19c4:	00800074 	movhi	r2,1
    19c8:	10800f04 	addi	r2,r2,60
    19cc:	01bffff4 	movhi	r6,65535
    19d0:	31bff004 	addi	r6,r6,-64
    19d4:	370d883a 	add	r6,r6,fp
    19d8:	3085883a 	add	r2,r6,r2
    19dc:	10800003 	ldbu	r2,0(r2)
    19e0:	1004d1ba 	srli	r2,r2,6
    19e4:	10803fcc 	andi	r2,r2,255
    19e8:	1080004c 	andi	r2,r2,1
    19ec:	10000926 	beq	r2,zero,1a14 <drawWindow+0xd4>
    19f0:	00800074 	movhi	r2,1
    19f4:	10800e04 	addi	r2,r2,56
    19f8:	01fffff4 	movhi	r7,65535
    19fc:	39fff004 	addi	r7,r7,-64
    1a00:	3f0f883a 	add	r7,r7,fp
    1a04:	3885883a 	add	r2,r7,r2
    1a08:	10800017 	ldw	r2,0(r2)
    1a0c:	1080098b 	ldhu	r2,38(r2)
    1a10:	00000806 	br	1a34 <drawWindow+0xf4>
    1a14:	00800074 	movhi	r2,1
    1a18:	10800e04 	addi	r2,r2,56
    1a1c:	00fffff4 	movhi	r3,65535
    1a20:	18fff004 	addi	r3,r3,-64
    1a24:	1f07883a 	add	r3,r3,fp
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	1080090b 	ldhu	r2,36(r2)
    1a34:	013ffff4 	movhi	r4,65535
    1a38:	213ff604 	addi	r4,r4,-40
    1a3c:	2709883a 	add	r4,r4,fp
    1a40:	2080000d 	sth	r2,0(r4)

    word dataStart;
    bool signedIndex = false;
    1a44:	017ffff4 	movhi	r5,65535
    1a48:	297ff104 	addi	r5,r5,-60
    1a4c:	2f0b883a 	add	r5,r5,fp
    1a50:	28000015 	stw	zero,0(r5)
    if (((LCDC >> 4) & 0x1) == 1) {
    1a54:	00800074 	movhi	r2,1
    1a58:	10800f04 	addi	r2,r2,60
    1a5c:	01bffff4 	movhi	r6,65535
    1a60:	31bff004 	addi	r6,r6,-64
    1a64:	370d883a 	add	r6,r6,fp
    1a68:	3085883a 	add	r2,r6,r2
    1a6c:	10800003 	ldbu	r2,0(r2)
    1a70:	1004d13a 	srli	r2,r2,4
    1a74:	10803fcc 	andi	r2,r2,255
    1a78:	1080004c 	andi	r2,r2,1
    1a7c:	10000626 	beq	r2,zero,1a98 <drawWindow+0x158>
        dataStart = 0x8000;
    1a80:	00a00004 	movi	r2,-32768
    1a84:	01fffff4 	movhi	r7,65535
    1a88:	39fff004 	addi	r7,r7,-64
    1a8c:	3f0f883a 	add	r7,r7,fp
    1a90:	3880000d 	sth	r2,0(r7)
    1a94:	00000a06 	br	1ac0 <drawWindow+0x180>
    } else {
        dataStart = 0x8800;
    1a98:	00a20004 	movi	r2,-30720
    1a9c:	00fffff4 	movhi	r3,65535
    1aa0:	18fff004 	addi	r3,r3,-64
    1aa4:	1f07883a 	add	r3,r3,fp
    1aa8:	1880000d 	sth	r2,0(r3)
        signedIndex = true;
    1aac:	00800044 	movi	r2,1
    1ab0:	013ffff4 	movhi	r4,65535
    1ab4:	213ff104 	addi	r4,r4,-60
    1ab8:	2709883a 	add	r4,r4,fp
    1abc:	20800015 	stw	r2,0(r4)
    }

    // browse Window tilemap
    for (int i = 0; i < gpu->LENGTH; i++) {
    1ac0:	017ffff4 	movhi	r5,65535
    1ac4:	297ff204 	addi	r5,r5,-56
    1ac8:	2f0b883a 	add	r5,r5,fp
    1acc:	28000015 	stw	zero,0(r5)
    1ad0:	00007f06 	br	1cd0 <drawWindow+0x390>
        byte tileIndex = readData(i + mapStart);
    1ad4:	01bffff4 	movhi	r6,65535
    1ad8:	31bff204 	addi	r6,r6,-56
    1adc:	370d883a 	add	r6,r6,fp
    1ae0:	30800017 	ldw	r2,0(r6)
    1ae4:	1007883a 	mov	r3,r2
    1ae8:	01fffff4 	movhi	r7,65535
    1aec:	39fff604 	addi	r7,r7,-40
    1af0:	3f0f883a 	add	r7,r7,fp
    1af4:	3880000b 	ldhu	r2,0(r7)
    1af8:	1885883a 	add	r2,r3,r2
    1afc:	10bfffcc 	andi	r2,r2,65535
    1b00:	1009883a 	mov	r4,r2
    1b04:	000026c0 	call	26c <readData>
    1b08:	00fffff4 	movhi	r3,65535
    1b0c:	18fff304 	addi	r3,r3,-52
    1b10:	1f07883a 	add	r3,r3,fp
    1b14:	18800005 	stb	r2,0(r3)

        if (signedIndex) {
    1b18:	013ffff4 	movhi	r4,65535
    1b1c:	213ff104 	addi	r4,r4,-60
    1b20:	2709883a 	add	r4,r4,fp
    1b24:	20800017 	ldw	r2,0(r4)
    1b28:	10000b26 	beq	r2,zero,1b58 <drawWindow+0x218>
            tileIndex = getSignedValue(tileIndex) + 128;
    1b2c:	017ffff4 	movhi	r5,65535
    1b30:	297ff304 	addi	r5,r5,-52
    1b34:	2f0b883a 	add	r5,r5,fp
    1b38:	28800003 	ldbu	r2,0(r5)
    1b3c:	1009883a 	mov	r4,r2
    1b40:	000327c0 	call	327c <getSignedValue>
    1b44:	10bfe004 	addi	r2,r2,-128
    1b48:	01bffff4 	movhi	r6,65535
    1b4c:	31bff304 	addi	r6,r6,-52
    1b50:	370d883a 	add	r6,r6,fp
    1b54:	30800005 	stb	r2,0(r6)
        }
        byte tileData[16];
        readTileData(tileIndex, dataStart, 16, tileData);
    1b58:	01fffff4 	movhi	r7,65535
    1b5c:	39fff304 	addi	r7,r7,-52
    1b60:	3f0f883a 	add	r7,r7,fp
    1b64:	38c00003 	ldbu	r3,0(r7)
    1b68:	00bffff4 	movhi	r2,65535
    1b6c:	10bff004 	addi	r2,r2,-64
    1b70:	1705883a 	add	r2,r2,fp
    1b74:	1100000b 	ldhu	r4,0(r2)
    1b78:	00800074 	movhi	r2,1
    1b7c:	108009c4 	addi	r2,r2,39
    1b80:	017ffff4 	movhi	r5,65535
    1b84:	297ff004 	addi	r5,r5,-64
    1b88:	2f0b883a 	add	r5,r5,fp
    1b8c:	2885883a 	add	r2,r5,r2
    1b90:	100f883a 	mov	r7,r2
    1b94:	01800404 	movi	r6,16
    1b98:	200b883a 	mov	r5,r4
    1b9c:	1809883a 	mov	r4,r3
    1ba0:	00018880 	call	1888 <readTileData>
        int x = i % gpu->WIDTH;
    1ba4:	00800074 	movhi	r2,1
    1ba8:	10800e04 	addi	r2,r2,56
    1bac:	01bffff4 	movhi	r6,65535
    1bb0:	31bff004 	addi	r6,r6,-64
    1bb4:	370d883a 	add	r6,r6,fp
    1bb8:	3085883a 	add	r2,r6,r2
    1bbc:	10800017 	ldw	r2,0(r2)
    1bc0:	10c00817 	ldw	r3,32(r2)
    1bc4:	01fffff4 	movhi	r7,65535
    1bc8:	39fff204 	addi	r7,r7,-56
    1bcc:	3f0f883a 	add	r7,r7,fp
    1bd0:	38800017 	ldw	r2,0(r7)
    1bd4:	180b883a 	mov	r5,r3
    1bd8:	1009883a 	mov	r4,r2
    1bdc:	000cdcc0 	call	cdcc <__modsi3>
    1be0:	00fffff4 	movhi	r3,65535
    1be4:	18fff704 	addi	r3,r3,-36
    1be8:	1f07883a 	add	r3,r3,fp
    1bec:	18800015 	stw	r2,0(r3)
        int y = (i / gpu->WIDTH) | 0;
    1bf0:	00800074 	movhi	r2,1
    1bf4:	10800e04 	addi	r2,r2,56
    1bf8:	013ffff4 	movhi	r4,65535
    1bfc:	213ff004 	addi	r4,r4,-64
    1c00:	2709883a 	add	r4,r4,fp
    1c04:	2085883a 	add	r2,r4,r2
    1c08:	10800017 	ldw	r2,0(r2)
    1c0c:	10800817 	ldw	r2,32(r2)
    1c10:	100b883a 	mov	r5,r2
    1c14:	01bffff4 	movhi	r6,65535
    1c18:	31bff204 	addi	r6,r6,-56
    1c1c:	370d883a 	add	r6,r6,fp
    1c20:	31000017 	ldw	r4,0(r6)
    1c24:	000cd480 	call	cd48 <__divsi3>
    1c28:	01fffff4 	movhi	r7,65535
    1c2c:	39fff804 	addi	r7,r7,-32
    1c30:	3f0f883a 	add	r7,r7,fp
    1c34:	38800015 	stw	r2,0(r7)
        drawTile(tileData, x * 8, y * 8, buffer, 256, 0, 0, 0);
    1c38:	00fffff4 	movhi	r3,65535
    1c3c:	18fff704 	addi	r3,r3,-36
    1c40:	1f07883a 	add	r3,r3,fp
    1c44:	18800017 	ldw	r2,0(r3)
    1c48:	100890fa 	slli	r4,r2,3
    1c4c:	017ffff4 	movhi	r5,65535
    1c50:	297ff804 	addi	r5,r5,-32
    1c54:	2f0b883a 	add	r5,r5,fp
    1c58:	28800017 	ldw	r2,0(r5)
    1c5c:	100a90fa 	slli	r5,r2,3
    1c60:	01fffff4 	movhi	r7,65535
    1c64:	39fff9c4 	addi	r7,r7,-25
    1c68:	e1cd883a 	add	r6,fp,r7
    1c6c:	00800074 	movhi	r2,1
    1c70:	108009c4 	addi	r2,r2,39
    1c74:	01fffff4 	movhi	r7,65535
    1c78:	39fff004 	addi	r7,r7,-64
    1c7c:	3f0f883a 	add	r7,r7,fp
    1c80:	3887883a 	add	r3,r7,r2
    1c84:	d8000315 	stw	zero,12(sp)
    1c88:	d8000215 	stw	zero,8(sp)
    1c8c:	d8000115 	stw	zero,4(sp)
    1c90:	00804004 	movi	r2,256
    1c94:	d8800015 	stw	r2,0(sp)
    1c98:	300f883a 	mov	r7,r6
    1c9c:	280d883a 	mov	r6,r5
    1ca0:	200b883a 	mov	r5,r4
    1ca4:	1809883a 	mov	r4,r3
    1ca8:	00016c40 	call	16c4 <drawTile>
        dataStart = 0x8800;
        signedIndex = true;
    }

    // browse Window tilemap
    for (int i = 0; i < gpu->LENGTH; i++) {
    1cac:	00fffff4 	movhi	r3,65535
    1cb0:	18fff204 	addi	r3,r3,-56
    1cb4:	1f07883a 	add	r3,r3,fp
    1cb8:	18800017 	ldw	r2,0(r3)
    1cbc:	10800044 	addi	r2,r2,1
    1cc0:	013ffff4 	movhi	r4,65535
    1cc4:	213ff204 	addi	r4,r4,-56
    1cc8:	2709883a 	add	r4,r4,fp
    1ccc:	20800015 	stw	r2,0(r4)
    1cd0:	00800074 	movhi	r2,1
    1cd4:	10800e04 	addi	r2,r2,56
    1cd8:	017ffff4 	movhi	r5,65535
    1cdc:	297ff004 	addi	r5,r5,-64
    1ce0:	2f0b883a 	add	r5,r5,fp
    1ce4:	2885883a 	add	r2,r5,r2
    1ce8:	10800017 	ldw	r2,0(r2)
    1cec:	10800a0b 	ldhu	r2,40(r2)
    1cf0:	10bfffcc 	andi	r2,r2,65535
    1cf4:	01bffff4 	movhi	r6,65535
    1cf8:	31bff204 	addi	r6,r6,-56
    1cfc:	370d883a 	add	r6,r6,fp
    1d00:	30c00017 	ldw	r3,0(r6)
    1d04:	18bf7316 	blt	r3,r2,1ad4 <__alt_data_end+0xfc001ad4>
        int x = i % gpu->WIDTH;
        int y = (i / gpu->WIDTH) | 0;
        drawTile(tileData, x * 8, y * 8, buffer, 256, 0, 0, 0);
    }

    byte wx = readData(gpu->WX) - 7;
    1d08:	00800074 	movhi	r2,1
    1d0c:	10800e04 	addi	r2,r2,56
    1d10:	01fffff4 	movhi	r7,65535
    1d14:	39fff004 	addi	r7,r7,-64
    1d18:	3f0f883a 	add	r7,r7,fp
    1d1c:	3885883a 	add	r2,r7,r2
    1d20:	10800017 	ldw	r2,0(r2)
    1d24:	1080050b 	ldhu	r2,20(r2)
    1d28:	10bfffcc 	andi	r2,r2,65535
    1d2c:	1009883a 	mov	r4,r2
    1d30:	000026c0 	call	26c <readData>
    1d34:	10bffe44 	addi	r2,r2,-7
    1d38:	00fffff4 	movhi	r3,65535
    1d3c:	18fff904 	addi	r3,r3,-28
    1d40:	1f07883a 	add	r3,r3,fp
    1d44:	18800005 	stb	r2,0(r3)
    byte wy = readData(gpu->WY);
    1d48:	00800074 	movhi	r2,1
    1d4c:	10800e04 	addi	r2,r2,56
    1d50:	013ffff4 	movhi	r4,65535
    1d54:	213ff004 	addi	r4,r4,-64
    1d58:	2709883a 	add	r4,r4,fp
    1d5c:	2085883a 	add	r2,r4,r2
    1d60:	10800017 	ldw	r2,0(r2)
    1d64:	1080048b 	ldhu	r2,18(r2)
    1d68:	10bfffcc 	andi	r2,r2,65535
    1d6c:	1009883a 	mov	r4,r2
    1d70:	000026c0 	call	26c <readData>
    1d74:	017ffff4 	movhi	r5,65535
    1d78:	297ff944 	addi	r5,r5,-27
    1d7c:	2f0b883a 	add	r5,r5,fp
    1d80:	28800005 	stb	r2,0(r5)
    for (int x = (0 > -wx) ? 0 : -wx; x < (160 < 160 - wx) ? 160 : 160 - wx; x++) {
    1d84:	01bffff4 	movhi	r6,65535
    1d88:	31bff904 	addi	r6,r6,-28
    1d8c:	370d883a 	add	r6,r6,fp
    1d90:	30800003 	ldbu	r2,0(r6)
    1d94:	0085c83a 	sub	r2,zero,r2
    1d98:	1000010e 	bge	r2,zero,1da0 <drawWindow+0x460>
    1d9c:	0005883a 	mov	r2,zero
    1da0:	01fffff4 	movhi	r7,65535
    1da4:	39fff404 	addi	r7,r7,-48
    1da8:	3f0f883a 	add	r7,r7,fp
    1dac:	38800015 	stw	r2,0(r7)
    1db0:	00006706 	br	1f50 <drawWindow+0x610>
        for (int y = (0 > -wy) ? 0 : -wy; y < (144 < 144 - wy) ? 144 : 144 - wy; y++) {
    1db4:	00fffff4 	movhi	r3,65535
    1db8:	18fff944 	addi	r3,r3,-27
    1dbc:	1f07883a 	add	r3,r3,fp
    1dc0:	18800003 	ldbu	r2,0(r3)
    1dc4:	0085c83a 	sub	r2,zero,r2
    1dc8:	1000010e 	bge	r2,zero,1dd0 <drawWindow+0x490>
    1dcc:	0005883a 	mov	r2,zero
    1dd0:	013ffff4 	movhi	r4,65535
    1dd4:	213ff504 	addi	r4,r4,-44
    1dd8:	2709883a 	add	r4,r4,fp
    1ddc:	20800015 	stw	r2,0(r4)
    1de0:	00003f06 	br	1ee0 <drawWindow+0x5a0>
            byte color = buffer[(x & 255) + (y & 255) * 256];
    1de4:	017ffff4 	movhi	r5,65535
    1de8:	297ff404 	addi	r5,r5,-48
    1dec:	2f0b883a 	add	r5,r5,fp
    1df0:	28800017 	ldw	r2,0(r5)
    1df4:	10c03fcc 	andi	r3,r2,255
    1df8:	01bffff4 	movhi	r6,65535
    1dfc:	31bff504 	addi	r6,r6,-44
    1e00:	370d883a 	add	r6,r6,fp
    1e04:	30800017 	ldw	r2,0(r6)
    1e08:	10803fcc 	andi	r2,r2,255
    1e0c:	1004923a 	slli	r2,r2,8
    1e10:	1885883a 	add	r2,r3,r2
    1e14:	01fffff4 	movhi	r7,65535
    1e18:	39fff9c4 	addi	r7,r7,-25
    1e1c:	e1c7883a 	add	r3,fp,r7
    1e20:	1885883a 	add	r2,r3,r2
    1e24:	10800003 	ldbu	r2,0(r2)
    1e28:	00fffff4 	movhi	r3,65535
    1e2c:	18fff984 	addi	r3,r3,-26
    1e30:	1f07883a 	add	r3,r3,fp
    1e34:	18800005 	stb	r2,0(r3)
            drawPixel(gpu, x + wx, y + wy, color);
    1e38:	013ffff4 	movhi	r4,65535
    1e3c:	213ff904 	addi	r4,r4,-28
    1e40:	2709883a 	add	r4,r4,fp
    1e44:	20c00003 	ldbu	r3,0(r4)
    1e48:	017ffff4 	movhi	r5,65535
    1e4c:	297ff404 	addi	r5,r5,-48
    1e50:	2f0b883a 	add	r5,r5,fp
    1e54:	28800017 	ldw	r2,0(r5)
    1e58:	1889883a 	add	r4,r3,r2
    1e5c:	01bffff4 	movhi	r6,65535
    1e60:	31bff944 	addi	r6,r6,-27
    1e64:	370d883a 	add	r6,r6,fp
    1e68:	30c00003 	ldbu	r3,0(r6)
    1e6c:	01fffff4 	movhi	r7,65535
    1e70:	39fff504 	addi	r7,r7,-44
    1e74:	3f0f883a 	add	r7,r7,fp
    1e78:	38800017 	ldw	r2,0(r7)
    1e7c:	1887883a 	add	r3,r3,r2
    1e80:	00bffff4 	movhi	r2,65535
    1e84:	10bff984 	addi	r2,r2,-26
    1e88:	1705883a 	add	r2,r2,fp
    1e8c:	11400003 	ldbu	r5,0(r2)
    1e90:	00800074 	movhi	r2,1
    1e94:	10800e04 	addi	r2,r2,56
    1e98:	01bffff4 	movhi	r6,65535
    1e9c:	31bff004 	addi	r6,r6,-64
    1ea0:	370d883a 	add	r6,r6,fp
    1ea4:	3085883a 	add	r2,r6,r2
    1ea8:	280f883a 	mov	r7,r5
    1eac:	180d883a 	mov	r6,r3
    1eb0:	200b883a 	mov	r5,r4
    1eb4:	11000017 	ldw	r4,0(r2)
    1eb8:	0001fb80 	call	1fb8 <drawPixel>
    }

    byte wx = readData(gpu->WX) - 7;
    byte wy = readData(gpu->WY);
    for (int x = (0 > -wx) ? 0 : -wx; x < (160 < 160 - wx) ? 160 : 160 - wx; x++) {
        for (int y = (0 > -wy) ? 0 : -wy; y < (144 < 144 - wy) ? 144 : 144 - wy; y++) {
    1ebc:	01fffff4 	movhi	r7,65535
    1ec0:	39fff504 	addi	r7,r7,-44
    1ec4:	3f0f883a 	add	r7,r7,fp
    1ec8:	38800017 	ldw	r2,0(r7)
    1ecc:	10800044 	addi	r2,r2,1
    1ed0:	00fffff4 	movhi	r3,65535
    1ed4:	18fff504 	addi	r3,r3,-44
    1ed8:	1f07883a 	add	r3,r3,fp
    1edc:	18800015 	stw	r2,0(r3)
    1ee0:	013ffff4 	movhi	r4,65535
    1ee4:	213ff944 	addi	r4,r4,-27
    1ee8:	2709883a 	add	r4,r4,fp
    1eec:	20800003 	ldbu	r2,0(r4)
    1ef0:	00c02404 	movi	r3,144
    1ef4:	1885c83a 	sub	r2,r3,r2
    1ef8:	10802448 	cmpgei	r2,r2,145
    1efc:	10803fcc 	andi	r2,r2,255
    1f00:	017ffff4 	movhi	r5,65535
    1f04:	297ff504 	addi	r5,r5,-44
    1f08:	2f0b883a 	add	r5,r5,fp
    1f0c:	28c00017 	ldw	r3,0(r5)
    1f10:	18bfb416 	blt	r3,r2,1de4 <__alt_data_end+0xfc001de4>
    1f14:	01bffff4 	movhi	r6,65535
    1f18:	31bff944 	addi	r6,r6,-27
    1f1c:	370d883a 	add	r6,r6,fp
    1f20:	30800003 	ldbu	r2,0(r6)
    1f24:	10802418 	cmpnei	r2,r2,144
    1f28:	103fae1e 	bne	r2,zero,1de4 <__alt_data_end+0xfc001de4>
        drawTile(tileData, x * 8, y * 8, buffer, 256, 0, 0, 0);
    }

    byte wx = readData(gpu->WX) - 7;
    byte wy = readData(gpu->WY);
    for (int x = (0 > -wx) ? 0 : -wx; x < (160 < 160 - wx) ? 160 : 160 - wx; x++) {
    1f2c:	01fffff4 	movhi	r7,65535
    1f30:	39fff404 	addi	r7,r7,-48
    1f34:	3f0f883a 	add	r7,r7,fp
    1f38:	38800017 	ldw	r2,0(r7)
    1f3c:	10800044 	addi	r2,r2,1
    1f40:	00fffff4 	movhi	r3,65535
    1f44:	18fff404 	addi	r3,r3,-48
    1f48:	1f07883a 	add	r3,r3,fp
    1f4c:	18800015 	stw	r2,0(r3)
    1f50:	013ffff4 	movhi	r4,65535
    1f54:	213ff904 	addi	r4,r4,-28
    1f58:	2709883a 	add	r4,r4,fp
    1f5c:	20800003 	ldbu	r2,0(r4)
    1f60:	00c02804 	movi	r3,160
    1f64:	1885c83a 	sub	r2,r3,r2
    1f68:	10802848 	cmpgei	r2,r2,161
    1f6c:	10803fcc 	andi	r2,r2,255
    1f70:	017ffff4 	movhi	r5,65535
    1f74:	297ff404 	addi	r5,r5,-48
    1f78:	2f0b883a 	add	r5,r5,fp
    1f7c:	28c00017 	ldw	r3,0(r5)
    1f80:	18bf8c16 	blt	r3,r2,1db4 <__alt_data_end+0xfc001db4>
    1f84:	01bffff4 	movhi	r6,65535
    1f88:	31bff904 	addi	r6,r6,-28
    1f8c:	370d883a 	add	r6,r6,fp
    1f90:	30800003 	ldbu	r2,0(r6)
    1f94:	10802818 	cmpnei	r2,r2,160
    1f98:	103f861e 	bne	r2,zero,1db4 <__alt_data_end+0xfc001db4>
    1f9c:	00000106 	br	1fa4 <drawWindow+0x664>

}

void drawWindow(GPU* gpu, byte LCDC) {
    if (((LCDC >> 5) & 0x1) == 0) {
        return;
    1fa0:	0001883a 	nop
        for (int y = (0 > -wy) ? 0 : -wy; y < (144 < 144 - wy) ? 144 : 144 - wy; y++) {
            byte color = buffer[(x & 255) + (y & 255) * 256];
            drawPixel(gpu, x + wx, y + wy, color);
        }
    }
}
    1fa4:	e037883a 	mov	sp,fp
    1fa8:	dfc00117 	ldw	ra,4(sp)
    1fac:	df000017 	ldw	fp,0(sp)
    1fb0:	dec00204 	addi	sp,sp,8
    1fb4:	f800283a 	ret

00001fb8 <drawPixel>:

void drawPixel(GPU* gpu, int x, int y, byte color) {
    1fb8:	defffa04 	addi	sp,sp,-24
    1fbc:	dfc00515 	stw	ra,20(sp)
    1fc0:	df000415 	stw	fp,16(sp)
    1fc4:	df000404 	addi	fp,sp,16
    1fc8:	e13ffc15 	stw	r4,-16(fp)
    1fcc:	e17ffd15 	stw	r5,-12(fp)
    1fd0:	e1bffe15 	stw	r6,-8(fp)
    1fd4:	3805883a 	mov	r2,r7
    1fd8:	e0bfff05 	stb	r2,-4(fp)
    gpu->buffer[y * 160 + x] = color;
    1fdc:	01402804 	movi	r5,160
    1fe0:	e13ffe17 	ldw	r4,-8(fp)
    1fe4:	000cefc0 	call	cefc <__mulsi3>
    1fe8:	1007883a 	mov	r3,r2
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	1885883a 	add	r2,r3,r2
    1ff4:	e0fffc17 	ldw	r3,-16(fp)
    1ff8:	1885883a 	add	r2,r3,r2
    1ffc:	10800f04 	addi	r2,r2,60
    2000:	e0ffff03 	ldbu	r3,-4(fp)
    2004:	10c00005 	stb	r3,0(r2)
}
    2008:	0001883a 	nop
    200c:	e037883a 	mov	sp,fp
    2010:	dfc00117 	ldw	ra,4(sp)
    2014:	df000017 	ldw	fp,0(sp)
    2018:	dec00204 	addi	sp,sp,8
    201c:	f800283a 	ret

00002020 <getPixel>:

byte getPixel(GPU* gpu, int x, int y) {
    2020:	defffb04 	addi	sp,sp,-20
    2024:	dfc00415 	stw	ra,16(sp)
    2028:	df000315 	stw	fp,12(sp)
    202c:	df000304 	addi	fp,sp,12
    2030:	e13ffd15 	stw	r4,-12(fp)
    2034:	e17ffe15 	stw	r5,-8(fp)
    2038:	e1bfff15 	stw	r6,-4(fp)
    return gpu->buffer[y * 160 + x];
    203c:	01402804 	movi	r5,160
    2040:	e13fff17 	ldw	r4,-4(fp)
    2044:	000cefc0 	call	cefc <__mulsi3>
    2048:	1007883a 	mov	r3,r2
    204c:	e0bffe17 	ldw	r2,-8(fp)
    2050:	1885883a 	add	r2,r3,r2
    2054:	e0fffd17 	ldw	r3,-12(fp)
    2058:	1885883a 	add	r2,r3,r2
    205c:	10800f04 	addi	r2,r2,60
    2060:	10800003 	ldbu	r2,0(r2)
};
    2064:	e037883a 	mov	sp,fp
    2068:	dfc00117 	ldw	ra,4(sp)
    206c:	df000017 	ldw	fp,0(sp)
    2070:	dec00204 	addi	sp,sp,8
    2074:	f800283a 	ret

00002078 <getPalette>:

// Get the palette mapping from a given palette byte as stored in memory
// A palette will map a tile color to a final palette color index
// used with Screen.colors to get a shade of grey
void getPalette(byte paletteByte, byte* palette) {
    2078:	defffa04 	addi	sp,sp,-24
    207c:	df000515 	stw	fp,20(sp)
    2080:	df000504 	addi	fp,sp,20
    2084:	2005883a 	mov	r2,r4
    2088:	e17fff15 	stw	r5,-4(fp)
    208c:	e0bffe05 	stb	r2,-8(fp)
    int counter = 0;
    2090:	e03ffb15 	stw	zero,-20(fp)
    for (int i = 0; i < 8; i += 2) {
    2094:	e03ffc15 	stw	zero,-16(fp)
    2098:	00001306 	br	20e8 <getPalette+0x70>
        byte shade = (paletteByte & (3 << i)) >> i;
    209c:	e0fffe03 	ldbu	r3,-8(fp)
    20a0:	010000c4 	movi	r4,3
    20a4:	e0bffc17 	ldw	r2,-16(fp)
    20a8:	2084983a 	sll	r2,r4,r2
    20ac:	1886703a 	and	r3,r3,r2
    20b0:	e0bffc17 	ldw	r2,-16(fp)
    20b4:	1885d83a 	sra	r2,r3,r2
    20b8:	e0bffd05 	stb	r2,-12(fp)
        palette[counter] = shade;
    20bc:	e0bffb17 	ldw	r2,-20(fp)
    20c0:	e0ffff17 	ldw	r3,-4(fp)
    20c4:	1885883a 	add	r2,r3,r2
    20c8:	e0fffd03 	ldbu	r3,-12(fp)
    20cc:	10c00005 	stb	r3,0(r2)
        counter++;
    20d0:	e0bffb17 	ldw	r2,-20(fp)
    20d4:	10800044 	addi	r2,r2,1
    20d8:	e0bffb15 	stw	r2,-20(fp)
// Get the palette mapping from a given palette byte as stored in memory
// A palette will map a tile color to a final palette color index
// used with Screen.colors to get a shade of grey
void getPalette(byte paletteByte, byte* palette) {
    int counter = 0;
    for (int i = 0; i < 8; i += 2) {
    20dc:	e0bffc17 	ldw	r2,-16(fp)
    20e0:	10800084 	addi	r2,r2,2
    20e4:	e0bffc15 	stw	r2,-16(fp)
    20e8:	e0bffc17 	ldw	r2,-16(fp)
    20ec:	10800210 	cmplti	r2,r2,8
    20f0:	103fea1e 	bne	r2,zero,209c <__alt_data_end+0xfc00209c>
        byte shade = (paletteByte & (3 << i)) >> i;
        palette[counter] = shade;
        counter++;
    }
}
    20f4:	0001883a 	nop
    20f8:	e037883a 	mov	sp,fp
    20fc:	df000017 	ldw	fp,0(sp)
    2100:	dec00104 	addi	sp,sp,4
    2104:	f800283a 	ret

00002108 <render>:
//void setPixel(unsigned x, unsigned y, byte color) {
//	buffer[(y - 8) * 160 + (x)] = color;
//
//}

void render(byte* buffer) {
    2108:	defffb04 	addi	sp,sp,-20
    210c:	df000415 	stw	fp,16(sp)
    2110:	df000404 	addi	fp,sp,16
    2114:	e13fff15 	stw	r4,-4(fp)
	int start = 0;
    2118:	e03ffc15 	stw	zero,-16(fp)
	while (screenBase <= 0x04003fff) {
    211c:	00002206 	br	21a8 <render+0xa0>
		int num = 0;
    2120:	e03ffd15 	stw	zero,-12(fp)
		for(int i = 0; i < 16; i++) {
    2124:	e03ffe15 	stw	zero,-8(fp)
    2128:	00001306 	br	2178 <render+0x70>
			num = num << 2;
    212c:	e0bffd17 	ldw	r2,-12(fp)
    2130:	1085883a 	add	r2,r2,r2
    2134:	1085883a 	add	r2,r2,r2
    2138:	e0bffd15 	stw	r2,-12(fp)
			num += (buffer[start + i] & 0x3);
    213c:	e0fffc17 	ldw	r3,-16(fp)
    2140:	e0bffe17 	ldw	r2,-8(fp)
    2144:	1885883a 	add	r2,r3,r2
    2148:	1007883a 	mov	r3,r2
    214c:	e0bfff17 	ldw	r2,-4(fp)
    2150:	10c5883a 	add	r2,r2,r3
    2154:	10800003 	ldbu	r2,0(r2)
    2158:	10803fcc 	andi	r2,r2,255
    215c:	108000cc 	andi	r2,r2,3
    2160:	e0fffd17 	ldw	r3,-12(fp)
    2164:	1885883a 	add	r2,r3,r2
    2168:	e0bffd15 	stw	r2,-12(fp)

void render(byte* buffer) {
	int start = 0;
	while (screenBase <= 0x04003fff) {
		int num = 0;
		for(int i = 0; i < 16; i++) {
    216c:	e0bffe17 	ldw	r2,-8(fp)
    2170:	10800044 	addi	r2,r2,1
    2174:	e0bffe15 	stw	r2,-8(fp)
    2178:	e0bffe17 	ldw	r2,-8(fp)
    217c:	10800410 	cmplti	r2,r2,16
    2180:	103fea1e 	bne	r2,zero,212c <__alt_data_end+0xfc00212c>
			num = num << 2;
			num += (buffer[start + i] & 0x3);
		}
		*screenBase = num;
    2184:	d0a00117 	ldw	r2,-32764(gp)
    2188:	e0fffd17 	ldw	r3,-12(fp)
    218c:	10c00015 	stw	r3,0(r2)
		screenBase += 1;
    2190:	d0a00117 	ldw	r2,-32764(gp)
    2194:	10800104 	addi	r2,r2,4
    2198:	d0a00115 	stw	r2,-32764(gp)
		start += 16;
    219c:	e0bffc17 	ldw	r2,-16(fp)
    21a0:	10800404 	addi	r2,r2,16
    21a4:	e0bffc15 	stw	r2,-16(fp)
//
//}

void render(byte* buffer) {
	int start = 0;
	while (screenBase <= 0x04003fff) {
    21a8:	d0e00117 	ldw	r3,-32764(gp)
    21ac:	00810034 	movhi	r2,1024
    21b0:	108fffc4 	addi	r2,r2,16383
    21b4:	10ffda2e 	bgeu	r2,r3,2120 <__alt_data_end+0xfc002120>
		}
		*screenBase = num;
		screenBase += 1;
		start += 16;
	}
}
    21b8:	0001883a 	nop
    21bc:	e037883a 	mov	sp,fp
    21c0:	df000017 	ldw	fp,0(sp)
    21c4:	dec00104 	addi	sp,sp,4
    21c8:	f800283a 	ret

000021cc <initTimer>:
word TIMA_addr = 0xFF05;
word TMA_addr = 0xFF06;
word TAC_addr = 0xFF07;


void initTimer(Timer* timer) {
    21cc:	defffe04 	addi	sp,sp,-8
    21d0:	df000115 	stw	fp,4(sp)
    21d4:	df000104 	addi	fp,sp,4
    21d8:	e13fff15 	stw	r4,-4(fp)
	timer->time = 0;
    21dc:	e0bfff17 	ldw	r2,-4(fp)
    21e0:	10000015 	stw	zero,0(r2)
	timer->div_time = 0;
    21e4:	e0bfff17 	ldw	r2,-4(fp)
    21e8:	10000115 	stw	zero,4(r2)
}
    21ec:	0001883a 	nop
    21f0:	e037883a 	mov	sp,fp
    21f4:	df000017 	ldw	fp,0(sp)
    21f8:	dec00104 	addi	sp,sp,4
    21fc:	f800283a 	ret

00002200 <updateTimer>:

void updateTimer(Timer* timer, int elapsed) {
    2200:	defff804 	addi	sp,sp,-32
    2204:	dfc00715 	stw	ra,28(sp)
    2208:	df000615 	stw	fp,24(sp)
    220c:	dc000515 	stw	r16,20(sp)
    2210:	df000604 	addi	fp,sp,24
    2214:	e13ffd15 	stw	r4,-12(fp)
    2218:	e17ffe15 	stw	r5,-8(fp)
	if(!(readData(TAC_addr) & 0x4)) {
    221c:	d0a0038b 	ldhu	r2,-32754(gp)
    2220:	10bfffcc 	andi	r2,r2,65535
    2224:	1009883a 	mov	r4,r2
    2228:	000026c0 	call	26c <readData>
    222c:	10803fcc 	andi	r2,r2,255
    2230:	1080010c 	andi	r2,r2,4
    2234:	10005326 	beq	r2,zero,2384 <updateTimer+0x184>
		return;
	}
	timer->time += elapsed;
    2238:	e0bffd17 	ldw	r2,-12(fp)
    223c:	10c00017 	ldw	r3,0(r2)
    2240:	e0bffe17 	ldw	r2,-8(fp)
    2244:	1887883a 	add	r3,r3,r2
    2248:	e0bffd17 	ldw	r2,-12(fp)
    224c:	10c00015 	stw	r3,0(r2)
	int threshold = 64;
    2250:	00801004 	movi	r2,64
    2254:	e0bffa15 	stw	r2,-24(fp)
	switch(readData(TAC_addr) & 3) {
    2258:	d0a0038b 	ldhu	r2,-32754(gp)
    225c:	10bfffcc 	andi	r2,r2,65535
    2260:	1009883a 	mov	r4,r2
    2264:	000026c0 	call	26c <readData>
    2268:	10803fcc 	andi	r2,r2,255
    226c:	108000cc 	andi	r2,r2,3
    2270:	10c00060 	cmpeqi	r3,r2,1
    2274:	18000c1e 	bne	r3,zero,22a8 <updateTimer+0xa8>
    2278:	10c00088 	cmpgei	r3,r2,2
    227c:	1800021e 	bne	r3,zero,2288 <updateTimer+0x88>
    2280:	10000626 	beq	r2,zero,229c <updateTimer+0x9c>
    2284:	00001106 	br	22cc <updateTimer+0xcc>
    2288:	10c000a0 	cmpeqi	r3,r2,2
    228c:	1800091e 	bne	r3,zero,22b4 <updateTimer+0xb4>
    2290:	108000e0 	cmpeqi	r2,r2,3
    2294:	10000a1e 	bne	r2,zero,22c0 <updateTimer+0xc0>
    2298:	00000c06 	br	22cc <updateTimer+0xcc>
	case 0:
		threshold = 64;
    229c:	00801004 	movi	r2,64
    22a0:	e0bffa15 	stw	r2,-24(fp)
		break;
    22a4:	00000906 	br	22cc <updateTimer+0xcc>
	case 1:
		threshold = 1;
    22a8:	00800044 	movi	r2,1
    22ac:	e0bffa15 	stw	r2,-24(fp)
		break;
    22b0:	00000606 	br	22cc <updateTimer+0xcc>
	case 2:
		threshold = 4;
    22b4:	00800104 	movi	r2,4
    22b8:	e0bffa15 	stw	r2,-24(fp)
		break;
    22bc:	00000306 	br	22cc <updateTimer+0xcc>
	case 3:
		threshold = 16;
    22c0:	00800404 	movi	r2,16
    22c4:	e0bffa15 	stw	r2,-24(fp)
		break;
    22c8:	0001883a 	nop
	}
	threshold *= 16;
    22cc:	e0bffa17 	ldw	r2,-24(fp)
    22d0:	1004913a 	slli	r2,r2,4
    22d4:	e0bffa15 	stw	r2,-24(fp)
	while(timer->time >= threshold) {
    22d8:	00002506 	br	2370 <updateTimer+0x170>
		timer->time -= threshold;
    22dc:	e0bffd17 	ldw	r2,-12(fp)
    22e0:	10c00017 	ldw	r3,0(r2)
    22e4:	e0bffa17 	ldw	r2,-24(fp)
    22e8:	1887c83a 	sub	r3,r3,r2
    22ec:	e0bffd17 	ldw	r2,-12(fp)
    22f0:	10c00015 	stw	r3,0(r2)
		byte cur_tima = readData(TIMA_addr) + 1;
    22f4:	d0a0028b 	ldhu	r2,-32758(gp)
    22f8:	10bfffcc 	andi	r2,r2,65535
    22fc:	1009883a 	mov	r4,r2
    2300:	000026c0 	call	26c <readData>
    2304:	10800044 	addi	r2,r2,1
    2308:	e0bffc05 	stb	r2,-16(fp)
		bool hasOverflown = false;
    230c:	e03ffb15 	stw	zero,-20(fp)
		if(cur_tima == 0x00) {
    2310:	e0bffc03 	ldbu	r2,-16(fp)
    2314:	1000021e 	bne	r2,zero,2320 <updateTimer+0x120>
			hasOverflown = true;
    2318:	00800044 	movi	r2,1
    231c:	e0bffb15 	stw	r2,-20(fp)
		}
		writeData(TIMA_addr, cur_tima);
    2320:	d0a0028b 	ldhu	r2,-32758(gp)
    2324:	10bfffcc 	andi	r2,r2,65535
    2328:	e0fffc03 	ldbu	r3,-16(fp)
    232c:	180b883a 	mov	r5,r3
    2330:	1009883a 	mov	r4,r2
    2334:	00003640 	call	364 <writeData>
		if(hasOverflown) {
    2338:	e0bffb17 	ldw	r2,-20(fp)
    233c:	10000c26 	beq	r2,zero,2370 <updateTimer+0x170>
			writeData(TIMA_addr, readData(TMA_addr));
    2340:	d0a0028b 	ldhu	r2,-32758(gp)
    2344:	143fffcc 	andi	r16,r2,65535
    2348:	d0a0030b 	ldhu	r2,-32756(gp)
    234c:	10bfffcc 	andi	r2,r2,65535
    2350:	1009883a 	mov	r4,r2
    2354:	000026c0 	call	26c <readData>
    2358:	10803fcc 	andi	r2,r2,255
    235c:	100b883a 	mov	r5,r2
    2360:	8009883a 	mov	r4,r16
    2364:	00003640 	call	364 <writeData>
			requestInterrupt(TIMER);
    2368:	01000084 	movi	r4,2
    236c:	00030f00 	call	30f0 <requestInterrupt>
	case 3:
		threshold = 16;
		break;
	}
	threshold *= 16;
	while(timer->time >= threshold) {
    2370:	e0bffd17 	ldw	r2,-12(fp)
    2374:	10c00017 	ldw	r3,0(r2)
    2378:	e0bffa17 	ldw	r2,-24(fp)
    237c:	18bfd70e 	bge	r3,r2,22dc <__alt_data_end+0xfc0022dc>
    2380:	00000106 	br	2388 <updateTimer+0x188>
	timer->div_time = 0;
}

void updateTimer(Timer* timer, int elapsed) {
	if(!(readData(TAC_addr) & 0x4)) {
		return;
    2384:	0001883a 	nop
		if(hasOverflown) {
			writeData(TIMA_addr, readData(TMA_addr));
			requestInterrupt(TIMER);
		}
	}
}
    2388:	e6ffff04 	addi	sp,fp,-4
    238c:	dfc00217 	ldw	ra,8(sp)
    2390:	df000117 	ldw	fp,4(sp)
    2394:	dc000017 	ldw	r16,0(sp)
    2398:	dec00304 	addi	sp,sp,12
    239c:	f800283a 	ret

000023a0 <updateDiv>:

void updateDiv(Timer* timer, int elapsed) {
    23a0:	defffa04 	addi	sp,sp,-24
    23a4:	dfc00515 	stw	ra,20(sp)
    23a8:	df000415 	stw	fp,16(sp)
    23ac:	df000404 	addi	fp,sp,16
    23b0:	e13ffe15 	stw	r4,-8(fp)
    23b4:	e17fff15 	stw	r5,-4(fp)
	int threshold = 256;
    23b8:	00804004 	movi	r2,256
    23bc:	e0bffc15 	stw	r2,-16(fp)
	timer->div_time += elapsed;
    23c0:	e0bffe17 	ldw	r2,-8(fp)
    23c4:	10c00117 	ldw	r3,4(r2)
    23c8:	e0bfff17 	ldw	r2,-4(fp)
    23cc:	1887883a 	add	r3,r3,r2
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	10c00115 	stw	r3,4(r2)
	if(timer->div_time > threshold) {
    23d8:	e0bffe17 	ldw	r2,-8(fp)
    23dc:	10800117 	ldw	r2,4(r2)
    23e0:	e0fffc17 	ldw	r3,-16(fp)
    23e4:	1880110e 	bge	r3,r2,242c <updateDiv+0x8c>
		timer->div_time -= threshold;
    23e8:	e0bffe17 	ldw	r2,-8(fp)
    23ec:	10c00117 	ldw	r3,4(r2)
    23f0:	e0bffc17 	ldw	r2,-16(fp)
    23f4:	1887c83a 	sub	r3,r3,r2
    23f8:	e0bffe17 	ldw	r2,-8(fp)
    23fc:	10c00115 	stw	r3,4(r2)
		byte cur_div = readData(DIV_addr);
    2400:	d0a0020b 	ldhu	r2,-32760(gp)
    2404:	10bfffcc 	andi	r2,r2,65535
    2408:	1009883a 	mov	r4,r2
    240c:	000026c0 	call	26c <readData>
    2410:	e0bffd05 	stb	r2,-12(fp)
		writeData(DIV_addr, cur_div & 0xFF);
    2414:	d0a0020b 	ldhu	r2,-32760(gp)
    2418:	10bfffcc 	andi	r2,r2,65535
    241c:	e0fffd03 	ldbu	r3,-12(fp)
    2420:	180b883a 	mov	r5,r3
    2424:	1009883a 	mov	r4,r2
    2428:	00003640 	call	364 <writeData>
	}
}
    242c:	0001883a 	nop
    2430:	e037883a 	mov	sp,fp
    2434:	dfc00117 	ldw	ra,4(sp)
    2438:	df000017 	ldw	fp,0(sp)
    243c:	dec00204 	addi	sp,sp,8
    2440:	f800283a 	ret

00002444 <update>:

void update(Timer* timer, int elapsed) {
    2444:	defffc04 	addi	sp,sp,-16
    2448:	dfc00315 	stw	ra,12(sp)
    244c:	df000215 	stw	fp,8(sp)
    2450:	df000204 	addi	fp,sp,8
    2454:	e13ffe15 	stw	r4,-8(fp)
    2458:	e17fff15 	stw	r5,-4(fp)
	updateDiv(timer, elapsed);
    245c:	e17fff17 	ldw	r5,-4(fp)
    2460:	e13ffe17 	ldw	r4,-8(fp)
    2464:	00023a00 	call	23a0 <updateDiv>
	updateTimer(timer, elapsed);
    2468:	e17fff17 	ldw	r5,-4(fp)
    246c:	e13ffe17 	ldw	r4,-8(fp)
    2470:	00022000 	call	2200 <updateTimer>
}
    2474:	0001883a 	nop
    2478:	e037883a 	mov	sp,fp
    247c:	dfc00117 	ldw	ra,4(sp)
    2480:	df000017 	ldw	fp,0(sp)
    2484:	dec00204 	addi	sp,sp,8
    2488:	f800283a 	ret

0000248c <resetDiv>:

void resetDiv(Timer* timer) {
    248c:	defffd04 	addi	sp,sp,-12
    2490:	dfc00215 	stw	ra,8(sp)
    2494:	df000115 	stw	fp,4(sp)
    2498:	df000104 	addi	fp,sp,4
    249c:	e13fff15 	stw	r4,-4(fp)
	timer->div_time = 0;
    24a0:	e0bfff17 	ldw	r2,-4(fp)
    24a4:	10000115 	stw	zero,4(r2)
	writeData(DIV_addr, 0);
    24a8:	d0a0020b 	ldhu	r2,-32760(gp)
    24ac:	10bfffcc 	andi	r2,r2,65535
    24b0:	000b883a 	mov	r5,zero
    24b4:	1009883a 	mov	r4,r2
    24b8:	00003640 	call	364 <writeData>
}
    24bc:	0001883a 	nop
    24c0:	e037883a 	mov	sp,fp
    24c4:	dfc00117 	ldw	ra,4(sp)
    24c8:	df000017 	ldw	fp,0(sp)
    24cc:	dec00204 	addi	sp,sp,8
    24d0:	f800283a 	ret

000024d4 <init_CPU>:



void (*opcodeArray[256])(CPU*);

void init_CPU(CPU* cpu) {
    24d4:	defffd04 	addi	sp,sp,-12
    24d8:	dfc00215 	stw	ra,8(sp)
    24dc:	df000115 	stw	fp,4(sp)
    24e0:	df000104 	addi	fp,sp,4
    24e4:	e13fff15 	stw	r4,-4(fp)
	cpu->IME_flag = true;
    24e8:	e0bfff17 	ldw	r2,-4(fp)
    24ec:	00c00044 	movi	r3,1
    24f0:	10c00815 	stw	r3,32(r2)
	cpu->is_halted = false;
    24f4:	e0bfff17 	ldw	r2,-4(fp)
    24f8:	10000915 	stw	zero,36(r2)
	cpu->is_paused = false;
    24fc:	e0bfff17 	ldw	r2,-4(fp)
    2500:	10000a15 	stw	zero,40(r2)
	cpu->usingBootROM = false;
    2504:	e0bfff17 	ldw	r2,-4(fp)
    2508:	10000b15 	stw	zero,44(r2)
	initTimer(&cpu->timer);
    250c:	e0bfff17 	ldw	r2,-4(fp)
    2510:	10800c04 	addi	r2,r2,48
    2514:	1009883a 	mov	r4,r2
    2518:	00021cc0 	call	21cc <initTimer>

}
    251c:	0001883a 	nop
    2520:	e037883a 	mov	sp,fp
    2524:	dfc00117 	ldw	ra,4(sp)
    2528:	df000017 	ldw	fp,0(sp)
    252c:	dec00204 	addi	sp,sp,8
    2530:	f800283a 	ret

00002534 <reset_CPU>:

void reset_CPU(CPU* cpu) {
    2534:	defffd04 	addi	sp,sp,-12
    2538:	dfc00215 	stw	ra,8(sp)
    253c:	df000115 	stw	fp,4(sp)
    2540:	df000104 	addi	fp,sp,4
    2544:	e13fff15 	stw	r4,-4(fp)
	cpu->registers.sp = 0xFFFE;
    2548:	e0bfff17 	ldw	r2,-4(fp)
    254c:	00ffff84 	movi	r3,-2
    2550:	10c0048d 	sth	r3,18(r2)
	resetMemory();
    2554:	00003b00 	call	3b0 <resetMemory>
}
    2558:	0001883a 	nop
    255c:	e037883a 	mov	sp,fp
    2560:	dfc00117 	ldw	ra,4(sp)
    2564:	df000017 	ldw	fp,0(sp)
    2568:	dec00204 	addi	sp,sp,8
    256c:	f800283a 	ret

00002570 <get_RAM_size>:

int get_RAM_size() {
    2570:	defffd04 	addi	sp,sp,-12
    2574:	dfc00215 	stw	ra,8(sp)
    2578:	df000115 	stw	fp,4(sp)
    257c:	df000104 	addi	fp,sp,4
	int size = 0;
    2580:	e03fff15 	stw	zero,-4(fp)
	switch(readData(0x149)) {
    2584:	01005244 	movi	r4,329
    2588:	000026c0 	call	26c <readData>
    258c:	10803fcc 	andi	r2,r2,255
    2590:	10c000a0 	cmpeqi	r3,r2,2
    2594:	1800071e 	bne	r3,zero,25b4 <get_RAM_size+0x44>
    2598:	10c000e0 	cmpeqi	r3,r2,3
    259c:	1800081e 	bne	r3,zero,25c0 <get_RAM_size+0x50>
    25a0:	10800060 	cmpeqi	r2,r2,1
    25a4:	10000926 	beq	r2,zero,25cc <get_RAM_size+0x5c>
		case 1:
			size = 2048;
    25a8:	00820004 	movi	r2,2048
    25ac:	e0bfff15 	stw	r2,-4(fp)
			break;
    25b0:	00000606 	br	25cc <get_RAM_size+0x5c>
		case 2:
			size = 2048 * 4;
    25b4:	00880004 	movi	r2,8192
    25b8:	e0bfff15 	stw	r2,-4(fp)
			break;
    25bc:	00000306 	br	25cc <get_RAM_size+0x5c>
		case 3:
			size = 2048 * 16;
    25c0:	00a00014 	movui	r2,32768
    25c4:	e0bfff15 	stw	r2,-4(fp)
			break;
    25c8:	0001883a 	nop
	}

	return size;
    25cc:	e0bfff17 	ldw	r2,-4(fp)
}
    25d0:	e037883a 	mov	sp,fp
    25d4:	dfc00117 	ldw	ra,4(sp)
    25d8:	df000017 	ldw	fp,0(sp)
    25dc:	dec00204 	addi	sp,sp,8
    25e0:	f800283a 	ret

000025e4 <getGameName>:

void getGameName() {
    25e4:	defff904 	addi	sp,sp,-28
    25e8:	dfc00615 	stw	ra,24(sp)
    25ec:	df000515 	stw	fp,20(sp)
    25f0:	df000504 	addi	fp,sp,20
	char name[11];
	word addr = 0x134;
    25f4:	00804d04 	movi	r2,308
    25f8:	e0bffb0d 	sth	r2,-20(fp)
	for(int i = 0; i < 10; i++) {
    25fc:	e03ffc15 	stw	zero,-16(fp)
    2600:	00000e06 	br	263c <getGameName+0x58>
		name[i] = readData(addr);
    2604:	e0bffb0b 	ldhu	r2,-20(fp)
    2608:	1009883a 	mov	r4,r2
    260c:	000026c0 	call	26c <readData>
    2610:	1009883a 	mov	r4,r2
    2614:	e0fffd04 	addi	r3,fp,-12
    2618:	e0bffc17 	ldw	r2,-16(fp)
    261c:	1885883a 	add	r2,r3,r2
    2620:	11000005 	stb	r4,0(r2)
		addr += 1;
    2624:	e0bffb0b 	ldhu	r2,-20(fp)
    2628:	10800044 	addi	r2,r2,1
    262c:	e0bffb0d 	sth	r2,-20(fp)
}

void getGameName() {
	char name[11];
	word addr = 0x134;
	for(int i = 0; i < 10; i++) {
    2630:	e0bffc17 	ldw	r2,-16(fp)
    2634:	10800044 	addi	r2,r2,1
    2638:	e0bffc15 	stw	r2,-16(fp)
    263c:	e0bffc17 	ldw	r2,-16(fp)
    2640:	10800290 	cmplti	r2,r2,10
    2644:	103fef1e 	bne	r2,zero,2604 <__alt_data_end+0xfc002604>
		name[i] = readData(addr);
		addr += 1;
	}
	printf("%s\n", name);
    2648:	e0bffd04 	addi	r2,fp,-12
    264c:	1009883a 	mov	r4,r2
    2650:	000d0880 	call	d088 <puts>
}
    2654:	0001883a 	nop
    2658:	e037883a 	mov	sp,fp
    265c:	dfc00117 	ldw	ra,4(sp)
    2660:	df000017 	ldw	fp,0(sp)
    2664:	dec00204 	addi	sp,sp,8
    2668:	f800283a 	ret

0000266c <run>:
void checkInterrupt(CPU* cpu);
void fetch(CPU* cpu);
void run(CPU* cpu) {
    266c:	defffd04 	addi	sp,sp,-12
    2670:	dfc00215 	stw	ra,8(sp)
    2674:	df000115 	stw	fp,4(sp)
    2678:	df000104 	addi	fp,sp,4
    267c:	e13fff15 	stw	r4,-4(fp)
	if(cpu->usingBootROM == true) {
    2680:	e0bfff17 	ldw	r2,-4(fp)
    2684:	10800b17 	ldw	r2,44(r2)
    2688:	10800058 	cmpnei	r2,r2,1
    268c:	1000031e 	bne	r2,zero,269c <run+0x30>
		cpu->registers.pc = 0x0000;
    2690:	e0bfff17 	ldw	r2,-4(fp)
    2694:	1000040d 	sth	zero,16(r2)
    2698:	00000306 	br	26a8 <run+0x3c>
	}else {
		cpu->registers.pc = 0x0100;
    269c:	e0bfff17 	ldw	r2,-4(fp)
    26a0:	00c04004 	movi	r3,256
    26a4:	10c0040d 	sth	r3,16(r2)
	}
	fetch(cpu);
    26a8:	e13fff17 	ldw	r4,-4(fp)
    26ac:	00027200 	call	2720 <fetch>
}
    26b0:	0001883a 	nop
    26b4:	e037883a 	mov	sp,fp
    26b8:	dfc00117 	ldw	ra,4(sp)
    26bc:	df000017 	ldw	fp,0(sp)
    26c0:	dec00204 	addi	sp,sp,8
    26c4:	f800283a 	ret

000026c8 <updateInput>:

byte fetchOpcode(CPU* cpu);
void executeOpcode(CPU* cpu, byte opcode);

void updateInput() {
    26c8:	defffd04 	addi	sp,sp,-12
    26cc:	dfc00215 	stw	ra,8(sp)
    26d0:	df000115 	stw	fp,4(sp)
    26d4:	df000104 	addi	fp,sp,4
	volatile unsigned int *KEY_PIO = (unsigned int*)0x04005120;
    26d8:	00810034 	movhi	r2,1024
    26dc:	10944804 	addi	r2,r2,20768
    26e0:	e0bfff15 	stw	r2,-4(fp)
//	printf("%d\n", *KEY_PIO);
	if(*KEY_PIO  != 3) {
    26e4:	e0bfff17 	ldw	r2,-4(fp)
    26e8:	10800017 	ldw	r2,0(r2)
    26ec:	108000e0 	cmpeqi	r2,r2,3
    26f0:	1000051e 	bne	r2,zero,2708 <updateInput+0x40>
		printf("Executing Input Interrupt START\n");
    26f4:	010000b4 	movhi	r4,2
    26f8:	2130d104 	addi	r4,r4,-15548
    26fc:	000d0880 	call	d088 <puts>
		requestInterrupt(HILO);
    2700:	01000104 	movi	r4,4
    2704:	00030f00 	call	30f0 <requestInterrupt>
	}
}
    2708:	0001883a 	nop
    270c:	e037883a 	mov	sp,fp
    2710:	dfc00117 	ldw	ra,4(sp)
    2714:	df000017 	ldw	fp,0(sp)
    2718:	dec00204 	addi	sp,sp,8
    271c:	f800283a 	ret

00002720 <fetch>:

void fetch(CPU* cpu) {
    2720:	defff904 	addi	sp,sp,-28
    2724:	dfc00615 	stw	ra,24(sp)
    2728:	df000515 	stw	fp,20(sp)
    272c:	df000504 	addi	fp,sp,20
    2730:	e13fff15 	stw	r4,-4(fp)
	bool vBlank = false;
    2734:	e03ffb15 	stw	zero,-20(fp)
	while(1) {
		int oldInstruction = cpu->clock.c;
    2738:	e0bfff17 	ldw	r2,-4(fp)
    273c:	10800017 	ldw	r2,0(r2)
    2740:	e0bffc15 	stw	r2,-16(fp)
		if(cpu->is_halted == false){
    2744:	e0bfff17 	ldw	r2,-4(fp)
    2748:	10800917 	ldw	r2,36(r2)
    274c:	10000f1e 	bne	r2,zero,278c <fetch+0x6c>
			byte opcode = fetchOpcode(cpu);
    2750:	e13fff17 	ldw	r4,-4(fp)
    2754:	00027f00 	call	27f0 <fetchOpcode>
    2758:	e0bffd05 	stb	r2,-12(fp)
			executeOpcode(cpu, opcode);
    275c:	e0bffd03 	ldbu	r2,-12(fp)
    2760:	100b883a 	mov	r5,r2
    2764:	e13fff17 	ldw	r4,-4(fp)
    2768:	000283c0 	call	283c <executeOpcode>
			cpu->registers.f &= 0xF0;
    276c:	e0bfff17 	ldw	r2,-4(fp)
    2770:	10c003c3 	ldbu	r3,15(r2)
    2774:	00bffc04 	movi	r2,-16
    2778:	1884703a 	and	r2,r3,r2
    277c:	1007883a 	mov	r3,r2
    2780:	e0bfff17 	ldw	r2,-4(fp)
    2784:	10c003c5 	stb	r3,15(r2)
    2788:	00000506 	br	27a0 <fetch+0x80>
		}else {
			cpu->clock.c += 4;
    278c:	e0bfff17 	ldw	r2,-4(fp)
    2790:	10800017 	ldw	r2,0(r2)
    2794:	10c00104 	addi	r3,r2,4
    2798:	e0bfff17 	ldw	r2,-4(fp)
    279c:	10c00015 	stw	r3,0(r2)
		}

		int elapsed = cpu->clock.c - oldInstruction;
    27a0:	e0bfff17 	ldw	r2,-4(fp)
    27a4:	10c00017 	ldw	r3,0(r2)
    27a8:	e0bffc17 	ldw	r2,-16(fp)
    27ac:	1885c83a 	sub	r2,r3,r2
    27b0:	e0bffe15 	stw	r2,-8(fp)
		vBlank = gpuUpdate(cpu->gpu, elapsed);
    27b4:	e0bfff17 	ldw	r2,-4(fp)
    27b8:	10800e17 	ldw	r2,56(r2)
    27bc:	e17ffe17 	ldw	r5,-8(fp)
    27c0:	1009883a 	mov	r4,r2
    27c4:	00005b40 	call	5b4 <gpuUpdate>
    27c8:	e0bffb15 	stw	r2,-20(fp)
		updateTimer(&(cpu->timer), elapsed);
    27cc:	e0bfff17 	ldw	r2,-4(fp)
    27d0:	10800c04 	addi	r2,r2,48
    27d4:	e17ffe17 	ldw	r5,-8(fp)
    27d8:	1009883a 	mov	r4,r2
    27dc:	00022000 	call	2200 <updateTimer>
		//TODO: Update Input
		updateInput();
    27e0:	00026c80 	call	26c8 <updateInput>
		checkInterrupt(cpu);
    27e4:	e13fff17 	ldw	r4,-4(fp)
    27e8:	0002f880 	call	2f88 <checkInterrupt>
	}
    27ec:	003fd206 	br	2738 <__alt_data_end+0xfc002738>

000027f0 <fetchOpcode>:
	cpu->clock.c = 0;
}

byte fetchOpcode(CPU* cpu) {
    27f0:	defffd04 	addi	sp,sp,-12
    27f4:	dfc00215 	stw	ra,8(sp)
    27f8:	df000115 	stw	fp,4(sp)
    27fc:	df000104 	addi	fp,sp,4
    2800:	e13fff15 	stw	r4,-4(fp)
	return readData(cpu->registers.pc++);
    2804:	e0bfff17 	ldw	r2,-4(fp)
    2808:	1080040b 	ldhu	r2,16(r2)
    280c:	10c00044 	addi	r3,r2,1
    2810:	1809883a 	mov	r4,r3
    2814:	e0ffff17 	ldw	r3,-4(fp)
    2818:	1900040d 	sth	r4,16(r3)
    281c:	10bfffcc 	andi	r2,r2,65535
    2820:	1009883a 	mov	r4,r2
    2824:	000026c0 	call	26c <readData>
}
    2828:	e037883a 	mov	sp,fp
    282c:	dfc00117 	ldw	ra,4(sp)
    2830:	df000017 	ldw	fp,0(sp)
    2834:	dec00204 	addi	sp,sp,8
    2838:	f800283a 	ret

0000283c <executeOpcode>:

void executeOpcode(CPU* cpu, byte opcode) {
    283c:	defffb04 	addi	sp,sp,-20
    2840:	dfc00415 	stw	ra,16(sp)
    2844:	df000315 	stw	fp,12(sp)
    2848:	df000304 	addi	fp,sp,12
    284c:	e13ffe15 	stw	r4,-8(fp)
    2850:	2805883a 	mov	r2,r5
    2854:	e0bfff05 	stb	r2,-4(fp)
	if(opcodeArray[opcode] == NULL){
    2858:	e0ffff03 	ldbu	r3,-4(fp)
    285c:	008000b4 	movhi	r2,2
    2860:	10bf4a04 	addi	r2,r2,-728
    2864:	18c7883a 	add	r3,r3,r3
    2868:	18c7883a 	add	r3,r3,r3
    286c:	10c5883a 	add	r2,r2,r3
    2870:	10800017 	ldw	r2,0(r2)
    2874:	1000071e 	bne	r2,zero,2894 <executeOpcode+0x58>
		printf("Undefined Opcode: %02x\n", opcode);
    2878:	e0bfff03 	ldbu	r2,-4(fp)
    287c:	100b883a 	mov	r5,r2
    2880:	010000b4 	movhi	r4,2
    2884:	2130d904 	addi	r4,r4,-15516
    2888:	000cf8c0 	call	cf8c <printf>
		exit(1);
    288c:	01000044 	movi	r4,1
    2890:	000cf240 	call	cf24 <exit>
	}
	printf("Executing Opcode %04x: %02x   | B: %02x   L: %02x\n",cpu->registers.pc - 1, opcode, cpu->registers.b, cpu->registers.l);
    2894:	e0bffe17 	ldw	r2,-8(fp)
    2898:	1080040b 	ldhu	r2,16(r2)
    289c:	10bfffcc 	andi	r2,r2,65535
    28a0:	10ffffc4 	addi	r3,r2,-1
    28a4:	e13fff03 	ldbu	r4,-4(fp)
    28a8:	e0bffe17 	ldw	r2,-8(fp)
    28ac:	10800243 	ldbu	r2,9(r2)
    28b0:	11403fcc 	andi	r5,r2,255
    28b4:	e0bffe17 	ldw	r2,-8(fp)
    28b8:	10800383 	ldbu	r2,14(r2)
    28bc:	10803fcc 	andi	r2,r2,255
    28c0:	d8800015 	stw	r2,0(sp)
    28c4:	280f883a 	mov	r7,r5
    28c8:	200d883a 	mov	r6,r4
    28cc:	180b883a 	mov	r5,r3
    28d0:	010000b4 	movhi	r4,2
    28d4:	2130df04 	addi	r4,r4,-15492
    28d8:	000cf8c0 	call	cf8c <printf>
	(*opcodeArray[opcode])(cpu);
    28dc:	e0ffff03 	ldbu	r3,-4(fp)
    28e0:	008000b4 	movhi	r2,2
    28e4:	10bf4a04 	addi	r2,r2,-728
    28e8:	18c7883a 	add	r3,r3,r3
    28ec:	18c7883a 	add	r3,r3,r3
    28f0:	10c5883a 	add	r2,r2,r3
    28f4:	10800017 	ldw	r2,0(r2)
    28f8:	e13ffe17 	ldw	r4,-8(fp)
    28fc:	103ee83a 	callr	r2
}
    2900:	0001883a 	nop
    2904:	e037883a 	mov	sp,fp
    2908:	dfc00117 	ldw	ra,4(sp)
    290c:	df000017 	ldw	fp,0(sp)
    2910:	dec00204 	addi	sp,sp,8
    2914:	f800283a 	ret

00002918 <rr8>:



byte rr8(CPU* cpu, reg_name r) {
    2918:	defffd04 	addi	sp,sp,-12
    291c:	df000215 	stw	fp,8(sp)
    2920:	df000204 	addi	fp,sp,8
    2924:	e13ffe15 	stw	r4,-8(fp)
    2928:	e17fff15 	stw	r5,-4(fp)
	switch(r) {
    292c:	e0bfff17 	ldw	r2,-4(fp)
    2930:	10800228 	cmpgeui	r2,r2,8
    2934:	1000271e 	bne	r2,zero,29d4 <rr8+0xbc>
    2938:	e0bfff17 	ldw	r2,-4(fp)
    293c:	100690ba 	slli	r3,r2,2
    2940:	00800034 	movhi	r2,0
    2944:	108a5504 	addi	r2,r2,10580
    2948:	1885883a 	add	r2,r3,r2
    294c:	10800017 	ldw	r2,0(r2)
    2950:	1000683a 	jmp	r2
    2954:	00002974 	movhi	zero,165
    2958:	00002980 	call	298 <readData+0x2c>
    295c:	0000298c 	andi	zero,zero,166
    2960:	00002998 	cmpnei	zero,zero,166
    2964:	000029a4 	muli	zero,zero,166
    2968:	000029b0 	cmpltui	zero,zero,166
    296c:	000029bc 	xorhi	zero,zero,166
    2970:	000029c8 	cmpgei	zero,zero,167
	case A:
		return cpu->registers.a;
    2974:	e0bffe17 	ldw	r2,-8(fp)
    2978:	10800203 	ldbu	r2,8(r2)
    297c:	00001606 	br	29d8 <rr8+0xc0>
	case B:
		return cpu->registers.b;
    2980:	e0bffe17 	ldw	r2,-8(fp)
    2984:	10800243 	ldbu	r2,9(r2)
    2988:	00001306 	br	29d8 <rr8+0xc0>
	case C:
		return cpu->registers.c;
    298c:	e0bffe17 	ldw	r2,-8(fp)
    2990:	10800283 	ldbu	r2,10(r2)
    2994:	00001006 	br	29d8 <rr8+0xc0>
	case D:
		return cpu->registers.d;
    2998:	e0bffe17 	ldw	r2,-8(fp)
    299c:	108002c3 	ldbu	r2,11(r2)
    29a0:	00000d06 	br	29d8 <rr8+0xc0>
	case E:
		return cpu->registers.e;
    29a4:	e0bffe17 	ldw	r2,-8(fp)
    29a8:	10800303 	ldbu	r2,12(r2)
    29ac:	00000a06 	br	29d8 <rr8+0xc0>
	case F:
		return cpu->registers.f;
    29b0:	e0bffe17 	ldw	r2,-8(fp)
    29b4:	108003c3 	ldbu	r2,15(r2)
    29b8:	00000706 	br	29d8 <rr8+0xc0>
	case H:
		return cpu->registers.h;
    29bc:	e0bffe17 	ldw	r2,-8(fp)
    29c0:	10800343 	ldbu	r2,13(r2)
    29c4:	00000406 	br	29d8 <rr8+0xc0>
	case L:
		return cpu->registers.l;
    29c8:	e0bffe17 	ldw	r2,-8(fp)
    29cc:	10800383 	ldbu	r2,14(r2)
    29d0:	00000106 	br	29d8 <rr8+0xc0>
	default:
		return 0x00;
    29d4:	0005883a 	mov	r2,zero
	}
	return 0x00;
}
    29d8:	e037883a 	mov	sp,fp
    29dc:	df000017 	ldw	fp,0(sp)
    29e0:	dec00104 	addi	sp,sp,4
    29e4:	f800283a 	ret

000029e8 <rr16>:
word rr16(CPU* cpu, reg_name r) {
    29e8:	defffc04 	addi	sp,sp,-16
    29ec:	df000315 	stw	fp,12(sp)
    29f0:	df000304 	addi	fp,sp,12
    29f4:	e13ffe15 	stw	r4,-8(fp)
    29f8:	e17fff15 	stw	r5,-4(fp)
	word out = 0x0000;
    29fc:	e03ffd0d 	sth	zero,-12(fp)
	switch(r) {
    2a00:	e0bfff17 	ldw	r2,-4(fp)
    2a04:	10bffe04 	addi	r2,r2,-8
    2a08:	10c001a8 	cmpgeui	r3,r2,6
    2a0c:	1800561e 	bne	r3,zero,2b68 <rr16+0x180>
    2a10:	100690ba 	slli	r3,r2,2
    2a14:	00800034 	movhi	r2,0
    2a18:	108a8a04 	addi	r2,r2,10792
    2a1c:	1885883a 	add	r2,r3,r2
    2a20:	10800017 	ldw	r2,0(r2)
    2a24:	1000683a 	jmp	r2
    2a28:	00002a40 	call	2a4 <readData+0x38>
    2a2c:	00002a84 	movi	zero,170
    2a30:	00002ac8 	cmpgei	zero,zero,171
    2a34:	00002b0c 	andi	zero,zero,172
    2a38:	00002b50 	cmplti	zero,zero,173
    2a3c:	00002b5c 	xori	zero,zero,173
	case AF:
		out += cpu->registers.a;
    2a40:	e0bffe17 	ldw	r2,-8(fp)
    2a44:	10800203 	ldbu	r2,8(r2)
    2a48:	10c03fcc 	andi	r3,r2,255
    2a4c:	e0bffd0b 	ldhu	r2,-12(fp)
    2a50:	1885883a 	add	r2,r3,r2
    2a54:	e0bffd0d 	sth	r2,-12(fp)
		out = out << 8;
    2a58:	e0bffd0b 	ldhu	r2,-12(fp)
    2a5c:	1004923a 	slli	r2,r2,8
    2a60:	e0bffd0d 	sth	r2,-12(fp)
		out += cpu->registers.f;
    2a64:	e0bffe17 	ldw	r2,-8(fp)
    2a68:	108003c3 	ldbu	r2,15(r2)
    2a6c:	10c03fcc 	andi	r3,r2,255
    2a70:	e0bffd0b 	ldhu	r2,-12(fp)
    2a74:	1885883a 	add	r2,r3,r2
    2a78:	e0bffd0d 	sth	r2,-12(fp)
		return out;
    2a7c:	e0bffd0b 	ldhu	r2,-12(fp)
    2a80:	00003a06 	br	2b6c <rr16+0x184>
	case BC:
		out += cpu->registers.b;
    2a84:	e0bffe17 	ldw	r2,-8(fp)
    2a88:	10800243 	ldbu	r2,9(r2)
    2a8c:	10c03fcc 	andi	r3,r2,255
    2a90:	e0bffd0b 	ldhu	r2,-12(fp)
    2a94:	1885883a 	add	r2,r3,r2
    2a98:	e0bffd0d 	sth	r2,-12(fp)
		out = out << 8;
    2a9c:	e0bffd0b 	ldhu	r2,-12(fp)
    2aa0:	1004923a 	slli	r2,r2,8
    2aa4:	e0bffd0d 	sth	r2,-12(fp)
		out += cpu->registers.c;
    2aa8:	e0bffe17 	ldw	r2,-8(fp)
    2aac:	10800283 	ldbu	r2,10(r2)
    2ab0:	10c03fcc 	andi	r3,r2,255
    2ab4:	e0bffd0b 	ldhu	r2,-12(fp)
    2ab8:	1885883a 	add	r2,r3,r2
    2abc:	e0bffd0d 	sth	r2,-12(fp)
		return out;
    2ac0:	e0bffd0b 	ldhu	r2,-12(fp)
    2ac4:	00002906 	br	2b6c <rr16+0x184>
	case DE:
		out += cpu->registers.d;
    2ac8:	e0bffe17 	ldw	r2,-8(fp)
    2acc:	108002c3 	ldbu	r2,11(r2)
    2ad0:	10c03fcc 	andi	r3,r2,255
    2ad4:	e0bffd0b 	ldhu	r2,-12(fp)
    2ad8:	1885883a 	add	r2,r3,r2
    2adc:	e0bffd0d 	sth	r2,-12(fp)
		out = out << 8;
    2ae0:	e0bffd0b 	ldhu	r2,-12(fp)
    2ae4:	1004923a 	slli	r2,r2,8
    2ae8:	e0bffd0d 	sth	r2,-12(fp)
		out += cpu->registers.e;
    2aec:	e0bffe17 	ldw	r2,-8(fp)
    2af0:	10800303 	ldbu	r2,12(r2)
    2af4:	10c03fcc 	andi	r3,r2,255
    2af8:	e0bffd0b 	ldhu	r2,-12(fp)
    2afc:	1885883a 	add	r2,r3,r2
    2b00:	e0bffd0d 	sth	r2,-12(fp)
		return out;
    2b04:	e0bffd0b 	ldhu	r2,-12(fp)
    2b08:	00001806 	br	2b6c <rr16+0x184>
	case HL:
		out += cpu->registers.h;
    2b0c:	e0bffe17 	ldw	r2,-8(fp)
    2b10:	10800343 	ldbu	r2,13(r2)
    2b14:	10c03fcc 	andi	r3,r2,255
    2b18:	e0bffd0b 	ldhu	r2,-12(fp)
    2b1c:	1885883a 	add	r2,r3,r2
    2b20:	e0bffd0d 	sth	r2,-12(fp)
		out = out << 8;
    2b24:	e0bffd0b 	ldhu	r2,-12(fp)
    2b28:	1004923a 	slli	r2,r2,8
    2b2c:	e0bffd0d 	sth	r2,-12(fp)
		out += cpu->registers.l;
    2b30:	e0bffe17 	ldw	r2,-8(fp)
    2b34:	10800383 	ldbu	r2,14(r2)
    2b38:	10c03fcc 	andi	r3,r2,255
    2b3c:	e0bffd0b 	ldhu	r2,-12(fp)
    2b40:	1885883a 	add	r2,r3,r2
    2b44:	e0bffd0d 	sth	r2,-12(fp)
		return out;
    2b48:	e0bffd0b 	ldhu	r2,-12(fp)
    2b4c:	00000706 	br	2b6c <rr16+0x184>
	case SP:
		return cpu->registers.sp;
    2b50:	e0bffe17 	ldw	r2,-8(fp)
    2b54:	1080048b 	ldhu	r2,18(r2)
    2b58:	00000406 	br	2b6c <rr16+0x184>
	case PC:
		return cpu->registers.pc;
    2b5c:	e0bffe17 	ldw	r2,-8(fp)
    2b60:	1080040b 	ldhu	r2,16(r2)
    2b64:	00000106 	br	2b6c <rr16+0x184>
	default:
		return out;
    2b68:	e0bffd0b 	ldhu	r2,-12(fp)
	}
	return out;
}
    2b6c:	e037883a 	mov	sp,fp
    2b70:	df000017 	ldw	fp,0(sp)
    2b74:	dec00104 	addi	sp,sp,4
    2b78:	f800283a 	ret

00002b7c <wr8>:

void wr8(CPU* cpu, reg_name r, byte value) {
    2b7c:	defffc04 	addi	sp,sp,-16
    2b80:	df000315 	stw	fp,12(sp)
    2b84:	df000304 	addi	fp,sp,12
    2b88:	e13ffd15 	stw	r4,-12(fp)
    2b8c:	e17ffe15 	stw	r5,-8(fp)
    2b90:	3005883a 	mov	r2,r6
    2b94:	e0bfff05 	stb	r2,-4(fp)
	switch(r) {
    2b98:	e0bffe17 	ldw	r2,-8(fp)
    2b9c:	10800228 	cmpgeui	r2,r2,8
    2ba0:	10002f1e 	bne	r2,zero,2c60 <wr8+0xe4>
    2ba4:	e0bffe17 	ldw	r2,-8(fp)
    2ba8:	100690ba 	slli	r3,r2,2
    2bac:	00800034 	movhi	r2,0
    2bb0:	108af004 	addi	r2,r2,11200
    2bb4:	1885883a 	add	r2,r3,r2
    2bb8:	10800017 	ldw	r2,0(r2)
    2bbc:	1000683a 	jmp	r2
    2bc0:	00002be0 	cmpeqi	zero,zero,175
    2bc4:	00002bf0 	cmpltui	zero,zero,175
    2bc8:	00002c00 	call	2c0 <dmaTransfer+0x18>
    2bcc:	00002c10 	cmplti	zero,zero,176
    2bd0:	00002c20 	cmpeqi	zero,zero,176
    2bd4:	00002c30 	cmpltui	zero,zero,176
    2bd8:	00002c40 	call	2c4 <dmaTransfer+0x1c>
    2bdc:	00002c50 	cmplti	zero,zero,177
	case A:
		cpu->registers.a = value;
    2be0:	e0bffd17 	ldw	r2,-12(fp)
    2be4:	e0ffff03 	ldbu	r3,-4(fp)
    2be8:	10c00205 	stb	r3,8(r2)
		break;
    2bec:	00001d06 	br	2c64 <wr8+0xe8>
	case B:
		cpu->registers.b = value;
    2bf0:	e0bffd17 	ldw	r2,-12(fp)
    2bf4:	e0ffff03 	ldbu	r3,-4(fp)
    2bf8:	10c00245 	stb	r3,9(r2)
		break;
    2bfc:	00001906 	br	2c64 <wr8+0xe8>
	case C:
		cpu->registers.c = value;
    2c00:	e0bffd17 	ldw	r2,-12(fp)
    2c04:	e0ffff03 	ldbu	r3,-4(fp)
    2c08:	10c00285 	stb	r3,10(r2)
		break;
    2c0c:	00001506 	br	2c64 <wr8+0xe8>
	case D:
		cpu->registers.d = value;
    2c10:	e0bffd17 	ldw	r2,-12(fp)
    2c14:	e0ffff03 	ldbu	r3,-4(fp)
    2c18:	10c002c5 	stb	r3,11(r2)
		break;
    2c1c:	00001106 	br	2c64 <wr8+0xe8>
	case E:
		cpu->registers.e = value;
    2c20:	e0bffd17 	ldw	r2,-12(fp)
    2c24:	e0ffff03 	ldbu	r3,-4(fp)
    2c28:	10c00305 	stb	r3,12(r2)
		break;
    2c2c:	00000d06 	br	2c64 <wr8+0xe8>
	case F:
		cpu->registers.f = value;
    2c30:	e0bffd17 	ldw	r2,-12(fp)
    2c34:	e0ffff03 	ldbu	r3,-4(fp)
    2c38:	10c003c5 	stb	r3,15(r2)
		break;
    2c3c:	00000906 	br	2c64 <wr8+0xe8>
	case H:
		cpu->registers.h = value;
    2c40:	e0bffd17 	ldw	r2,-12(fp)
    2c44:	e0ffff03 	ldbu	r3,-4(fp)
    2c48:	10c00345 	stb	r3,13(r2)
		break;
    2c4c:	00000506 	br	2c64 <wr8+0xe8>
	case L:
		cpu->registers.l = value;
    2c50:	e0bffd17 	ldw	r2,-12(fp)
    2c54:	e0ffff03 	ldbu	r3,-4(fp)
    2c58:	10c00385 	stb	r3,14(r2)
		break;
    2c5c:	00000106 	br	2c64 <wr8+0xe8>
	default:
		break;
    2c60:	0001883a 	nop
	}
}
    2c64:	0001883a 	nop
    2c68:	e037883a 	mov	sp,fp
    2c6c:	df000017 	ldw	fp,0(sp)
    2c70:	dec00104 	addi	sp,sp,4
    2c74:	f800283a 	ret

00002c78 <wr16>:

void wr16(CPU* cpu, reg_name r, word value) {
    2c78:	defffb04 	addi	sp,sp,-20
    2c7c:	df000415 	stw	fp,16(sp)
    2c80:	df000404 	addi	fp,sp,16
    2c84:	e13ffd15 	stw	r4,-12(fp)
    2c88:	e17ffe15 	stw	r5,-8(fp)
    2c8c:	3005883a 	mov	r2,r6
    2c90:	e0bfff0d 	sth	r2,-4(fp)
	byte p1 = 0x00;
    2c94:	e03ffc05 	stb	zero,-16(fp)
	byte p2 = 0x00;
    2c98:	e03ffc45 	stb	zero,-15(fp)
	p1 = (value & 0xFF00) >> 8;
    2c9c:	e0bfff0b 	ldhu	r2,-4(fp)
    2ca0:	1004d23a 	srli	r2,r2,8
    2ca4:	e0bffc05 	stb	r2,-16(fp)
	p2 = (value & 0x00FF);
    2ca8:	e0bfff0b 	ldhu	r2,-4(fp)
    2cac:	e0bffc45 	stb	r2,-15(fp)
	switch(r) {
    2cb0:	e0bffe17 	ldw	r2,-8(fp)
    2cb4:	10bffe04 	addi	r2,r2,-8
    2cb8:	10c001a8 	cmpgeui	r3,r2,6
    2cbc:	1800301e 	bne	r3,zero,2d80 <wr16+0x108>
    2cc0:	100690ba 	slli	r3,r2,2
    2cc4:	00800034 	movhi	r2,0
    2cc8:	108b3604 	addi	r2,r2,11480
    2ccc:	1885883a 	add	r2,r3,r2
    2cd0:	10800017 	ldw	r2,0(r2)
    2cd4:	1000683a 	jmp	r2
    2cd8:	00002cf0 	cmpltui	zero,zero,179
    2cdc:	00002d0c 	andi	zero,zero,180
    2ce0:	00002d28 	cmpgeui	zero,zero,180
    2ce4:	00002d44 	movi	zero,181
    2ce8:	00002d60 	cmpeqi	zero,zero,181
    2cec:	00002d70 	cmpltui	zero,zero,181
	case AF:
		cpu->registers.a = p1;
    2cf0:	e0bffd17 	ldw	r2,-12(fp)
    2cf4:	e0fffc03 	ldbu	r3,-16(fp)
    2cf8:	10c00205 	stb	r3,8(r2)
		cpu->registers.f = p2;
    2cfc:	e0bffd17 	ldw	r2,-12(fp)
    2d00:	e0fffc43 	ldbu	r3,-15(fp)
    2d04:	10c003c5 	stb	r3,15(r2)
		break;
    2d08:	00001e06 	br	2d84 <wr16+0x10c>
	case BC:
		cpu->registers.b = p1;
    2d0c:	e0bffd17 	ldw	r2,-12(fp)
    2d10:	e0fffc03 	ldbu	r3,-16(fp)
    2d14:	10c00245 	stb	r3,9(r2)
		cpu->registers.c = p2;
    2d18:	e0bffd17 	ldw	r2,-12(fp)
    2d1c:	e0fffc43 	ldbu	r3,-15(fp)
    2d20:	10c00285 	stb	r3,10(r2)
		break;
    2d24:	00001706 	br	2d84 <wr16+0x10c>
	case DE:
		cpu->registers.d = p1;
    2d28:	e0bffd17 	ldw	r2,-12(fp)
    2d2c:	e0fffc03 	ldbu	r3,-16(fp)
    2d30:	10c002c5 	stb	r3,11(r2)
		cpu->registers.e = p2;
    2d34:	e0bffd17 	ldw	r2,-12(fp)
    2d38:	e0fffc43 	ldbu	r3,-15(fp)
    2d3c:	10c00305 	stb	r3,12(r2)
		break;
    2d40:	00001006 	br	2d84 <wr16+0x10c>
	case HL:
		cpu->registers.h = p1;
    2d44:	e0bffd17 	ldw	r2,-12(fp)
    2d48:	e0fffc03 	ldbu	r3,-16(fp)
    2d4c:	10c00345 	stb	r3,13(r2)
		cpu->registers.l = p2;
    2d50:	e0bffd17 	ldw	r2,-12(fp)
    2d54:	e0fffc43 	ldbu	r3,-15(fp)
    2d58:	10c00385 	stb	r3,14(r2)
		break;
    2d5c:	00000906 	br	2d84 <wr16+0x10c>
	case SP:
		cpu->registers.sp = value;
    2d60:	e0bffd17 	ldw	r2,-12(fp)
    2d64:	e0ffff0b 	ldhu	r3,-4(fp)
    2d68:	10c0048d 	sth	r3,18(r2)
		break;
    2d6c:	00000506 	br	2d84 <wr16+0x10c>
	case PC:
		cpu->registers.pc = value;
    2d70:	e0bffd17 	ldw	r2,-12(fp)
    2d74:	e0ffff0b 	ldhu	r3,-4(fp)
    2d78:	10c0040d 	sth	r3,16(r2)
		break;
    2d7c:	00000106 	br	2d84 <wr16+0x10c>
	default:
		break;
    2d80:	0001883a 	nop
	}
}
    2d84:	0001883a 	nop
    2d88:	e037883a 	mov	sp,fp
    2d8c:	df000017 	ldw	fp,0(sp)
    2d90:	dec00104 	addi	sp,sp,4
    2d94:	f800283a 	ret

00002d98 <halt>:

void halt(CPU* cpu) {
    2d98:	defffe04 	addi	sp,sp,-8
    2d9c:	df000115 	stw	fp,4(sp)
    2da0:	df000104 	addi	fp,sp,4
    2da4:	e13fff15 	stw	r4,-4(fp)
	cpu->is_halted = true;
    2da8:	e0bfff17 	ldw	r2,-4(fp)
    2dac:	00c00044 	movi	r3,1
    2db0:	10c00915 	stw	r3,36(r2)
}
    2db4:	0001883a 	nop
    2db8:	e037883a 	mov	sp,fp
    2dbc:	df000017 	ldw	fp,0(sp)
    2dc0:	dec00104 	addi	sp,sp,4
    2dc4:	f800283a 	ret

00002dc8 <unHalt>:

void unHalt(CPU* cpu) {
    2dc8:	defffe04 	addi	sp,sp,-8
    2dcc:	df000115 	stw	fp,4(sp)
    2dd0:	df000104 	addi	fp,sp,4
    2dd4:	e13fff15 	stw	r4,-4(fp)
	cpu->is_halted = false;
    2dd8:	e0bfff17 	ldw	r2,-4(fp)
    2ddc:	10000915 	stw	zero,36(r2)
}
    2de0:	0001883a 	nop
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <pause>:

void pause(CPU* cpu) {
    2df4:	defffe04 	addi	sp,sp,-8
    2df8:	df000115 	stw	fp,4(sp)
    2dfc:	df000104 	addi	fp,sp,4
    2e00:	e13fff15 	stw	r4,-4(fp)
	cpu->is_paused = true;
    2e04:	e0bfff17 	ldw	r2,-4(fp)
    2e08:	00c00044 	movi	r3,1
    2e0c:	10c00a15 	stw	r3,40(r2)
}
    2e10:	0001883a 	nop
    2e14:	e037883a 	mov	sp,fp
    2e18:	df000017 	ldw	fp,0(sp)
    2e1c:	dec00104 	addi	sp,sp,4
    2e20:	f800283a 	ret

00002e24 <unPause>:

void unPause(CPU* cpu) {
    2e24:	defffd04 	addi	sp,sp,-12
    2e28:	dfc00215 	stw	ra,8(sp)
    2e2c:	df000115 	stw	fp,4(sp)
    2e30:	df000104 	addi	fp,sp,4
    2e34:	e13fff15 	stw	r4,-4(fp)
	if(cpu->is_paused == true) {
    2e38:	e0bfff17 	ldw	r2,-4(fp)
    2e3c:	10800a17 	ldw	r2,40(r2)
    2e40:	10800058 	cmpnei	r2,r2,1
    2e44:	1000041e 	bne	r2,zero,2e58 <unPause+0x34>
		cpu->is_paused = false;
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	10000a15 	stw	zero,40(r2)
		fetch(cpu);
    2e50:	e13fff17 	ldw	r4,-4(fp)
    2e54:	00027200 	call	2720 <fetch>
	}
}
    2e58:	0001883a 	nop
    2e5c:	e037883a 	mov	sp,fp
    2e60:	dfc00117 	ldw	ra,4(sp)
    2e64:	df000017 	ldw	fp,0(sp)
    2e68:	dec00204 	addi	sp,sp,8
    2e6c:	f800283a 	ret

00002e70 <i0>:

void RSTn(CPU* cpu, word n);

void i0(CPU* cpu){RSTn(cpu, 0x40);}
    2e70:	defffd04 	addi	sp,sp,-12
    2e74:	dfc00215 	stw	ra,8(sp)
    2e78:	df000115 	stw	fp,4(sp)
    2e7c:	df000104 	addi	fp,sp,4
    2e80:	e13fff15 	stw	r4,-4(fp)
    2e84:	01401004 	movi	r5,64
    2e88:	e13fff17 	ldw	r4,-4(fp)
    2e8c:	000758c0 	call	758c <RSTn>
    2e90:	0001883a 	nop
    2e94:	e037883a 	mov	sp,fp
    2e98:	dfc00117 	ldw	ra,4(sp)
    2e9c:	df000017 	ldw	fp,0(sp)
    2ea0:	dec00204 	addi	sp,sp,8
    2ea4:	f800283a 	ret

00002ea8 <i1>:
void i1(CPU* cpu){RSTn(cpu, 0x48);}
    2ea8:	defffd04 	addi	sp,sp,-12
    2eac:	dfc00215 	stw	ra,8(sp)
    2eb0:	df000115 	stw	fp,4(sp)
    2eb4:	df000104 	addi	fp,sp,4
    2eb8:	e13fff15 	stw	r4,-4(fp)
    2ebc:	01401204 	movi	r5,72
    2ec0:	e13fff17 	ldw	r4,-4(fp)
    2ec4:	000758c0 	call	758c <RSTn>
    2ec8:	0001883a 	nop
    2ecc:	e037883a 	mov	sp,fp
    2ed0:	dfc00117 	ldw	ra,4(sp)
    2ed4:	df000017 	ldw	fp,0(sp)
    2ed8:	dec00204 	addi	sp,sp,8
    2edc:	f800283a 	ret

00002ee0 <i2>:
void i2(CPU* cpu){RSTn(cpu, 0x50);}
    2ee0:	defffd04 	addi	sp,sp,-12
    2ee4:	dfc00215 	stw	ra,8(sp)
    2ee8:	df000115 	stw	fp,4(sp)
    2eec:	df000104 	addi	fp,sp,4
    2ef0:	e13fff15 	stw	r4,-4(fp)
    2ef4:	01401404 	movi	r5,80
    2ef8:	e13fff17 	ldw	r4,-4(fp)
    2efc:	000758c0 	call	758c <RSTn>
    2f00:	0001883a 	nop
    2f04:	e037883a 	mov	sp,fp
    2f08:	dfc00117 	ldw	ra,4(sp)
    2f0c:	df000017 	ldw	fp,0(sp)
    2f10:	dec00204 	addi	sp,sp,8
    2f14:	f800283a 	ret

00002f18 <i3>:
void i3(CPU* cpu){RSTn(cpu, 0x58);}
    2f18:	defffd04 	addi	sp,sp,-12
    2f1c:	dfc00215 	stw	ra,8(sp)
    2f20:	df000115 	stw	fp,4(sp)
    2f24:	df000104 	addi	fp,sp,4
    2f28:	e13fff15 	stw	r4,-4(fp)
    2f2c:	01401604 	movi	r5,88
    2f30:	e13fff17 	ldw	r4,-4(fp)
    2f34:	000758c0 	call	758c <RSTn>
    2f38:	0001883a 	nop
    2f3c:	e037883a 	mov	sp,fp
    2f40:	dfc00117 	ldw	ra,4(sp)
    2f44:	df000017 	ldw	fp,0(sp)
    2f48:	dec00204 	addi	sp,sp,8
    2f4c:	f800283a 	ret

00002f50 <i4>:
void i4(CPU* cpu){RSTn(cpu, 0x60);}
    2f50:	defffd04 	addi	sp,sp,-12
    2f54:	dfc00215 	stw	ra,8(sp)
    2f58:	df000115 	stw	fp,4(sp)
    2f5c:	df000104 	addi	fp,sp,4
    2f60:	e13fff15 	stw	r4,-4(fp)
    2f64:	01401804 	movi	r5,96
    2f68:	e13fff17 	ldw	r4,-4(fp)
    2f6c:	000758c0 	call	758c <RSTn>
    2f70:	0001883a 	nop
    2f74:	e037883a 	mov	sp,fp
    2f78:	dfc00117 	ldw	ra,4(sp)
    2f7c:	df000017 	ldw	fp,0(sp)
    2f80:	dec00204 	addi	sp,sp,8
    2f84:	f800283a 	ret

00002f88 <checkInterrupt>:


bool isInterruptEnable(interupt_name index);
void disableInterrupts(CPU* cpu);
void checkInterrupt(CPU* cpu) {
    2f88:	defffb04 	addi	sp,sp,-20
    2f8c:	dfc00415 	stw	ra,16(sp)
    2f90:	df000315 	stw	fp,12(sp)
    2f94:	df000304 	addi	fp,sp,12
    2f98:	e13fff15 	stw	r4,-4(fp)
	if(cpu->IME_flag == false) return;
    2f9c:	e0bfff17 	ldw	r2,-4(fp)
    2fa0:	10800817 	ldw	r2,32(r2)
    2fa4:	10004a26 	beq	r2,zero,30d0 <checkInterrupt+0x148>

	for(unsigned i = 0; i < 5; i++) {
    2fa8:	e03ffd15 	stw	zero,-12(fp)
    2fac:	00004406 	br	30c0 <checkInterrupt+0x138>
		byte IFval = readData(0xFF0F);
    2fb0:	013fc3d4 	movui	r4,65295
    2fb4:	000026c0 	call	26c <readData>
    2fb8:	e0bffe05 	stb	r2,-8(fp)

		if (((IFval >> i) & 1) && isInterruptEnable(i)) {
    2fbc:	e0fffe03 	ldbu	r3,-8(fp)
    2fc0:	e0bffd17 	ldw	r2,-12(fp)
    2fc4:	1885d83a 	sra	r2,r3,r2
    2fc8:	1080004c 	andi	r2,r2,1
    2fcc:	10003926 	beq	r2,zero,30b4 <checkInterrupt+0x12c>
    2fd0:	e13ffd17 	ldw	r4,-12(fp)
    2fd4:	00031540 	call	3154 <isInterruptEnable>
    2fd8:	10003626 	beq	r2,zero,30b4 <checkInterrupt+0x12c>
			IFval &= (0xFF - (1<<i));
    2fdc:	00c00044 	movi	r3,1
    2fe0:	e0bffd17 	ldw	r2,-12(fp)
    2fe4:	1884983a 	sll	r2,r3,r2
    2fe8:	0084303a 	nor	r2,zero,r2
    2fec:	1007883a 	mov	r3,r2
    2ff0:	e0bffe03 	ldbu	r2,-8(fp)
    2ff4:	1884703a 	and	r2,r3,r2
    2ff8:	e0bffe05 	stb	r2,-8(fp)
			writeData(0xFF0F, IFval);
    2ffc:	e0bffe03 	ldbu	r2,-8(fp)
    3000:	100b883a 	mov	r5,r2
    3004:	013fc3d4 	movui	r4,65295
    3008:	00003640 	call	364 <writeData>
			disableInterrupts(cpu);
    300c:	e13fff17 	ldw	r4,-4(fp)
    3010:	00031d40 	call	31d4 <disableInterrupts>
			cpu->clock.c += 4;
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	10800017 	ldw	r2,0(r2)
    301c:	10c00104 	addi	r3,r2,4
    3020:	e0bfff17 	ldw	r2,-4(fp)
    3024:	10c00015 	stw	r3,0(r2)
			printf("INTERUPT!! %d\n", i);
    3028:	e17ffd17 	ldw	r5,-12(fp)
    302c:	010000b4 	movhi	r4,2
    3030:	2130ec04 	addi	r4,r4,-15440
    3034:	000cf8c0 	call	cf8c <printf>
			switch(i){
    3038:	e0bffd17 	ldw	r2,-12(fp)
    303c:	10800168 	cmpgeui	r2,r2,5
    3040:	1000251e 	bne	r2,zero,30d8 <checkInterrupt+0x150>
    3044:	e0bffd17 	ldw	r2,-12(fp)
    3048:	100690ba 	slli	r3,r2,2
    304c:	00800034 	movhi	r2,0
    3050:	108c1804 	addi	r2,r2,12384
    3054:	1885883a 	add	r2,r3,r2
    3058:	10800017 	ldw	r2,0(r2)
    305c:	1000683a 	jmp	r2
    3060:	00003074 	movhi	zero,193
    3064:	00003080 	call	308 <dmaTransfer+0x60>
    3068:	0000308c 	andi	zero,zero,194
    306c:	00003098 	cmpnei	zero,zero,194
    3070:	000030a4 	muli	zero,zero,194
			case 0:
				i0(cpu);
    3074:	e13fff17 	ldw	r4,-4(fp)
    3078:	0002e700 	call	2e70 <i0>
				break;
    307c:	00000c06 	br	30b0 <checkInterrupt+0x128>
			case 1:
				i1(cpu);
    3080:	e13fff17 	ldw	r4,-4(fp)
    3084:	0002ea80 	call	2ea8 <i1>
				break;
    3088:	00000906 	br	30b0 <checkInterrupt+0x128>
			case 2:
				i2(cpu);
    308c:	e13fff17 	ldw	r4,-4(fp)
    3090:	0002ee00 	call	2ee0 <i2>
				break;
    3094:	00000606 	br	30b0 <checkInterrupt+0x128>
			case 3:
				i3(cpu);
    3098:	e13fff17 	ldw	r4,-4(fp)
    309c:	0002f180 	call	2f18 <i3>
				break;
    30a0:	00000306 	br	30b0 <checkInterrupt+0x128>
			case 4:
				i4(cpu);
    30a4:	e13fff17 	ldw	r4,-4(fp)
    30a8:	0002f500 	call	2f50 <i4>
				break;
    30ac:	0001883a 	nop
			}
			break;
    30b0:	00000906 	br	30d8 <checkInterrupt+0x150>
bool isInterruptEnable(interupt_name index);
void disableInterrupts(CPU* cpu);
void checkInterrupt(CPU* cpu) {
	if(cpu->IME_flag == false) return;

	for(unsigned i = 0; i < 5; i++) {
    30b4:	e0bffd17 	ldw	r2,-12(fp)
    30b8:	10800044 	addi	r2,r2,1
    30bc:	e0bffd15 	stw	r2,-12(fp)
    30c0:	e0bffd17 	ldw	r2,-12(fp)
    30c4:	10800170 	cmpltui	r2,r2,5
    30c8:	103fb91e 	bne	r2,zero,2fb0 <__alt_data_end+0xfc002fb0>
    30cc:	00000306 	br	30dc <checkInterrupt+0x154>


bool isInterruptEnable(interupt_name index);
void disableInterrupts(CPU* cpu);
void checkInterrupt(CPU* cpu) {
	if(cpu->IME_flag == false) return;
    30d0:	0001883a 	nop
    30d4:	00000106 	br	30dc <checkInterrupt+0x154>
				break;
			case 4:
				i4(cpu);
				break;
			}
			break;
    30d8:	0001883a 	nop
		}
	}
}
    30dc:	e037883a 	mov	sp,fp
    30e0:	dfc00117 	ldw	ra,4(sp)
    30e4:	df000017 	ldw	fp,0(sp)
    30e8:	dec00204 	addi	sp,sp,8
    30ec:	f800283a 	ret

000030f0 <requestInterrupt>:

void requestInterrupt(interupt_name index) {
    30f0:	defffc04 	addi	sp,sp,-16
    30f4:	dfc00315 	stw	ra,12(sp)
    30f8:	df000215 	stw	fp,8(sp)
    30fc:	df000204 	addi	fp,sp,8
    3100:	e13fff15 	stw	r4,-4(fp)
	byte IFval = readData(0xFF0F);
    3104:	013fc3d4 	movui	r4,65295
    3108:	000026c0 	call	26c <readData>
    310c:	e0bffe05 	stb	r2,-8(fp)
	IFval |= (1 << index);
    3110:	00c00044 	movi	r3,1
    3114:	e0bfff17 	ldw	r2,-4(fp)
    3118:	1884983a 	sll	r2,r3,r2
    311c:	1007883a 	mov	r3,r2
    3120:	e0bffe03 	ldbu	r2,-8(fp)
    3124:	1884b03a 	or	r2,r3,r2
    3128:	e0bffe05 	stb	r2,-8(fp)
	writeData(0xFF0F, IFval);
    312c:	e0bffe03 	ldbu	r2,-8(fp)
    3130:	100b883a 	mov	r5,r2
    3134:	013fc3d4 	movui	r4,65295
    3138:	00003640 	call	364 <writeData>
//	unHalt();
}
    313c:	0001883a 	nop
    3140:	e037883a 	mov	sp,fp
    3144:	dfc00117 	ldw	ra,4(sp)
    3148:	df000017 	ldw	fp,0(sp)
    314c:	dec00204 	addi	sp,sp,8
    3150:	f800283a 	ret

00003154 <isInterruptEnable>:

bool isInterruptEnable(interupt_name index) {
    3154:	defffd04 	addi	sp,sp,-12
    3158:	dfc00215 	stw	ra,8(sp)
    315c:	df000115 	stw	fp,4(sp)
    3160:	df000104 	addi	fp,sp,4
    3164:	e13fff15 	stw	r4,-4(fp)
	if ((readData(0xFFFF) >> index & 1) != 0) {
    3168:	013fffd4 	movui	r4,65535
    316c:	000026c0 	call	26c <readData>
    3170:	10c03fcc 	andi	r3,r2,255
    3174:	e0bfff17 	ldw	r2,-4(fp)
    3178:	1885d83a 	sra	r2,r3,r2
    317c:	1080004c 	andi	r2,r2,1
    3180:	10000226 	beq	r2,zero,318c <isInterruptEnable+0x38>
		return true;
    3184:	00800044 	movi	r2,1
    3188:	00000106 	br	3190 <isInterruptEnable+0x3c>
	}
	else {
		return false;
    318c:	0005883a 	mov	r2,zero
	}
}
    3190:	e037883a 	mov	sp,fp
    3194:	dfc00117 	ldw	ra,4(sp)
    3198:	df000017 	ldw	fp,0(sp)
    319c:	dec00204 	addi	sp,sp,8
    31a0:	f800283a 	ret

000031a4 <enableInterrupts>:

void enableInterrupts(CPU* cpu) {
    31a4:	defffe04 	addi	sp,sp,-8
    31a8:	df000115 	stw	fp,4(sp)
    31ac:	df000104 	addi	fp,sp,4
    31b0:	e13fff15 	stw	r4,-4(fp)
	cpu->IME_flag = true;
    31b4:	e0bfff17 	ldw	r2,-4(fp)
    31b8:	00c00044 	movi	r3,1
    31bc:	10c00815 	stw	r3,32(r2)
}
    31c0:	0001883a 	nop
    31c4:	e037883a 	mov	sp,fp
    31c8:	df000017 	ldw	fp,0(sp)
    31cc:	dec00104 	addi	sp,sp,4
    31d0:	f800283a 	ret

000031d4 <disableInterrupts>:

void disableInterrupts(CPU* cpu) {
    31d4:	defffe04 	addi	sp,sp,-8
    31d8:	df000115 	stw	fp,4(sp)
    31dc:	df000104 	addi	fp,sp,4
    31e0:	e13fff15 	stw	r4,-4(fp)
	cpu->IME_flag = false;
    31e4:	e0bfff17 	ldw	r2,-4(fp)
    31e8:	10000815 	stw	zero,32(r2)
}
    31ec:	0001883a 	nop
    31f0:	e037883a 	mov	sp,fp
    31f4:	df000017 	ldw	fp,0(sp)
    31f8:	dec00104 	addi	sp,sp,4
    31fc:	f800283a 	ret

00003200 <readAddr>:

//End CPU
//Start Instructions
word readAddr(CPU* cpu, reg_name r1, reg_name r2) {
    3200:	defffa04 	addi	sp,sp,-24
    3204:	dfc00515 	stw	ra,20(sp)
    3208:	df000415 	stw	fp,16(sp)
    320c:	df000404 	addi	fp,sp,16
    3210:	e13ffd15 	stw	r4,-12(fp)
    3214:	e17ffe15 	stw	r5,-8(fp)
    3218:	e1bfff15 	stw	r6,-4(fp)
	word out = 0x0000;
    321c:	e03ffc0d 	sth	zero,-16(fp)
	out += rr8(cpu, r1);
    3220:	e17ffe17 	ldw	r5,-8(fp)
    3224:	e13ffd17 	ldw	r4,-12(fp)
    3228:	00029180 	call	2918 <rr8>
    322c:	10c03fcc 	andi	r3,r2,255
    3230:	e0bffc0b 	ldhu	r2,-16(fp)
    3234:	1885883a 	add	r2,r3,r2
    3238:	e0bffc0d 	sth	r2,-16(fp)
	out = out << 8;
    323c:	e0bffc0b 	ldhu	r2,-16(fp)
    3240:	1004923a 	slli	r2,r2,8
    3244:	e0bffc0d 	sth	r2,-16(fp)
	out += rr8(cpu, r2);
    3248:	e17fff17 	ldw	r5,-4(fp)
    324c:	e13ffd17 	ldw	r4,-12(fp)
    3250:	00029180 	call	2918 <rr8>
    3254:	10c03fcc 	andi	r3,r2,255
    3258:	e0bffc0b 	ldhu	r2,-16(fp)
    325c:	1885883a 	add	r2,r3,r2
    3260:	e0bffc0d 	sth	r2,-16(fp)
	return out;
    3264:	e0bffc0b 	ldhu	r2,-16(fp)
}
    3268:	e037883a 	mov	sp,fp
    326c:	dfc00117 	ldw	ra,4(sp)
    3270:	df000017 	ldw	fp,0(sp)
    3274:	dec00204 	addi	sp,sp,8
    3278:	f800283a 	ret

0000327c <getSignedValue>:
int getSignedValue(byte v) {
    327c:	defffd04 	addi	sp,sp,-12
    3280:	df000215 	stw	fp,8(sp)
    3284:	df000204 	addi	fp,sp,8
    3288:	2005883a 	mov	r2,r4
    328c:	e0bfff05 	stb	r2,-4(fp)
	int val = 0;
    3290:	e03ffe15 	stw	zero,-8(fp)
	if(v & 0x80) {
    3294:	e0bfff03 	ldbu	r2,-4(fp)
    3298:	10803fcc 	andi	r2,r2,255
    329c:	1080201c 	xori	r2,r2,128
    32a0:	10bfe004 	addi	r2,r2,-128
    32a4:	1000080e 	bge	r2,zero,32c8 <getSignedValue+0x4c>
//		printf("If\n");
		val += v;
    32a8:	e0bfff03 	ldbu	r2,-4(fp)
    32ac:	e0fffe17 	ldw	r3,-8(fp)
    32b0:	1885883a 	add	r2,r3,r2
    32b4:	e0bffe15 	stw	r2,-8(fp)
		val -= 256;
    32b8:	e0bffe17 	ldw	r2,-8(fp)
    32bc:	10bfc004 	addi	r2,r2,-256
    32c0:	e0bffe15 	stw	r2,-8(fp)
    32c4:	00000406 	br	32d8 <getSignedValue+0x5c>
	}else {
//		printf("Else\n");
		val += v;
    32c8:	e0bfff03 	ldbu	r2,-4(fp)
    32cc:	e0fffe17 	ldw	r3,-8(fp)
    32d0:	1885883a 	add	r2,r3,r2
    32d4:	e0bffe15 	stw	r2,-8(fp)
	}
	return val;
    32d8:	e0bffe17 	ldw	r2,-8(fp)
}
    32dc:	e037883a 	mov	sp,fp
    32e0:	df000017 	ldw	fp,0(sp)
    32e4:	dec00104 	addi	sp,sp,4
    32e8:	f800283a 	ret

000032ec <LDrrnn>:
void _LDav(CPU* cpu, word addr, byte val);
void LDrrnn(CPU* cpu, reg_name r1, reg_name r2) {
    32ec:	defffb04 	addi	sp,sp,-20
    32f0:	dfc00415 	stw	ra,16(sp)
    32f4:	df000315 	stw	fp,12(sp)
    32f8:	df000304 	addi	fp,sp,12
    32fc:	e13ffd15 	stw	r4,-12(fp)
    3300:	e17ffe15 	stw	r5,-8(fp)
    3304:	e1bfff15 	stw	r6,-4(fp)
	wr8(cpu, r2, readData(cpu->registers.pc));
    3308:	e0bffd17 	ldw	r2,-12(fp)
    330c:	1080040b 	ldhu	r2,16(r2)
    3310:	10bfffcc 	andi	r2,r2,65535
    3314:	1009883a 	mov	r4,r2
    3318:	000026c0 	call	26c <readData>
    331c:	10803fcc 	andi	r2,r2,255
    3320:	100d883a 	mov	r6,r2
    3324:	e17fff17 	ldw	r5,-4(fp)
    3328:	e13ffd17 	ldw	r4,-12(fp)
    332c:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, r1, readData(cpu->registers.pc + 1));
    3330:	e0bffd17 	ldw	r2,-12(fp)
    3334:	1080040b 	ldhu	r2,16(r2)
    3338:	10800044 	addi	r2,r2,1
    333c:	10bfffcc 	andi	r2,r2,65535
    3340:	1009883a 	mov	r4,r2
    3344:	000026c0 	call	26c <readData>
    3348:	10803fcc 	andi	r2,r2,255
    334c:	100d883a 	mov	r6,r2
    3350:	e17ffe17 	ldw	r5,-8(fp)
    3354:	e13ffd17 	ldw	r4,-12(fp)
    3358:	0002b7c0 	call	2b7c <wr8>
	cpu->registers.pc += 2;
    335c:	e0bffd17 	ldw	r2,-12(fp)
    3360:	1080040b 	ldhu	r2,16(r2)
    3364:	10800084 	addi	r2,r2,2
    3368:	1007883a 	mov	r3,r2
    336c:	e0bffd17 	ldw	r2,-12(fp)
    3370:	10c0040d 	sth	r3,16(r2)
	cpu->clock.c += 12;
    3374:	e0bffd17 	ldw	r2,-12(fp)
    3378:	10800017 	ldw	r2,0(r2)
    337c:	10c00304 	addi	r3,r2,12
    3380:	e0bffd17 	ldw	r2,-12(fp)
    3384:	10c00015 	stw	r3,0(r2)
}
    3388:	0001883a 	nop
    338c:	e037883a 	mov	sp,fp
    3390:	dfc00117 	ldw	ra,4(sp)
    3394:	df000017 	ldw	fp,0(sp)
    3398:	dec00204 	addi	sp,sp,8
    339c:	f800283a 	ret

000033a0 <LDrrar>:
void LDrrar(CPU* cpu, reg_name r1, reg_name r2, reg_name r3) {
    33a0:	defff904 	addi	sp,sp,-28
    33a4:	dfc00615 	stw	ra,24(sp)
    33a8:	df000515 	stw	fp,20(sp)
    33ac:	dc000415 	stw	r16,16(sp)
    33b0:	df000504 	addi	fp,sp,20
    33b4:	e13ffb15 	stw	r4,-20(fp)
    33b8:	e17ffc15 	stw	r5,-16(fp)
    33bc:	e1bffd15 	stw	r6,-12(fp)
    33c0:	e1fffe15 	stw	r7,-8(fp)
	_LDav(cpu, readAddr(cpu, r1, r2), rr8(cpu, r3));
    33c4:	e1bffd17 	ldw	r6,-12(fp)
    33c8:	e17ffc17 	ldw	r5,-16(fp)
    33cc:	e13ffb17 	ldw	r4,-20(fp)
    33d0:	00032000 	call	3200 <readAddr>
    33d4:	143fffcc 	andi	r16,r2,65535
    33d8:	e17ffe17 	ldw	r5,-8(fp)
    33dc:	e13ffb17 	ldw	r4,-20(fp)
    33e0:	00029180 	call	2918 <rr8>
    33e4:	10803fcc 	andi	r2,r2,255
    33e8:	100d883a 	mov	r6,r2
    33ec:	800b883a 	mov	r5,r16
    33f0:	e13ffb17 	ldw	r4,-20(fp)
    33f4:	0003c680 	call	3c68 <_LDav>
	cpu->clock.c += 8;
    33f8:	e0bffb17 	ldw	r2,-20(fp)
    33fc:	10800017 	ldw	r2,0(r2)
    3400:	10c00204 	addi	r3,r2,8
    3404:	e0bffb17 	ldw	r2,-20(fp)
    3408:	10c00015 	stw	r3,0(r2)
}
    340c:	0001883a 	nop
    3410:	e6ffff04 	addi	sp,fp,-4
    3414:	dfc00217 	ldw	ra,8(sp)
    3418:	df000117 	ldw	fp,4(sp)
    341c:	dc000017 	ldw	r16,0(sp)
    3420:	dec00304 	addi	sp,sp,12
    3424:	f800283a 	ret

00003428 <LDrrra>:
void LDrrra(CPU* cpu, reg_name r1, reg_name r2, reg_name r3) {
    3428:	defffa04 	addi	sp,sp,-24
    342c:	dfc00515 	stw	ra,20(sp)
    3430:	df000415 	stw	fp,16(sp)
    3434:	df000404 	addi	fp,sp,16
    3438:	e13ffc15 	stw	r4,-16(fp)
    343c:	e17ffd15 	stw	r5,-12(fp)
    3440:	e1bffe15 	stw	r6,-8(fp)
    3444:	e1ffff15 	stw	r7,-4(fp)
	wr8(cpu, r1, readData(readAddr(cpu, r2, r3)));
    3448:	e1bfff17 	ldw	r6,-4(fp)
    344c:	e17ffe17 	ldw	r5,-8(fp)
    3450:	e13ffc17 	ldw	r4,-16(fp)
    3454:	00032000 	call	3200 <readAddr>
    3458:	10bfffcc 	andi	r2,r2,65535
    345c:	1009883a 	mov	r4,r2
    3460:	000026c0 	call	26c <readData>
    3464:	10803fcc 	andi	r2,r2,255
    3468:	100d883a 	mov	r6,r2
    346c:	e17ffd17 	ldw	r5,-12(fp)
    3470:	e13ffc17 	ldw	r4,-16(fp)
    3474:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 8;
    3478:	e0bffc17 	ldw	r2,-16(fp)
    347c:	10800017 	ldw	r2,0(r2)
    3480:	10c00204 	addi	r3,r2,8
    3484:	e0bffc17 	ldw	r2,-16(fp)
    3488:	10c00015 	stw	r3,0(r2)
}
    348c:	0001883a 	nop
    3490:	e037883a 	mov	sp,fp
    3494:	dfc00117 	ldw	ra,4(sp)
    3498:	df000017 	ldw	fp,0(sp)
    349c:	dec00204 	addi	sp,sp,8
    34a0:	f800283a 	ret

000034a4 <LDrn>:
void LDrn(CPU* cpu, reg_name r1){
    34a4:	defffc04 	addi	sp,sp,-16
    34a8:	dfc00315 	stw	ra,12(sp)
    34ac:	df000215 	stw	fp,8(sp)
    34b0:	df000204 	addi	fp,sp,8
    34b4:	e13ffe15 	stw	r4,-8(fp)
    34b8:	e17fff15 	stw	r5,-4(fp)
	wr8(cpu, r1, readData(cpu->registers.pc++));
    34bc:	e0bffe17 	ldw	r2,-8(fp)
    34c0:	1080040b 	ldhu	r2,16(r2)
    34c4:	10c00044 	addi	r3,r2,1
    34c8:	1809883a 	mov	r4,r3
    34cc:	e0fffe17 	ldw	r3,-8(fp)
    34d0:	1900040d 	sth	r4,16(r3)
    34d4:	10bfffcc 	andi	r2,r2,65535
    34d8:	1009883a 	mov	r4,r2
    34dc:	000026c0 	call	26c <readData>
    34e0:	10803fcc 	andi	r2,r2,255
    34e4:	100d883a 	mov	r6,r2
    34e8:	e17fff17 	ldw	r5,-4(fp)
    34ec:	e13ffe17 	ldw	r4,-8(fp)
    34f0:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 8;
    34f4:	e0bffe17 	ldw	r2,-8(fp)
    34f8:	10800017 	ldw	r2,0(r2)
    34fc:	10c00204 	addi	r3,r2,8
    3500:	e0bffe17 	ldw	r2,-8(fp)
    3504:	10c00015 	stw	r3,0(r2)
}
    3508:	0001883a 	nop
    350c:	e037883a 	mov	sp,fp
    3510:	dfc00117 	ldw	ra,4(sp)
    3514:	df000017 	ldw	fp,0(sp)
    3518:	dec00204 	addi	sp,sp,8
    351c:	f800283a 	ret

00003520 <LDrr>:
void LDrr(CPU* cpu, reg_name r1, reg_name r2) {
    3520:	defffb04 	addi	sp,sp,-20
    3524:	dfc00415 	stw	ra,16(sp)
    3528:	df000315 	stw	fp,12(sp)
    352c:	df000304 	addi	fp,sp,12
    3530:	e13ffd15 	stw	r4,-12(fp)
    3534:	e17ffe15 	stw	r5,-8(fp)
    3538:	e1bfff15 	stw	r6,-4(fp)
	wr8(cpu, r1, rr8(cpu, r2));
    353c:	e17fff17 	ldw	r5,-4(fp)
    3540:	e13ffd17 	ldw	r4,-12(fp)
    3544:	00029180 	call	2918 <rr8>
    3548:	10803fcc 	andi	r2,r2,255
    354c:	100d883a 	mov	r6,r2
    3550:	e17ffe17 	ldw	r5,-8(fp)
    3554:	e13ffd17 	ldw	r4,-12(fp)
    3558:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 4;
    355c:	e0bffd17 	ldw	r2,-12(fp)
    3560:	10800017 	ldw	r2,0(r2)
    3564:	10c00104 	addi	r3,r2,4
    3568:	e0bffd17 	ldw	r2,-12(fp)
    356c:	10c00015 	stw	r3,0(r2)
}
    3570:	0001883a 	nop
    3574:	e037883a 	mov	sp,fp
    3578:	dfc00117 	ldw	ra,4(sp)
    357c:	df000017 	ldw	fp,0(sp)
    3580:	dec00204 	addi	sp,sp,8
    3584:	f800283a 	ret

00003588 <LDrar>:
void LDrar(CPU* cpu, reg_name r1, reg_name r2) {
    3588:	defffa04 	addi	sp,sp,-24
    358c:	dfc00515 	stw	ra,20(sp)
    3590:	df000415 	stw	fp,16(sp)
    3594:	dc000315 	stw	r16,12(sp)
    3598:	df000404 	addi	fp,sp,16
    359c:	e13ffc15 	stw	r4,-16(fp)
    35a0:	e17ffd15 	stw	r5,-12(fp)
    35a4:	e1bffe15 	stw	r6,-8(fp)
	writeData(0xFF00 + rr8(cpu, r1), rr8(cpu, r2));
    35a8:	e17ffd17 	ldw	r5,-12(fp)
    35ac:	e13ffc17 	ldw	r4,-16(fp)
    35b0:	00029180 	call	2918 <rr8>
    35b4:	10803fcc 	andi	r2,r2,255
    35b8:	10bfc004 	addi	r2,r2,-256
    35bc:	143fffcc 	andi	r16,r2,65535
    35c0:	e17ffe17 	ldw	r5,-8(fp)
    35c4:	e13ffc17 	ldw	r4,-16(fp)
    35c8:	00029180 	call	2918 <rr8>
    35cc:	10803fcc 	andi	r2,r2,255
    35d0:	100b883a 	mov	r5,r2
    35d4:	8009883a 	mov	r4,r16
    35d8:	00003640 	call	364 <writeData>
	cpu->clock.c += 8;
    35dc:	e0bffc17 	ldw	r2,-16(fp)
    35e0:	10800017 	ldw	r2,0(r2)
    35e4:	10c00204 	addi	r3,r2,8
    35e8:	e0bffc17 	ldw	r2,-16(fp)
    35ec:	10c00015 	stw	r3,0(r2)
}
    35f0:	0001883a 	nop
    35f4:	e6ffff04 	addi	sp,fp,-4
    35f8:	dfc00217 	ldw	ra,8(sp)
    35fc:	df000117 	ldw	fp,4(sp)
    3600:	dc000017 	ldw	r16,0(sp)
    3604:	dec00304 	addi	sp,sp,12
    3608:	f800283a 	ret

0000360c <LDrra>:
void LDrra(CPU* cpu, reg_name r1, reg_name r2) {
    360c:	defffb04 	addi	sp,sp,-20
    3610:	dfc00415 	stw	ra,16(sp)
    3614:	df000315 	stw	fp,12(sp)
    3618:	df000304 	addi	fp,sp,12
    361c:	e13ffd15 	stw	r4,-12(fp)
    3620:	e17ffe15 	stw	r5,-8(fp)
    3624:	e1bfff15 	stw	r6,-4(fp)
	wr8(cpu, r1, readData(0xFF00 + rr8(cpu, r2)));
    3628:	e17fff17 	ldw	r5,-4(fp)
    362c:	e13ffd17 	ldw	r4,-12(fp)
    3630:	00029180 	call	2918 <rr8>
    3634:	10803fcc 	andi	r2,r2,255
    3638:	10bfc004 	addi	r2,r2,-256
    363c:	10bfffcc 	andi	r2,r2,65535
    3640:	1009883a 	mov	r4,r2
    3644:	000026c0 	call	26c <readData>
    3648:	10803fcc 	andi	r2,r2,255
    364c:	100d883a 	mov	r6,r2
    3650:	e17ffe17 	ldw	r5,-8(fp)
    3654:	e13ffd17 	ldw	r4,-12(fp)
    3658:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 8;
    365c:	e0bffd17 	ldw	r2,-12(fp)
    3660:	10800017 	ldw	r2,0(r2)
    3664:	10c00204 	addi	r3,r2,8
    3668:	e0bffd17 	ldw	r2,-12(fp)
    366c:	10c00015 	stw	r3,0(r2)
}
    3670:	0001883a 	nop
    3674:	e037883a 	mov	sp,fp
    3678:	dfc00117 	ldw	ra,4(sp)
    367c:	df000017 	ldw	fp,0(sp)
    3680:	dec00204 	addi	sp,sp,8
    3684:	f800283a 	ret

00003688 <LDspnn>:
void LDspnn(CPU* cpu) {
    3688:	defffc04 	addi	sp,sp,-16
    368c:	dfc00315 	stw	ra,12(sp)
    3690:	df000215 	stw	fp,8(sp)
    3694:	dc000115 	stw	r16,4(sp)
    3698:	df000204 	addi	fp,sp,8
    369c:	e13ffe15 	stw	r4,-8(fp)
	wr16(cpu, SP, 0x0000 + readData((cpu->registers.pc + 1) << 8) + readData(cpu->registers.pc));
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	1080040b 	ldhu	r2,16(r2)
    36a8:	10800044 	addi	r2,r2,1
    36ac:	1004923a 	slli	r2,r2,8
    36b0:	10bfffcc 	andi	r2,r2,65535
    36b4:	1009883a 	mov	r4,r2
    36b8:	000026c0 	call	26c <readData>
    36bc:	14003fcc 	andi	r16,r2,255
    36c0:	e0bffe17 	ldw	r2,-8(fp)
    36c4:	1080040b 	ldhu	r2,16(r2)
    36c8:	10bfffcc 	andi	r2,r2,65535
    36cc:	1009883a 	mov	r4,r2
    36d0:	000026c0 	call	26c <readData>
    36d4:	10803fcc 	andi	r2,r2,255
    36d8:	8085883a 	add	r2,r16,r2
    36dc:	10bfffcc 	andi	r2,r2,65535
    36e0:	100d883a 	mov	r6,r2
    36e4:	01400304 	movi	r5,12
    36e8:	e13ffe17 	ldw	r4,-8(fp)
    36ec:	0002c780 	call	2c78 <wr16>
	cpu->registers.pc += 2;
    36f0:	e0bffe17 	ldw	r2,-8(fp)
    36f4:	1080040b 	ldhu	r2,16(r2)
    36f8:	10800084 	addi	r2,r2,2
    36fc:	1007883a 	mov	r3,r2
    3700:	e0bffe17 	ldw	r2,-8(fp)
    3704:	10c0040d 	sth	r3,16(r2)
	cpu->clock.c += 12;
    3708:	e0bffe17 	ldw	r2,-8(fp)
    370c:	10800017 	ldw	r2,0(r2)
    3710:	10c00304 	addi	r3,r2,12
    3714:	e0bffe17 	ldw	r2,-8(fp)
    3718:	10c00015 	stw	r3,0(r2)
}
    371c:	0001883a 	nop
    3720:	e6ffff04 	addi	sp,fp,-4
    3724:	dfc00217 	ldw	ra,8(sp)
    3728:	df000117 	ldw	fp,4(sp)
    372c:	dc000017 	ldw	r16,0(sp)
    3730:	dec00304 	addi	sp,sp,12
    3734:	f800283a 	ret

00003738 <LDsprr>:
void LDsprr(CPU* cpu, reg_name r1, reg_name r2) {
    3738:	defffb04 	addi	sp,sp,-20
    373c:	dfc00415 	stw	ra,16(sp)
    3740:	df000315 	stw	fp,12(sp)
    3744:	df000304 	addi	fp,sp,12
    3748:	e13ffd15 	stw	r4,-12(fp)
    374c:	e17ffe15 	stw	r5,-8(fp)
    3750:	e1bfff15 	stw	r6,-4(fp)
	wr16(cpu, SP, readAddr(cpu, r1, r2));
    3754:	e1bfff17 	ldw	r6,-4(fp)
    3758:	e17ffe17 	ldw	r5,-8(fp)
    375c:	e13ffd17 	ldw	r4,-12(fp)
    3760:	00032000 	call	3200 <readAddr>
    3764:	10bfffcc 	andi	r2,r2,65535
    3768:	100d883a 	mov	r6,r2
    376c:	01400304 	movi	r5,12
    3770:	e13ffd17 	ldw	r4,-12(fp)
    3774:	0002c780 	call	2c78 <wr16>
	cpu->clock.c += 8;
    3778:	e0bffd17 	ldw	r2,-12(fp)
    377c:	10800017 	ldw	r2,0(r2)
    3780:	10c00204 	addi	r3,r2,8
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	10c00015 	stw	r3,0(r2)
}
    378c:	0001883a 	nop
    3790:	e037883a 	mov	sp,fp
    3794:	dfc00117 	ldw	ra,4(sp)
    3798:	df000017 	ldw	fp,0(sp)
    379c:	dec00204 	addi	sp,sp,8
    37a0:	f800283a 	ret

000037a4 <LDnnar>:
void LDnnar(CPU* cpu, reg_name r1) {
    37a4:	defffa04 	addi	sp,sp,-24
    37a8:	dfc00515 	stw	ra,20(sp)
    37ac:	df000415 	stw	fp,16(sp)
    37b0:	dc000315 	stw	r16,12(sp)
    37b4:	df000404 	addi	fp,sp,16
    37b8:	e13ffd15 	stw	r4,-12(fp)
    37bc:	e17ffe15 	stw	r5,-8(fp)
	word addr = ((0x0000 + readData(cpu->registers.pc + 1)) << 8) + readData(cpu->registers.pc);
    37c0:	e0bffd17 	ldw	r2,-12(fp)
    37c4:	1080040b 	ldhu	r2,16(r2)
    37c8:	10800044 	addi	r2,r2,1
    37cc:	10bfffcc 	andi	r2,r2,65535
    37d0:	1009883a 	mov	r4,r2
    37d4:	000026c0 	call	26c <readData>
    37d8:	10803fcc 	andi	r2,r2,255
    37dc:	1004923a 	slli	r2,r2,8
    37e0:	1021883a 	mov	r16,r2
    37e4:	e0bffd17 	ldw	r2,-12(fp)
    37e8:	1080040b 	ldhu	r2,16(r2)
    37ec:	10bfffcc 	andi	r2,r2,65535
    37f0:	1009883a 	mov	r4,r2
    37f4:	000026c0 	call	26c <readData>
    37f8:	10803fcc 	andi	r2,r2,255
    37fc:	8085883a 	add	r2,r16,r2
    3800:	e0bffc0d 	sth	r2,-16(fp)
	writeData(addr, rr8(cpu, r1));
    3804:	e43ffc0b 	ldhu	r16,-16(fp)
    3808:	e17ffe17 	ldw	r5,-8(fp)
    380c:	e13ffd17 	ldw	r4,-12(fp)
    3810:	00029180 	call	2918 <rr8>
    3814:	10803fcc 	andi	r2,r2,255
    3818:	100b883a 	mov	r5,r2
    381c:	8009883a 	mov	r4,r16
    3820:	00003640 	call	364 <writeData>
	cpu->registers.pc += 2;
    3824:	e0bffd17 	ldw	r2,-12(fp)
    3828:	1080040b 	ldhu	r2,16(r2)
    382c:	10800084 	addi	r2,r2,2
    3830:	1007883a 	mov	r3,r2
    3834:	e0bffd17 	ldw	r2,-12(fp)
    3838:	10c0040d 	sth	r3,16(r2)
	cpu->clock.c += 16;
    383c:	e0bffd17 	ldw	r2,-12(fp)
    3840:	10800017 	ldw	r2,0(r2)
    3844:	10c00404 	addi	r3,r2,16
    3848:	e0bffd17 	ldw	r2,-12(fp)
    384c:	10c00015 	stw	r3,0(r2)
}
    3850:	0001883a 	nop
    3854:	e6ffff04 	addi	sp,fp,-4
    3858:	dfc00217 	ldw	ra,8(sp)
    385c:	df000117 	ldw	fp,4(sp)
    3860:	dc000017 	ldw	r16,0(sp)
    3864:	dec00304 	addi	sp,sp,12
    3868:	f800283a 	ret

0000386c <LDrnna>:
void LDrnna(CPU* cpu, reg_name r1) {
    386c:	defffa04 	addi	sp,sp,-24
    3870:	dfc00515 	stw	ra,20(sp)
    3874:	df000415 	stw	fp,16(sp)
    3878:	dc000315 	stw	r16,12(sp)
    387c:	df000404 	addi	fp,sp,16
    3880:	e13ffd15 	stw	r4,-12(fp)
    3884:	e17ffe15 	stw	r5,-8(fp)
	word addr = ((0x0000 + readData(cpu->registers.pc + 1)) << 8) + readData(cpu->registers.pc);
    3888:	e0bffd17 	ldw	r2,-12(fp)
    388c:	1080040b 	ldhu	r2,16(r2)
    3890:	10800044 	addi	r2,r2,1
    3894:	10bfffcc 	andi	r2,r2,65535
    3898:	1009883a 	mov	r4,r2
    389c:	000026c0 	call	26c <readData>
    38a0:	10803fcc 	andi	r2,r2,255
    38a4:	1004923a 	slli	r2,r2,8
    38a8:	1021883a 	mov	r16,r2
    38ac:	e0bffd17 	ldw	r2,-12(fp)
    38b0:	1080040b 	ldhu	r2,16(r2)
    38b4:	10bfffcc 	andi	r2,r2,65535
    38b8:	1009883a 	mov	r4,r2
    38bc:	000026c0 	call	26c <readData>
    38c0:	10803fcc 	andi	r2,r2,255
    38c4:	8085883a 	add	r2,r16,r2
    38c8:	e0bffc0d 	sth	r2,-16(fp)
	wr8(cpu, r1, readData(addr));
    38cc:	e0bffc0b 	ldhu	r2,-16(fp)
    38d0:	1009883a 	mov	r4,r2
    38d4:	000026c0 	call	26c <readData>
    38d8:	10803fcc 	andi	r2,r2,255
    38dc:	100d883a 	mov	r6,r2
    38e0:	e17ffe17 	ldw	r5,-8(fp)
    38e4:	e13ffd17 	ldw	r4,-12(fp)
    38e8:	0002b7c0 	call	2b7c <wr8>
	cpu->registers.pc += 2;
    38ec:	e0bffd17 	ldw	r2,-12(fp)
    38f0:	1080040b 	ldhu	r2,16(r2)
    38f4:	10800084 	addi	r2,r2,2
    38f8:	1007883a 	mov	r3,r2
    38fc:	e0bffd17 	ldw	r2,-12(fp)
    3900:	10c0040d 	sth	r3,16(r2)
	cpu->clock.c += 16;
    3904:	e0bffd17 	ldw	r2,-12(fp)
    3908:	10800017 	ldw	r2,0(r2)
    390c:	10c00404 	addi	r3,r2,16
    3910:	e0bffd17 	ldw	r2,-12(fp)
    3914:	10c00015 	stw	r3,0(r2)
}
    3918:	0001883a 	nop
    391c:	e6ffff04 	addi	sp,fp,-4
    3920:	dfc00217 	ldw	ra,8(sp)
    3924:	df000117 	ldw	fp,4(sp)
    3928:	dc000017 	ldw	r16,0(sp)
    392c:	dec00304 	addi	sp,sp,12
    3930:	f800283a 	ret

00003934 <LDrrspn>:
void LDrrspn(CPU* cpu, reg_name r1, reg_name r2) {
    3934:	defff604 	addi	sp,sp,-40
    3938:	dfc00915 	stw	ra,36(sp)
    393c:	df000815 	stw	fp,32(sp)
    3940:	df000804 	addi	fp,sp,32
    3944:	e13ffd15 	stw	r4,-12(fp)
    3948:	e17ffe15 	stw	r5,-8(fp)
    394c:	e1bfff15 	stw	r6,-4(fp)
	int rel = readData(cpu->registers.pc++);
    3950:	e0bffd17 	ldw	r2,-12(fp)
    3954:	1080040b 	ldhu	r2,16(r2)
    3958:	10c00044 	addi	r3,r2,1
    395c:	1809883a 	mov	r4,r3
    3960:	e0fffd17 	ldw	r3,-12(fp)
    3964:	1900040d 	sth	r4,16(r3)
    3968:	10bfffcc 	andi	r2,r2,65535
    396c:	1009883a 	mov	r4,r2
    3970:	000026c0 	call	26c <readData>
    3974:	10803fcc 	andi	r2,r2,255
    3978:	e0bff915 	stw	r2,-28(fp)
	rel = getSignedValue(rel);
    397c:	e0bff917 	ldw	r2,-28(fp)
    3980:	10803fcc 	andi	r2,r2,255
    3984:	1009883a 	mov	r4,r2
    3988:	000327c0 	call	327c <getSignedValue>
    398c:	e0bff915 	stw	r2,-28(fp)
	int val = cpu->registers.sp + rel;
    3990:	e0bffd17 	ldw	r2,-12(fp)
    3994:	1080048b 	ldhu	r2,18(r2)
    3998:	10ffffcc 	andi	r3,r2,65535
    399c:	e0bff917 	ldw	r2,-28(fp)
    39a0:	1885883a 	add	r2,r3,r2
    39a4:	e0bffa15 	stw	r2,-24(fp)
	int c = (cpu->registers.sp & 0xFF) + (rel & 0xFF) > 0xFF;
    39a8:	e0bffd17 	ldw	r2,-12(fp)
    39ac:	1080048b 	ldhu	r2,18(r2)
    39b0:	10bfffcc 	andi	r2,r2,65535
    39b4:	10c03fcc 	andi	r3,r2,255
    39b8:	e0bff917 	ldw	r2,-28(fp)
    39bc:	10803fcc 	andi	r2,r2,255
    39c0:	1885883a 	add	r2,r3,r2
    39c4:	10804008 	cmpgei	r2,r2,256
    39c8:	10803fcc 	andi	r2,r2,255
    39cc:	e0bffb15 	stw	r2,-20(fp)
	int h = (cpu->registers.sp & 0xF) + (rel & 0xF) > 0xF;
    39d0:	e0bffd17 	ldw	r2,-12(fp)
    39d4:	1080048b 	ldhu	r2,18(r2)
    39d8:	10bfffcc 	andi	r2,r2,65535
    39dc:	10c003cc 	andi	r3,r2,15
    39e0:	e0bff917 	ldw	r2,-28(fp)
    39e4:	108003cc 	andi	r2,r2,15
    39e8:	1885883a 	add	r2,r3,r2
    39ec:	10800408 	cmpgei	r2,r2,16
    39f0:	10803fcc 	andi	r2,r2,255
    39f4:	e0bffc15 	stw	r2,-16(fp)
	val &= 0xFFFF;
    39f8:	e0bffa17 	ldw	r2,-24(fp)
    39fc:	10bfffcc 	andi	r2,r2,65535
    3a00:	e0bffa15 	stw	r2,-24(fp)
	int f = 0;
    3a04:	e03ff815 	stw	zero,-32(fp)
	if(h) {
    3a08:	e0bffc17 	ldw	r2,-16(fp)
    3a0c:	10000326 	beq	r2,zero,3a1c <LDrrspn+0xe8>
		f |= 0x20;
    3a10:	e0bff817 	ldw	r2,-32(fp)
    3a14:	10800814 	ori	r2,r2,32
    3a18:	e0bff815 	stw	r2,-32(fp)
	}
	if(c) {
    3a1c:	e0bffb17 	ldw	r2,-20(fp)
    3a20:	10000326 	beq	r2,zero,3a30 <LDrrspn+0xfc>
		f |= 0x10;
    3a24:	e0bff817 	ldw	r2,-32(fp)
    3a28:	10800414 	ori	r2,r2,16
    3a2c:	e0bff815 	stw	r2,-32(fp)
	}
	wr8(cpu, F, f);
    3a30:	e0bff817 	ldw	r2,-32(fp)
    3a34:	10803fcc 	andi	r2,r2,255
    3a38:	100d883a 	mov	r6,r2
    3a3c:	01400144 	movi	r5,5
    3a40:	e13ffd17 	ldw	r4,-12(fp)
    3a44:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, r1, val >> 8);
    3a48:	e0bffa17 	ldw	r2,-24(fp)
    3a4c:	1005d23a 	srai	r2,r2,8
    3a50:	10803fcc 	andi	r2,r2,255
    3a54:	100d883a 	mov	r6,r2
    3a58:	e17ffe17 	ldw	r5,-8(fp)
    3a5c:	e13ffd17 	ldw	r4,-12(fp)
    3a60:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, r2, val & 0xFF);
    3a64:	e0bffa17 	ldw	r2,-24(fp)
    3a68:	10803fcc 	andi	r2,r2,255
    3a6c:	100d883a 	mov	r6,r2
    3a70:	e17fff17 	ldw	r5,-4(fp)
    3a74:	e13ffd17 	ldw	r4,-12(fp)
    3a78:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 12;
    3a7c:	e0bffd17 	ldw	r2,-12(fp)
    3a80:	10800017 	ldw	r2,0(r2)
    3a84:	10c00304 	addi	r3,r2,12
    3a88:	e0bffd17 	ldw	r2,-12(fp)
    3a8c:	10c00015 	stw	r3,0(r2)
}
    3a90:	0001883a 	nop
    3a94:	e037883a 	mov	sp,fp
    3a98:	dfc00117 	ldw	ra,4(sp)
    3a9c:	df000017 	ldw	fp,0(sp)
    3aa0:	dec00204 	addi	sp,sp,8
    3aa4:	f800283a 	ret

00003aa8 <LDnnsp>:
void LDnnsp(CPU* cpu) {
    3aa8:	defffb04 	addi	sp,sp,-20
    3aac:	dfc00415 	stw	ra,16(sp)
    3ab0:	df000315 	stw	fp,12(sp)
    3ab4:	dc000215 	stw	r16,8(sp)
    3ab8:	df000304 	addi	fp,sp,12
    3abc:	e13ffe15 	stw	r4,-8(fp)
	word addr = 0;
    3ac0:	e03ffd0d 	sth	zero,-12(fp)
	addr += readData(cpu->registers.pc++);
    3ac4:	e0bffe17 	ldw	r2,-8(fp)
    3ac8:	1080040b 	ldhu	r2,16(r2)
    3acc:	10c00044 	addi	r3,r2,1
    3ad0:	1809883a 	mov	r4,r3
    3ad4:	e0fffe17 	ldw	r3,-8(fp)
    3ad8:	1900040d 	sth	r4,16(r3)
    3adc:	10bfffcc 	andi	r2,r2,65535
    3ae0:	1009883a 	mov	r4,r2
    3ae4:	000026c0 	call	26c <readData>
    3ae8:	10c03fcc 	andi	r3,r2,255
    3aec:	e0bffd0b 	ldhu	r2,-12(fp)
    3af0:	1885883a 	add	r2,r3,r2
    3af4:	e0bffd0d 	sth	r2,-12(fp)
	word temp = readData(cpu->registers.pc++);
    3af8:	e0bffe17 	ldw	r2,-8(fp)
    3afc:	1080040b 	ldhu	r2,16(r2)
    3b00:	10c00044 	addi	r3,r2,1
    3b04:	1809883a 	mov	r4,r3
    3b08:	e0fffe17 	ldw	r3,-8(fp)
    3b0c:	1900040d 	sth	r4,16(r3)
    3b10:	10bfffcc 	andi	r2,r2,65535
    3b14:	1009883a 	mov	r4,r2
    3b18:	000026c0 	call	26c <readData>
    3b1c:	10803fcc 	andi	r2,r2,255
    3b20:	e0bffd8d 	sth	r2,-10(fp)
	temp = temp << 8;
    3b24:	e0bffd8b 	ldhu	r2,-10(fp)
    3b28:	1004923a 	slli	r2,r2,8
    3b2c:	e0bffd8d 	sth	r2,-10(fp)
	addr += temp;
    3b30:	e0fffd0b 	ldhu	r3,-12(fp)
    3b34:	e0bffd8b 	ldhu	r2,-10(fp)
    3b38:	1885883a 	add	r2,r3,r2
    3b3c:	e0bffd0d 	sth	r2,-12(fp)
	_LDav(cpu, addr, 0xFF & rr16(cpu, SP));
    3b40:	e43ffd0b 	ldhu	r16,-12(fp)
    3b44:	01400304 	movi	r5,12
    3b48:	e13ffe17 	ldw	r4,-8(fp)
    3b4c:	00029e80 	call	29e8 <rr16>
    3b50:	10803fcc 	andi	r2,r2,255
    3b54:	100d883a 	mov	r6,r2
    3b58:	800b883a 	mov	r5,r16
    3b5c:	e13ffe17 	ldw	r4,-8(fp)
    3b60:	0003c680 	call	3c68 <_LDav>
	_LDav(cpu, addr + 1, (rr16(cpu, SP) >> 8));
    3b64:	e0bffd0b 	ldhu	r2,-12(fp)
    3b68:	10800044 	addi	r2,r2,1
    3b6c:	143fffcc 	andi	r16,r2,65535
    3b70:	01400304 	movi	r5,12
    3b74:	e13ffe17 	ldw	r4,-8(fp)
    3b78:	00029e80 	call	29e8 <rr16>
    3b7c:	10bfffcc 	andi	r2,r2,65535
    3b80:	1004d23a 	srli	r2,r2,8
    3b84:	10803fcc 	andi	r2,r2,255
    3b88:	100d883a 	mov	r6,r2
    3b8c:	800b883a 	mov	r5,r16
    3b90:	e13ffe17 	ldw	r4,-8(fp)
    3b94:	0003c680 	call	3c68 <_LDav>
	cpu->clock.c += 20;
    3b98:	e0bffe17 	ldw	r2,-8(fp)
    3b9c:	10800017 	ldw	r2,0(r2)
    3ba0:	10c00504 	addi	r3,r2,20
    3ba4:	e0bffe17 	ldw	r2,-8(fp)
    3ba8:	10c00015 	stw	r3,0(r2)
}
    3bac:	0001883a 	nop
    3bb0:	e6ffff04 	addi	sp,fp,-4
    3bb4:	dfc00217 	ldw	ra,8(sp)
    3bb8:	df000117 	ldw	fp,4(sp)
    3bbc:	dc000017 	ldw	r16,0(sp)
    3bc0:	dec00304 	addi	sp,sp,12
    3bc4:	f800283a 	ret

00003bc8 <LDrran>:
void LDrran(CPU* cpu, reg_name r1, reg_name r2) {
    3bc8:	defff904 	addi	sp,sp,-28
    3bcc:	dfc00615 	stw	ra,24(sp)
    3bd0:	df000515 	stw	fp,20(sp)
    3bd4:	dc000415 	stw	r16,16(sp)
    3bd8:	df000504 	addi	fp,sp,20
    3bdc:	e13ffc15 	stw	r4,-16(fp)
    3be0:	e17ffd15 	stw	r5,-12(fp)
    3be4:	e1bffe15 	stw	r6,-8(fp)
	word addr = readAddr(cpu, r1, r2);
    3be8:	e1bffe17 	ldw	r6,-8(fp)
    3bec:	e17ffd17 	ldw	r5,-12(fp)
    3bf0:	e13ffc17 	ldw	r4,-16(fp)
    3bf4:	00032000 	call	3200 <readAddr>
    3bf8:	e0bffb0d 	sth	r2,-20(fp)
	_LDav(cpu, addr, readData(cpu->registers.pc++));
    3bfc:	e43ffb0b 	ldhu	r16,-20(fp)
    3c00:	e0bffc17 	ldw	r2,-16(fp)
    3c04:	1080040b 	ldhu	r2,16(r2)
    3c08:	10c00044 	addi	r3,r2,1
    3c0c:	1809883a 	mov	r4,r3
    3c10:	e0fffc17 	ldw	r3,-16(fp)
    3c14:	1900040d 	sth	r4,16(r3)
    3c18:	10bfffcc 	andi	r2,r2,65535
    3c1c:	1009883a 	mov	r4,r2
    3c20:	000026c0 	call	26c <readData>
    3c24:	10803fcc 	andi	r2,r2,255
    3c28:	100d883a 	mov	r6,r2
    3c2c:	800b883a 	mov	r5,r16
    3c30:	e13ffc17 	ldw	r4,-16(fp)
    3c34:	0003c680 	call	3c68 <_LDav>
	cpu->clock.c += 12;
    3c38:	e0bffc17 	ldw	r2,-16(fp)
    3c3c:	10800017 	ldw	r2,0(r2)
    3c40:	10c00304 	addi	r3,r2,12
    3c44:	e0bffc17 	ldw	r2,-16(fp)
    3c48:	10c00015 	stw	r3,0(r2)
}
    3c4c:	0001883a 	nop
    3c50:	e6ffff04 	addi	sp,fp,-4
    3c54:	dfc00217 	ldw	ra,8(sp)
    3c58:	df000117 	ldw	fp,4(sp)
    3c5c:	dc000017 	ldw	r16,0(sp)
    3c60:	dec00304 	addi	sp,sp,12
    3c64:	f800283a 	ret

00003c68 <_LDav>:
void _LDav(CPU* cpu, word addr, byte val) {
    3c68:	defffb04 	addi	sp,sp,-20
    3c6c:	dfc00415 	stw	ra,16(sp)
    3c70:	df000315 	stw	fp,12(sp)
    3c74:	df000304 	addi	fp,sp,12
    3c78:	e13ffd15 	stw	r4,-12(fp)
    3c7c:	2807883a 	mov	r3,r5
    3c80:	3005883a 	mov	r2,r6
    3c84:	e0fffe0d 	sth	r3,-8(fp)
    3c88:	e0bfff05 	stb	r2,-4(fp)
	writeData(addr, val);
    3c8c:	e0bffe0b 	ldhu	r2,-8(fp)
    3c90:	e0ffff03 	ldbu	r3,-4(fp)
    3c94:	180b883a 	mov	r5,r3
    3c98:	1009883a 	mov	r4,r2
    3c9c:	00003640 	call	364 <writeData>
}
    3ca0:	0001883a 	nop
    3ca4:	e037883a 	mov	sp,fp
    3ca8:	dfc00117 	ldw	ra,4(sp)
    3cac:	df000017 	ldw	fp,0(sp)
    3cb0:	dec00204 	addi	sp,sp,8
    3cb4:	f800283a 	ret

00003cb8 <LDHnar>:
void LDHnar(CPU* cpu, reg_name r1) {
    3cb8:	defffb04 	addi	sp,sp,-20
    3cbc:	dfc00415 	stw	ra,16(sp)
    3cc0:	df000315 	stw	fp,12(sp)
    3cc4:	dc000215 	stw	r16,8(sp)
    3cc8:	df000304 	addi	fp,sp,12
    3ccc:	e13ffd15 	stw	r4,-12(fp)
    3cd0:	e17ffe15 	stw	r5,-8(fp)
	writeData(0xFF00 + readData(cpu->registers.pc++), rr8(cpu, r1));
    3cd4:	e0bffd17 	ldw	r2,-12(fp)
    3cd8:	1080040b 	ldhu	r2,16(r2)
    3cdc:	10c00044 	addi	r3,r2,1
    3ce0:	1809883a 	mov	r4,r3
    3ce4:	e0fffd17 	ldw	r3,-12(fp)
    3ce8:	1900040d 	sth	r4,16(r3)
    3cec:	10bfffcc 	andi	r2,r2,65535
    3cf0:	1009883a 	mov	r4,r2
    3cf4:	000026c0 	call	26c <readData>
    3cf8:	10803fcc 	andi	r2,r2,255
    3cfc:	10bfc004 	addi	r2,r2,-256
    3d00:	143fffcc 	andi	r16,r2,65535
    3d04:	e17ffe17 	ldw	r5,-8(fp)
    3d08:	e13ffd17 	ldw	r4,-12(fp)
    3d0c:	00029180 	call	2918 <rr8>
    3d10:	10803fcc 	andi	r2,r2,255
    3d14:	100b883a 	mov	r5,r2
    3d18:	8009883a 	mov	r4,r16
    3d1c:	00003640 	call	364 <writeData>
	cpu->clock.c += 12;
    3d20:	e0bffd17 	ldw	r2,-12(fp)
    3d24:	10800017 	ldw	r2,0(r2)
    3d28:	10c00304 	addi	r3,r2,12
    3d2c:	e0bffd17 	ldw	r2,-12(fp)
    3d30:	10c00015 	stw	r3,0(r2)
}
    3d34:	0001883a 	nop
    3d38:	e6ffff04 	addi	sp,fp,-4
    3d3c:	dfc00217 	ldw	ra,8(sp)
    3d40:	df000117 	ldw	fp,4(sp)
    3d44:	dc000017 	ldw	r16,0(sp)
    3d48:	dec00304 	addi	sp,sp,12
    3d4c:	f800283a 	ret

00003d50 <LDHrna>:
void LDHrna(CPU* cpu, reg_name r1) {
    3d50:	defffc04 	addi	sp,sp,-16
    3d54:	dfc00315 	stw	ra,12(sp)
    3d58:	df000215 	stw	fp,8(sp)
    3d5c:	df000204 	addi	fp,sp,8
    3d60:	e13ffe15 	stw	r4,-8(fp)
    3d64:	e17fff15 	stw	r5,-4(fp)
	wr8(cpu, r1, readData(0xFF00 + readData(cpu->registers.pc++)));
    3d68:	e0bffe17 	ldw	r2,-8(fp)
    3d6c:	1080040b 	ldhu	r2,16(r2)
    3d70:	10c00044 	addi	r3,r2,1
    3d74:	1809883a 	mov	r4,r3
    3d78:	e0fffe17 	ldw	r3,-8(fp)
    3d7c:	1900040d 	sth	r4,16(r3)
    3d80:	10bfffcc 	andi	r2,r2,65535
    3d84:	1009883a 	mov	r4,r2
    3d88:	000026c0 	call	26c <readData>
    3d8c:	10803fcc 	andi	r2,r2,255
    3d90:	10bfc004 	addi	r2,r2,-256
    3d94:	10bfffcc 	andi	r2,r2,65535
    3d98:	1009883a 	mov	r4,r2
    3d9c:	000026c0 	call	26c <readData>
    3da0:	10803fcc 	andi	r2,r2,255
    3da4:	100d883a 	mov	r6,r2
    3da8:	e17fff17 	ldw	r5,-4(fp)
    3dac:	e13ffe17 	ldw	r4,-8(fp)
    3db0:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 12;
    3db4:	e0bffe17 	ldw	r2,-8(fp)
    3db8:	10800017 	ldw	r2,0(r2)
    3dbc:	10c00304 	addi	r3,r2,12
    3dc0:	e0bffe17 	ldw	r2,-8(fp)
    3dc4:	10c00015 	stw	r3,0(r2)
}
    3dc8:	0001883a 	nop
    3dcc:	e037883a 	mov	sp,fp
    3dd0:	dfc00117 	ldw	ra,4(sp)
    3dd4:	df000017 	ldw	fp,0(sp)
    3dd8:	dec00204 	addi	sp,sp,8
    3ddc:	f800283a 	ret

00003de0 <INCrr>:
void INCrr(CPU* cpu, reg_name r1, reg_name r2) {
    3de0:	defffb04 	addi	sp,sp,-20
    3de4:	dfc00415 	stw	ra,16(sp)
    3de8:	df000315 	stw	fp,12(sp)
    3dec:	df000304 	addi	fp,sp,12
    3df0:	e13ffd15 	stw	r4,-12(fp)
    3df4:	e17ffe15 	stw	r5,-8(fp)
    3df8:	e1bfff15 	stw	r6,-4(fp)
	wr8(cpu, r2, (rr8(cpu, r2) + 1) & 0xFF);
    3dfc:	e17fff17 	ldw	r5,-4(fp)
    3e00:	e13ffd17 	ldw	r4,-12(fp)
    3e04:	00029180 	call	2918 <rr8>
    3e08:	10800044 	addi	r2,r2,1
    3e0c:	10803fcc 	andi	r2,r2,255
    3e10:	100d883a 	mov	r6,r2
    3e14:	e17fff17 	ldw	r5,-4(fp)
    3e18:	e13ffd17 	ldw	r4,-12(fp)
    3e1c:	0002b7c0 	call	2b7c <wr8>
	if(rr8(cpu, r2) == 0) {
    3e20:	e17fff17 	ldw	r5,-4(fp)
    3e24:	e13ffd17 	ldw	r4,-12(fp)
    3e28:	00029180 	call	2918 <rr8>
    3e2c:	10803fcc 	andi	r2,r2,255
    3e30:	1000091e 	bne	r2,zero,3e58 <INCrr+0x78>
		wr8(cpu, r1, (rr8(cpu, r1) + 1) & 0xFF);
    3e34:	e17ffe17 	ldw	r5,-8(fp)
    3e38:	e13ffd17 	ldw	r4,-12(fp)
    3e3c:	00029180 	call	2918 <rr8>
    3e40:	10800044 	addi	r2,r2,1
    3e44:	10803fcc 	andi	r2,r2,255
    3e48:	100d883a 	mov	r6,r2
    3e4c:	e17ffe17 	ldw	r5,-8(fp)
    3e50:	e13ffd17 	ldw	r4,-12(fp)
    3e54:	0002b7c0 	call	2b7c <wr8>
	}
	cpu->clock.c += 8;
    3e58:	e0bffd17 	ldw	r2,-12(fp)
    3e5c:	10800017 	ldw	r2,0(r2)
    3e60:	10c00204 	addi	r3,r2,8
    3e64:	e0bffd17 	ldw	r2,-12(fp)
    3e68:	10c00015 	stw	r3,0(r2)
}
    3e6c:	0001883a 	nop
    3e70:	e037883a 	mov	sp,fp
    3e74:	dfc00117 	ldw	ra,4(sp)
    3e78:	df000017 	ldw	fp,0(sp)
    3e7c:	dec00204 	addi	sp,sp,8
    3e80:	f800283a 	ret

00003e84 <INCrra>:
void INCrra(CPU* cpu, reg_name r1, reg_name r2) {
    3e84:	defff804 	addi	sp,sp,-32
    3e88:	dfc00715 	stw	ra,28(sp)
    3e8c:	df000615 	stw	fp,24(sp)
    3e90:	df000604 	addi	fp,sp,24
    3e94:	e13ffd15 	stw	r4,-12(fp)
    3e98:	e17ffe15 	stw	r5,-8(fp)
    3e9c:	e1bfff15 	stw	r6,-4(fp)
	word addr = readAddr(cpu, r1, r2);
    3ea0:	e1bfff17 	ldw	r6,-4(fp)
    3ea4:	e17ffe17 	ldw	r5,-8(fp)
    3ea8:	e13ffd17 	ldw	r4,-12(fp)
    3eac:	00032000 	call	3200 <readAddr>
    3eb0:	e0bffa0d 	sth	r2,-24(fp)
	byte val = (readData(addr) + 1) & 0xFF;
    3eb4:	e0bffa0b 	ldhu	r2,-24(fp)
    3eb8:	1009883a 	mov	r4,r2
    3ebc:	000026c0 	call	26c <readData>
    3ec0:	10800044 	addi	r2,r2,1
    3ec4:	e0bffa85 	stb	r2,-22(fp)
	int z = val == 0;
    3ec8:	e0bffa83 	ldbu	r2,-22(fp)
    3ecc:	1005003a 	cmpeq	r2,r2,zero
    3ed0:	10803fcc 	andi	r2,r2,255
    3ed4:	e0bffb15 	stw	r2,-20(fp)
	int h = (readData(addr) & 0xF) + 1 > 0xF;
    3ed8:	e0bffa0b 	ldhu	r2,-24(fp)
    3edc:	1009883a 	mov	r4,r2
    3ee0:	000026c0 	call	26c <readData>
    3ee4:	10803fcc 	andi	r2,r2,255
    3ee8:	108003cc 	andi	r2,r2,15
    3eec:	10800044 	addi	r2,r2,1
    3ef0:	10800408 	cmpgei	r2,r2,16
    3ef4:	10803fcc 	andi	r2,r2,255
    3ef8:	e0bffc15 	stw	r2,-16(fp)
	writeData(addr, val);
    3efc:	e0bffa0b 	ldhu	r2,-24(fp)
    3f00:	e0fffa83 	ldbu	r3,-22(fp)
    3f04:	180b883a 	mov	r5,r3
    3f08:	1009883a 	mov	r4,r2
    3f0c:	00003640 	call	364 <writeData>
	cpu->registers.f &= 0x10;
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	108003c3 	ldbu	r2,15(r2)
    3f18:	1080040c 	andi	r2,r2,16
    3f1c:	1007883a 	mov	r3,r2
    3f20:	e0bffd17 	ldw	r2,-12(fp)
    3f24:	10c003c5 	stb	r3,15(r2)
	if(h) cpu->registers.f |= 0x20;
    3f28:	e0bffc17 	ldw	r2,-16(fp)
    3f2c:	10000626 	beq	r2,zero,3f48 <INCrra+0xc4>
    3f30:	e0bffd17 	ldw	r2,-12(fp)
    3f34:	108003c3 	ldbu	r2,15(r2)
    3f38:	10800814 	ori	r2,r2,32
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bffd17 	ldw	r2,-12(fp)
    3f44:	10c003c5 	stb	r3,15(r2)
	if(z) cpu->registers.f |= 0x80;
    3f48:	e0bffb17 	ldw	r2,-20(fp)
    3f4c:	10000726 	beq	r2,zero,3f6c <INCrra+0xe8>
    3f50:	e0bffd17 	ldw	r2,-12(fp)
    3f54:	10c003c3 	ldbu	r3,15(r2)
    3f58:	00bfe004 	movi	r2,-128
    3f5c:	1884b03a 	or	r2,r3,r2
    3f60:	1007883a 	mov	r3,r2
    3f64:	e0bffd17 	ldw	r2,-12(fp)
    3f68:	10c003c5 	stb	r3,15(r2)
	cpu->clock.c += 12;
    3f6c:	e0bffd17 	ldw	r2,-12(fp)
    3f70:	10800017 	ldw	r2,0(r2)
    3f74:	10c00304 	addi	r3,r2,12
    3f78:	e0bffd17 	ldw	r2,-12(fp)
    3f7c:	10c00015 	stw	r3,0(r2)
}
    3f80:	0001883a 	nop
    3f84:	e037883a 	mov	sp,fp
    3f88:	dfc00117 	ldw	ra,4(sp)
    3f8c:	df000017 	ldw	fp,0(sp)
    3f90:	dec00204 	addi	sp,sp,8
    3f94:	f800283a 	ret

00003f98 <INCsp>:
void INCsp(CPU* cpu) {
    3f98:	defffd04 	addi	sp,sp,-12
    3f9c:	dfc00215 	stw	ra,8(sp)
    3fa0:	df000115 	stw	fp,4(sp)
    3fa4:	df000104 	addi	fp,sp,4
    3fa8:	e13fff15 	stw	r4,-4(fp)
	wr16(cpu, SP, cpu->registers.sp + 1);
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	1080048b 	ldhu	r2,18(r2)
    3fb4:	10800044 	addi	r2,r2,1
    3fb8:	10bfffcc 	andi	r2,r2,65535
    3fbc:	100d883a 	mov	r6,r2
    3fc0:	01400304 	movi	r5,12
    3fc4:	e13fff17 	ldw	r4,-4(fp)
    3fc8:	0002c780 	call	2c78 <wr16>
	cpu->registers.sp &= 0xFFFF;
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	10c0048b 	ldhu	r3,18(r2)
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	10c0048d 	sth	r3,18(r2)
	cpu->clock.c += 8;
    3fdc:	e0bfff17 	ldw	r2,-4(fp)
    3fe0:	10800017 	ldw	r2,0(r2)
    3fe4:	10c00204 	addi	r3,r2,8
    3fe8:	e0bfff17 	ldw	r2,-4(fp)
    3fec:	10c00015 	stw	r3,0(r2)
}
    3ff0:	0001883a 	nop
    3ff4:	e037883a 	mov	sp,fp
    3ff8:	dfc00117 	ldw	ra,4(sp)
    3ffc:	df000017 	ldw	fp,0(sp)
    4000:	dec00204 	addi	sp,sp,8
    4004:	f800283a 	ret

00004008 <INCr>:
void INCr(CPU* cpu, reg_name r1) {
    4008:	defffa04 	addi	sp,sp,-24
    400c:	dfc00515 	stw	ra,20(sp)
    4010:	df000415 	stw	fp,16(sp)
    4014:	df000404 	addi	fp,sp,16
    4018:	e13ffe15 	stw	r4,-8(fp)
    401c:	e17fff15 	stw	r5,-4(fp)
	int h = ((rr8(cpu, r1) & 0xF) + 1) & 0x10;
    4020:	e17fff17 	ldw	r5,-4(fp)
    4024:	e13ffe17 	ldw	r4,-8(fp)
    4028:	00029180 	call	2918 <rr8>
    402c:	10803fcc 	andi	r2,r2,255
    4030:	108003cc 	andi	r2,r2,15
    4034:	10800044 	addi	r2,r2,1
    4038:	1080040c 	andi	r2,r2,16
    403c:	e0bffc15 	stw	r2,-16(fp)
	wr8(cpu, r1, (rr8(cpu, r1) + 1) & 0xFF);
    4040:	e17fff17 	ldw	r5,-4(fp)
    4044:	e13ffe17 	ldw	r4,-8(fp)
    4048:	00029180 	call	2918 <rr8>
    404c:	10800044 	addi	r2,r2,1
    4050:	10803fcc 	andi	r2,r2,255
    4054:	100d883a 	mov	r6,r2
    4058:	e17fff17 	ldw	r5,-4(fp)
    405c:	e13ffe17 	ldw	r4,-8(fp)
    4060:	0002b7c0 	call	2b7c <wr8>
	int z = rr8(cpu, r1) == 0;
    4064:	e17fff17 	ldw	r5,-4(fp)
    4068:	e13ffe17 	ldw	r4,-8(fp)
    406c:	00029180 	call	2918 <rr8>
    4070:	10803fcc 	andi	r2,r2,255
    4074:	1005003a 	cmpeq	r2,r2,zero
    4078:	10803fcc 	andi	r2,r2,255
    407c:	e0bffd15 	stw	r2,-12(fp)
	cpu->registers.f &= 0x10;
    4080:	e0bffe17 	ldw	r2,-8(fp)
    4084:	108003c3 	ldbu	r2,15(r2)
    4088:	1080040c 	andi	r2,r2,16
    408c:	1007883a 	mov	r3,r2
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10c003c5 	stb	r3,15(r2)
	if(h) cpu->registers.f |= 0x20;
    4098:	e0bffc17 	ldw	r2,-16(fp)
    409c:	10000626 	beq	r2,zero,40b8 <INCr+0xb0>
    40a0:	e0bffe17 	ldw	r2,-8(fp)
    40a4:	108003c3 	ldbu	r2,15(r2)
    40a8:	10800814 	ori	r2,r2,32
    40ac:	1007883a 	mov	r3,r2
    40b0:	e0bffe17 	ldw	r2,-8(fp)
    40b4:	10c003c5 	stb	r3,15(r2)
	if(z) cpu->registers.f |= 0x80;
    40b8:	e0bffd17 	ldw	r2,-12(fp)
    40bc:	10000726 	beq	r2,zero,40dc <INCr+0xd4>
    40c0:	e0bffe17 	ldw	r2,-8(fp)
    40c4:	10c003c3 	ldbu	r3,15(r2)
    40c8:	00bfe004 	movi	r2,-128
    40cc:	1884b03a 	or	r2,r3,r2
    40d0:	1007883a 	mov	r3,r2
    40d4:	e0bffe17 	ldw	r2,-8(fp)
    40d8:	10c003c5 	stb	r3,15(r2)
	cpu->clock.c += 4;
    40dc:	e0bffe17 	ldw	r2,-8(fp)
    40e0:	10800017 	ldw	r2,0(r2)
    40e4:	10c00104 	addi	r3,r2,4
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	10c00015 	stw	r3,0(r2)
}
    40f0:	0001883a 	nop
    40f4:	e037883a 	mov	sp,fp
    40f8:	dfc00117 	ldw	ra,4(sp)
    40fc:	df000017 	ldw	fp,0(sp)
    4100:	dec00204 	addi	sp,sp,8
    4104:	f800283a 	ret

00004108 <DECrr>:
void DECrr(CPU* cpu, reg_name r1, reg_name r2) {
    4108:	defffb04 	addi	sp,sp,-20
    410c:	dfc00415 	stw	ra,16(sp)
    4110:	df000315 	stw	fp,12(sp)
    4114:	df000304 	addi	fp,sp,12
    4118:	e13ffd15 	stw	r4,-12(fp)
    411c:	e17ffe15 	stw	r5,-8(fp)
    4120:	e1bfff15 	stw	r6,-4(fp)
	wr8(cpu, r2, (rr8(cpu, r2) - 1) & 0xFF);
    4124:	e17fff17 	ldw	r5,-4(fp)
    4128:	e13ffd17 	ldw	r4,-12(fp)
    412c:	00029180 	call	2918 <rr8>
    4130:	10bfffc4 	addi	r2,r2,-1
    4134:	10803fcc 	andi	r2,r2,255
    4138:	100d883a 	mov	r6,r2
    413c:	e17fff17 	ldw	r5,-4(fp)
    4140:	e13ffd17 	ldw	r4,-12(fp)
    4144:	0002b7c0 	call	2b7c <wr8>
	if(rr8(cpu, r2) == 0xFF) wr8(cpu, r1, (rr8(cpu, r1) - 1) & 0xFF);
    4148:	e17fff17 	ldw	r5,-4(fp)
    414c:	e13ffd17 	ldw	r4,-12(fp)
    4150:	00029180 	call	2918 <rr8>
    4154:	10803fcc 	andi	r2,r2,255
    4158:	10803fd8 	cmpnei	r2,r2,255
    415c:	1000091e 	bne	r2,zero,4184 <DECrr+0x7c>
    4160:	e17ffe17 	ldw	r5,-8(fp)
    4164:	e13ffd17 	ldw	r4,-12(fp)
    4168:	00029180 	call	2918 <rr8>
    416c:	10bfffc4 	addi	r2,r2,-1
    4170:	10803fcc 	andi	r2,r2,255
    4174:	100d883a 	mov	r6,r2
    4178:	e17ffe17 	ldw	r5,-8(fp)
    417c:	e13ffd17 	ldw	r4,-12(fp)
    4180:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 8;
    4184:	e0bffd17 	ldw	r2,-12(fp)
    4188:	10800017 	ldw	r2,0(r2)
    418c:	10c00204 	addi	r3,r2,8
    4190:	e0bffd17 	ldw	r2,-12(fp)
    4194:	10c00015 	stw	r3,0(r2)
}
    4198:	0001883a 	nop
    419c:	e037883a 	mov	sp,fp
    41a0:	dfc00117 	ldw	ra,4(sp)
    41a4:	df000017 	ldw	fp,0(sp)
    41a8:	dec00204 	addi	sp,sp,8
    41ac:	f800283a 	ret

000041b0 <DECsp>:
void DECsp(CPU* cpu) {
    41b0:	defffd04 	addi	sp,sp,-12
    41b4:	dfc00215 	stw	ra,8(sp)
    41b8:	df000115 	stw	fp,4(sp)
    41bc:	df000104 	addi	fp,sp,4
    41c0:	e13fff15 	stw	r4,-4(fp)
	wr16(cpu, SP, rr16(cpu, SP) - 1);
    41c4:	01400304 	movi	r5,12
    41c8:	e13fff17 	ldw	r4,-4(fp)
    41cc:	00029e80 	call	29e8 <rr16>
    41d0:	10bfffc4 	addi	r2,r2,-1
    41d4:	10bfffcc 	andi	r2,r2,65535
    41d8:	100d883a 	mov	r6,r2
    41dc:	01400304 	movi	r5,12
    41e0:	e13fff17 	ldw	r4,-4(fp)
    41e4:	0002c780 	call	2c78 <wr16>
	cpu->registers.sp &= 0xFFFF;
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	10c0048b 	ldhu	r3,18(r2)
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	10c0048d 	sth	r3,18(r2)
	cpu->clock.c += 8;
    41f8:	e0bfff17 	ldw	r2,-4(fp)
    41fc:	10800017 	ldw	r2,0(r2)
    4200:	10c00204 	addi	r3,r2,8
    4204:	e0bfff17 	ldw	r2,-4(fp)
    4208:	10c00015 	stw	r3,0(r2)
}
    420c:	0001883a 	nop
    4210:	e037883a 	mov	sp,fp
    4214:	dfc00117 	ldw	ra,4(sp)
    4218:	df000017 	ldw	fp,0(sp)
    421c:	dec00204 	addi	sp,sp,8
    4220:	f800283a 	ret

00004224 <DECr>:
void DECr(CPU* cpu, reg_name r1) {
    4224:	defffa04 	addi	sp,sp,-24
    4228:	dfc00515 	stw	ra,20(sp)
    422c:	df000415 	stw	fp,16(sp)
    4230:	df000404 	addi	fp,sp,16
    4234:	e13ffe15 	stw	r4,-8(fp)
    4238:	e17fff15 	stw	r5,-4(fp)
	int h = (rr8(cpu, r1) & 0xF) < 1;
    423c:	e17fff17 	ldw	r5,-4(fp)
    4240:	e13ffe17 	ldw	r4,-8(fp)
    4244:	00029180 	call	2918 <rr8>
    4248:	10803fcc 	andi	r2,r2,255
    424c:	108003cc 	andi	r2,r2,15
    4250:	0084403a 	cmpge	r2,zero,r2
    4254:	10803fcc 	andi	r2,r2,255
    4258:	e0bffc15 	stw	r2,-16(fp)
	wr8(cpu, r1, (rr8(cpu, r1) - 1) & 0xFF);
    425c:	e17fff17 	ldw	r5,-4(fp)
    4260:	e13ffe17 	ldw	r4,-8(fp)
    4264:	00029180 	call	2918 <rr8>
    4268:	10bfffc4 	addi	r2,r2,-1
    426c:	10803fcc 	andi	r2,r2,255
    4270:	100d883a 	mov	r6,r2
    4274:	e17fff17 	ldw	r5,-4(fp)
    4278:	e13ffe17 	ldw	r4,-8(fp)
    427c:	0002b7c0 	call	2b7c <wr8>
	int z = rr8(cpu, r1) == 0;
    4280:	e17fff17 	ldw	r5,-4(fp)
    4284:	e13ffe17 	ldw	r4,-8(fp)
    4288:	00029180 	call	2918 <rr8>
    428c:	10803fcc 	andi	r2,r2,255
    4290:	1005003a 	cmpeq	r2,r2,zero
    4294:	10803fcc 	andi	r2,r2,255
    4298:	e0bffd15 	stw	r2,-12(fp)
	cpu->registers.f &= 0x10;
    429c:	e0bffe17 	ldw	r2,-8(fp)
    42a0:	108003c3 	ldbu	r2,15(r2)
    42a4:	1080040c 	andi	r2,r2,16
    42a8:	1007883a 	mov	r3,r2
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	10c003c5 	stb	r3,15(r2)
	cpu->registers.f |= 0x40;
    42b4:	e0bffe17 	ldw	r2,-8(fp)
    42b8:	108003c3 	ldbu	r2,15(r2)
    42bc:	10801014 	ori	r2,r2,64
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bffe17 	ldw	r2,-8(fp)
    42c8:	10c003c5 	stb	r3,15(r2)
	if(h) cpu->registers.f |= 0x20;
    42cc:	e0bffc17 	ldw	r2,-16(fp)
    42d0:	10000626 	beq	r2,zero,42ec <DECr+0xc8>
    42d4:	e0bffe17 	ldw	r2,-8(fp)
    42d8:	108003c3 	ldbu	r2,15(r2)
    42dc:	10800814 	ori	r2,r2,32
    42e0:	1007883a 	mov	r3,r2
    42e4:	e0bffe17 	ldw	r2,-8(fp)
    42e8:	10c003c5 	stb	r3,15(r2)
	if(z) cpu->registers.f |= 0x80;
    42ec:	e0bffd17 	ldw	r2,-12(fp)
    42f0:	10000726 	beq	r2,zero,4310 <DECr+0xec>
    42f4:	e0bffe17 	ldw	r2,-8(fp)
    42f8:	10c003c3 	ldbu	r3,15(r2)
    42fc:	00bfe004 	movi	r2,-128
    4300:	1884b03a 	or	r2,r3,r2
    4304:	1007883a 	mov	r3,r2
    4308:	e0bffe17 	ldw	r2,-8(fp)
    430c:	10c003c5 	stb	r3,15(r2)
	cpu->clock.c += 4;
    4310:	e0bffe17 	ldw	r2,-8(fp)
    4314:	10800017 	ldw	r2,0(r2)
    4318:	10c00104 	addi	r3,r2,4
    431c:	e0bffe17 	ldw	r2,-8(fp)
    4320:	10c00015 	stw	r3,0(r2)
}
    4324:	0001883a 	nop
    4328:	e037883a 	mov	sp,fp
    432c:	dfc00117 	ldw	ra,4(sp)
    4330:	df000017 	ldw	fp,0(sp)
    4334:	dec00204 	addi	sp,sp,8
    4338:	f800283a 	ret

0000433c <DECrra>:
void DECrra(CPU* cpu, reg_name r1, reg_name r2) {
    433c:	defff804 	addi	sp,sp,-32
    4340:	dfc00715 	stw	ra,28(sp)
    4344:	df000615 	stw	fp,24(sp)
    4348:	df000604 	addi	fp,sp,24
    434c:	e13ffd15 	stw	r4,-12(fp)
    4350:	e17ffe15 	stw	r5,-8(fp)
    4354:	e1bfff15 	stw	r6,-4(fp)
	word addr = readAddr(cpu, r1, r2);
    4358:	e1bfff17 	ldw	r6,-4(fp)
    435c:	e17ffe17 	ldw	r5,-8(fp)
    4360:	e13ffd17 	ldw	r4,-12(fp)
    4364:	00032000 	call	3200 <readAddr>
    4368:	e0bffa0d 	sth	r2,-24(fp)
	byte val = (readData(addr) - 1) & 0xFF;
    436c:	e0bffa0b 	ldhu	r2,-24(fp)
    4370:	1009883a 	mov	r4,r2
    4374:	000026c0 	call	26c <readData>
    4378:	10bfffc4 	addi	r2,r2,-1
    437c:	e0bffa85 	stb	r2,-22(fp)
	int z = val == 0;
    4380:	e0bffa83 	ldbu	r2,-22(fp)
    4384:	1005003a 	cmpeq	r2,r2,zero
    4388:	10803fcc 	andi	r2,r2,255
    438c:	e0bffb15 	stw	r2,-20(fp)
	int h = (readData(addr) * 0xF) < 1;
    4390:	e0bffa0b 	ldhu	r2,-24(fp)
    4394:	1009883a 	mov	r4,r2
    4398:	000026c0 	call	26c <readData>
    439c:	10803fcc 	andi	r2,r2,255
    43a0:	014003c4 	movi	r5,15
    43a4:	1009883a 	mov	r4,r2
    43a8:	000cefc0 	call	cefc <__mulsi3>
    43ac:	0084403a 	cmpge	r2,zero,r2
    43b0:	10803fcc 	andi	r2,r2,255
    43b4:	e0bffc15 	stw	r2,-16(fp)
	writeData(addr, val);
    43b8:	e0bffa0b 	ldhu	r2,-24(fp)
    43bc:	e0fffa83 	ldbu	r3,-22(fp)
    43c0:	180b883a 	mov	r5,r3
    43c4:	1009883a 	mov	r4,r2
    43c8:	00003640 	call	364 <writeData>
	cpu->registers.f &= 0x10;
    43cc:	e0bffd17 	ldw	r2,-12(fp)
    43d0:	108003c3 	ldbu	r2,15(r2)
    43d4:	1080040c 	andi	r2,r2,16
    43d8:	1007883a 	mov	r3,r2
    43dc:	e0bffd17 	ldw	r2,-12(fp)
    43e0:	10c003c5 	stb	r3,15(r2)
	cpu->registers.f |= 0x40;
    43e4:	e0bffd17 	ldw	r2,-12(fp)
    43e8:	108003c3 	ldbu	r2,15(r2)
    43ec:	10801014 	ori	r2,r2,64
    43f0:	1007883a 	mov	r3,r2
    43f4:	e0bffd17 	ldw	r2,-12(fp)
    43f8:	10c003c5 	stb	r3,15(r2)
	if(h) cpu->registers.f |= 0x20;
    43fc:	e0bffc17 	ldw	r2,-16(fp)
    4400:	10000626 	beq	r2,zero,441c <DECrra+0xe0>
    4404:	e0bffd17 	ldw	r2,-12(fp)
    4408:	108003c3 	ldbu	r2,15(r2)
    440c:	10800814 	ori	r2,r2,32
    4410:	1007883a 	mov	r3,r2
    4414:	e0bffd17 	ldw	r2,-12(fp)
    4418:	10c003c5 	stb	r3,15(r2)
	if(z) cpu->registers.f |= 0x80;
    441c:	e0bffb17 	ldw	r2,-20(fp)
    4420:	10000726 	beq	r2,zero,4440 <DECrra+0x104>
    4424:	e0bffd17 	ldw	r2,-12(fp)
    4428:	10c003c3 	ldbu	r3,15(r2)
    442c:	00bfe004 	movi	r2,-128
    4430:	1884b03a 	or	r2,r3,r2
    4434:	1007883a 	mov	r3,r2
    4438:	e0bffd17 	ldw	r2,-12(fp)
    443c:	10c003c5 	stb	r3,15(r2)
	cpu->clock.c += 12;
    4440:	e0bffd17 	ldw	r2,-12(fp)
    4444:	10800017 	ldw	r2,0(r2)
    4448:	10c00304 	addi	r3,r2,12
    444c:	e0bffd17 	ldw	r2,-12(fp)
    4450:	10c00015 	stw	r3,0(r2)
}
    4454:	0001883a 	nop
    4458:	e037883a 	mov	sp,fp
    445c:	dfc00117 	ldw	ra,4(sp)
    4460:	df000017 	ldw	fp,0(sp)
    4464:	dec00204 	addi	sp,sp,8
    4468:	f800283a 	ret

0000446c <ADDrr>:
void _ADDrrn(CPU* cpu, reg_name r1, reg_name r2, word n);
void _ADDrn(CPU* cpu, reg_name r1, byte n);
void ADDrr(CPU* cpu, reg_name r1, reg_name r2) {
    446c:	defffa04 	addi	sp,sp,-24
    4470:	dfc00515 	stw	ra,20(sp)
    4474:	df000415 	stw	fp,16(sp)
    4478:	df000404 	addi	fp,sp,16
    447c:	e13ffd15 	stw	r4,-12(fp)
    4480:	e17ffe15 	stw	r5,-8(fp)
    4484:	e1bfff15 	stw	r6,-4(fp)
	byte n = rr8(cpu, r2);
    4488:	e17fff17 	ldw	r5,-4(fp)
    448c:	e13ffd17 	ldw	r4,-12(fp)
    4490:	00029180 	call	2918 <rr8>
    4494:	e0bffc05 	stb	r2,-16(fp)
	_ADDrn(cpu, r1, n);
    4498:	e0bffc03 	ldbu	r2,-16(fp)
    449c:	100d883a 	mov	r6,r2
    44a0:	e17ffe17 	ldw	r5,-8(fp)
    44a4:	e13ffd17 	ldw	r4,-12(fp)
    44a8:	00045580 	call	4558 <_ADDrn>
	cpu->clock.c += 4;
    44ac:	e0bffd17 	ldw	r2,-12(fp)
    44b0:	10800017 	ldw	r2,0(r2)
    44b4:	10c00104 	addi	r3,r2,4
    44b8:	e0bffd17 	ldw	r2,-12(fp)
    44bc:	10c00015 	stw	r3,0(r2)
}
    44c0:	0001883a 	nop
    44c4:	e037883a 	mov	sp,fp
    44c8:	dfc00117 	ldw	ra,4(sp)
    44cc:	df000017 	ldw	fp,0(sp)
    44d0:	dec00204 	addi	sp,sp,8
    44d4:	f800283a 	ret

000044d8 <ADDrn>:
void ADDrn(CPU* cpu, reg_name r1) {
    44d8:	defffb04 	addi	sp,sp,-20
    44dc:	dfc00415 	stw	ra,16(sp)
    44e0:	df000315 	stw	fp,12(sp)
    44e4:	df000304 	addi	fp,sp,12
    44e8:	e13ffe15 	stw	r4,-8(fp)
    44ec:	e17fff15 	stw	r5,-4(fp)
	byte n = readData(cpu->registers.pc++);
    44f0:	e0bffe17 	ldw	r2,-8(fp)
    44f4:	1080040b 	ldhu	r2,16(r2)
    44f8:	10c00044 	addi	r3,r2,1
    44fc:	1809883a 	mov	r4,r3
    4500:	e0fffe17 	ldw	r3,-8(fp)
    4504:	1900040d 	sth	r4,16(r3)
    4508:	10bfffcc 	andi	r2,r2,65535
    450c:	1009883a 	mov	r4,r2
    4510:	000026c0 	call	26c <readData>
    4514:	e0bffd05 	stb	r2,-12(fp)
	_ADDrn(cpu, r1, n);
    4518:	e0bffd03 	ldbu	r2,-12(fp)
    451c:	100d883a 	mov	r6,r2
    4520:	e17fff17 	ldw	r5,-4(fp)
    4524:	e13ffe17 	ldw	r4,-8(fp)
    4528:	00045580 	call	4558 <_ADDrn>
	cpu->clock.c += 8;
    452c:	e0bffe17 	ldw	r2,-8(fp)
    4530:	10800017 	ldw	r2,0(r2)
    4534:	10c00204 	addi	r3,r2,8
    4538:	e0bffe17 	ldw	r2,-8(fp)
    453c:	10c00015 	stw	r3,0(r2)
}
    4540:	0001883a 	nop
    4544:	e037883a 	mov	sp,fp
    4548:	dfc00117 	ldw	ra,4(sp)
    454c:	df000017 	ldw	fp,0(sp)
    4550:	dec00204 	addi	sp,sp,8
    4554:	f800283a 	ret

00004558 <_ADDrn>:
void _ADDrn(CPU* cpu, reg_name r1, byte n) {
    4558:	defff704 	addi	sp,sp,-36
    455c:	dfc00815 	stw	ra,32(sp)
    4560:	df000715 	stw	fp,28(sp)
    4564:	df000704 	addi	fp,sp,28
    4568:	e13ffd15 	stw	r4,-12(fp)
    456c:	e17ffe15 	stw	r5,-8(fp)
    4570:	3005883a 	mov	r2,r6
    4574:	e0bfff05 	stb	r2,-4(fp)
	int h = ((rr8(cpu, r1) & 0xF) + (n & 0xF)) & 0x10;
    4578:	e17ffe17 	ldw	r5,-8(fp)
    457c:	e13ffd17 	ldw	r4,-12(fp)
    4580:	00029180 	call	2918 <rr8>
    4584:	10803fcc 	andi	r2,r2,255
    4588:	10c003cc 	andi	r3,r2,15
    458c:	e0bfff03 	ldbu	r2,-4(fp)
    4590:	108003cc 	andi	r2,r2,15
    4594:	1885883a 	add	r2,r3,r2
    4598:	1080040c 	andi	r2,r2,16
    459c:	e0bffb15 	stw	r2,-20(fp)
	int newVal = rr8(cpu, r1);
    45a0:	e17ffe17 	ldw	r5,-8(fp)
    45a4:	e13ffd17 	ldw	r4,-12(fp)
    45a8:	00029180 	call	2918 <rr8>
    45ac:	10803fcc 	andi	r2,r2,255
    45b0:	e0bffc15 	stw	r2,-16(fp)
	newVal += n;
    45b4:	e0bfff03 	ldbu	r2,-4(fp)
    45b8:	e0fffc17 	ldw	r3,-16(fp)
    45bc:	1885883a 	add	r2,r3,r2
    45c0:	e0bffc15 	stw	r2,-16(fp)
	int c = 0;
    45c4:	e03ff915 	stw	zero,-28(fp)
	if(newVal > 255) {
    45c8:	e0bffc17 	ldw	r2,-16(fp)
    45cc:	10804010 	cmplti	r2,r2,256
    45d0:	1000021e 	bne	r2,zero,45dc <_ADDrn+0x84>
		c = 1;
    45d4:	00800044 	movi	r2,1
    45d8:	e0bff915 	stw	r2,-28(fp)
	}
	wr8(cpu, r1, rr8(cpu, r1) + n);
    45dc:	e17ffe17 	ldw	r5,-8(fp)
    45e0:	e13ffd17 	ldw	r4,-12(fp)
    45e4:	00029180 	call	2918 <rr8>
    45e8:	1007883a 	mov	r3,r2
    45ec:	e0bfff03 	ldbu	r2,-4(fp)
    45f0:	1885883a 	add	r2,r3,r2
    45f4:	10803fcc 	andi	r2,r2,255
    45f8:	100d883a 	mov	r6,r2
    45fc:	e17ffe17 	ldw	r5,-8(fp)
    4600:	e13ffd17 	ldw	r4,-12(fp)
    4604:	0002b7c0 	call	2b7c <wr8>
	byte f = 0;
    4608:	e03ffa05 	stb	zero,-24(fp)
	if(rr8(cpu, r1) == 0) f |= 0x80;
    460c:	e17ffe17 	ldw	r5,-8(fp)
    4610:	e13ffd17 	ldw	r4,-12(fp)
    4614:	00029180 	call	2918 <rr8>
    4618:	10803fcc 	andi	r2,r2,255
    461c:	1000041e 	bne	r2,zero,4630 <_ADDrn+0xd8>
    4620:	e0fffa03 	ldbu	r3,-24(fp)
    4624:	00bfe004 	movi	r2,-128
    4628:	1884b03a 	or	r2,r3,r2
    462c:	e0bffa05 	stb	r2,-24(fp)
	if(h) f |= 0x20;
    4630:	e0bffb17 	ldw	r2,-20(fp)
    4634:	10000326 	beq	r2,zero,4644 <_ADDrn+0xec>
    4638:	e0bffa03 	ldbu	r2,-24(fp)
    463c:	10800814 	ori	r2,r2,32
    4640:	e0bffa05 	stb	r2,-24(fp)
	if(c) f |= 0x10;
    4644:	e0bff917 	ldw	r2,-28(fp)
    4648:	10000326 	beq	r2,zero,4658 <_ADDrn+0x100>
    464c:	e0bffa03 	ldbu	r2,-24(fp)
    4650:	10800414 	ori	r2,r2,16
    4654:	e0bffa05 	stb	r2,-24(fp)
	wr8(cpu, F, f);
    4658:	e0bffa03 	ldbu	r2,-24(fp)
    465c:	100d883a 	mov	r6,r2
    4660:	01400144 	movi	r5,5
    4664:	e13ffd17 	ldw	r4,-12(fp)
    4668:	0002b7c0 	call	2b7c <wr8>
}
    466c:	0001883a 	nop
    4670:	e037883a 	mov	sp,fp
    4674:	dfc00117 	ldw	ra,4(sp)
    4678:	df000017 	ldw	fp,0(sp)
    467c:	dec00204 	addi	sp,sp,8
    4680:	f800283a 	ret

00004684 <ADDrrrr>:
void ADDrrrr(CPU* cpu, reg_name r1, reg_name r2, reg_name r3, reg_name r4) {
    4684:	defff804 	addi	sp,sp,-32
    4688:	dfc00715 	stw	ra,28(sp)
    468c:	df000615 	stw	fp,24(sp)
    4690:	dc000515 	stw	r16,20(sp)
    4694:	df000604 	addi	fp,sp,24
    4698:	e13ffb15 	stw	r4,-20(fp)
    469c:	e17ffc15 	stw	r5,-16(fp)
    46a0:	e1bffd15 	stw	r6,-12(fp)
    46a4:	e1fffe15 	stw	r7,-8(fp)
	word n = rr8(cpu, r3);
    46a8:	e17ffe17 	ldw	r5,-8(fp)
    46ac:	e13ffb17 	ldw	r4,-20(fp)
    46b0:	00029180 	call	2918 <rr8>
    46b4:	10803fcc 	andi	r2,r2,255
    46b8:	e0bffa0d 	sth	r2,-24(fp)
	n = (n << 8) + rr8(cpu, r4);
    46bc:	e0bffa0b 	ldhu	r2,-24(fp)
    46c0:	1004923a 	slli	r2,r2,8
    46c4:	1021883a 	mov	r16,r2
    46c8:	e1400217 	ldw	r5,8(fp)
    46cc:	e13ffb17 	ldw	r4,-20(fp)
    46d0:	00029180 	call	2918 <rr8>
    46d4:	10803fcc 	andi	r2,r2,255
    46d8:	8085883a 	add	r2,r16,r2
    46dc:	e0bffa0d 	sth	r2,-24(fp)
	_ADDrrn(cpu, r1, r2, n);
    46e0:	e0bffa0b 	ldhu	r2,-24(fp)
    46e4:	100f883a 	mov	r7,r2
    46e8:	e1bffd17 	ldw	r6,-12(fp)
    46ec:	e17ffc17 	ldw	r5,-16(fp)
    46f0:	e13ffb17 	ldw	r4,-20(fp)
    46f4:	00048c40 	call	48c4 <_ADDrrn>
	cpu->clock.c += 8;
    46f8:	e0bffb17 	ldw	r2,-20(fp)
    46fc:	10800017 	ldw	r2,0(r2)
    4700:	10c00204 	addi	r3,r2,8
    4704:	e0bffb17 	ldw	r2,-20(fp)
    4708:	10c00015 	stw	r3,0(r2)
}
    470c:	0001883a 	nop
    4710:	e6ffff04 	addi	sp,fp,-4
    4714:	dfc00217 	ldw	ra,8(sp)
    4718:	df000117 	ldw	fp,4(sp)
    471c:	dc000017 	ldw	r16,0(sp)
    4720:	dec00304 	addi	sp,sp,12
    4724:	f800283a 	ret

00004728 <ADDrrsp>:
void ADDrrsp(CPU* cpu, reg_name r1, reg_name r2) {
    4728:	defffb04 	addi	sp,sp,-20
    472c:	dfc00415 	stw	ra,16(sp)
    4730:	df000315 	stw	fp,12(sp)
    4734:	df000304 	addi	fp,sp,12
    4738:	e13ffd15 	stw	r4,-12(fp)
    473c:	e17ffe15 	stw	r5,-8(fp)
    4740:	e1bfff15 	stw	r6,-4(fp)
	_ADDrrn(cpu, r1, r2, rr16(cpu, SP));
    4744:	01400304 	movi	r5,12
    4748:	e13ffd17 	ldw	r4,-12(fp)
    474c:	00029e80 	call	29e8 <rr16>
    4750:	10bfffcc 	andi	r2,r2,65535
    4754:	100f883a 	mov	r7,r2
    4758:	e1bfff17 	ldw	r6,-4(fp)
    475c:	e17ffe17 	ldw	r5,-8(fp)
    4760:	e13ffd17 	ldw	r4,-12(fp)
    4764:	00048c40 	call	48c4 <_ADDrrn>
	cpu->clock.c += 8;
    4768:	e0bffd17 	ldw	r2,-12(fp)
    476c:	10800017 	ldw	r2,0(r2)
    4770:	10c00204 	addi	r3,r2,8
    4774:	e0bffd17 	ldw	r2,-12(fp)
    4778:	10c00015 	stw	r3,0(r2)
}
    477c:	0001883a 	nop
    4780:	e037883a 	mov	sp,fp
    4784:	dfc00117 	ldw	ra,4(sp)
    4788:	df000017 	ldw	fp,0(sp)
    478c:	dec00204 	addi	sp,sp,8
    4790:	f800283a 	ret

00004794 <ADDspn>:
void ADDspn(CPU* cpu) {
    4794:	defffa04 	addi	sp,sp,-24
    4798:	dfc00515 	stw	ra,20(sp)
    479c:	df000415 	stw	fp,16(sp)
    47a0:	df000404 	addi	fp,sp,16
    47a4:	e13fff15 	stw	r4,-4(fp)
	byte v = readData(cpu->registers.pc++);
    47a8:	e0bfff17 	ldw	r2,-4(fp)
    47ac:	1080040b 	ldhu	r2,16(r2)
    47b0:	10c00044 	addi	r3,r2,1
    47b4:	1809883a 	mov	r4,r3
    47b8:	e0ffff17 	ldw	r3,-4(fp)
    47bc:	1900040d 	sth	r4,16(r3)
    47c0:	10bfffcc 	andi	r2,r2,65535
    47c4:	1009883a 	mov	r4,r2
    47c8:	000026c0 	call	26c <readData>
    47cc:	e0bffc45 	stb	r2,-15(fp)
	v = getSignedValue(v);
    47d0:	e0bffc43 	ldbu	r2,-15(fp)
    47d4:	1009883a 	mov	r4,r2
    47d8:	000327c0 	call	327c <getSignedValue>
    47dc:	e0bffc45 	stb	r2,-15(fp)
	int c = ((cpu->registers.sp & 0xFF) + (v & 0xFF)) > 0xFF;
    47e0:	e0bfff17 	ldw	r2,-4(fp)
    47e4:	1080048b 	ldhu	r2,18(r2)
    47e8:	10bfffcc 	andi	r2,r2,65535
    47ec:	10c03fcc 	andi	r3,r2,255
    47f0:	e0bffc43 	ldbu	r2,-15(fp)
    47f4:	1885883a 	add	r2,r3,r2
    47f8:	10804008 	cmpgei	r2,r2,256
    47fc:	10803fcc 	andi	r2,r2,255
    4800:	e0bffd15 	stw	r2,-12(fp)
	int h = ((cpu->registers.sp & 0xF) + (v & 0xF)) > 0xF;
    4804:	e0bfff17 	ldw	r2,-4(fp)
    4808:	1080048b 	ldhu	r2,18(r2)
    480c:	10bfffcc 	andi	r2,r2,65535
    4810:	10c003cc 	andi	r3,r2,15
    4814:	e0bffc43 	ldbu	r2,-15(fp)
    4818:	108003cc 	andi	r2,r2,15
    481c:	1885883a 	add	r2,r3,r2
    4820:	10800408 	cmpgei	r2,r2,16
    4824:	10803fcc 	andi	r2,r2,255
    4828:	e0bffe15 	stw	r2,-8(fp)
	byte f = 0;
    482c:	e03ffc05 	stb	zero,-16(fp)
	if(h) f |= 0x20;
    4830:	e0bffe17 	ldw	r2,-8(fp)
    4834:	10000326 	beq	r2,zero,4844 <ADDspn+0xb0>
    4838:	e0bffc03 	ldbu	r2,-16(fp)
    483c:	10800814 	ori	r2,r2,32
    4840:	e0bffc05 	stb	r2,-16(fp)
	if(c) f |= 0x10;
    4844:	e0bffd17 	ldw	r2,-12(fp)
    4848:	10000326 	beq	r2,zero,4858 <ADDspn+0xc4>
    484c:	e0bffc03 	ldbu	r2,-16(fp)
    4850:	10800414 	ori	r2,r2,16
    4854:	e0bffc05 	stb	r2,-16(fp)
	wr8(cpu, F, f);
    4858:	e0bffc03 	ldbu	r2,-16(fp)
    485c:	100d883a 	mov	r6,r2
    4860:	01400144 	movi	r5,5
    4864:	e13fff17 	ldw	r4,-4(fp)
    4868:	0002b7c0 	call	2b7c <wr8>
	wr16(cpu, SP, (rr16(cpu, SP) + v) & 0xFFFF);
    486c:	01400304 	movi	r5,12
    4870:	e13fff17 	ldw	r4,-4(fp)
    4874:	00029e80 	call	29e8 <rr16>
    4878:	1007883a 	mov	r3,r2
    487c:	e0bffc43 	ldbu	r2,-15(fp)
    4880:	1885883a 	add	r2,r3,r2
    4884:	10bfffcc 	andi	r2,r2,65535
    4888:	100d883a 	mov	r6,r2
    488c:	01400304 	movi	r5,12
    4890:	e13fff17 	ldw	r4,-4(fp)
    4894:	0002c780 	call	2c78 <wr16>
	cpu->clock.c += 16;
    4898:	e0bfff17 	ldw	r2,-4(fp)
    489c:	10800017 	ldw	r2,0(r2)
    48a0:	10c00404 	addi	r3,r2,16
    48a4:	e0bfff17 	ldw	r2,-4(fp)
    48a8:	10c00015 	stw	r3,0(r2)
}
    48ac:	0001883a 	nop
    48b0:	e037883a 	mov	sp,fp
    48b4:	dfc00117 	ldw	ra,4(sp)
    48b8:	df000017 	ldw	fp,0(sp)
    48bc:	dec00204 	addi	sp,sp,8
    48c0:	f800283a 	ret

000048c4 <_ADDrrn>:
void _ADDrrn(CPU* cpu, reg_name r1, reg_name r2, word n) {
    48c4:	defff304 	addi	sp,sp,-52
    48c8:	dfc00c15 	stw	ra,48(sp)
    48cc:	df000b15 	stw	fp,44(sp)
    48d0:	dc000a15 	stw	r16,40(sp)
    48d4:	df000b04 	addi	fp,sp,44
    48d8:	e13ffb15 	stw	r4,-20(fp)
    48dc:	e17ffc15 	stw	r5,-16(fp)
    48e0:	e1bffd15 	stw	r6,-12(fp)
    48e4:	3805883a 	mov	r2,r7
    48e8:	e0bffe0d 	sth	r2,-8(fp)
	word v1 = rr8(cpu, r1);
    48ec:	e17ffc17 	ldw	r5,-16(fp)
    48f0:	e13ffb17 	ldw	r4,-20(fp)
    48f4:	00029180 	call	2918 <rr8>
    48f8:	10803fcc 	andi	r2,r2,255
    48fc:	e0bff58d 	sth	r2,-42(fp)
	v1 = (v1 << 8) + rr8(cpu, r2);
    4900:	e0bff58b 	ldhu	r2,-42(fp)
    4904:	1004923a 	slli	r2,r2,8
    4908:	1021883a 	mov	r16,r2
    490c:	e17ffd17 	ldw	r5,-12(fp)
    4910:	e13ffb17 	ldw	r4,-20(fp)
    4914:	00029180 	call	2918 <rr8>
    4918:	10803fcc 	andi	r2,r2,255
    491c:	8085883a 	add	r2,r16,r2
    4920:	e0bff58d 	sth	r2,-42(fp)
	word v2 = n;
    4924:	e0bffe0b 	ldhu	r2,-8(fp)
    4928:	e0bff60d 	sth	r2,-40(fp)
	int res = v1 + v2;
    492c:	e0fff58b 	ldhu	r3,-42(fp)
    4930:	e0bff60b 	ldhu	r2,-40(fp)
    4934:	1885883a 	add	r2,r3,r2
    4938:	e0bff715 	stw	r2,-36(fp)
	int c = res & 0x10000;
    493c:	e0bff717 	ldw	r2,-36(fp)
    4940:	1080006c 	andhi	r2,r2,1
    4944:	e0bff815 	stw	r2,-32(fp)
	int h = ((v1 & 0xFFF) + (v2 & 0xFFF)) & 0x1000;
    4948:	e0bff58b 	ldhu	r2,-42(fp)
    494c:	10c3ffcc 	andi	r3,r2,4095
    4950:	e0bff60b 	ldhu	r2,-40(fp)
    4954:	1083ffcc 	andi	r2,r2,4095
    4958:	1885883a 	add	r2,r3,r2
    495c:	1084000c 	andi	r2,r2,4096
    4960:	e0bff915 	stw	r2,-28(fp)
	int z = cpu->registers.f & 0x80;
    4964:	e0bffb17 	ldw	r2,-20(fp)
    4968:	108003c3 	ldbu	r2,15(r2)
    496c:	10803fcc 	andi	r2,r2,255
    4970:	1080200c 	andi	r2,r2,128
    4974:	e0bffa15 	stw	r2,-24(fp)
	res &= 0xFFFF;
    4978:	e0bff717 	ldw	r2,-36(fp)
    497c:	10bfffcc 	andi	r2,r2,65535
    4980:	e0bff715 	stw	r2,-36(fp)
	wr8(cpu, r2, res & 0xFF);
    4984:	e0bff717 	ldw	r2,-36(fp)
    4988:	10803fcc 	andi	r2,r2,255
    498c:	100d883a 	mov	r6,r2
    4990:	e17ffd17 	ldw	r5,-12(fp)
    4994:	e13ffb17 	ldw	r4,-20(fp)
    4998:	0002b7c0 	call	2b7c <wr8>
	res = res >> 8;
    499c:	e0bff717 	ldw	r2,-36(fp)
    49a0:	1005d23a 	srai	r2,r2,8
    49a4:	e0bff715 	stw	r2,-36(fp)
	wr8(cpu, r1, res & 0xFF);
    49a8:	e0bff717 	ldw	r2,-36(fp)
    49ac:	10803fcc 	andi	r2,r2,255
    49b0:	100d883a 	mov	r6,r2
    49b4:	e17ffc17 	ldw	r5,-16(fp)
    49b8:	e13ffb17 	ldw	r4,-20(fp)
    49bc:	0002b7c0 	call	2b7c <wr8>
	byte f = 0;
    49c0:	e03ff505 	stb	zero,-44(fp)
	if (z) f |= 0x80;
    49c4:	e0bffa17 	ldw	r2,-24(fp)
    49c8:	10000426 	beq	r2,zero,49dc <_ADDrrn+0x118>
    49cc:	e0fff503 	ldbu	r3,-44(fp)
    49d0:	00bfe004 	movi	r2,-128
    49d4:	1884b03a 	or	r2,r3,r2
    49d8:	e0bff505 	stb	r2,-44(fp)
	if (h) f |= 0x20;
    49dc:	e0bff917 	ldw	r2,-28(fp)
    49e0:	10000326 	beq	r2,zero,49f0 <_ADDrrn+0x12c>
    49e4:	e0bff503 	ldbu	r2,-44(fp)
    49e8:	10800814 	ori	r2,r2,32
    49ec:	e0bff505 	stb	r2,-44(fp)
	if (c) f |= 0x10;
    49f0:	e0bff817 	ldw	r2,-32(fp)
    49f4:	10000326 	beq	r2,zero,4a04 <_ADDrrn+0x140>
    49f8:	e0bff503 	ldbu	r2,-44(fp)
    49fc:	10800414 	ori	r2,r2,16
    4a00:	e0bff505 	stb	r2,-44(fp)
	wr8(cpu, F, f);
    4a04:	e0bff503 	ldbu	r2,-44(fp)
    4a08:	100d883a 	mov	r6,r2
    4a0c:	01400144 	movi	r5,5
    4a10:	e13ffb17 	ldw	r4,-20(fp)
    4a14:	0002b7c0 	call	2b7c <wr8>
}
    4a18:	0001883a 	nop
    4a1c:	e6ffff04 	addi	sp,fp,-4
    4a20:	dfc00217 	ldw	ra,8(sp)
    4a24:	df000117 	ldw	fp,4(sp)
    4a28:	dc000017 	ldw	r16,0(sp)
    4a2c:	dec00304 	addi	sp,sp,12
    4a30:	f800283a 	ret

00004a34 <ADCrr>:
void _ADCrn(CPU* cpu, reg_name r1, byte n);
void ADCrr(CPU* cpu, reg_name r1, reg_name r2) {
    4a34:	defffa04 	addi	sp,sp,-24
    4a38:	dfc00515 	stw	ra,20(sp)
    4a3c:	df000415 	stw	fp,16(sp)
    4a40:	df000404 	addi	fp,sp,16
    4a44:	e13ffd15 	stw	r4,-12(fp)
    4a48:	e17ffe15 	stw	r5,-8(fp)
    4a4c:	e1bfff15 	stw	r6,-4(fp)
	byte n = rr8(cpu, r2);
    4a50:	e17fff17 	ldw	r5,-4(fp)
    4a54:	e13ffd17 	ldw	r4,-12(fp)
    4a58:	00029180 	call	2918 <rr8>
    4a5c:	e0bffc05 	stb	r2,-16(fp)
	_ADCrn(cpu, r1, n);
    4a60:	e0bffc03 	ldbu	r2,-16(fp)
    4a64:	100d883a 	mov	r6,r2
    4a68:	e17ffe17 	ldw	r5,-8(fp)
    4a6c:	e13ffd17 	ldw	r4,-12(fp)
    4a70:	0004b200 	call	4b20 <_ADCrn>
	cpu->clock.c += 4;
    4a74:	e0bffd17 	ldw	r2,-12(fp)
    4a78:	10800017 	ldw	r2,0(r2)
    4a7c:	10c00104 	addi	r3,r2,4
    4a80:	e0bffd17 	ldw	r2,-12(fp)
    4a84:	10c00015 	stw	r3,0(r2)
}
    4a88:	0001883a 	nop
    4a8c:	e037883a 	mov	sp,fp
    4a90:	dfc00117 	ldw	ra,4(sp)
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00204 	addi	sp,sp,8
    4a9c:	f800283a 	ret

00004aa0 <ADCrn>:
void ADCrn(CPU* cpu, reg_name r1) {
    4aa0:	defffb04 	addi	sp,sp,-20
    4aa4:	dfc00415 	stw	ra,16(sp)
    4aa8:	df000315 	stw	fp,12(sp)
    4aac:	df000304 	addi	fp,sp,12
    4ab0:	e13ffe15 	stw	r4,-8(fp)
    4ab4:	e17fff15 	stw	r5,-4(fp)
	byte n = readData(cpu->registers.pc++);
    4ab8:	e0bffe17 	ldw	r2,-8(fp)
    4abc:	1080040b 	ldhu	r2,16(r2)
    4ac0:	10c00044 	addi	r3,r2,1
    4ac4:	1809883a 	mov	r4,r3
    4ac8:	e0fffe17 	ldw	r3,-8(fp)
    4acc:	1900040d 	sth	r4,16(r3)
    4ad0:	10bfffcc 	andi	r2,r2,65535
    4ad4:	1009883a 	mov	r4,r2
    4ad8:	000026c0 	call	26c <readData>
    4adc:	e0bffd05 	stb	r2,-12(fp)
	_ADCrn(cpu, r1, n);
    4ae0:	e0bffd03 	ldbu	r2,-12(fp)
    4ae4:	100d883a 	mov	r6,r2
    4ae8:	e17fff17 	ldw	r5,-4(fp)
    4aec:	e13ffe17 	ldw	r4,-8(fp)
    4af0:	0004b200 	call	4b20 <_ADCrn>
	cpu->clock.c += 8;
    4af4:	e0bffe17 	ldw	r2,-8(fp)
    4af8:	10800017 	ldw	r2,0(r2)
    4afc:	10c00204 	addi	r3,r2,8
    4b00:	e0bffe17 	ldw	r2,-8(fp)
    4b04:	10c00015 	stw	r3,0(r2)
}
    4b08:	0001883a 	nop
    4b0c:	e037883a 	mov	sp,fp
    4b10:	dfc00117 	ldw	ra,4(sp)
    4b14:	df000017 	ldw	fp,0(sp)
    4b18:	dec00204 	addi	sp,sp,8
    4b1c:	f800283a 	ret

00004b20 <_ADCrn>:
void _ADCrn(CPU* cpu, reg_name r1, byte n) {
    4b20:	defff704 	addi	sp,sp,-36
    4b24:	dfc00815 	stw	ra,32(sp)
    4b28:	df000715 	stw	fp,28(sp)
    4b2c:	df000704 	addi	fp,sp,28
    4b30:	e13ffd15 	stw	r4,-12(fp)
    4b34:	e17ffe15 	stw	r5,-8(fp)
    4b38:	3005883a 	mov	r2,r6
    4b3c:	e0bfff05 	stb	r2,-4(fp)
	int c = rr8(cpu, F) & 0x10 ? 1 : 0;
    4b40:	01400144 	movi	r5,5
    4b44:	e13ffd17 	ldw	r4,-12(fp)
    4b48:	00029180 	call	2918 <rr8>
    4b4c:	10803fcc 	andi	r2,r2,255
    4b50:	1080040c 	andi	r2,r2,16
    4b54:	1004c03a 	cmpne	r2,r2,zero
    4b58:	10803fcc 	andi	r2,r2,255
    4b5c:	e0bff915 	stw	r2,-28(fp)
	int h = ((rr8(cpu, r1) & 0xF) + (n & 0xF) + c) & 0x10;
    4b60:	e17ffe17 	ldw	r5,-8(fp)
    4b64:	e13ffd17 	ldw	r4,-12(fp)
    4b68:	00029180 	call	2918 <rr8>
    4b6c:	10803fcc 	andi	r2,r2,255
    4b70:	10c003cc 	andi	r3,r2,15
    4b74:	e0bfff03 	ldbu	r2,-4(fp)
    4b78:	108003cc 	andi	r2,r2,15
    4b7c:	1887883a 	add	r3,r3,r2
    4b80:	e0bff917 	ldw	r2,-28(fp)
    4b84:	1885883a 	add	r2,r3,r2
    4b88:	1080040c 	andi	r2,r2,16
    4b8c:	e0bffb15 	stw	r2,-20(fp)
	int prev = rr8(cpu, r1);
    4b90:	e17ffe17 	ldw	r5,-8(fp)
    4b94:	e13ffd17 	ldw	r4,-12(fp)
    4b98:	00029180 	call	2918 <rr8>
    4b9c:	10803fcc 	andi	r2,r2,255
    4ba0:	e0bffc15 	stw	r2,-16(fp)
	prev += n;
    4ba4:	e0bfff03 	ldbu	r2,-4(fp)
    4ba8:	e0fffc17 	ldw	r3,-16(fp)
    4bac:	1885883a 	add	r2,r3,r2
    4bb0:	e0bffc15 	stw	r2,-16(fp)
	prev += c;
    4bb4:	e0fffc17 	ldw	r3,-16(fp)
    4bb8:	e0bff917 	ldw	r2,-28(fp)
    4bbc:	1885883a 	add	r2,r3,r2
    4bc0:	e0bffc15 	stw	r2,-16(fp)
	wr8(cpu, r1, rr8(cpu, r1) + n + c);
    4bc4:	e17ffe17 	ldw	r5,-8(fp)
    4bc8:	e13ffd17 	ldw	r4,-12(fp)
    4bcc:	00029180 	call	2918 <rr8>
    4bd0:	1007883a 	mov	r3,r2
    4bd4:	e0bfff03 	ldbu	r2,-4(fp)
    4bd8:	1885883a 	add	r2,r3,r2
    4bdc:	1007883a 	mov	r3,r2
    4be0:	e0bff917 	ldw	r2,-28(fp)
    4be4:	1885883a 	add	r2,r3,r2
    4be8:	10803fcc 	andi	r2,r2,255
    4bec:	100d883a 	mov	r6,r2
    4bf0:	e17ffe17 	ldw	r5,-8(fp)
    4bf4:	e13ffd17 	ldw	r4,-12(fp)
    4bf8:	0002b7c0 	call	2b7c <wr8>
	if(prev > 255) {
    4bfc:	e0bffc17 	ldw	r2,-16(fp)
    4c00:	10804010 	cmplti	r2,r2,256
    4c04:	1000021e 	bne	r2,zero,4c10 <_ADCrn+0xf0>
		c = 1;
    4c08:	00800044 	movi	r2,1
    4c0c:	e0bff915 	stw	r2,-28(fp)
	}
	byte f = 0;
    4c10:	e03ffa05 	stb	zero,-24(fp)
	if (rr8(cpu, r1) == 0) f |= 0x80;
    4c14:	e17ffe17 	ldw	r5,-8(fp)
    4c18:	e13ffd17 	ldw	r4,-12(fp)
    4c1c:	00029180 	call	2918 <rr8>
    4c20:	10803fcc 	andi	r2,r2,255
    4c24:	1000041e 	bne	r2,zero,4c38 <_ADCrn+0x118>
    4c28:	e0fffa03 	ldbu	r3,-24(fp)
    4c2c:	00bfe004 	movi	r2,-128
    4c30:	1884b03a 	or	r2,r3,r2
    4c34:	e0bffa05 	stb	r2,-24(fp)
	if (h) f |= 0x20;
    4c38:	e0bffb17 	ldw	r2,-20(fp)
    4c3c:	10000326 	beq	r2,zero,4c4c <_ADCrn+0x12c>
    4c40:	e0bffa03 	ldbu	r2,-24(fp)
    4c44:	10800814 	ori	r2,r2,32
    4c48:	e0bffa05 	stb	r2,-24(fp)
	if (c) f |= 0x10;
    4c4c:	e0bff917 	ldw	r2,-28(fp)
    4c50:	10000326 	beq	r2,zero,4c60 <_ADCrn+0x140>
    4c54:	e0bffa03 	ldbu	r2,-24(fp)
    4c58:	10800414 	ori	r2,r2,16
    4c5c:	e0bffa05 	stb	r2,-24(fp)
	wr8(cpu, F, f);
    4c60:	e0bffa03 	ldbu	r2,-24(fp)
    4c64:	100d883a 	mov	r6,r2
    4c68:	01400144 	movi	r5,5
    4c6c:	e13ffd17 	ldw	r4,-12(fp)
    4c70:	0002b7c0 	call	2b7c <wr8>
}
    4c74:	0001883a 	nop
    4c78:	e037883a 	mov	sp,fp
    4c7c:	dfc00117 	ldw	ra,4(sp)
    4c80:	df000017 	ldw	fp,0(sp)
    4c84:	dec00204 	addi	sp,sp,8
    4c88:	f800283a 	ret

00004c8c <ADCrrra>:
void ADCrrra(CPU* cpu, reg_name r1, reg_name r2, reg_name r3) {
    4c8c:	defff904 	addi	sp,sp,-28
    4c90:	dfc00615 	stw	ra,24(sp)
    4c94:	df000515 	stw	fp,20(sp)
    4c98:	df000504 	addi	fp,sp,20
    4c9c:	e13ffc15 	stw	r4,-16(fp)
    4ca0:	e17ffd15 	stw	r5,-12(fp)
    4ca4:	e1bffe15 	stw	r6,-8(fp)
    4ca8:	e1ffff15 	stw	r7,-4(fp)
	byte n = readData(readAddr(cpu, r2, r3));
    4cac:	e1bfff17 	ldw	r6,-4(fp)
    4cb0:	e17ffe17 	ldw	r5,-8(fp)
    4cb4:	e13ffc17 	ldw	r4,-16(fp)
    4cb8:	00032000 	call	3200 <readAddr>
    4cbc:	10bfffcc 	andi	r2,r2,65535
    4cc0:	1009883a 	mov	r4,r2
    4cc4:	000026c0 	call	26c <readData>
    4cc8:	e0bffb05 	stb	r2,-20(fp)
	_ADCrn(cpu, r1, n);
    4ccc:	e0bffb03 	ldbu	r2,-20(fp)
    4cd0:	100d883a 	mov	r6,r2
    4cd4:	e17ffd17 	ldw	r5,-12(fp)
    4cd8:	e13ffc17 	ldw	r4,-16(fp)
    4cdc:	0004b200 	call	4b20 <_ADCrn>
	cpu->clock.c += 8;
    4ce0:	e0bffc17 	ldw	r2,-16(fp)
    4ce4:	10800017 	ldw	r2,0(r2)
    4ce8:	10c00204 	addi	r3,r2,8
    4cec:	e0bffc17 	ldw	r2,-16(fp)
    4cf0:	10c00015 	stw	r3,0(r2)
}
    4cf4:	0001883a 	nop
    4cf8:	e037883a 	mov	sp,fp
    4cfc:	dfc00117 	ldw	ra,4(sp)
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00204 	addi	sp,sp,8
    4d08:	f800283a 	ret

00004d0c <ADDrrra>:
void ADDrrra(CPU* cpu, reg_name r1, reg_name r2, reg_name r3) {
    4d0c:	defff604 	addi	sp,sp,-40
    4d10:	dfc00915 	stw	ra,36(sp)
    4d14:	df000815 	stw	fp,32(sp)
    4d18:	df000804 	addi	fp,sp,32
    4d1c:	e13ffc15 	stw	r4,-16(fp)
    4d20:	e17ffd15 	stw	r5,-12(fp)
    4d24:	e1bffe15 	stw	r6,-8(fp)
    4d28:	e1ffff15 	stw	r7,-4(fp)
	byte v = readData(readAddr(cpu, r2, r3));
    4d2c:	e1bfff17 	ldw	r6,-4(fp)
    4d30:	e17ffe17 	ldw	r5,-8(fp)
    4d34:	e13ffc17 	ldw	r4,-16(fp)
    4d38:	00032000 	call	3200 <readAddr>
    4d3c:	10bfffcc 	andi	r2,r2,65535
    4d40:	1009883a 	mov	r4,r2
    4d44:	000026c0 	call	26c <readData>
    4d48:	e0bff945 	stb	r2,-27(fp)
	int h = ((rr8(cpu, r1) & 0xF) + (v & 0xF)) & 0x10;
    4d4c:	e17ffd17 	ldw	r5,-12(fp)
    4d50:	e13ffc17 	ldw	r4,-16(fp)
    4d54:	00029180 	call	2918 <rr8>
    4d58:	10803fcc 	andi	r2,r2,255
    4d5c:	10c003cc 	andi	r3,r2,15
    4d60:	e0bff943 	ldbu	r2,-27(fp)
    4d64:	108003cc 	andi	r2,r2,15
    4d68:	1885883a 	add	r2,r3,r2
    4d6c:	1080040c 	andi	r2,r2,16
    4d70:	e0bffa15 	stw	r2,-24(fp)
	int c = 0;
    4d74:	e03ff815 	stw	zero,-32(fp)
	int prev = rr8(cpu, r1);
    4d78:	e17ffd17 	ldw	r5,-12(fp)
    4d7c:	e13ffc17 	ldw	r4,-16(fp)
    4d80:	00029180 	call	2918 <rr8>
    4d84:	10803fcc 	andi	r2,r2,255
    4d88:	e0bffb15 	stw	r2,-20(fp)
	prev += v;
    4d8c:	e0bff943 	ldbu	r2,-27(fp)
    4d90:	e0fffb17 	ldw	r3,-20(fp)
    4d94:	1885883a 	add	r2,r3,r2
    4d98:	e0bffb15 	stw	r2,-20(fp)
	wr8(cpu, r1, rr8(cpu, r1) + v);
    4d9c:	e17ffd17 	ldw	r5,-12(fp)
    4da0:	e13ffc17 	ldw	r4,-16(fp)
    4da4:	00029180 	call	2918 <rr8>
    4da8:	1007883a 	mov	r3,r2
    4dac:	e0bff943 	ldbu	r2,-27(fp)
    4db0:	1885883a 	add	r2,r3,r2
    4db4:	10803fcc 	andi	r2,r2,255
    4db8:	100d883a 	mov	r6,r2
    4dbc:	e17ffd17 	ldw	r5,-12(fp)
    4dc0:	e13ffc17 	ldw	r4,-16(fp)
    4dc4:	0002b7c0 	call	2b7c <wr8>
	if(prev > 255) {
    4dc8:	e0bffb17 	ldw	r2,-20(fp)
    4dcc:	10804010 	cmplti	r2,r2,256
    4dd0:	1000021e 	bne	r2,zero,4ddc <ADDrrra+0xd0>
		c = 1;
    4dd4:	00800044 	movi	r2,1
    4dd8:	e0bff815 	stw	r2,-32(fp)
	}
	byte f = 0;
    4ddc:	e03ff905 	stb	zero,-28(fp)
	if (rr8(cpu, r1) == 0) f |= 0x80;
    4de0:	e17ffd17 	ldw	r5,-12(fp)
    4de4:	e13ffc17 	ldw	r4,-16(fp)
    4de8:	00029180 	call	2918 <rr8>
    4dec:	10803fcc 	andi	r2,r2,255
    4df0:	1000041e 	bne	r2,zero,4e04 <ADDrrra+0xf8>
    4df4:	e0fff903 	ldbu	r3,-28(fp)
    4df8:	00bfe004 	movi	r2,-128
    4dfc:	1884b03a 	or	r2,r3,r2
    4e00:	e0bff905 	stb	r2,-28(fp)
	if (h) f |= 0x20;
    4e04:	e0bffa17 	ldw	r2,-24(fp)
    4e08:	10000326 	beq	r2,zero,4e18 <ADDrrra+0x10c>
    4e0c:	e0bff903 	ldbu	r2,-28(fp)
    4e10:	10800814 	ori	r2,r2,32
    4e14:	e0bff905 	stb	r2,-28(fp)
	if (c) f |= 0x10;
    4e18:	e0bff817 	ldw	r2,-32(fp)
    4e1c:	10000326 	beq	r2,zero,4e2c <ADDrrra+0x120>
    4e20:	e0bff903 	ldbu	r2,-28(fp)
    4e24:	10800414 	ori	r2,r2,16
    4e28:	e0bff905 	stb	r2,-28(fp)
	wr8(cpu, F, f);
    4e2c:	e0bff903 	ldbu	r2,-28(fp)
    4e30:	100d883a 	mov	r6,r2
    4e34:	01400144 	movi	r5,5
    4e38:	e13ffc17 	ldw	r4,-16(fp)
    4e3c:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 8;
    4e40:	e0bffc17 	ldw	r2,-16(fp)
    4e44:	10800017 	ldw	r2,0(r2)
    4e48:	10c00204 	addi	r3,r2,8
    4e4c:	e0bffc17 	ldw	r2,-16(fp)
    4e50:	10c00015 	stw	r3,0(r2)
}
    4e54:	0001883a 	nop
    4e58:	e037883a 	mov	sp,fp
    4e5c:	dfc00117 	ldw	ra,4(sp)
    4e60:	df000017 	ldw	fp,0(sp)
    4e64:	dec00204 	addi	sp,sp,8
    4e68:	f800283a 	ret

00004e6c <SUBr>:
void _SUBn(CPU* cpu, byte n);
void SUBr(CPU* cpu, reg_name r1) {
    4e6c:	defffb04 	addi	sp,sp,-20
    4e70:	dfc00415 	stw	ra,16(sp)
    4e74:	df000315 	stw	fp,12(sp)
    4e78:	df000304 	addi	fp,sp,12
    4e7c:	e13ffe15 	stw	r4,-8(fp)
    4e80:	e17fff15 	stw	r5,-4(fp)
	byte n = rr8(cpu, r1);
    4e84:	e17fff17 	ldw	r5,-4(fp)
    4e88:	e13ffe17 	ldw	r4,-8(fp)
    4e8c:	00029180 	call	2918 <rr8>
    4e90:	e0bffd05 	stb	r2,-12(fp)
	_SUBn(cpu, n);
    4e94:	e0bffd03 	ldbu	r2,-12(fp)
    4e98:	100b883a 	mov	r5,r2
    4e9c:	e13ffe17 	ldw	r4,-8(fp)
    4ea0:	0004fc00 	call	4fc0 <_SUBn>
	cpu->clock.c += 4;
    4ea4:	e0bffe17 	ldw	r2,-8(fp)
    4ea8:	10800017 	ldw	r2,0(r2)
    4eac:	10c00104 	addi	r3,r2,4
    4eb0:	e0bffe17 	ldw	r2,-8(fp)
    4eb4:	10c00015 	stw	r3,0(r2)
}
    4eb8:	0001883a 	nop
    4ebc:	e037883a 	mov	sp,fp
    4ec0:	dfc00117 	ldw	ra,4(sp)
    4ec4:	df000017 	ldw	fp,0(sp)
    4ec8:	dec00204 	addi	sp,sp,8
    4ecc:	f800283a 	ret

00004ed0 <SUBn>:
void SUBn(CPU* cpu) {
    4ed0:	defffc04 	addi	sp,sp,-16
    4ed4:	dfc00315 	stw	ra,12(sp)
    4ed8:	df000215 	stw	fp,8(sp)
    4edc:	df000204 	addi	fp,sp,8
    4ee0:	e13fff15 	stw	r4,-4(fp)
	byte n = readData(cpu->registers.pc++);
    4ee4:	e0bfff17 	ldw	r2,-4(fp)
    4ee8:	1080040b 	ldhu	r2,16(r2)
    4eec:	10c00044 	addi	r3,r2,1
    4ef0:	1809883a 	mov	r4,r3
    4ef4:	e0ffff17 	ldw	r3,-4(fp)
    4ef8:	1900040d 	sth	r4,16(r3)
    4efc:	10bfffcc 	andi	r2,r2,65535
    4f00:	1009883a 	mov	r4,r2
    4f04:	000026c0 	call	26c <readData>
    4f08:	e0bffe05 	stb	r2,-8(fp)
	_SUBn(cpu, n);
    4f0c:	e0bffe03 	ldbu	r2,-8(fp)
    4f10:	100b883a 	mov	r5,r2
    4f14:	e13fff17 	ldw	r4,-4(fp)
    4f18:	0004fc00 	call	4fc0 <_SUBn>
	cpu->clock.c += 8;
    4f1c:	e0bfff17 	ldw	r2,-4(fp)
    4f20:	10800017 	ldw	r2,0(r2)
    4f24:	10c00204 	addi	r3,r2,8
    4f28:	e0bfff17 	ldw	r2,-4(fp)
    4f2c:	10c00015 	stw	r3,0(r2)
}
    4f30:	0001883a 	nop
    4f34:	e037883a 	mov	sp,fp
    4f38:	dfc00117 	ldw	ra,4(sp)
    4f3c:	df000017 	ldw	fp,0(sp)
    4f40:	dec00204 	addi	sp,sp,8
    4f44:	f800283a 	ret

00004f48 <SUBrra>:
void SUBrra(CPU* cpu, reg_name r1, reg_name r2) {
    4f48:	defffa04 	addi	sp,sp,-24
    4f4c:	dfc00515 	stw	ra,20(sp)
    4f50:	df000415 	stw	fp,16(sp)
    4f54:	df000404 	addi	fp,sp,16
    4f58:	e13ffd15 	stw	r4,-12(fp)
    4f5c:	e17ffe15 	stw	r5,-8(fp)
    4f60:	e1bfff15 	stw	r6,-4(fp)
	byte n = readData(readAddr(cpu, r1, r2));
    4f64:	e1bfff17 	ldw	r6,-4(fp)
    4f68:	e17ffe17 	ldw	r5,-8(fp)
    4f6c:	e13ffd17 	ldw	r4,-12(fp)
    4f70:	00032000 	call	3200 <readAddr>
    4f74:	10bfffcc 	andi	r2,r2,65535
    4f78:	1009883a 	mov	r4,r2
    4f7c:	000026c0 	call	26c <readData>
    4f80:	e0bffc05 	stb	r2,-16(fp)
	_SUBn(cpu, n);
    4f84:	e0bffc03 	ldbu	r2,-16(fp)
    4f88:	100b883a 	mov	r5,r2
    4f8c:	e13ffd17 	ldw	r4,-12(fp)
    4f90:	0004fc00 	call	4fc0 <_SUBn>
	cpu->clock.c += 8;
    4f94:	e0bffd17 	ldw	r2,-12(fp)
    4f98:	10800017 	ldw	r2,0(r2)
    4f9c:	10c00204 	addi	r3,r2,8
    4fa0:	e0bffd17 	ldw	r2,-12(fp)
    4fa4:	10c00015 	stw	r3,0(r2)
}
    4fa8:	0001883a 	nop
    4fac:	e037883a 	mov	sp,fp
    4fb0:	dfc00117 	ldw	ra,4(sp)
    4fb4:	df000017 	ldw	fp,0(sp)
    4fb8:	dec00204 	addi	sp,sp,8
    4fbc:	f800283a 	ret

00004fc0 <_SUBn>:
void _SUBn(CPU* cpu, byte n) {
    4fc0:	defff804 	addi	sp,sp,-32
    4fc4:	dfc00715 	stw	ra,28(sp)
    4fc8:	df000615 	stw	fp,24(sp)
    4fcc:	df000604 	addi	fp,sp,24
    4fd0:	e13ffe15 	stw	r4,-8(fp)
    4fd4:	2805883a 	mov	r2,r5
    4fd8:	e0bfff05 	stb	r2,-4(fp)
	int c = rr8(cpu, A) < n;
    4fdc:	000b883a 	mov	r5,zero
    4fe0:	e13ffe17 	ldw	r4,-8(fp)
    4fe4:	00029180 	call	2918 <rr8>
    4fe8:	10c03fcc 	andi	r3,r2,255
    4fec:	e0bfff03 	ldbu	r2,-4(fp)
    4ff0:	1885803a 	cmpltu	r2,r3,r2
    4ff4:	10803fcc 	andi	r2,r2,255
    4ff8:	e0bffb15 	stw	r2,-20(fp)
	int h = (rr8(cpu, A) & 0xF) < (n & 0xF);
    4ffc:	000b883a 	mov	r5,zero
    5000:	e13ffe17 	ldw	r4,-8(fp)
    5004:	00029180 	call	2918 <rr8>
    5008:	10803fcc 	andi	r2,r2,255
    500c:	10c003cc 	andi	r3,r2,15
    5010:	e0bfff03 	ldbu	r2,-4(fp)
    5014:	108003cc 	andi	r2,r2,15
    5018:	1884803a 	cmplt	r2,r3,r2
    501c:	10803fcc 	andi	r2,r2,255
    5020:	e0bffc15 	stw	r2,-16(fp)
	wr8(cpu, A, rr8(cpu, A) - n);
    5024:	000b883a 	mov	r5,zero
    5028:	e13ffe17 	ldw	r4,-8(fp)
    502c:	00029180 	call	2918 <rr8>
    5030:	1007883a 	mov	r3,r2
    5034:	e0bfff03 	ldbu	r2,-4(fp)
    5038:	1885c83a 	sub	r2,r3,r2
    503c:	10803fcc 	andi	r2,r2,255
    5040:	100d883a 	mov	r6,r2
    5044:	000b883a 	mov	r5,zero
    5048:	e13ffe17 	ldw	r4,-8(fp)
    504c:	0002b7c0 	call	2b7c <wr8>
	int z = rr8(cpu, A) == 0;
    5050:	000b883a 	mov	r5,zero
    5054:	e13ffe17 	ldw	r4,-8(fp)
    5058:	00029180 	call	2918 <rr8>
    505c:	10803fcc 	andi	r2,r2,255
    5060:	1005003a 	cmpeq	r2,r2,zero
    5064:	10803fcc 	andi	r2,r2,255
    5068:	e0bffd15 	stw	r2,-12(fp)
	byte f = 0x40;
    506c:	00801004 	movi	r2,64
    5070:	e0bffa05 	stb	r2,-24(fp)
	if (z) f |= 0x80;
    5074:	e0bffd17 	ldw	r2,-12(fp)
    5078:	10000426 	beq	r2,zero,508c <_SUBn+0xcc>
    507c:	e0fffa03 	ldbu	r3,-24(fp)
    5080:	00bfe004 	movi	r2,-128
    5084:	1884b03a 	or	r2,r3,r2
    5088:	e0bffa05 	stb	r2,-24(fp)
	if (h) f |= 0x20;
    508c:	e0bffc17 	ldw	r2,-16(fp)
    5090:	10000326 	beq	r2,zero,50a0 <_SUBn+0xe0>
    5094:	e0bffa03 	ldbu	r2,-24(fp)
    5098:	10800814 	ori	r2,r2,32
    509c:	e0bffa05 	stb	r2,-24(fp)
	if (c) f |= 0x10;
    50a0:	e0bffb17 	ldw	r2,-20(fp)
    50a4:	10000326 	beq	r2,zero,50b4 <_SUBn+0xf4>
    50a8:	e0bffa03 	ldbu	r2,-24(fp)
    50ac:	10800414 	ori	r2,r2,16
    50b0:	e0bffa05 	stb	r2,-24(fp)
	wr8(cpu, F, f);
    50b4:	e0bffa03 	ldbu	r2,-24(fp)
    50b8:	100d883a 	mov	r6,r2
    50bc:	01400144 	movi	r5,5
    50c0:	e13ffe17 	ldw	r4,-8(fp)
    50c4:	0002b7c0 	call	2b7c <wr8>
}
    50c8:	0001883a 	nop
    50cc:	e037883a 	mov	sp,fp
    50d0:	dfc00117 	ldw	ra,4(sp)
    50d4:	df000017 	ldw	fp,0(sp)
    50d8:	dec00204 	addi	sp,sp,8
    50dc:	f800283a 	ret

000050e0 <SBCn>:
void _SBCn(CPU* cpu, byte n);
void SBCn(CPU* cpu) {
    50e0:	defffc04 	addi	sp,sp,-16
    50e4:	dfc00315 	stw	ra,12(sp)
    50e8:	df000215 	stw	fp,8(sp)
    50ec:	df000204 	addi	fp,sp,8
    50f0:	e13fff15 	stw	r4,-4(fp)
	byte n = readData(cpu->registers.pc++);
    50f4:	e0bfff17 	ldw	r2,-4(fp)
    50f8:	1080040b 	ldhu	r2,16(r2)
    50fc:	10c00044 	addi	r3,r2,1
    5100:	1809883a 	mov	r4,r3
    5104:	e0ffff17 	ldw	r3,-4(fp)
    5108:	1900040d 	sth	r4,16(r3)
    510c:	10bfffcc 	andi	r2,r2,65535
    5110:	1009883a 	mov	r4,r2
    5114:	000026c0 	call	26c <readData>
    5118:	e0bffe05 	stb	r2,-8(fp)
	_SBCn(cpu, n);
    511c:	e0bffe03 	ldbu	r2,-8(fp)
    5120:	100b883a 	mov	r5,r2
    5124:	e13fff17 	ldw	r4,-4(fp)
    5128:	00052640 	call	5264 <_SBCn>
	cpu->clock.c += 8;
    512c:	e0bfff17 	ldw	r2,-4(fp)
    5130:	10800017 	ldw	r2,0(r2)
    5134:	10c00204 	addi	r3,r2,8
    5138:	e0bfff17 	ldw	r2,-4(fp)
    513c:	10c00015 	stw	r3,0(r2)
}
    5140:	0001883a 	nop
    5144:	e037883a 	mov	sp,fp
    5148:	dfc00117 	ldw	ra,4(sp)
    514c:	df000017 	ldw	fp,0(sp)
    5150:	dec00204 	addi	sp,sp,8
    5154:	f800283a 	ret

00005158 <SBCr>:
void SBCr(CPU* cpu, reg_name r1) {
    5158:	defffb04 	addi	sp,sp,-20
    515c:	dfc00415 	stw	ra,16(sp)
    5160:	df000315 	stw	fp,12(sp)
    5164:	df000304 	addi	fp,sp,12
    5168:	e13ffe15 	stw	r4,-8(fp)
    516c:	e17fff15 	stw	r5,-4(fp)
	byte n = rr8(cpu, r1);
    5170:	e17fff17 	ldw	r5,-4(fp)
    5174:	e13ffe17 	ldw	r4,-8(fp)
    5178:	00029180 	call	2918 <rr8>
    517c:	e0bffd05 	stb	r2,-12(fp)
	_SBCn(cpu, n);
    5180:	e0bffd03 	ldbu	r2,-12(fp)
    5184:	100b883a 	mov	r5,r2
    5188:	e13ffe17 	ldw	r4,-8(fp)
    518c:	00052640 	call	5264 <_SBCn>
	cpu->clock.c += 4;
    5190:	e0bffe17 	ldw	r2,-8(fp)
    5194:	10800017 	ldw	r2,0(r2)
    5198:	10c00104 	addi	r3,r2,4
    519c:	e0bffe17 	ldw	r2,-8(fp)
    51a0:	10c00015 	stw	r3,0(r2)
}
    51a4:	0001883a 	nop
    51a8:	e037883a 	mov	sp,fp
    51ac:	dfc00117 	ldw	ra,4(sp)
    51b0:	df000017 	ldw	fp,0(sp)
    51b4:	dec00204 	addi	sp,sp,8
    51b8:	f800283a 	ret

000051bc <SBCrra>:
void SBCrra(CPU* cpu, reg_name r1, reg_name r2) {
    51bc:	defff904 	addi	sp,sp,-28
    51c0:	dfc00615 	stw	ra,24(sp)
    51c4:	df000515 	stw	fp,20(sp)
    51c8:	dc000415 	stw	r16,16(sp)
    51cc:	df000504 	addi	fp,sp,20
    51d0:	e13ffc15 	stw	r4,-16(fp)
    51d4:	e17ffd15 	stw	r5,-12(fp)
    51d8:	e1bffe15 	stw	r6,-8(fp)
	word addr = rr8(cpu, r1);
    51dc:	e17ffd17 	ldw	r5,-12(fp)
    51e0:	e13ffc17 	ldw	r4,-16(fp)
    51e4:	00029180 	call	2918 <rr8>
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	e0bffb0d 	sth	r2,-20(fp)
	addr = (addr << 8) + rr8(cpu, r2);
    51f0:	e0bffb0b 	ldhu	r2,-20(fp)
    51f4:	1004923a 	slli	r2,r2,8
    51f8:	1021883a 	mov	r16,r2
    51fc:	e17ffe17 	ldw	r5,-8(fp)
    5200:	e13ffc17 	ldw	r4,-16(fp)
    5204:	00029180 	call	2918 <rr8>
    5208:	10803fcc 	andi	r2,r2,255
    520c:	8085883a 	add	r2,r16,r2
    5210:	e0bffb0d 	sth	r2,-20(fp)
	byte v = readData(addr);
    5214:	e0bffb0b 	ldhu	r2,-20(fp)
    5218:	1009883a 	mov	r4,r2
    521c:	000026c0 	call	26c <readData>
    5220:	e0bffb85 	stb	r2,-18(fp)
	_SBCn(cpu, v);
    5224:	e0bffb83 	ldbu	r2,-18(fp)
    5228:	100b883a 	mov	r5,r2
    522c:	e13ffc17 	ldw	r4,-16(fp)
    5230:	00052640 	call	5264 <_SBCn>
	cpu->clock.c += 8;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800017 	ldw	r2,0(r2)
    523c:	10c00204 	addi	r3,r2,8
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	10c00015 	stw	r3,0(r2)
}
    5248:	0001883a 	nop
    524c:	e6ffff04 	addi	sp,fp,-4
    5250:	dfc00217 	ldw	ra,8(sp)
    5254:	df000117 	ldw	fp,4(sp)
    5258:	dc000017 	ldw	r16,0(sp)
    525c:	dec00304 	addi	sp,sp,12
    5260:	f800283a 	ret

00005264 <_SBCn>:
void _SBCn(CPU* cpu, byte n) {
    5264:	defff704 	addi	sp,sp,-36
    5268:	dfc00815 	stw	ra,32(sp)
    526c:	df000715 	stw	fp,28(sp)
    5270:	df000704 	addi	fp,sp,28
    5274:	e13ffe15 	stw	r4,-8(fp)
    5278:	2805883a 	mov	r2,r5
    527c:	e0bfff05 	stb	r2,-4(fp)
	int carry = rr8(cpu, F) & 0x10 ? 1 : 0;
    5280:	01400144 	movi	r5,5
    5284:	e13ffe17 	ldw	r4,-8(fp)
    5288:	00029180 	call	2918 <rr8>
    528c:	10803fcc 	andi	r2,r2,255
    5290:	1080040c 	andi	r2,r2,16
    5294:	1004c03a 	cmpne	r2,r2,zero
    5298:	10803fcc 	andi	r2,r2,255
    529c:	e0bffa15 	stw	r2,-24(fp)
	int c = rr8(cpu, A) < (carry + n);
    52a0:	000b883a 	mov	r5,zero
    52a4:	e13ffe17 	ldw	r4,-8(fp)
    52a8:	00029180 	call	2918 <rr8>
    52ac:	10c03fcc 	andi	r3,r2,255
    52b0:	e13fff03 	ldbu	r4,-4(fp)
    52b4:	e0bffa17 	ldw	r2,-24(fp)
    52b8:	2085883a 	add	r2,r4,r2
    52bc:	1884803a 	cmplt	r2,r3,r2
    52c0:	10803fcc 	andi	r2,r2,255
    52c4:	e0bffb15 	stw	r2,-20(fp)
	int h = (rr8(cpu, A) & 0xF) < (carry + (n & 0xF));
    52c8:	000b883a 	mov	r5,zero
    52cc:	e13ffe17 	ldw	r4,-8(fp)
    52d0:	00029180 	call	2918 <rr8>
    52d4:	10803fcc 	andi	r2,r2,255
    52d8:	10c003cc 	andi	r3,r2,15
    52dc:	e0bfff03 	ldbu	r2,-4(fp)
    52e0:	110003cc 	andi	r4,r2,15
    52e4:	e0bffa17 	ldw	r2,-24(fp)
    52e8:	2085883a 	add	r2,r4,r2
    52ec:	1884803a 	cmplt	r2,r3,r2
    52f0:	10803fcc 	andi	r2,r2,255
    52f4:	e0bffc15 	stw	r2,-16(fp)
	wr8(cpu, A, rr8(cpu, A) - n - carry);
    52f8:	000b883a 	mov	r5,zero
    52fc:	e13ffe17 	ldw	r4,-8(fp)
    5300:	00029180 	call	2918 <rr8>
    5304:	1007883a 	mov	r3,r2
    5308:	e0bfff03 	ldbu	r2,-4(fp)
    530c:	1885c83a 	sub	r2,r3,r2
    5310:	1007883a 	mov	r3,r2
    5314:	e0bffa17 	ldw	r2,-24(fp)
    5318:	1885c83a 	sub	r2,r3,r2
    531c:	10803fcc 	andi	r2,r2,255
    5320:	100d883a 	mov	r6,r2
    5324:	000b883a 	mov	r5,zero
    5328:	e13ffe17 	ldw	r4,-8(fp)
    532c:	0002b7c0 	call	2b7c <wr8>
	cpu->registers.a &= 0xFF;
    5330:	e0bffe17 	ldw	r2,-8(fp)
    5334:	10c00203 	ldbu	r3,8(r2)
    5338:	e0bffe17 	ldw	r2,-8(fp)
    533c:	10c00205 	stb	r3,8(r2)
	int z = rr8(cpu, A) == 0;
    5340:	000b883a 	mov	r5,zero
    5344:	e13ffe17 	ldw	r4,-8(fp)
    5348:	00029180 	call	2918 <rr8>
    534c:	10803fcc 	andi	r2,r2,255
    5350:	1005003a 	cmpeq	r2,r2,zero
    5354:	10803fcc 	andi	r2,r2,255
    5358:	e0bffd15 	stw	r2,-12(fp)
	byte f = 0x40;
    535c:	00801004 	movi	r2,64
    5360:	e0bff905 	stb	r2,-28(fp)
	if (z) f |= 0x80;
    5364:	e0bffd17 	ldw	r2,-12(fp)
    5368:	10000426 	beq	r2,zero,537c <_SBCn+0x118>
    536c:	e0fff903 	ldbu	r3,-28(fp)
    5370:	00bfe004 	movi	r2,-128
    5374:	1884b03a 	or	r2,r3,r2
    5378:	e0bff905 	stb	r2,-28(fp)
	if (h) f |= 0x20;
    537c:	e0bffc17 	ldw	r2,-16(fp)
    5380:	10000326 	beq	r2,zero,5390 <_SBCn+0x12c>
    5384:	e0bff903 	ldbu	r2,-28(fp)
    5388:	10800814 	ori	r2,r2,32
    538c:	e0bff905 	stb	r2,-28(fp)
	if (c) f |= 0x10;
    5390:	e0bffb17 	ldw	r2,-20(fp)
    5394:	10000326 	beq	r2,zero,53a4 <_SBCn+0x140>
    5398:	e0bff903 	ldbu	r2,-28(fp)
    539c:	10800414 	ori	r2,r2,16
    53a0:	e0bff905 	stb	r2,-28(fp)
	wr8(cpu, F, f);
    53a4:	e0bff903 	ldbu	r2,-28(fp)
    53a8:	100d883a 	mov	r6,r2
    53ac:	01400144 	movi	r5,5
    53b0:	e13ffe17 	ldw	r4,-8(fp)
    53b4:	0002b7c0 	call	2b7c <wr8>
}
    53b8:	0001883a 	nop
    53bc:	e037883a 	mov	sp,fp
    53c0:	dfc00117 	ldw	ra,4(sp)
    53c4:	df000017 	ldw	fp,0(sp)
    53c8:	dec00204 	addi	sp,sp,8
    53cc:	f800283a 	ret

000053d0 <ORr>:
void ORr(CPU* cpu, reg_name r1) {
    53d0:	defffc04 	addi	sp,sp,-16
    53d4:	dfc00315 	stw	ra,12(sp)
    53d8:	df000215 	stw	fp,8(sp)
    53dc:	df000204 	addi	fp,sp,8
    53e0:	e13ffe15 	stw	r4,-8(fp)
    53e4:	e17fff15 	stw	r5,-4(fp)
	cpu->registers.a |= rr8(cpu, r1);
    53e8:	e17fff17 	ldw	r5,-4(fp)
    53ec:	e13ffe17 	ldw	r4,-8(fp)
    53f0:	00029180 	call	2918 <rr8>
    53f4:	1007883a 	mov	r3,r2
    53f8:	e0bffe17 	ldw	r2,-8(fp)
    53fc:	10800203 	ldbu	r2,8(r2)
    5400:	10c4b03a 	or	r2,r2,r3
    5404:	1007883a 	mov	r3,r2
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	10c00205 	stb	r3,8(r2)
	wr8(cpu, F, (rr8(cpu, A) == 0) ? 0x80 : 0x00);
    5410:	000b883a 	mov	r5,zero
    5414:	e13ffe17 	ldw	r4,-8(fp)
    5418:	00029180 	call	2918 <rr8>
    541c:	10803fcc 	andi	r2,r2,255
    5420:	1000021e 	bne	r2,zero,542c <ORr+0x5c>
    5424:	00802004 	movi	r2,128
    5428:	00000106 	br	5430 <ORr+0x60>
    542c:	0005883a 	mov	r2,zero
    5430:	100d883a 	mov	r6,r2
    5434:	01400144 	movi	r5,5
    5438:	e13ffe17 	ldw	r4,-8(fp)
    543c:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 4;
    5440:	e0bffe17 	ldw	r2,-8(fp)
    5444:	10800017 	ldw	r2,0(r2)
    5448:	10c00104 	addi	r3,r2,4
    544c:	e0bffe17 	ldw	r2,-8(fp)
    5450:	10c00015 	stw	r3,0(r2)
}
    5454:	0001883a 	nop
    5458:	e037883a 	mov	sp,fp
    545c:	dfc00117 	ldw	ra,4(sp)
    5460:	df000017 	ldw	fp,0(sp)
    5464:	dec00204 	addi	sp,sp,8
    5468:	f800283a 	ret

0000546c <ORn>:
void ORn(CPU* cpu) {
    546c:	defffd04 	addi	sp,sp,-12
    5470:	dfc00215 	stw	ra,8(sp)
    5474:	df000115 	stw	fp,4(sp)
    5478:	df000104 	addi	fp,sp,4
    547c:	e13fff15 	stw	r4,-4(fp)
    cpu->registers.a |= readData(cpu->registers.pc++);
    5480:	e0bfff17 	ldw	r2,-4(fp)
    5484:	1080040b 	ldhu	r2,16(r2)
    5488:	10c00044 	addi	r3,r2,1
    548c:	1809883a 	mov	r4,r3
    5490:	e0ffff17 	ldw	r3,-4(fp)
    5494:	1900040d 	sth	r4,16(r3)
    5498:	10bfffcc 	andi	r2,r2,65535
    549c:	1009883a 	mov	r4,r2
    54a0:	000026c0 	call	26c <readData>
    54a4:	1007883a 	mov	r3,r2
    54a8:	e0bfff17 	ldw	r2,-4(fp)
    54ac:	10800203 	ldbu	r2,8(r2)
    54b0:	10c4b03a 	or	r2,r2,r3
    54b4:	1007883a 	mov	r3,r2
    54b8:	e0bfff17 	ldw	r2,-4(fp)
    54bc:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0x80 : 0x00;
    54c0:	e0bfff17 	ldw	r2,-4(fp)
    54c4:	10800203 	ldbu	r2,8(r2)
    54c8:	10803fcc 	andi	r2,r2,255
    54cc:	1000021e 	bne	r2,zero,54d8 <ORn+0x6c>
    54d0:	00bfe004 	movi	r2,-128
    54d4:	00000106 	br	54dc <ORn+0x70>
    54d8:	0005883a 	mov	r2,zero
    54dc:	e0ffff17 	ldw	r3,-4(fp)
    54e0:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 8;
    54e4:	e0bfff17 	ldw	r2,-4(fp)
    54e8:	10800017 	ldw	r2,0(r2)
    54ec:	10c00204 	addi	r3,r2,8
    54f0:	e0bfff17 	ldw	r2,-4(fp)
    54f4:	10c00015 	stw	r3,0(r2)
}
    54f8:	0001883a 	nop
    54fc:	e037883a 	mov	sp,fp
    5500:	dfc00117 	ldw	ra,4(sp)
    5504:	df000017 	ldw	fp,0(sp)
    5508:	dec00204 	addi	sp,sp,8
    550c:	f800283a 	ret

00005510 <ORrra>:

void ORrra(CPU* cpu, reg_name r1, reg_name r2) {
    5510:	defffb04 	addi	sp,sp,-20
    5514:	dfc00415 	stw	ra,16(sp)
    5518:	df000315 	stw	fp,12(sp)
    551c:	df000304 	addi	fp,sp,12
    5520:	e13ffd15 	stw	r4,-12(fp)
    5524:	e17ffe15 	stw	r5,-8(fp)
    5528:	e1bfff15 	stw	r6,-4(fp)
    cpu->registers.a |= readData(readAddr(cpu, r1, r2));
    552c:	e1bfff17 	ldw	r6,-4(fp)
    5530:	e17ffe17 	ldw	r5,-8(fp)
    5534:	e13ffd17 	ldw	r4,-12(fp)
    5538:	00032000 	call	3200 <readAddr>
    553c:	10bfffcc 	andi	r2,r2,65535
    5540:	1009883a 	mov	r4,r2
    5544:	000026c0 	call	26c <readData>
    5548:	1007883a 	mov	r3,r2
    554c:	e0bffd17 	ldw	r2,-12(fp)
    5550:	10800203 	ldbu	r2,8(r2)
    5554:	10c4b03a 	or	r2,r2,r3
    5558:	1007883a 	mov	r3,r2
    555c:	e0bffd17 	ldw	r2,-12(fp)
    5560:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0x80 : 0x00;
    5564:	e0bffd17 	ldw	r2,-12(fp)
    5568:	10800203 	ldbu	r2,8(r2)
    556c:	10803fcc 	andi	r2,r2,255
    5570:	1000021e 	bne	r2,zero,557c <ORrra+0x6c>
    5574:	00bfe004 	movi	r2,-128
    5578:	00000106 	br	5580 <ORrra+0x70>
    557c:	0005883a 	mov	r2,zero
    5580:	e0fffd17 	ldw	r3,-12(fp)
    5584:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 8;
    5588:	e0bffd17 	ldw	r2,-12(fp)
    558c:	10800017 	ldw	r2,0(r2)
    5590:	10c00204 	addi	r3,r2,8
    5594:	e0bffd17 	ldw	r2,-12(fp)
    5598:	10c00015 	stw	r3,0(r2)
}
    559c:	0001883a 	nop
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <ANDr>:

void ANDr(CPU* cpu, reg_name r1) {
    55b4:	defffc04 	addi	sp,sp,-16
    55b8:	dfc00315 	stw	ra,12(sp)
    55bc:	df000215 	stw	fp,8(sp)
    55c0:	df000204 	addi	fp,sp,8
    55c4:	e13ffe15 	stw	r4,-8(fp)
    55c8:	e17fff15 	stw	r5,-4(fp)
    cpu->registers.a &= rr8(cpu, r1);
    55cc:	e17fff17 	ldw	r5,-4(fp)
    55d0:	e13ffe17 	ldw	r4,-8(fp)
    55d4:	00029180 	call	2918 <rr8>
    55d8:	1007883a 	mov	r3,r2
    55dc:	e0bffe17 	ldw	r2,-8(fp)
    55e0:	10800203 	ldbu	r2,8(r2)
    55e4:	10c4703a 	and	r2,r2,r3
    55e8:	1007883a 	mov	r3,r2
    55ec:	e0bffe17 	ldw	r2,-8(fp)
    55f0:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0xA0 : 0x20;
    55f4:	e0bffe17 	ldw	r2,-8(fp)
    55f8:	10800203 	ldbu	r2,8(r2)
    55fc:	10803fcc 	andi	r2,r2,255
    5600:	1000021e 	bne	r2,zero,560c <ANDr+0x58>
    5604:	00bfe804 	movi	r2,-96
    5608:	00000106 	br	5610 <ANDr+0x5c>
    560c:	00800804 	movi	r2,32
    5610:	e0fffe17 	ldw	r3,-8(fp)
    5614:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 4;
    5618:	e0bffe17 	ldw	r2,-8(fp)
    561c:	10800017 	ldw	r2,0(r2)
    5620:	10c00104 	addi	r3,r2,4
    5624:	e0bffe17 	ldw	r2,-8(fp)
    5628:	10c00015 	stw	r3,0(r2)
}
    562c:	0001883a 	nop
    5630:	e037883a 	mov	sp,fp
    5634:	dfc00117 	ldw	ra,4(sp)
    5638:	df000017 	ldw	fp,0(sp)
    563c:	dec00204 	addi	sp,sp,8
    5640:	f800283a 	ret

00005644 <ANDn>:

void ANDn(CPU* cpu) {
    5644:	defffd04 	addi	sp,sp,-12
    5648:	dfc00215 	stw	ra,8(sp)
    564c:	df000115 	stw	fp,4(sp)
    5650:	df000104 	addi	fp,sp,4
    5654:	e13fff15 	stw	r4,-4(fp)
    cpu->registers.a &= readData(cpu->registers.pc++);
    5658:	e0bfff17 	ldw	r2,-4(fp)
    565c:	1080040b 	ldhu	r2,16(r2)
    5660:	10c00044 	addi	r3,r2,1
    5664:	1809883a 	mov	r4,r3
    5668:	e0ffff17 	ldw	r3,-4(fp)
    566c:	1900040d 	sth	r4,16(r3)
    5670:	10bfffcc 	andi	r2,r2,65535
    5674:	1009883a 	mov	r4,r2
    5678:	000026c0 	call	26c <readData>
    567c:	1007883a 	mov	r3,r2
    5680:	e0bfff17 	ldw	r2,-4(fp)
    5684:	10800203 	ldbu	r2,8(r2)
    5688:	10c4703a 	and	r2,r2,r3
    568c:	1007883a 	mov	r3,r2
    5690:	e0bfff17 	ldw	r2,-4(fp)
    5694:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0xA0 : 0x20;
    5698:	e0bfff17 	ldw	r2,-4(fp)
    569c:	10800203 	ldbu	r2,8(r2)
    56a0:	10803fcc 	andi	r2,r2,255
    56a4:	1000021e 	bne	r2,zero,56b0 <ANDn+0x6c>
    56a8:	00bfe804 	movi	r2,-96
    56ac:	00000106 	br	56b4 <ANDn+0x70>
    56b0:	00800804 	movi	r2,32
    56b4:	e0ffff17 	ldw	r3,-4(fp)
    56b8:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 8;
    56bc:	e0bfff17 	ldw	r2,-4(fp)
    56c0:	10800017 	ldw	r2,0(r2)
    56c4:	10c00204 	addi	r3,r2,8
    56c8:	e0bfff17 	ldw	r2,-4(fp)
    56cc:	10c00015 	stw	r3,0(r2)
}
    56d0:	0001883a 	nop
    56d4:	e037883a 	mov	sp,fp
    56d8:	dfc00117 	ldw	ra,4(sp)
    56dc:	df000017 	ldw	fp,0(sp)
    56e0:	dec00204 	addi	sp,sp,8
    56e4:	f800283a 	ret

000056e8 <ANDrra>:

void ANDrra(CPU* cpu, reg_name r1, reg_name r2) {
    56e8:	defffb04 	addi	sp,sp,-20
    56ec:	dfc00415 	stw	ra,16(sp)
    56f0:	df000315 	stw	fp,12(sp)
    56f4:	df000304 	addi	fp,sp,12
    56f8:	e13ffd15 	stw	r4,-12(fp)
    56fc:	e17ffe15 	stw	r5,-8(fp)
    5700:	e1bfff15 	stw	r6,-4(fp)
    cpu->registers.a &= readData(readAddr(cpu, r1, r2));
    5704:	e1bfff17 	ldw	r6,-4(fp)
    5708:	e17ffe17 	ldw	r5,-8(fp)
    570c:	e13ffd17 	ldw	r4,-12(fp)
    5710:	00032000 	call	3200 <readAddr>
    5714:	10bfffcc 	andi	r2,r2,65535
    5718:	1009883a 	mov	r4,r2
    571c:	000026c0 	call	26c <readData>
    5720:	1007883a 	mov	r3,r2
    5724:	e0bffd17 	ldw	r2,-12(fp)
    5728:	10800203 	ldbu	r2,8(r2)
    572c:	10c4703a 	and	r2,r2,r3
    5730:	1007883a 	mov	r3,r2
    5734:	e0bffd17 	ldw	r2,-12(fp)
    5738:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0xA0 : 0x20;
    573c:	e0bffd17 	ldw	r2,-12(fp)
    5740:	10800203 	ldbu	r2,8(r2)
    5744:	10803fcc 	andi	r2,r2,255
    5748:	1000021e 	bne	r2,zero,5754 <ANDrra+0x6c>
    574c:	00bfe804 	movi	r2,-96
    5750:	00000106 	br	5758 <ANDrra+0x70>
    5754:	00800804 	movi	r2,32
    5758:	e0fffd17 	ldw	r3,-12(fp)
    575c:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 8;
    5760:	e0bffd17 	ldw	r2,-12(fp)
    5764:	10800017 	ldw	r2,0(r2)
    5768:	10c00204 	addi	r3,r2,8
    576c:	e0bffd17 	ldw	r2,-12(fp)
    5770:	10c00015 	stw	r3,0(r2)
}
    5774:	0001883a 	nop
    5778:	e037883a 	mov	sp,fp
    577c:	dfc00117 	ldw	ra,4(sp)
    5780:	df000017 	ldw	fp,0(sp)
    5784:	dec00204 	addi	sp,sp,8
    5788:	f800283a 	ret

0000578c <XORr>:

void XORr(CPU* cpu, reg_name r1) {
    578c:	defffc04 	addi	sp,sp,-16
    5790:	dfc00315 	stw	ra,12(sp)
    5794:	df000215 	stw	fp,8(sp)
    5798:	df000204 	addi	fp,sp,8
    579c:	e13ffe15 	stw	r4,-8(fp)
    57a0:	e17fff15 	stw	r5,-4(fp)
    cpu->registers.a ^= rr8(cpu, r1);
    57a4:	e17fff17 	ldw	r5,-4(fp)
    57a8:	e13ffe17 	ldw	r4,-8(fp)
    57ac:	00029180 	call	2918 <rr8>
    57b0:	1007883a 	mov	r3,r2
    57b4:	e0bffe17 	ldw	r2,-8(fp)
    57b8:	10800203 	ldbu	r2,8(r2)
    57bc:	10c4f03a 	xor	r2,r2,r3
    57c0:	1007883a 	mov	r3,r2
    57c4:	e0bffe17 	ldw	r2,-8(fp)
    57c8:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0x80 : 0x00;
    57cc:	e0bffe17 	ldw	r2,-8(fp)
    57d0:	10800203 	ldbu	r2,8(r2)
    57d4:	10803fcc 	andi	r2,r2,255
    57d8:	1000021e 	bne	r2,zero,57e4 <XORr+0x58>
    57dc:	00bfe004 	movi	r2,-128
    57e0:	00000106 	br	57e8 <XORr+0x5c>
    57e4:	0005883a 	mov	r2,zero
    57e8:	e0fffe17 	ldw	r3,-8(fp)
    57ec:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 4;
    57f0:	e0bffe17 	ldw	r2,-8(fp)
    57f4:	10800017 	ldw	r2,0(r2)
    57f8:	10c00104 	addi	r3,r2,4
    57fc:	e0bffe17 	ldw	r2,-8(fp)
    5800:	10c00015 	stw	r3,0(r2)
}
    5804:	0001883a 	nop
    5808:	e037883a 	mov	sp,fp
    580c:	dfc00117 	ldw	ra,4(sp)
    5810:	df000017 	ldw	fp,0(sp)
    5814:	dec00204 	addi	sp,sp,8
    5818:	f800283a 	ret

0000581c <XORn>:

void XORn(CPU* cpu) {
    581c:	defffd04 	addi	sp,sp,-12
    5820:	dfc00215 	stw	ra,8(sp)
    5824:	df000115 	stw	fp,4(sp)
    5828:	df000104 	addi	fp,sp,4
    582c:	e13fff15 	stw	r4,-4(fp)
    cpu->registers.a ^= readData(cpu->registers.pc++);
    5830:	e0bfff17 	ldw	r2,-4(fp)
    5834:	1080040b 	ldhu	r2,16(r2)
    5838:	10c00044 	addi	r3,r2,1
    583c:	1809883a 	mov	r4,r3
    5840:	e0ffff17 	ldw	r3,-4(fp)
    5844:	1900040d 	sth	r4,16(r3)
    5848:	10bfffcc 	andi	r2,r2,65535
    584c:	1009883a 	mov	r4,r2
    5850:	000026c0 	call	26c <readData>
    5854:	1007883a 	mov	r3,r2
    5858:	e0bfff17 	ldw	r2,-4(fp)
    585c:	10800203 	ldbu	r2,8(r2)
    5860:	10c4f03a 	xor	r2,r2,r3
    5864:	1007883a 	mov	r3,r2
    5868:	e0bfff17 	ldw	r2,-4(fp)
    586c:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0x80 : 0x00;
    5870:	e0bfff17 	ldw	r2,-4(fp)
    5874:	10800203 	ldbu	r2,8(r2)
    5878:	10803fcc 	andi	r2,r2,255
    587c:	1000021e 	bne	r2,zero,5888 <XORn+0x6c>
    5880:	00bfe004 	movi	r2,-128
    5884:	00000106 	br	588c <XORn+0x70>
    5888:	0005883a 	mov	r2,zero
    588c:	e0ffff17 	ldw	r3,-4(fp)
    5890:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 8;
    5894:	e0bfff17 	ldw	r2,-4(fp)
    5898:	10800017 	ldw	r2,0(r2)
    589c:	10c00204 	addi	r3,r2,8
    58a0:	e0bfff17 	ldw	r2,-4(fp)
    58a4:	10c00015 	stw	r3,0(r2)
}
    58a8:	0001883a 	nop
    58ac:	e037883a 	mov	sp,fp
    58b0:	dfc00117 	ldw	ra,4(sp)
    58b4:	df000017 	ldw	fp,0(sp)
    58b8:	dec00204 	addi	sp,sp,8
    58bc:	f800283a 	ret

000058c0 <XORrra>:

void XORrra(CPU* cpu, reg_name r1, reg_name r2) {
    58c0:	defffb04 	addi	sp,sp,-20
    58c4:	dfc00415 	stw	ra,16(sp)
    58c8:	df000315 	stw	fp,12(sp)
    58cc:	df000304 	addi	fp,sp,12
    58d0:	e13ffd15 	stw	r4,-12(fp)
    58d4:	e17ffe15 	stw	r5,-8(fp)
    58d8:	e1bfff15 	stw	r6,-4(fp)
    cpu->registers.a ^= readData(readAddr(cpu, r1, r2));
    58dc:	e1bfff17 	ldw	r6,-4(fp)
    58e0:	e17ffe17 	ldw	r5,-8(fp)
    58e4:	e13ffd17 	ldw	r4,-12(fp)
    58e8:	00032000 	call	3200 <readAddr>
    58ec:	10bfffcc 	andi	r2,r2,65535
    58f0:	1009883a 	mov	r4,r2
    58f4:	000026c0 	call	26c <readData>
    58f8:	1007883a 	mov	r3,r2
    58fc:	e0bffd17 	ldw	r2,-12(fp)
    5900:	10800203 	ldbu	r2,8(r2)
    5904:	10c4f03a 	xor	r2,r2,r3
    5908:	1007883a 	mov	r3,r2
    590c:	e0bffd17 	ldw	r2,-12(fp)
    5910:	10c00205 	stb	r3,8(r2)
    cpu->registers.f = (cpu->registers.a == 0) ? 0x80 : 0x00;
    5914:	e0bffd17 	ldw	r2,-12(fp)
    5918:	10800203 	ldbu	r2,8(r2)
    591c:	10803fcc 	andi	r2,r2,255
    5920:	1000021e 	bne	r2,zero,592c <XORrra+0x6c>
    5924:	00bfe004 	movi	r2,-128
    5928:	00000106 	br	5930 <XORrra+0x70>
    592c:	0005883a 	mov	r2,zero
    5930:	e0fffd17 	ldw	r3,-12(fp)
    5934:	188003c5 	stb	r2,15(r3)
    cpu->clock.c += 8;
    5938:	e0bffd17 	ldw	r2,-12(fp)
    593c:	10800017 	ldw	r2,0(r2)
    5940:	10c00204 	addi	r3,r2,8
    5944:	e0bffd17 	ldw	r2,-12(fp)
    5948:	10c00015 	stw	r3,0(r2)
}
    594c:	0001883a 	nop
    5950:	e037883a 	mov	sp,fp
    5954:	dfc00117 	ldw	ra,4(sp)
    5958:	df000017 	ldw	fp,0(sp)
    595c:	dec00204 	addi	sp,sp,8
    5960:	f800283a 	ret

00005964 <CPr>:

void _CPn(CPU* cpu, byte n);

void CPr(CPU* cpu, reg_name r1) {
    5964:	defffb04 	addi	sp,sp,-20
    5968:	dfc00415 	stw	ra,16(sp)
    596c:	df000315 	stw	fp,12(sp)
    5970:	df000304 	addi	fp,sp,12
    5974:	e13ffe15 	stw	r4,-8(fp)
    5978:	e17fff15 	stw	r5,-4(fp)
    byte n = rr8(cpu, r1);
    597c:	e17fff17 	ldw	r5,-4(fp)
    5980:	e13ffe17 	ldw	r4,-8(fp)
    5984:	00029180 	call	2918 <rr8>
    5988:	e0bffd05 	stb	r2,-12(fp)
    _CPn(cpu, n);
    598c:	e0bffd03 	ldbu	r2,-12(fp)
    5990:	100b883a 	mov	r5,r2
    5994:	e13ffe17 	ldw	r4,-8(fp)
    5998:	0005ab80 	call	5ab8 <_CPn>
    cpu->clock.c += 4;
    599c:	e0bffe17 	ldw	r2,-8(fp)
    59a0:	10800017 	ldw	r2,0(r2)
    59a4:	10c00104 	addi	r3,r2,4
    59a8:	e0bffe17 	ldw	r2,-8(fp)
    59ac:	10c00015 	stw	r3,0(r2)
}
    59b0:	0001883a 	nop
    59b4:	e037883a 	mov	sp,fp
    59b8:	dfc00117 	ldw	ra,4(sp)
    59bc:	df000017 	ldw	fp,0(sp)
    59c0:	dec00204 	addi	sp,sp,8
    59c4:	f800283a 	ret

000059c8 <CPn>:

void CPn(CPU* cpu) {
    59c8:	defffc04 	addi	sp,sp,-16
    59cc:	dfc00315 	stw	ra,12(sp)
    59d0:	df000215 	stw	fp,8(sp)
    59d4:	df000204 	addi	fp,sp,8
    59d8:	e13fff15 	stw	r4,-4(fp)
    byte n = readData(cpu->registers.pc++);
    59dc:	e0bfff17 	ldw	r2,-4(fp)
    59e0:	1080040b 	ldhu	r2,16(r2)
    59e4:	10c00044 	addi	r3,r2,1
    59e8:	1809883a 	mov	r4,r3
    59ec:	e0ffff17 	ldw	r3,-4(fp)
    59f0:	1900040d 	sth	r4,16(r3)
    59f4:	10bfffcc 	andi	r2,r2,65535
    59f8:	1009883a 	mov	r4,r2
    59fc:	000026c0 	call	26c <readData>
    5a00:	e0bffe05 	stb	r2,-8(fp)
    _CPn(cpu, n);
    5a04:	e0bffe03 	ldbu	r2,-8(fp)
    5a08:	100b883a 	mov	r5,r2
    5a0c:	e13fff17 	ldw	r4,-4(fp)
    5a10:	0005ab80 	call	5ab8 <_CPn>
    cpu->clock.c += 8;
    5a14:	e0bfff17 	ldw	r2,-4(fp)
    5a18:	10800017 	ldw	r2,0(r2)
    5a1c:	10c00204 	addi	r3,r2,8
    5a20:	e0bfff17 	ldw	r2,-4(fp)
    5a24:	10c00015 	stw	r3,0(r2)
}
    5a28:	0001883a 	nop
    5a2c:	e037883a 	mov	sp,fp
    5a30:	dfc00117 	ldw	ra,4(sp)
    5a34:	df000017 	ldw	fp,0(sp)
    5a38:	dec00204 	addi	sp,sp,8
    5a3c:	f800283a 	ret

00005a40 <CPrra>:

void CPrra(CPU* cpu, reg_name r1, reg_name r2) {
    5a40:	defffa04 	addi	sp,sp,-24
    5a44:	dfc00515 	stw	ra,20(sp)
    5a48:	df000415 	stw	fp,16(sp)
    5a4c:	df000404 	addi	fp,sp,16
    5a50:	e13ffd15 	stw	r4,-12(fp)
    5a54:	e17ffe15 	stw	r5,-8(fp)
    5a58:	e1bfff15 	stw	r6,-4(fp)
    byte n = readData(readAddr(cpu, r1, r2));
    5a5c:	e1bfff17 	ldw	r6,-4(fp)
    5a60:	e17ffe17 	ldw	r5,-8(fp)
    5a64:	e13ffd17 	ldw	r4,-12(fp)
    5a68:	00032000 	call	3200 <readAddr>
    5a6c:	10bfffcc 	andi	r2,r2,65535
    5a70:	1009883a 	mov	r4,r2
    5a74:	000026c0 	call	26c <readData>
    5a78:	e0bffc05 	stb	r2,-16(fp)
    _CPn(cpu, n);
    5a7c:	e0bffc03 	ldbu	r2,-16(fp)
    5a80:	100b883a 	mov	r5,r2
    5a84:	e13ffd17 	ldw	r4,-12(fp)
    5a88:	0005ab80 	call	5ab8 <_CPn>
    cpu->clock.c += 8;
    5a8c:	e0bffd17 	ldw	r2,-12(fp)
    5a90:	10800017 	ldw	r2,0(r2)
    5a94:	10c00204 	addi	r3,r2,8
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	10c00015 	stw	r3,0(r2)
}
    5aa0:	0001883a 	nop
    5aa4:	e037883a 	mov	sp,fp
    5aa8:	dfc00117 	ldw	ra,4(sp)
    5aac:	df000017 	ldw	fp,0(sp)
    5ab0:	dec00204 	addi	sp,sp,8
    5ab4:	f800283a 	ret

00005ab8 <_CPn>:

void _CPn(CPU* cpu, byte n) {
    5ab8:	defff904 	addi	sp,sp,-28
    5abc:	df000615 	stw	fp,24(sp)
    5ac0:	df000604 	addi	fp,sp,24
    5ac4:	e13ffe15 	stw	r4,-8(fp)
    5ac8:	2805883a 	mov	r2,r5
    5acc:	e0bfff05 	stb	r2,-4(fp)
    int c = (cpu->registers.a < n) ? 1 : 0;
    5ad0:	e0bffe17 	ldw	r2,-8(fp)
    5ad4:	10800203 	ldbu	r2,8(r2)
    5ad8:	10c03fcc 	andi	r3,r2,255
    5adc:	e0bfff03 	ldbu	r2,-4(fp)
    5ae0:	1885803a 	cmpltu	r2,r3,r2
    5ae4:	10803fcc 	andi	r2,r2,255
    5ae8:	e0bffb15 	stw	r2,-20(fp)
    int z = (cpu->registers.a == n) ? 1 : 0;
    5aec:	e0bffe17 	ldw	r2,-8(fp)
    5af0:	10800203 	ldbu	r2,8(r2)
    5af4:	10c03fcc 	andi	r3,r2,255
    5af8:	e0bfff03 	ldbu	r2,-4(fp)
    5afc:	1885003a 	cmpeq	r2,r3,r2
    5b00:	10803fcc 	andi	r2,r2,255
    5b04:	e0bffc15 	stw	r2,-16(fp)
    int h = ((cpu->registers.a & 0xF) < (n & 0xF)) ? 1 : 0;
    5b08:	e0bffe17 	ldw	r2,-8(fp)
    5b0c:	10800203 	ldbu	r2,8(r2)
    5b10:	10803fcc 	andi	r2,r2,255
    5b14:	10c003cc 	andi	r3,r2,15
    5b18:	e0bfff03 	ldbu	r2,-4(fp)
    5b1c:	108003cc 	andi	r2,r2,15
    5b20:	1884803a 	cmplt	r2,r3,r2
    5b24:	10803fcc 	andi	r2,r2,255
    5b28:	e0bffd15 	stw	r2,-12(fp)
    byte f = 0x40;
    5b2c:	00801004 	movi	r2,64
    5b30:	e0bffa05 	stb	r2,-24(fp)

    if (z == 1) f += 0x80;
    5b34:	e0bffc17 	ldw	r2,-16(fp)
    5b38:	10800058 	cmpnei	r2,r2,1
    5b3c:	1000031e 	bne	r2,zero,5b4c <_CPn+0x94>
    5b40:	e0bffa03 	ldbu	r2,-24(fp)
    5b44:	10bfe004 	addi	r2,r2,-128
    5b48:	e0bffa05 	stb	r2,-24(fp)
    if (h == 1) f += 0x20;
    5b4c:	e0bffd17 	ldw	r2,-12(fp)
    5b50:	10800058 	cmpnei	r2,r2,1
    5b54:	1000031e 	bne	r2,zero,5b64 <_CPn+0xac>
    5b58:	e0bffa03 	ldbu	r2,-24(fp)
    5b5c:	10800804 	addi	r2,r2,32
    5b60:	e0bffa05 	stb	r2,-24(fp)
    if (c == 1) f += 0x10;
    5b64:	e0bffb17 	ldw	r2,-20(fp)
    5b68:	10800058 	cmpnei	r2,r2,1
    5b6c:	1000031e 	bne	r2,zero,5b7c <_CPn+0xc4>
    5b70:	e0bffa03 	ldbu	r2,-24(fp)
    5b74:	10800404 	addi	r2,r2,16
    5b78:	e0bffa05 	stb	r2,-24(fp)

    cpu->registers.f = f;
    5b7c:	e0bffe17 	ldw	r2,-8(fp)
    5b80:	e0fffa03 	ldbu	r3,-24(fp)
    5b84:	10c003c5 	stb	r3,15(r2)
}
    5b88:	0001883a 	nop
    5b8c:	e037883a 	mov	sp,fp
    5b90:	df000017 	ldw	fp,0(sp)
    5b94:	dec00104 	addi	sp,sp,4
    5b98:	f800283a 	ret

00005b9c <RRCr>:

void RRCr(CPU* cpu, reg_name r1) {
    5b9c:	defffa04 	addi	sp,sp,-24
    5ba0:	dfc00515 	stw	ra,20(sp)
    5ba4:	df000415 	stw	fp,16(sp)
    5ba8:	dc000315 	stw	r16,12(sp)
    5bac:	df000404 	addi	fp,sp,16
    5bb0:	e13ffd15 	stw	r4,-12(fp)
    5bb4:	e17ffe15 	stw	r5,-8(fp)
    cpu->registers.f = 0;
    5bb8:	e0bffd17 	ldw	r2,-12(fp)
    5bbc:	100003c5 	stb	zero,15(r2)
    byte out = rr8(cpu, r1) & 0x01;
    5bc0:	e17ffe17 	ldw	r5,-8(fp)
    5bc4:	e13ffd17 	ldw	r4,-12(fp)
    5bc8:	00029180 	call	2918 <rr8>
    5bcc:	1080004c 	andi	r2,r2,1
    5bd0:	e0bffc05 	stb	r2,-16(fp)
    if (out == 0) cpu->registers.f |= 0x10;
    5bd4:	e0bffc03 	ldbu	r2,-16(fp)
    5bd8:	1000061e 	bne	r2,zero,5bf4 <RRCr+0x58>
    5bdc:	e0bffd17 	ldw	r2,-12(fp)
    5be0:	108003c3 	ldbu	r2,15(r2)
    5be4:	10800414 	ori	r2,r2,16
    5be8:	1007883a 	mov	r3,r2
    5bec:	e0bffd17 	ldw	r2,-12(fp)
    5bf0:	10c003c5 	stb	r3,15(r2)
    wr8(cpu, r1, ((rr8(cpu, r1) >> 1) | (out * 0x80)));
    5bf4:	e17ffe17 	ldw	r5,-8(fp)
    5bf8:	e13ffd17 	ldw	r4,-12(fp)
    5bfc:	00029180 	call	2918 <rr8>
    5c00:	10803fcc 	andi	r2,r2,255
    5c04:	1004d07a 	srli	r2,r2,1
    5c08:	1021883a 	mov	r16,r2
    5c0c:	e0bffc03 	ldbu	r2,-16(fp)
    5c10:	017fe004 	movi	r5,-128
    5c14:	1009883a 	mov	r4,r2
    5c18:	000cefc0 	call	cefc <__mulsi3>
    5c1c:	8084b03a 	or	r2,r16,r2
    5c20:	10803fcc 	andi	r2,r2,255
    5c24:	100d883a 	mov	r6,r2
    5c28:	e17ffe17 	ldw	r5,-8(fp)
    5c2c:	e13ffd17 	ldw	r4,-12(fp)
    5c30:	0002b7c0 	call	2b7c <wr8>
    if (rr8(cpu, r1) == 0) cpu->registers.f |= 0x80;
    5c34:	e17ffe17 	ldw	r5,-8(fp)
    5c38:	e13ffd17 	ldw	r4,-12(fp)
    5c3c:	00029180 	call	2918 <rr8>
    5c40:	10803fcc 	andi	r2,r2,255
    5c44:	1000071e 	bne	r2,zero,5c64 <RRCr+0xc8>
    5c48:	e0bffd17 	ldw	r2,-12(fp)
    5c4c:	10c003c3 	ldbu	r3,15(r2)
    5c50:	00bfe004 	movi	r2,-128
    5c54:	1884b03a 	or	r2,r3,r2
    5c58:	1007883a 	mov	r3,r2
    5c5c:	e0bffd17 	ldw	r2,-12(fp)
    5c60:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    5c64:	e0bffd17 	ldw	r2,-12(fp)
    5c68:	10800017 	ldw	r2,0(r2)
    5c6c:	10c00104 	addi	r3,r2,4
    5c70:	e0bffd17 	ldw	r2,-12(fp)
    5c74:	10c00015 	stw	r3,0(r2)
}
    5c78:	0001883a 	nop
    5c7c:	e6ffff04 	addi	sp,fp,-4
    5c80:	dfc00217 	ldw	ra,8(sp)
    5c84:	df000117 	ldw	fp,4(sp)
    5c88:	dc000017 	ldw	r16,0(sp)
    5c8c:	dec00304 	addi	sp,sp,12
    5c90:	f800283a 	ret

00005c94 <RRCrra>:

void RRCrra(CPU* cpu, reg_name r1, reg_name r2) {
    5c94:	defff804 	addi	sp,sp,-32
    5c98:	dfc00715 	stw	ra,28(sp)
    5c9c:	df000615 	stw	fp,24(sp)
    5ca0:	dc400515 	stw	r17,20(sp)
    5ca4:	dc000415 	stw	r16,16(sp)
    5ca8:	df000604 	addi	fp,sp,24
    5cac:	e13ffb15 	stw	r4,-20(fp)
    5cb0:	e17ffc15 	stw	r5,-16(fp)
    5cb4:	e1bffd15 	stw	r6,-12(fp)
    word addr = readAddr(cpu, r1, r2);
    5cb8:	e1bffd17 	ldw	r6,-12(fp)
    5cbc:	e17ffc17 	ldw	r5,-16(fp)
    5cc0:	e13ffb17 	ldw	r4,-20(fp)
    5cc4:	00032000 	call	3200 <readAddr>
    5cc8:	e0bffa0d 	sth	r2,-24(fp)
    cpu->registers.f = 0;
    5ccc:	e0bffb17 	ldw	r2,-20(fp)
    5cd0:	100003c5 	stb	zero,15(r2)
    byte out = readData(addr) & 0x01;
    5cd4:	e0bffa0b 	ldhu	r2,-24(fp)
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	000026c0 	call	26c <readData>
    5ce0:	1080004c 	andi	r2,r2,1
    5ce4:	e0bffa85 	stb	r2,-22(fp)
    if(out == 1) cpu->registers.f |= 0x10;
    5ce8:	e0bffa83 	ldbu	r2,-22(fp)
    5cec:	10800058 	cmpnei	r2,r2,1
    5cf0:	1000061e 	bne	r2,zero,5d0c <RRCrra+0x78>
    5cf4:	e0bffb17 	ldw	r2,-20(fp)
    5cf8:	108003c3 	ldbu	r2,15(r2)
    5cfc:	10800414 	ori	r2,r2,16
    5d00:	1007883a 	mov	r3,r2
    5d04:	e0bffb17 	ldw	r2,-20(fp)
    5d08:	10c003c5 	stb	r3,15(r2)
    writeData(addr, (readData(addr) >> 1) | (out * 0x80));
    5d0c:	e43ffa0b 	ldhu	r16,-24(fp)
    5d10:	e0bffa0b 	ldhu	r2,-24(fp)
    5d14:	1009883a 	mov	r4,r2
    5d18:	000026c0 	call	26c <readData>
    5d1c:	10803fcc 	andi	r2,r2,255
    5d20:	1004d07a 	srli	r2,r2,1
    5d24:	1023883a 	mov	r17,r2
    5d28:	e0bffa83 	ldbu	r2,-22(fp)
    5d2c:	017fe004 	movi	r5,-128
    5d30:	1009883a 	mov	r4,r2
    5d34:	000cefc0 	call	cefc <__mulsi3>
    5d38:	8884b03a 	or	r2,r17,r2
    5d3c:	10803fcc 	andi	r2,r2,255
    5d40:	100b883a 	mov	r5,r2
    5d44:	8009883a 	mov	r4,r16
    5d48:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    5d4c:	e0bffa0b 	ldhu	r2,-24(fp)
    5d50:	1009883a 	mov	r4,r2
    5d54:	000026c0 	call	26c <readData>
    5d58:	10803fcc 	andi	r2,r2,255
    5d5c:	1000071e 	bne	r2,zero,5d7c <RRCrra+0xe8>
    5d60:	e0bffb17 	ldw	r2,-20(fp)
    5d64:	10c003c3 	ldbu	r3,15(r2)
    5d68:	00bfe004 	movi	r2,-128
    5d6c:	1884b03a 	or	r2,r3,r2
    5d70:	1007883a 	mov	r3,r2
    5d74:	e0bffb17 	ldw	r2,-20(fp)
    5d78:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    5d7c:	e0bffb17 	ldw	r2,-20(fp)
    5d80:	10800017 	ldw	r2,0(r2)
    5d84:	10c00304 	addi	r3,r2,12
    5d88:	e0bffb17 	ldw	r2,-20(fp)
    5d8c:	10c00015 	stw	r3,0(r2)
}
    5d90:	0001883a 	nop
    5d94:	e6fffe04 	addi	sp,fp,-8
    5d98:	dfc00317 	ldw	ra,12(sp)
    5d9c:	df000217 	ldw	fp,8(sp)
    5da0:	dc400117 	ldw	r17,4(sp)
    5da4:	dc000017 	ldw	r16,0(sp)
    5da8:	dec00404 	addi	sp,sp,16
    5dac:	f800283a 	ret

00005db0 <RLCr>:

void RLCr(CPU* cpu, reg_name r1) {
    5db0:	defffb04 	addi	sp,sp,-20
    5db4:	dfc00415 	stw	ra,16(sp)
    5db8:	df000315 	stw	fp,12(sp)
    5dbc:	df000304 	addi	fp,sp,12
    5dc0:	e13ffe15 	stw	r4,-8(fp)
    5dc4:	e17fff15 	stw	r5,-4(fp)
    cpu->registers.f = 0;
    5dc8:	e0bffe17 	ldw	r2,-8(fp)
    5dcc:	100003c5 	stb	zero,15(r2)
    byte out = (rr8(cpu, r1) & 0x80) ? 1 : 0;
    5dd0:	e17fff17 	ldw	r5,-4(fp)
    5dd4:	e13ffe17 	ldw	r4,-8(fp)
    5dd8:	00029180 	call	2918 <rr8>
    5ddc:	10803fcc 	andi	r2,r2,255
    5de0:	1004d1fa 	srli	r2,r2,7
    5de4:	e0bffd05 	stb	r2,-12(fp)
    if(out == 1) cpu->registers.f |= 0x10;
    5de8:	e0bffd03 	ldbu	r2,-12(fp)
    5dec:	10800058 	cmpnei	r2,r2,1
    5df0:	1000061e 	bne	r2,zero,5e0c <RLCr+0x5c>
    5df4:	e0bffe17 	ldw	r2,-8(fp)
    5df8:	108003c3 	ldbu	r2,15(r2)
    5dfc:	10800414 	ori	r2,r2,16
    5e00:	1007883a 	mov	r3,r2
    5e04:	e0bffe17 	ldw	r2,-8(fp)
    5e08:	10c003c5 	stb	r3,15(r2)
    wr8(cpu, r1, (((0x0000 + rr8(cpu, r1)) << 1) + out) & 0xFF);
    5e0c:	e17fff17 	ldw	r5,-4(fp)
    5e10:	e13ffe17 	ldw	r4,-8(fp)
    5e14:	00029180 	call	2918 <rr8>
    5e18:	1085883a 	add	r2,r2,r2
    5e1c:	1007883a 	mov	r3,r2
    5e20:	e0bffd03 	ldbu	r2,-12(fp)
    5e24:	1885883a 	add	r2,r3,r2
    5e28:	10803fcc 	andi	r2,r2,255
    5e2c:	100d883a 	mov	r6,r2
    5e30:	e17fff17 	ldw	r5,-4(fp)
    5e34:	e13ffe17 	ldw	r4,-8(fp)
    5e38:	0002b7c0 	call	2b7c <wr8>
    if (rr8(cpu, r1) == 0) cpu->registers.a |= 0x80;
    5e3c:	e17fff17 	ldw	r5,-4(fp)
    5e40:	e13ffe17 	ldw	r4,-8(fp)
    5e44:	00029180 	call	2918 <rr8>
    5e48:	10803fcc 	andi	r2,r2,255
    5e4c:	1000071e 	bne	r2,zero,5e6c <RLCr+0xbc>
    5e50:	e0bffe17 	ldw	r2,-8(fp)
    5e54:	10c00203 	ldbu	r3,8(r2)
    5e58:	00bfe004 	movi	r2,-128
    5e5c:	1884b03a 	or	r2,r3,r2
    5e60:	1007883a 	mov	r3,r2
    5e64:	e0bffe17 	ldw	r2,-8(fp)
    5e68:	10c00205 	stb	r3,8(r2)
    cpu->clock.c += 4;
    5e6c:	e0bffe17 	ldw	r2,-8(fp)
    5e70:	10800017 	ldw	r2,0(r2)
    5e74:	10c00104 	addi	r3,r2,4
    5e78:	e0bffe17 	ldw	r2,-8(fp)
    5e7c:	10c00015 	stw	r3,0(r2)
}
    5e80:	0001883a 	nop
    5e84:	e037883a 	mov	sp,fp
    5e88:	dfc00117 	ldw	ra,4(sp)
    5e8c:	df000017 	ldw	fp,0(sp)
    5e90:	dec00204 	addi	sp,sp,8
    5e94:	f800283a 	ret

00005e98 <RLCrra>:

void RLCrra(CPU* cpu, reg_name r1, reg_name r2) {
    5e98:	defff904 	addi	sp,sp,-28
    5e9c:	dfc00615 	stw	ra,24(sp)
    5ea0:	df000515 	stw	fp,20(sp)
    5ea4:	dc000415 	stw	r16,16(sp)
    5ea8:	df000504 	addi	fp,sp,20
    5eac:	e13ffc15 	stw	r4,-16(fp)
    5eb0:	e17ffd15 	stw	r5,-12(fp)
    5eb4:	e1bffe15 	stw	r6,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    5eb8:	e1bffe17 	ldw	r6,-8(fp)
    5ebc:	e17ffd17 	ldw	r5,-12(fp)
    5ec0:	e13ffc17 	ldw	r4,-16(fp)
    5ec4:	00032000 	call	3200 <readAddr>
    5ec8:	e0bffb0d 	sth	r2,-20(fp)
    cpu->registers.f = 0;
    5ecc:	e0bffc17 	ldw	r2,-16(fp)
    5ed0:	100003c5 	stb	zero,15(r2)
    byte out = (readData(addr) & 0x80) ? 1 : 0;
    5ed4:	e0bffb0b 	ldhu	r2,-20(fp)
    5ed8:	1009883a 	mov	r4,r2
    5edc:	000026c0 	call	26c <readData>
    5ee0:	10803fcc 	andi	r2,r2,255
    5ee4:	1004d1fa 	srli	r2,r2,7
    5ee8:	e0bffb85 	stb	r2,-18(fp)
    if(out == 1) cpu->registers.f |= 0x10;
    5eec:	e0bffb83 	ldbu	r2,-18(fp)
    5ef0:	10800058 	cmpnei	r2,r2,1
    5ef4:	1000061e 	bne	r2,zero,5f10 <RLCrra+0x78>
    5ef8:	e0bffc17 	ldw	r2,-16(fp)
    5efc:	108003c3 	ldbu	r2,15(r2)
    5f00:	10800414 	ori	r2,r2,16
    5f04:	1007883a 	mov	r3,r2
    5f08:	e0bffc17 	ldw	r2,-16(fp)
    5f0c:	10c003c5 	stb	r3,15(r2)
    writeData(addr, (((0x0000 + readData(addr)) << 1) + out) & 0xFF);
    5f10:	e43ffb0b 	ldhu	r16,-20(fp)
    5f14:	e0bffb0b 	ldhu	r2,-20(fp)
    5f18:	1009883a 	mov	r4,r2
    5f1c:	000026c0 	call	26c <readData>
    5f20:	1085883a 	add	r2,r2,r2
    5f24:	1007883a 	mov	r3,r2
    5f28:	e0bffb83 	ldbu	r2,-18(fp)
    5f2c:	1885883a 	add	r2,r3,r2
    5f30:	10803fcc 	andi	r2,r2,255
    5f34:	100b883a 	mov	r5,r2
    5f38:	8009883a 	mov	r4,r16
    5f3c:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    5f40:	e0bffb0b 	ldhu	r2,-20(fp)
    5f44:	1009883a 	mov	r4,r2
    5f48:	000026c0 	call	26c <readData>
    5f4c:	10803fcc 	andi	r2,r2,255
    5f50:	1000071e 	bne	r2,zero,5f70 <RLCrra+0xd8>
    5f54:	e0bffc17 	ldw	r2,-16(fp)
    5f58:	10c003c3 	ldbu	r3,15(r2)
    5f5c:	00bfe004 	movi	r2,-128
    5f60:	1884b03a 	or	r2,r3,r2
    5f64:	1007883a 	mov	r3,r2
    5f68:	e0bffc17 	ldw	r2,-16(fp)
    5f6c:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    5f70:	e0bffc17 	ldw	r2,-16(fp)
    5f74:	10800017 	ldw	r2,0(r2)
    5f78:	10c00304 	addi	r3,r2,12
    5f7c:	e0bffc17 	ldw	r2,-16(fp)
    5f80:	10c00015 	stw	r3,0(r2)
}
    5f84:	0001883a 	nop
    5f88:	e6ffff04 	addi	sp,fp,-4
    5f8c:	dfc00217 	ldw	ra,8(sp)
    5f90:	df000117 	ldw	fp,4(sp)
    5f94:	dc000017 	ldw	r16,0(sp)
    5f98:	dec00304 	addi	sp,sp,12
    5f9c:	f800283a 	ret

00005fa0 <RLr>:

void RLr(CPU* cpu, reg_name r1) {
    5fa0:	defffb04 	addi	sp,sp,-20
    5fa4:	dfc00415 	stw	ra,16(sp)
    5fa8:	df000315 	stw	fp,12(sp)
    5fac:	df000304 	addi	fp,sp,12
    5fb0:	e13ffe15 	stw	r4,-8(fp)
    5fb4:	e17fff15 	stw	r5,-4(fp)
	byte c = (cpu->registers.f & 0x10) ? 1 : 0;
    5fb8:	e0bffe17 	ldw	r2,-8(fp)
    5fbc:	108003c3 	ldbu	r2,15(r2)
    5fc0:	10803fcc 	andi	r2,r2,255
    5fc4:	1080040c 	andi	r2,r2,16
    5fc8:	1004c03a 	cmpne	r2,r2,zero
    5fcc:	e0bffd05 	stb	r2,-12(fp)
	cpu->registers.f = 0;
    5fd0:	e0bffe17 	ldw	r2,-8(fp)
    5fd4:	100003c5 	stb	zero,15(r2)
	byte out = rr8(cpu, r1) & 0x80;
    5fd8:	e17fff17 	ldw	r5,-4(fp)
    5fdc:	e13ffe17 	ldw	r4,-8(fp)
    5fe0:	00029180 	call	2918 <rr8>
    5fe4:	1007883a 	mov	r3,r2
    5fe8:	00bfe004 	movi	r2,-128
    5fec:	1884703a 	and	r2,r3,r2
    5ff0:	e0bffd45 	stb	r2,-11(fp)
	if (out != 0) {
    5ff4:	e0bffd43 	ldbu	r2,-11(fp)
    5ff8:	10000726 	beq	r2,zero,6018 <RLr+0x78>
		cpu->registers.f |= 0x10;
    5ffc:	e0bffe17 	ldw	r2,-8(fp)
    6000:	108003c3 	ldbu	r2,15(r2)
    6004:	10800414 	ori	r2,r2,16
    6008:	1007883a 	mov	r3,r2
    600c:	e0bffe17 	ldw	r2,-8(fp)
    6010:	10c003c5 	stb	r3,15(r2)
    6014:	00000706 	br	6034 <RLr+0x94>
	}
	else {
		cpu->registers.f &= 0xEF;
    6018:	e0bffe17 	ldw	r2,-8(fp)
    601c:	10c003c3 	ldbu	r3,15(r2)
    6020:	00bffbc4 	movi	r2,-17
    6024:	1884703a 	and	r2,r3,r2
    6028:	1007883a 	mov	r3,r2
    602c:	e0bffe17 	ldw	r2,-8(fp)
    6030:	10c003c5 	stb	r3,15(r2)
	}
	wr8(cpu, r1, (((0x0000 + rr8(cpu, r1)) << 1) + c) & 0xFF);
    6034:	e17fff17 	ldw	r5,-4(fp)
    6038:	e13ffe17 	ldw	r4,-8(fp)
    603c:	00029180 	call	2918 <rr8>
    6040:	1085883a 	add	r2,r2,r2
    6044:	1007883a 	mov	r3,r2
    6048:	e0bffd03 	ldbu	r2,-12(fp)
    604c:	1885883a 	add	r2,r3,r2
    6050:	10803fcc 	andi	r2,r2,255
    6054:	100d883a 	mov	r6,r2
    6058:	e17fff17 	ldw	r5,-4(fp)
    605c:	e13ffe17 	ldw	r4,-8(fp)
    6060:	0002b7c0 	call	2b7c <wr8>
	if (rr8(cpu, r1) == 0) cpu->registers.f |= 0x80;
    6064:	e17fff17 	ldw	r5,-4(fp)
    6068:	e13ffe17 	ldw	r4,-8(fp)
    606c:	00029180 	call	2918 <rr8>
    6070:	10803fcc 	andi	r2,r2,255
    6074:	1000071e 	bne	r2,zero,6094 <RLr+0xf4>
    6078:	e0bffe17 	ldw	r2,-8(fp)
    607c:	10c003c3 	ldbu	r3,15(r2)
    6080:	00bfe004 	movi	r2,-128
    6084:	1884b03a 	or	r2,r3,r2
    6088:	1007883a 	mov	r3,r2
    608c:	e0bffe17 	ldw	r2,-8(fp)
    6090:	10c003c5 	stb	r3,15(r2)
	cpu->clock.c += 4;
    6094:	e0bffe17 	ldw	r2,-8(fp)
    6098:	10800017 	ldw	r2,0(r2)
    609c:	10c00104 	addi	r3,r2,4
    60a0:	e0bffe17 	ldw	r2,-8(fp)
    60a4:	10c00015 	stw	r3,0(r2)
}
    60a8:	0001883a 	nop
    60ac:	e037883a 	mov	sp,fp
    60b0:	dfc00117 	ldw	ra,4(sp)
    60b4:	df000017 	ldw	fp,0(sp)
    60b8:	dec00204 	addi	sp,sp,8
    60bc:	f800283a 	ret

000060c0 <RLrra>:

void RLrra(CPU* cpu, reg_name r1, reg_name r2) {
    60c0:	defff904 	addi	sp,sp,-28
    60c4:	dfc00615 	stw	ra,24(sp)
    60c8:	df000515 	stw	fp,20(sp)
    60cc:	dc000415 	stw	r16,16(sp)
    60d0:	df000504 	addi	fp,sp,20
    60d4:	e13ffc15 	stw	r4,-16(fp)
    60d8:	e17ffd15 	stw	r5,-12(fp)
    60dc:	e1bffe15 	stw	r6,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    60e0:	e1bffe17 	ldw	r6,-8(fp)
    60e4:	e17ffd17 	ldw	r5,-12(fp)
    60e8:	e13ffc17 	ldw	r4,-16(fp)
    60ec:	00032000 	call	3200 <readAddr>
    60f0:	e0bffb0d 	sth	r2,-20(fp)
    byte c = (cpu->registers.f & 0x10) ? 1 : 0;
    60f4:	e0bffc17 	ldw	r2,-16(fp)
    60f8:	108003c3 	ldbu	r2,15(r2)
    60fc:	10803fcc 	andi	r2,r2,255
    6100:	1080040c 	andi	r2,r2,16
    6104:	1004c03a 	cmpne	r2,r2,zero
    6108:	e0bffb85 	stb	r2,-18(fp)
    cpu->registers.f = 0;
    610c:	e0bffc17 	ldw	r2,-16(fp)
    6110:	100003c5 	stb	zero,15(r2)
    byte out = readData(addr) & 0x80;
    6114:	e0bffb0b 	ldhu	r2,-20(fp)
    6118:	1009883a 	mov	r4,r2
    611c:	000026c0 	call	26c <readData>
    6120:	1007883a 	mov	r3,r2
    6124:	00bfe004 	movi	r2,-128
    6128:	1884703a 	and	r2,r3,r2
    612c:	e0bffbc5 	stb	r2,-17(fp)
    if (out != 0) {
    6130:	e0bffbc3 	ldbu	r2,-17(fp)
    6134:	10000726 	beq	r2,zero,6154 <RLrra+0x94>
    	cpu->registers.f |= 0x10;
    6138:	e0bffc17 	ldw	r2,-16(fp)
    613c:	108003c3 	ldbu	r2,15(r2)
    6140:	10800414 	ori	r2,r2,16
    6144:	1007883a 	mov	r3,r2
    6148:	e0bffc17 	ldw	r2,-16(fp)
    614c:	10c003c5 	stb	r3,15(r2)
    6150:	00000706 	br	6170 <RLrra+0xb0>
	}
	else {
		cpu->registers.f &= 0xEF;
    6154:	e0bffc17 	ldw	r2,-16(fp)
    6158:	10c003c3 	ldbu	r3,15(r2)
    615c:	00bffbc4 	movi	r2,-17
    6160:	1884703a 	and	r2,r3,r2
    6164:	1007883a 	mov	r3,r2
    6168:	e0bffc17 	ldw	r2,-16(fp)
    616c:	10c003c5 	stb	r3,15(r2)
	}
    writeData(addr, (((0x0000 + readData(addr)) << 1) + c) & 0xFF);
    6170:	e43ffb0b 	ldhu	r16,-20(fp)
    6174:	e0bffb0b 	ldhu	r2,-20(fp)
    6178:	1009883a 	mov	r4,r2
    617c:	000026c0 	call	26c <readData>
    6180:	1085883a 	add	r2,r2,r2
    6184:	1007883a 	mov	r3,r2
    6188:	e0bffb83 	ldbu	r2,-18(fp)
    618c:	1885883a 	add	r2,r3,r2
    6190:	10803fcc 	andi	r2,r2,255
    6194:	100b883a 	mov	r5,r2
    6198:	8009883a 	mov	r4,r16
    619c:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    61a0:	e0bffb0b 	ldhu	r2,-20(fp)
    61a4:	1009883a 	mov	r4,r2
    61a8:	000026c0 	call	26c <readData>
    61ac:	10803fcc 	andi	r2,r2,255
    61b0:	1000071e 	bne	r2,zero,61d0 <RLrra+0x110>
    61b4:	e0bffc17 	ldw	r2,-16(fp)
    61b8:	10c003c3 	ldbu	r3,15(r2)
    61bc:	00bfe004 	movi	r2,-128
    61c0:	1884b03a 	or	r2,r3,r2
    61c4:	1007883a 	mov	r3,r2
    61c8:	e0bffc17 	ldw	r2,-16(fp)
    61cc:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    61d0:	e0bffc17 	ldw	r2,-16(fp)
    61d4:	10800017 	ldw	r2,0(r2)
    61d8:	10c00304 	addi	r3,r2,12
    61dc:	e0bffc17 	ldw	r2,-16(fp)
    61e0:	10c00015 	stw	r3,0(r2)
}
    61e4:	0001883a 	nop
    61e8:	e6ffff04 	addi	sp,fp,-4
    61ec:	dfc00217 	ldw	ra,8(sp)
    61f0:	df000117 	ldw	fp,4(sp)
    61f4:	dc000017 	ldw	r16,0(sp)
    61f8:	dec00304 	addi	sp,sp,12
    61fc:	f800283a 	ret

00006200 <RRr>:

void RRr(CPU* cpu, reg_name r1) {
    6200:	defffa04 	addi	sp,sp,-24
    6204:	dfc00515 	stw	ra,20(sp)
    6208:	df000415 	stw	fp,16(sp)
    620c:	dc000315 	stw	r16,12(sp)
    6210:	df000404 	addi	fp,sp,16
    6214:	e13ffd15 	stw	r4,-12(fp)
    6218:	e17ffe15 	stw	r5,-8(fp)
    byte c = (cpu->registers.f & 0x10) ? 1 : 0;
    621c:	e0bffd17 	ldw	r2,-12(fp)
    6220:	108003c3 	ldbu	r2,15(r2)
    6224:	10803fcc 	andi	r2,r2,255
    6228:	1080040c 	andi	r2,r2,16
    622c:	1004c03a 	cmpne	r2,r2,zero
    6230:	e0bffc05 	stb	r2,-16(fp)
    cpu->registers.f = 0;
    6234:	e0bffd17 	ldw	r2,-12(fp)
    6238:	100003c5 	stb	zero,15(r2)
    byte out = rr8(cpu, r1) & 0x01;
    623c:	e17ffe17 	ldw	r5,-8(fp)
    6240:	e13ffd17 	ldw	r4,-12(fp)
    6244:	00029180 	call	2918 <rr8>
    6248:	1080004c 	andi	r2,r2,1
    624c:	e0bffc45 	stb	r2,-15(fp)
    if (out != 0) {
    6250:	e0bffc43 	ldbu	r2,-15(fp)
    6254:	10000726 	beq	r2,zero,6274 <RRr+0x74>
		cpu->registers.f |= 0x10;
    6258:	e0bffd17 	ldw	r2,-12(fp)
    625c:	108003c3 	ldbu	r2,15(r2)
    6260:	10800414 	ori	r2,r2,16
    6264:	1007883a 	mov	r3,r2
    6268:	e0bffd17 	ldw	r2,-12(fp)
    626c:	10c003c5 	stb	r3,15(r2)
    6270:	00000706 	br	6290 <RRr+0x90>
	}
	else {
		cpu->registers.f &= 0xEF;
    6274:	e0bffd17 	ldw	r2,-12(fp)
    6278:	10c003c3 	ldbu	r3,15(r2)
    627c:	00bffbc4 	movi	r2,-17
    6280:	1884703a 	and	r2,r3,r2
    6284:	1007883a 	mov	r3,r2
    6288:	e0bffd17 	ldw	r2,-12(fp)
    628c:	10c003c5 	stb	r3,15(r2)
	}
    wr8(cpu, r1, (rr8(cpu, r1) >> 1) | (c * 0x80));
    6290:	e17ffe17 	ldw	r5,-8(fp)
    6294:	e13ffd17 	ldw	r4,-12(fp)
    6298:	00029180 	call	2918 <rr8>
    629c:	10803fcc 	andi	r2,r2,255
    62a0:	1004d07a 	srli	r2,r2,1
    62a4:	1021883a 	mov	r16,r2
    62a8:	e0bffc03 	ldbu	r2,-16(fp)
    62ac:	017fe004 	movi	r5,-128
    62b0:	1009883a 	mov	r4,r2
    62b4:	000cefc0 	call	cefc <__mulsi3>
    62b8:	8084b03a 	or	r2,r16,r2
    62bc:	10803fcc 	andi	r2,r2,255
    62c0:	100d883a 	mov	r6,r2
    62c4:	e17ffe17 	ldw	r5,-8(fp)
    62c8:	e13ffd17 	ldw	r4,-12(fp)
    62cc:	0002b7c0 	call	2b7c <wr8>
    cpu->clock.c += 4;
    62d0:	e0bffd17 	ldw	r2,-12(fp)
    62d4:	10800017 	ldw	r2,0(r2)
    62d8:	10c00104 	addi	r3,r2,4
    62dc:	e0bffd17 	ldw	r2,-12(fp)
    62e0:	10c00015 	stw	r3,0(r2)
}
    62e4:	0001883a 	nop
    62e8:	e6ffff04 	addi	sp,fp,-4
    62ec:	dfc00217 	ldw	ra,8(sp)
    62f0:	df000117 	ldw	fp,4(sp)
    62f4:	dc000017 	ldw	r16,0(sp)
    62f8:	dec00304 	addi	sp,sp,12
    62fc:	f800283a 	ret

00006300 <RRrra>:

void RRrra(CPU* cpu, reg_name r1, reg_name r2) {
    6300:	defff804 	addi	sp,sp,-32
    6304:	dfc00715 	stw	ra,28(sp)
    6308:	df000615 	stw	fp,24(sp)
    630c:	dc400515 	stw	r17,20(sp)
    6310:	dc000415 	stw	r16,16(sp)
    6314:	df000604 	addi	fp,sp,24
    6318:	e13ffb15 	stw	r4,-20(fp)
    631c:	e17ffc15 	stw	r5,-16(fp)
    6320:	e1bffd15 	stw	r6,-12(fp)
    word addr = readAddr(cpu, r1, r2);
    6324:	e1bffd17 	ldw	r6,-12(fp)
    6328:	e17ffc17 	ldw	r5,-16(fp)
    632c:	e13ffb17 	ldw	r4,-20(fp)
    6330:	00032000 	call	3200 <readAddr>
    6334:	e0bffa0d 	sth	r2,-24(fp)
    byte c = (cpu->registers.f & 0x10) ? 1 : 0;
    6338:	e0bffb17 	ldw	r2,-20(fp)
    633c:	108003c3 	ldbu	r2,15(r2)
    6340:	10803fcc 	andi	r2,r2,255
    6344:	1080040c 	andi	r2,r2,16
    6348:	1004c03a 	cmpne	r2,r2,zero
    634c:	e0bffa85 	stb	r2,-22(fp)
    cpu->registers.f = 0;
    6350:	e0bffb17 	ldw	r2,-20(fp)
    6354:	100003c5 	stb	zero,15(r2)
    byte out = readData(addr) & 0x01;
    6358:	e0bffa0b 	ldhu	r2,-24(fp)
    635c:	1009883a 	mov	r4,r2
    6360:	000026c0 	call	26c <readData>
    6364:	1080004c 	andi	r2,r2,1
    6368:	e0bffac5 	stb	r2,-21(fp)
    if (out != 0) {
    636c:	e0bffac3 	ldbu	r2,-21(fp)
    6370:	10000726 	beq	r2,zero,6390 <RRrra+0x90>
		cpu->registers.f |= 0x10;
    6374:	e0bffb17 	ldw	r2,-20(fp)
    6378:	108003c3 	ldbu	r2,15(r2)
    637c:	10800414 	ori	r2,r2,16
    6380:	1007883a 	mov	r3,r2
    6384:	e0bffb17 	ldw	r2,-20(fp)
    6388:	10c003c5 	stb	r3,15(r2)
    638c:	00000706 	br	63ac <RRrra+0xac>
	}
	else {
		cpu->registers.f &= 0xEF;
    6390:	e0bffb17 	ldw	r2,-20(fp)
    6394:	10c003c3 	ldbu	r3,15(r2)
    6398:	00bffbc4 	movi	r2,-17
    639c:	1884703a 	and	r2,r3,r2
    63a0:	1007883a 	mov	r3,r2
    63a4:	e0bffb17 	ldw	r2,-20(fp)
    63a8:	10c003c5 	stb	r3,15(r2)
	}
    writeData(addr, (readData(addr) >> 1) | (c * 0x80));
    63ac:	e43ffa0b 	ldhu	r16,-24(fp)
    63b0:	e0bffa0b 	ldhu	r2,-24(fp)
    63b4:	1009883a 	mov	r4,r2
    63b8:	000026c0 	call	26c <readData>
    63bc:	10803fcc 	andi	r2,r2,255
    63c0:	1004d07a 	srli	r2,r2,1
    63c4:	1023883a 	mov	r17,r2
    63c8:	e0bffa83 	ldbu	r2,-22(fp)
    63cc:	017fe004 	movi	r5,-128
    63d0:	1009883a 	mov	r4,r2
    63d4:	000cefc0 	call	cefc <__mulsi3>
    63d8:	8884b03a 	or	r2,r17,r2
    63dc:	10803fcc 	andi	r2,r2,255
    63e0:	100b883a 	mov	r5,r2
    63e4:	8009883a 	mov	r4,r16
    63e8:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    63ec:	e0bffa0b 	ldhu	r2,-24(fp)
    63f0:	1009883a 	mov	r4,r2
    63f4:	000026c0 	call	26c <readData>
    63f8:	10803fcc 	andi	r2,r2,255
    63fc:	1000071e 	bne	r2,zero,641c <RRrra+0x11c>
    6400:	e0bffb17 	ldw	r2,-20(fp)
    6404:	10c003c3 	ldbu	r3,15(r2)
    6408:	00bfe004 	movi	r2,-128
    640c:	1884b03a 	or	r2,r3,r2
    6410:	1007883a 	mov	r3,r2
    6414:	e0bffb17 	ldw	r2,-20(fp)
    6418:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    641c:	e0bffb17 	ldw	r2,-20(fp)
    6420:	10800017 	ldw	r2,0(r2)
    6424:	10c00304 	addi	r3,r2,12
    6428:	e0bffb17 	ldw	r2,-20(fp)
    642c:	10c00015 	stw	r3,0(r2)
}
    6430:	0001883a 	nop
    6434:	e6fffe04 	addi	sp,fp,-8
    6438:	dfc00317 	ldw	ra,12(sp)
    643c:	df000217 	ldw	fp,8(sp)
    6440:	dc400117 	ldw	r17,4(sp)
    6444:	dc000017 	ldw	r16,0(sp)
    6448:	dec00404 	addi	sp,sp,16
    644c:	f800283a 	ret

00006450 <SRAr>:

void SRAr(CPU* cpu, reg_name r1) {
    6450:	defffb04 	addi	sp,sp,-20
    6454:	dfc00415 	stw	ra,16(sp)
    6458:	df000315 	stw	fp,12(sp)
    645c:	df000304 	addi	fp,sp,12
    6460:	e13ffe15 	stw	r4,-8(fp)
    6464:	e17fff15 	stw	r5,-4(fp)
    cpu->registers.f = 0;
    6468:	e0bffe17 	ldw	r2,-8(fp)
    646c:	100003c5 	stb	zero,15(r2)
    if ((rr8(cpu, r1) & 0x01) == 1) cpu->registers.f |= 0x10;
    6470:	e17fff17 	ldw	r5,-4(fp)
    6474:	e13ffe17 	ldw	r4,-8(fp)
    6478:	00029180 	call	2918 <rr8>
    647c:	10803fcc 	andi	r2,r2,255
    6480:	1080004c 	andi	r2,r2,1
    6484:	10000626 	beq	r2,zero,64a0 <SRAr+0x50>
    6488:	e0bffe17 	ldw	r2,-8(fp)
    648c:	108003c3 	ldbu	r2,15(r2)
    6490:	10800414 	ori	r2,r2,16
    6494:	1007883a 	mov	r3,r2
    6498:	e0bffe17 	ldw	r2,-8(fp)
    649c:	10c003c5 	stb	r3,15(r2)
    byte msb = rr8(cpu, r1) & 0x80;
    64a0:	e17fff17 	ldw	r5,-4(fp)
    64a4:	e13ffe17 	ldw	r4,-8(fp)
    64a8:	00029180 	call	2918 <rr8>
    64ac:	1007883a 	mov	r3,r2
    64b0:	00bfe004 	movi	r2,-128
    64b4:	1884703a 	and	r2,r3,r2
    64b8:	e0bffd05 	stb	r2,-12(fp)
    wr8(cpu, r1, (rr8(cpu, r1) >> 1) | msb);
    64bc:	e17fff17 	ldw	r5,-4(fp)
    64c0:	e13ffe17 	ldw	r4,-8(fp)
    64c4:	00029180 	call	2918 <rr8>
    64c8:	10803fcc 	andi	r2,r2,255
    64cc:	1004d07a 	srli	r2,r2,1
    64d0:	1007883a 	mov	r3,r2
    64d4:	e0bffd03 	ldbu	r2,-12(fp)
    64d8:	1884b03a 	or	r2,r3,r2
    64dc:	10803fcc 	andi	r2,r2,255
    64e0:	100d883a 	mov	r6,r2
    64e4:	e17fff17 	ldw	r5,-4(fp)
    64e8:	e13ffe17 	ldw	r4,-8(fp)
    64ec:	0002b7c0 	call	2b7c <wr8>
    if (rr8(cpu, r1) == 0) cpu->registers.f |= 0x80;
    64f0:	e17fff17 	ldw	r5,-4(fp)
    64f4:	e13ffe17 	ldw	r4,-8(fp)
    64f8:	00029180 	call	2918 <rr8>
    64fc:	10803fcc 	andi	r2,r2,255
    6500:	1000071e 	bne	r2,zero,6520 <SRAr+0xd0>
    6504:	e0bffe17 	ldw	r2,-8(fp)
    6508:	10c003c3 	ldbu	r3,15(r2)
    650c:	00bfe004 	movi	r2,-128
    6510:	1884b03a 	or	r2,r3,r2
    6514:	1007883a 	mov	r3,r2
    6518:	e0bffe17 	ldw	r2,-8(fp)
    651c:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    6520:	e0bffe17 	ldw	r2,-8(fp)
    6524:	10800017 	ldw	r2,0(r2)
    6528:	10c00104 	addi	r3,r2,4
    652c:	e0bffe17 	ldw	r2,-8(fp)
    6530:	10c00015 	stw	r3,0(r2)
}
    6534:	0001883a 	nop
    6538:	e037883a 	mov	sp,fp
    653c:	dfc00117 	ldw	ra,4(sp)
    6540:	df000017 	ldw	fp,0(sp)
    6544:	dec00204 	addi	sp,sp,8
    6548:	f800283a 	ret

0000654c <SRArra>:

void SRArra(CPU* cpu, reg_name r1, reg_name r2) {
    654c:	defff904 	addi	sp,sp,-28
    6550:	dfc00615 	stw	ra,24(sp)
    6554:	df000515 	stw	fp,20(sp)
    6558:	dc000415 	stw	r16,16(sp)
    655c:	df000504 	addi	fp,sp,20
    6560:	e13ffc15 	stw	r4,-16(fp)
    6564:	e17ffd15 	stw	r5,-12(fp)
    6568:	e1bffe15 	stw	r6,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    656c:	e1bffe17 	ldw	r6,-8(fp)
    6570:	e17ffd17 	ldw	r5,-12(fp)
    6574:	e13ffc17 	ldw	r4,-16(fp)
    6578:	00032000 	call	3200 <readAddr>
    657c:	e0bffb0d 	sth	r2,-20(fp)
    cpu->registers.f = 0;
    6580:	e0bffc17 	ldw	r2,-16(fp)
    6584:	100003c5 	stb	zero,15(r2)
    if ((readData(addr) & 0x01) == 1) cpu->registers.f |= 0x10;
    6588:	e0bffb0b 	ldhu	r2,-20(fp)
    658c:	1009883a 	mov	r4,r2
    6590:	000026c0 	call	26c <readData>
    6594:	10803fcc 	andi	r2,r2,255
    6598:	1080004c 	andi	r2,r2,1
    659c:	10000626 	beq	r2,zero,65b8 <SRArra+0x6c>
    65a0:	e0bffc17 	ldw	r2,-16(fp)
    65a4:	108003c3 	ldbu	r2,15(r2)
    65a8:	10800414 	ori	r2,r2,16
    65ac:	1007883a 	mov	r3,r2
    65b0:	e0bffc17 	ldw	r2,-16(fp)
    65b4:	10c003c5 	stb	r3,15(r2)
    byte msb = readData(addr) & 0x80;
    65b8:	e0bffb0b 	ldhu	r2,-20(fp)
    65bc:	1009883a 	mov	r4,r2
    65c0:	000026c0 	call	26c <readData>
    65c4:	1007883a 	mov	r3,r2
    65c8:	00bfe004 	movi	r2,-128
    65cc:	1884703a 	and	r2,r3,r2
    65d0:	e0bffb85 	stb	r2,-18(fp)
    writeData(addr, (readData(addr) >> 1) | msb);
    65d4:	e43ffb0b 	ldhu	r16,-20(fp)
    65d8:	e0bffb0b 	ldhu	r2,-20(fp)
    65dc:	1009883a 	mov	r4,r2
    65e0:	000026c0 	call	26c <readData>
    65e4:	10803fcc 	andi	r2,r2,255
    65e8:	1004d07a 	srli	r2,r2,1
    65ec:	1007883a 	mov	r3,r2
    65f0:	e0bffb83 	ldbu	r2,-18(fp)
    65f4:	1884b03a 	or	r2,r3,r2
    65f8:	10803fcc 	andi	r2,r2,255
    65fc:	100b883a 	mov	r5,r2
    6600:	8009883a 	mov	r4,r16
    6604:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    6608:	e0bffb0b 	ldhu	r2,-20(fp)
    660c:	1009883a 	mov	r4,r2
    6610:	000026c0 	call	26c <readData>
    6614:	10803fcc 	andi	r2,r2,255
    6618:	1000071e 	bne	r2,zero,6638 <SRArra+0xec>
    661c:	e0bffc17 	ldw	r2,-16(fp)
    6620:	10c003c3 	ldbu	r3,15(r2)
    6624:	00bfe004 	movi	r2,-128
    6628:	1884b03a 	or	r2,r3,r2
    662c:	1007883a 	mov	r3,r2
    6630:	e0bffc17 	ldw	r2,-16(fp)
    6634:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    6638:	e0bffc17 	ldw	r2,-16(fp)
    663c:	10800017 	ldw	r2,0(r2)
    6640:	10c00304 	addi	r3,r2,12
    6644:	e0bffc17 	ldw	r2,-16(fp)
    6648:	10c00015 	stw	r3,0(r2)
}
    664c:	0001883a 	nop
    6650:	e6ffff04 	addi	sp,fp,-4
    6654:	dfc00217 	ldw	ra,8(sp)
    6658:	df000117 	ldw	fp,4(sp)
    665c:	dc000017 	ldw	r16,0(sp)
    6660:	dec00304 	addi	sp,sp,12
    6664:	f800283a 	ret

00006668 <SLAr>:

void SLAr(CPU* cpu, reg_name r1) {
    6668:	defffc04 	addi	sp,sp,-16
    666c:	dfc00315 	stw	ra,12(sp)
    6670:	df000215 	stw	fp,8(sp)
    6674:	df000204 	addi	fp,sp,8
    6678:	e13ffe15 	stw	r4,-8(fp)
    667c:	e17fff15 	stw	r5,-4(fp)
    cpu->registers.f = 0;
    6680:	e0bffe17 	ldw	r2,-8(fp)
    6684:	100003c5 	stb	zero,15(r2)
    if ((rr8(cpu, r1) & 0x80) != 0) cpu->registers.f |= 0x10;
    6688:	e17fff17 	ldw	r5,-4(fp)
    668c:	e13ffe17 	ldw	r4,-8(fp)
    6690:	00029180 	call	2918 <rr8>
    6694:	10803fcc 	andi	r2,r2,255
    6698:	1080201c 	xori	r2,r2,128
    669c:	10bfe004 	addi	r2,r2,-128
    66a0:	1000060e 	bge	r2,zero,66bc <SLAr+0x54>
    66a4:	e0bffe17 	ldw	r2,-8(fp)
    66a8:	108003c3 	ldbu	r2,15(r2)
    66ac:	10800414 	ori	r2,r2,16
    66b0:	1007883a 	mov	r3,r2
    66b4:	e0bffe17 	ldw	r2,-8(fp)
    66b8:	10c003c5 	stb	r3,15(r2)
    wr8(cpu, r1, ((rr8(cpu, r1) << 1) & 0xFF));
    66bc:	e17fff17 	ldw	r5,-4(fp)
    66c0:	e13ffe17 	ldw	r4,-8(fp)
    66c4:	00029180 	call	2918 <rr8>
    66c8:	10803fcc 	andi	r2,r2,255
    66cc:	1085883a 	add	r2,r2,r2
    66d0:	10803fcc 	andi	r2,r2,255
    66d4:	100d883a 	mov	r6,r2
    66d8:	e17fff17 	ldw	r5,-4(fp)
    66dc:	e13ffe17 	ldw	r4,-8(fp)
    66e0:	0002b7c0 	call	2b7c <wr8>
    if (rr8(cpu, r1) == 0) cpu->registers.f |= 0x80;
    66e4:	e17fff17 	ldw	r5,-4(fp)
    66e8:	e13ffe17 	ldw	r4,-8(fp)
    66ec:	00029180 	call	2918 <rr8>
    66f0:	10803fcc 	andi	r2,r2,255
    66f4:	1000071e 	bne	r2,zero,6714 <SLAr+0xac>
    66f8:	e0bffe17 	ldw	r2,-8(fp)
    66fc:	10c003c3 	ldbu	r3,15(r2)
    6700:	00bfe004 	movi	r2,-128
    6704:	1884b03a 	or	r2,r3,r2
    6708:	1007883a 	mov	r3,r2
    670c:	e0bffe17 	ldw	r2,-8(fp)
    6710:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    6714:	e0bffe17 	ldw	r2,-8(fp)
    6718:	10800017 	ldw	r2,0(r2)
    671c:	10c00104 	addi	r3,r2,4
    6720:	e0bffe17 	ldw	r2,-8(fp)
    6724:	10c00015 	stw	r3,0(r2)
}
    6728:	0001883a 	nop
    672c:	e037883a 	mov	sp,fp
    6730:	dfc00117 	ldw	ra,4(sp)
    6734:	df000017 	ldw	fp,0(sp)
    6738:	dec00204 	addi	sp,sp,8
    673c:	f800283a 	ret

00006740 <SLArra>:

void SLArra(CPU* cpu, reg_name r1, reg_name r2) {
    6740:	defff904 	addi	sp,sp,-28
    6744:	dfc00615 	stw	ra,24(sp)
    6748:	df000515 	stw	fp,20(sp)
    674c:	dc000415 	stw	r16,16(sp)
    6750:	df000504 	addi	fp,sp,20
    6754:	e13ffc15 	stw	r4,-16(fp)
    6758:	e17ffd15 	stw	r5,-12(fp)
    675c:	e1bffe15 	stw	r6,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    6760:	e1bffe17 	ldw	r6,-8(fp)
    6764:	e17ffd17 	ldw	r5,-12(fp)
    6768:	e13ffc17 	ldw	r4,-16(fp)
    676c:	00032000 	call	3200 <readAddr>
    6770:	e0bffb0d 	sth	r2,-20(fp)
    cpu->registers.f = 0;
    6774:	e0bffc17 	ldw	r2,-16(fp)
    6778:	100003c5 	stb	zero,15(r2)
    if ((readData(addr) & 0x80) != 0) cpu->registers.f |= 0x10;
    677c:	e0bffb0b 	ldhu	r2,-20(fp)
    6780:	1009883a 	mov	r4,r2
    6784:	000026c0 	call	26c <readData>
    6788:	10803fcc 	andi	r2,r2,255
    678c:	1080201c 	xori	r2,r2,128
    6790:	10bfe004 	addi	r2,r2,-128
    6794:	1000060e 	bge	r2,zero,67b0 <SLArra+0x70>
    6798:	e0bffc17 	ldw	r2,-16(fp)
    679c:	108003c3 	ldbu	r2,15(r2)
    67a0:	10800414 	ori	r2,r2,16
    67a4:	1007883a 	mov	r3,r2
    67a8:	e0bffc17 	ldw	r2,-16(fp)
    67ac:	10c003c5 	stb	r3,15(r2)
    writeData(addr, ((readData(addr) << 1) & 0xFF));
    67b0:	e43ffb0b 	ldhu	r16,-20(fp)
    67b4:	e0bffb0b 	ldhu	r2,-20(fp)
    67b8:	1009883a 	mov	r4,r2
    67bc:	000026c0 	call	26c <readData>
    67c0:	10803fcc 	andi	r2,r2,255
    67c4:	1085883a 	add	r2,r2,r2
    67c8:	10803fcc 	andi	r2,r2,255
    67cc:	100b883a 	mov	r5,r2
    67d0:	8009883a 	mov	r4,r16
    67d4:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    67d8:	e0bffb0b 	ldhu	r2,-20(fp)
    67dc:	1009883a 	mov	r4,r2
    67e0:	000026c0 	call	26c <readData>
    67e4:	10803fcc 	andi	r2,r2,255
    67e8:	1000071e 	bne	r2,zero,6808 <SLArra+0xc8>
    67ec:	e0bffc17 	ldw	r2,-16(fp)
    67f0:	10c003c3 	ldbu	r3,15(r2)
    67f4:	00bfe004 	movi	r2,-128
    67f8:	1884b03a 	or	r2,r3,r2
    67fc:	1007883a 	mov	r3,r2
    6800:	e0bffc17 	ldw	r2,-16(fp)
    6804:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    6808:	e0bffc17 	ldw	r2,-16(fp)
    680c:	10800017 	ldw	r2,0(r2)
    6810:	10c00304 	addi	r3,r2,12
    6814:	e0bffc17 	ldw	r2,-16(fp)
    6818:	10c00015 	stw	r3,0(r2)
}
    681c:	0001883a 	nop
    6820:	e6ffff04 	addi	sp,fp,-4
    6824:	dfc00217 	ldw	ra,8(sp)
    6828:	df000117 	ldw	fp,4(sp)
    682c:	dc000017 	ldw	r16,0(sp)
    6830:	dec00304 	addi	sp,sp,12
    6834:	f800283a 	ret

00006838 <SRLr>:

void SRLr(CPU* cpu, reg_name r1) {
    6838:	defffc04 	addi	sp,sp,-16
    683c:	dfc00315 	stw	ra,12(sp)
    6840:	df000215 	stw	fp,8(sp)
    6844:	df000204 	addi	fp,sp,8
    6848:	e13ffe15 	stw	r4,-8(fp)
    684c:	e17fff15 	stw	r5,-4(fp)
    cpu->registers.f = 0;
    6850:	e0bffe17 	ldw	r2,-8(fp)
    6854:	100003c5 	stb	zero,15(r2)
    if ((rr8(cpu, r1) & 0x01) != 0) cpu->registers.f |= 0x10;
    6858:	e17fff17 	ldw	r5,-4(fp)
    685c:	e13ffe17 	ldw	r4,-8(fp)
    6860:	00029180 	call	2918 <rr8>
    6864:	10803fcc 	andi	r2,r2,255
    6868:	1080004c 	andi	r2,r2,1
    686c:	10000626 	beq	r2,zero,6888 <SRLr+0x50>
    6870:	e0bffe17 	ldw	r2,-8(fp)
    6874:	108003c3 	ldbu	r2,15(r2)
    6878:	10800414 	ori	r2,r2,16
    687c:	1007883a 	mov	r3,r2
    6880:	e0bffe17 	ldw	r2,-8(fp)
    6884:	10c003c5 	stb	r3,15(r2)
    wr8(cpu, r1, ((0x0000 + rr8(cpu, r1)) >> 1));
    6888:	e17fff17 	ldw	r5,-4(fp)
    688c:	e13ffe17 	ldw	r4,-8(fp)
    6890:	00029180 	call	2918 <rr8>
    6894:	10803fcc 	andi	r2,r2,255
    6898:	1005d07a 	srai	r2,r2,1
    689c:	10803fcc 	andi	r2,r2,255
    68a0:	100d883a 	mov	r6,r2
    68a4:	e17fff17 	ldw	r5,-4(fp)
    68a8:	e13ffe17 	ldw	r4,-8(fp)
    68ac:	0002b7c0 	call	2b7c <wr8>
    if (rr8(cpu, r1) == 0) cpu->registers.f |= 0x80;
    68b0:	e17fff17 	ldw	r5,-4(fp)
    68b4:	e13ffe17 	ldw	r4,-8(fp)
    68b8:	00029180 	call	2918 <rr8>
    68bc:	10803fcc 	andi	r2,r2,255
    68c0:	1000071e 	bne	r2,zero,68e0 <SRLr+0xa8>
    68c4:	e0bffe17 	ldw	r2,-8(fp)
    68c8:	10c003c3 	ldbu	r3,15(r2)
    68cc:	00bfe004 	movi	r2,-128
    68d0:	1884b03a 	or	r2,r3,r2
    68d4:	1007883a 	mov	r3,r2
    68d8:	e0bffe17 	ldw	r2,-8(fp)
    68dc:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    68e0:	e0bffe17 	ldw	r2,-8(fp)
    68e4:	10800017 	ldw	r2,0(r2)
    68e8:	10c00104 	addi	r3,r2,4
    68ec:	e0bffe17 	ldw	r2,-8(fp)
    68f0:	10c00015 	stw	r3,0(r2)
}
    68f4:	0001883a 	nop
    68f8:	e037883a 	mov	sp,fp
    68fc:	dfc00117 	ldw	ra,4(sp)
    6900:	df000017 	ldw	fp,0(sp)
    6904:	dec00204 	addi	sp,sp,8
    6908:	f800283a 	ret

0000690c <SRLrra>:

void SRLrra(CPU* cpu, reg_name r1, reg_name r2) {
    690c:	defff904 	addi	sp,sp,-28
    6910:	dfc00615 	stw	ra,24(sp)
    6914:	df000515 	stw	fp,20(sp)
    6918:	dc000415 	stw	r16,16(sp)
    691c:	df000504 	addi	fp,sp,20
    6920:	e13ffc15 	stw	r4,-16(fp)
    6924:	e17ffd15 	stw	r5,-12(fp)
    6928:	e1bffe15 	stw	r6,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    692c:	e1bffe17 	ldw	r6,-8(fp)
    6930:	e17ffd17 	ldw	r5,-12(fp)
    6934:	e13ffc17 	ldw	r4,-16(fp)
    6938:	00032000 	call	3200 <readAddr>
    693c:	e0bffb0d 	sth	r2,-20(fp)
    cpu->registers.f = 0;
    6940:	e0bffc17 	ldw	r2,-16(fp)
    6944:	100003c5 	stb	zero,15(r2)
    if ((readData(addr) & 0x01) != 0) cpu->registers.f |= 0x10;
    6948:	e0bffb0b 	ldhu	r2,-20(fp)
    694c:	1009883a 	mov	r4,r2
    6950:	000026c0 	call	26c <readData>
    6954:	10803fcc 	andi	r2,r2,255
    6958:	1080004c 	andi	r2,r2,1
    695c:	10000626 	beq	r2,zero,6978 <SRLrra+0x6c>
    6960:	e0bffc17 	ldw	r2,-16(fp)
    6964:	108003c3 	ldbu	r2,15(r2)
    6968:	10800414 	ori	r2,r2,16
    696c:	1007883a 	mov	r3,r2
    6970:	e0bffc17 	ldw	r2,-16(fp)
    6974:	10c003c5 	stb	r3,15(r2)
    writeData(addr, (readData(addr) >> 1));
    6978:	e43ffb0b 	ldhu	r16,-20(fp)
    697c:	e0bffb0b 	ldhu	r2,-20(fp)
    6980:	1009883a 	mov	r4,r2
    6984:	000026c0 	call	26c <readData>
    6988:	10803fcc 	andi	r2,r2,255
    698c:	1004d07a 	srli	r2,r2,1
    6990:	10803fcc 	andi	r2,r2,255
    6994:	100b883a 	mov	r5,r2
    6998:	8009883a 	mov	r4,r16
    699c:	00003640 	call	364 <writeData>
    if (readData(addr) == 0) cpu->registers.f |= 0x80;
    69a0:	e0bffb0b 	ldhu	r2,-20(fp)
    69a4:	1009883a 	mov	r4,r2
    69a8:	000026c0 	call	26c <readData>
    69ac:	10803fcc 	andi	r2,r2,255
    69b0:	1000071e 	bne	r2,zero,69d0 <SRLrra+0xc4>
    69b4:	e0bffc17 	ldw	r2,-16(fp)
    69b8:	10c003c3 	ldbu	r3,15(r2)
    69bc:	00bfe004 	movi	r2,-128
    69c0:	1884b03a 	or	r2,r3,r2
    69c4:	1007883a 	mov	r3,r2
    69c8:	e0bffc17 	ldw	r2,-16(fp)
    69cc:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 12;
    69d0:	e0bffc17 	ldw	r2,-16(fp)
    69d4:	10800017 	ldw	r2,0(r2)
    69d8:	10c00304 	addi	r3,r2,12
    69dc:	e0bffc17 	ldw	r2,-16(fp)
    69e0:	10c00015 	stw	r3,0(r2)
}
    69e4:	0001883a 	nop
    69e8:	e6ffff04 	addi	sp,fp,-4
    69ec:	dfc00217 	ldw	ra,8(sp)
    69f0:	df000117 	ldw	fp,4(sp)
    69f4:	dc000017 	ldw	r16,0(sp)
    69f8:	dec00304 	addi	sp,sp,12
    69fc:	f800283a 	ret

00006a00 <BITir>:

void BITir(CPU* cpu, int i, reg_name r1) {
    6a00:	defffa04 	addi	sp,sp,-24
    6a04:	dfc00515 	stw	ra,20(sp)
    6a08:	df000415 	stw	fp,16(sp)
    6a0c:	df000404 	addi	fp,sp,16
    6a10:	e13ffd15 	stw	r4,-12(fp)
    6a14:	e17ffe15 	stw	r5,-8(fp)
    6a18:	e1bfff15 	stw	r6,-4(fp)
    byte mask = 1 << i;
    6a1c:	00c00044 	movi	r3,1
    6a20:	e0bffe17 	ldw	r2,-8(fp)
    6a24:	1884983a 	sll	r2,r3,r2
    6a28:	e0bffc45 	stb	r2,-15(fp)
    byte z = (rr8(cpu, r1) & mask) ? 0 : 1;
    6a2c:	e17fff17 	ldw	r5,-4(fp)
    6a30:	e13ffd17 	ldw	r4,-12(fp)
    6a34:	00029180 	call	2918 <rr8>
    6a38:	1007883a 	mov	r3,r2
    6a3c:	e0bffc43 	ldbu	r2,-15(fp)
    6a40:	1884703a 	and	r2,r3,r2
    6a44:	10803fcc 	andi	r2,r2,255
    6a48:	1005003a 	cmpeq	r2,r2,zero
    6a4c:	e0bffc85 	stb	r2,-14(fp)
    byte f = cpu->registers.f & 0x10;
    6a50:	e0bffd17 	ldw	r2,-12(fp)
    6a54:	108003c3 	ldbu	r2,15(r2)
    6a58:	1080040c 	andi	r2,r2,16
    6a5c:	e0bffc05 	stb	r2,-16(fp)
    f |= 0x20;
    6a60:	e0bffc03 	ldbu	r2,-16(fp)
    6a64:	10800814 	ori	r2,r2,32
    6a68:	e0bffc05 	stb	r2,-16(fp)
    if (z == 1) f |= 0x80;
    6a6c:	e0bffc83 	ldbu	r2,-14(fp)
    6a70:	10800058 	cmpnei	r2,r2,1
    6a74:	1000041e 	bne	r2,zero,6a88 <BITir+0x88>
    6a78:	e0fffc03 	ldbu	r3,-16(fp)
    6a7c:	00bfe004 	movi	r2,-128
    6a80:	1884b03a 	or	r2,r3,r2
    6a84:	e0bffc05 	stb	r2,-16(fp)
    cpu->registers.f = f;
    6a88:	e0bffd17 	ldw	r2,-12(fp)
    6a8c:	e0fffc03 	ldbu	r3,-16(fp)
    6a90:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    6a94:	e0bffd17 	ldw	r2,-12(fp)
    6a98:	10800017 	ldw	r2,0(r2)
    6a9c:	10c00104 	addi	r3,r2,4
    6aa0:	e0bffd17 	ldw	r2,-12(fp)
    6aa4:	10c00015 	stw	r3,0(r2)
}
    6aa8:	0001883a 	nop
    6aac:	e037883a 	mov	sp,fp
    6ab0:	dfc00117 	ldw	ra,4(sp)
    6ab4:	df000017 	ldw	fp,0(sp)
    6ab8:	dec00204 	addi	sp,sp,8
    6abc:	f800283a 	ret

00006ac0 <BITirra>:

void BITirra(CPU* cpu, int i, reg_name r1, reg_name r2) {
    6ac0:	defff804 	addi	sp,sp,-32
    6ac4:	dfc00715 	stw	ra,28(sp)
    6ac8:	df000615 	stw	fp,24(sp)
    6acc:	df000604 	addi	fp,sp,24
    6ad0:	e13ffc15 	stw	r4,-16(fp)
    6ad4:	e17ffd15 	stw	r5,-12(fp)
    6ad8:	e1bffe15 	stw	r6,-8(fp)
    6adc:	e1ffff15 	stw	r7,-4(fp)
    word addr = readAddr(cpu, r1, r2);
    6ae0:	e1bfff17 	ldw	r6,-4(fp)
    6ae4:	e17ffe17 	ldw	r5,-8(fp)
    6ae8:	e13ffc17 	ldw	r4,-16(fp)
    6aec:	00032000 	call	3200 <readAddr>
    6af0:	e0bffa8d 	sth	r2,-22(fp)
    byte mask = 1 << i;
    6af4:	00c00044 	movi	r3,1
    6af8:	e0bffd17 	ldw	r2,-12(fp)
    6afc:	1884983a 	sll	r2,r3,r2
    6b00:	e0bffb05 	stb	r2,-20(fp)
    byte z = (readData(addr) & mask) ? 0 : 1;
    6b04:	e0bffa8b 	ldhu	r2,-22(fp)
    6b08:	1009883a 	mov	r4,r2
    6b0c:	000026c0 	call	26c <readData>
    6b10:	1007883a 	mov	r3,r2
    6b14:	e0bffb03 	ldbu	r2,-20(fp)
    6b18:	1884703a 	and	r2,r3,r2
    6b1c:	10803fcc 	andi	r2,r2,255
    6b20:	1005003a 	cmpeq	r2,r2,zero
    6b24:	e0bffb45 	stb	r2,-19(fp)
    byte f = cpu->registers.f & 0x10;
    6b28:	e0bffc17 	ldw	r2,-16(fp)
    6b2c:	108003c3 	ldbu	r2,15(r2)
    6b30:	1080040c 	andi	r2,r2,16
    6b34:	e0bffa05 	stb	r2,-24(fp)
    f |= 0x20;
    6b38:	e0bffa03 	ldbu	r2,-24(fp)
    6b3c:	10800814 	ori	r2,r2,32
    6b40:	e0bffa05 	stb	r2,-24(fp)
    if (z == 1) f |= 0x80;
    6b44:	e0bffb43 	ldbu	r2,-19(fp)
    6b48:	10800058 	cmpnei	r2,r2,1
    6b4c:	1000041e 	bne	r2,zero,6b60 <BITirra+0xa0>
    6b50:	e0fffa03 	ldbu	r3,-24(fp)
    6b54:	00bfe004 	movi	r2,-128
    6b58:	1884b03a 	or	r2,r3,r2
    6b5c:	e0bffa05 	stb	r2,-24(fp)
    cpu->registers.f = f;
    6b60:	e0bffc17 	ldw	r2,-16(fp)
    6b64:	e0fffa03 	ldbu	r3,-24(fp)
    6b68:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 8;
    6b6c:	e0bffc17 	ldw	r2,-16(fp)
    6b70:	10800017 	ldw	r2,0(r2)
    6b74:	10c00204 	addi	r3,r2,8
    6b78:	e0bffc17 	ldw	r2,-16(fp)
    6b7c:	10c00015 	stw	r3,0(r2)
}
    6b80:	0001883a 	nop
    6b84:	e037883a 	mov	sp,fp
    6b88:	dfc00117 	ldw	ra,4(sp)
    6b8c:	df000017 	ldw	fp,0(sp)
    6b90:	dec00204 	addi	sp,sp,8
    6b94:	f800283a 	ret

00006b98 <SETir>:

void SETir(CPU* cpu, int i, reg_name r1) {
    6b98:	defffa04 	addi	sp,sp,-24
    6b9c:	dfc00515 	stw	ra,20(sp)
    6ba0:	df000415 	stw	fp,16(sp)
    6ba4:	df000404 	addi	fp,sp,16
    6ba8:	e13ffd15 	stw	r4,-12(fp)
    6bac:	e17ffe15 	stw	r5,-8(fp)
    6bb0:	e1bfff15 	stw	r6,-4(fp)
    byte mask = 1 << i;
    6bb4:	00c00044 	movi	r3,1
    6bb8:	e0bffe17 	ldw	r2,-8(fp)
    6bbc:	1884983a 	sll	r2,r3,r2
    6bc0:	e0bffc05 	stb	r2,-16(fp)
    wr8(cpu, r1, rr8(cpu, r1) | mask);
    6bc4:	e17fff17 	ldw	r5,-4(fp)
    6bc8:	e13ffd17 	ldw	r4,-12(fp)
    6bcc:	00029180 	call	2918 <rr8>
    6bd0:	1007883a 	mov	r3,r2
    6bd4:	e0bffc03 	ldbu	r2,-16(fp)
    6bd8:	1884b03a 	or	r2,r3,r2
    6bdc:	10803fcc 	andi	r2,r2,255
    6be0:	100d883a 	mov	r6,r2
    6be4:	e17fff17 	ldw	r5,-4(fp)
    6be8:	e13ffd17 	ldw	r4,-12(fp)
    6bec:	0002b7c0 	call	2b7c <wr8>
    cpu->clock.c += 4;
    6bf0:	e0bffd17 	ldw	r2,-12(fp)
    6bf4:	10800017 	ldw	r2,0(r2)
    6bf8:	10c00104 	addi	r3,r2,4
    6bfc:	e0bffd17 	ldw	r2,-12(fp)
    6c00:	10c00015 	stw	r3,0(r2)
}
    6c04:	0001883a 	nop
    6c08:	e037883a 	mov	sp,fp
    6c0c:	dfc00117 	ldw	ra,4(sp)
    6c10:	df000017 	ldw	fp,0(sp)
    6c14:	dec00204 	addi	sp,sp,8
    6c18:	f800283a 	ret

00006c1c <SETirra>:

void SETirra(CPU* cpu, int i, reg_name r1, reg_name r2) {
    6c1c:	defff804 	addi	sp,sp,-32
    6c20:	dfc00715 	stw	ra,28(sp)
    6c24:	df000615 	stw	fp,24(sp)
    6c28:	dc000515 	stw	r16,20(sp)
    6c2c:	df000604 	addi	fp,sp,24
    6c30:	e13ffb15 	stw	r4,-20(fp)
    6c34:	e17ffc15 	stw	r5,-16(fp)
    6c38:	e1bffd15 	stw	r6,-12(fp)
    6c3c:	e1fffe15 	stw	r7,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    6c40:	e1bffe17 	ldw	r6,-8(fp)
    6c44:	e17ffd17 	ldw	r5,-12(fp)
    6c48:	e13ffb17 	ldw	r4,-20(fp)
    6c4c:	00032000 	call	3200 <readAddr>
    6c50:	e0bffa0d 	sth	r2,-24(fp)
    byte mask = 1 << i;
    6c54:	00c00044 	movi	r3,1
    6c58:	e0bffc17 	ldw	r2,-16(fp)
    6c5c:	1884983a 	sll	r2,r3,r2
    6c60:	e0bffa85 	stb	r2,-22(fp)
    writeData(addr, readData(addr) | mask);
    6c64:	e43ffa0b 	ldhu	r16,-24(fp)
    6c68:	e0bffa0b 	ldhu	r2,-24(fp)
    6c6c:	1009883a 	mov	r4,r2
    6c70:	000026c0 	call	26c <readData>
    6c74:	1007883a 	mov	r3,r2
    6c78:	e0bffa83 	ldbu	r2,-22(fp)
    6c7c:	1884b03a 	or	r2,r3,r2
    6c80:	10803fcc 	andi	r2,r2,255
    6c84:	100b883a 	mov	r5,r2
    6c88:	8009883a 	mov	r4,r16
    6c8c:	00003640 	call	364 <writeData>
    cpu->clock.c += 12;
    6c90:	e0bffb17 	ldw	r2,-20(fp)
    6c94:	10800017 	ldw	r2,0(r2)
    6c98:	10c00304 	addi	r3,r2,12
    6c9c:	e0bffb17 	ldw	r2,-20(fp)
    6ca0:	10c00015 	stw	r3,0(r2)
}
    6ca4:	0001883a 	nop
    6ca8:	e6ffff04 	addi	sp,fp,-4
    6cac:	dfc00217 	ldw	ra,8(sp)
    6cb0:	df000117 	ldw	fp,4(sp)
    6cb4:	dc000017 	ldw	r16,0(sp)
    6cb8:	dec00304 	addi	sp,sp,12
    6cbc:	f800283a 	ret

00006cc0 <RESir>:

void RESir(CPU* cpu, int i, reg_name r1) {
    6cc0:	defffa04 	addi	sp,sp,-24
    6cc4:	dfc00515 	stw	ra,20(sp)
    6cc8:	df000415 	stw	fp,16(sp)
    6ccc:	df000404 	addi	fp,sp,16
    6cd0:	e13ffd15 	stw	r4,-12(fp)
    6cd4:	e17ffe15 	stw	r5,-8(fp)
    6cd8:	e1bfff15 	stw	r6,-4(fp)
    byte mask = 0xFF - (1 << i);
    6cdc:	00c00044 	movi	r3,1
    6ce0:	e0bffe17 	ldw	r2,-8(fp)
    6ce4:	1884983a 	sll	r2,r3,r2
    6ce8:	0084303a 	nor	r2,zero,r2
    6cec:	e0bffc05 	stb	r2,-16(fp)
    wr8(cpu, r1, rr8(cpu, r1) & mask);
    6cf0:	e17fff17 	ldw	r5,-4(fp)
    6cf4:	e13ffd17 	ldw	r4,-12(fp)
    6cf8:	00029180 	call	2918 <rr8>
    6cfc:	1007883a 	mov	r3,r2
    6d00:	e0bffc03 	ldbu	r2,-16(fp)
    6d04:	1884703a 	and	r2,r3,r2
    6d08:	10803fcc 	andi	r2,r2,255
    6d0c:	100d883a 	mov	r6,r2
    6d10:	e17fff17 	ldw	r5,-4(fp)
    6d14:	e13ffd17 	ldw	r4,-12(fp)
    6d18:	0002b7c0 	call	2b7c <wr8>
    cpu->clock.c += 4;
    6d1c:	e0bffd17 	ldw	r2,-12(fp)
    6d20:	10800017 	ldw	r2,0(r2)
    6d24:	10c00104 	addi	r3,r2,4
    6d28:	e0bffd17 	ldw	r2,-12(fp)
    6d2c:	10c00015 	stw	r3,0(r2)
}
    6d30:	0001883a 	nop
    6d34:	e037883a 	mov	sp,fp
    6d38:	dfc00117 	ldw	ra,4(sp)
    6d3c:	df000017 	ldw	fp,0(sp)
    6d40:	dec00204 	addi	sp,sp,8
    6d44:	f800283a 	ret

00006d48 <RESirra>:

void RESirra(CPU* cpu, int i, reg_name r1, reg_name r2) {
    6d48:	defff804 	addi	sp,sp,-32
    6d4c:	dfc00715 	stw	ra,28(sp)
    6d50:	df000615 	stw	fp,24(sp)
    6d54:	dc000515 	stw	r16,20(sp)
    6d58:	df000604 	addi	fp,sp,24
    6d5c:	e13ffb15 	stw	r4,-20(fp)
    6d60:	e17ffc15 	stw	r5,-16(fp)
    6d64:	e1bffd15 	stw	r6,-12(fp)
    6d68:	e1fffe15 	stw	r7,-8(fp)
    word addr = readAddr(cpu, r1, r2);
    6d6c:	e1bffe17 	ldw	r6,-8(fp)
    6d70:	e17ffd17 	ldw	r5,-12(fp)
    6d74:	e13ffb17 	ldw	r4,-20(fp)
    6d78:	00032000 	call	3200 <readAddr>
    6d7c:	e0bffa0d 	sth	r2,-24(fp)
    byte mask = 0xFF - (1 << i);
    6d80:	00c00044 	movi	r3,1
    6d84:	e0bffc17 	ldw	r2,-16(fp)
    6d88:	1884983a 	sll	r2,r3,r2
    6d8c:	0084303a 	nor	r2,zero,r2
    6d90:	e0bffa85 	stb	r2,-22(fp)
    writeData(addr, readData(addr) & mask);
    6d94:	e43ffa0b 	ldhu	r16,-24(fp)
    6d98:	e0bffa0b 	ldhu	r2,-24(fp)
    6d9c:	1009883a 	mov	r4,r2
    6da0:	000026c0 	call	26c <readData>
    6da4:	1007883a 	mov	r3,r2
    6da8:	e0bffa83 	ldbu	r2,-22(fp)
    6dac:	1884703a 	and	r2,r3,r2
    6db0:	10803fcc 	andi	r2,r2,255
    6db4:	100b883a 	mov	r5,r2
    6db8:	8009883a 	mov	r4,r16
    6dbc:	00003640 	call	364 <writeData>
    cpu->clock.c += 12;
    6dc0:	e0bffb17 	ldw	r2,-20(fp)
    6dc4:	10800017 	ldw	r2,0(r2)
    6dc8:	10c00304 	addi	r3,r2,12
    6dcc:	e0bffb17 	ldw	r2,-20(fp)
    6dd0:	10c00015 	stw	r3,0(r2)
}
    6dd4:	0001883a 	nop
    6dd8:	e6ffff04 	addi	sp,fp,-4
    6ddc:	dfc00217 	ldw	ra,8(sp)
    6de0:	df000117 	ldw	fp,4(sp)
    6de4:	dc000017 	ldw	r16,0(sp)
    6de8:	dec00304 	addi	sp,sp,12
    6dec:	f800283a 	ret

00006df0 <SWAPr>:

byte _SWAPn(CPU* cpu, byte n);

void SWAPr(CPU* cpu, reg_name r1) {
    6df0:	defffc04 	addi	sp,sp,-16
    6df4:	dfc00315 	stw	ra,12(sp)
    6df8:	df000215 	stw	fp,8(sp)
    6dfc:	df000204 	addi	fp,sp,8
    6e00:	e13ffe15 	stw	r4,-8(fp)
    6e04:	e17fff15 	stw	r5,-4(fp)
    wr8(cpu, r1, _SWAPn(cpu, rr8(cpu, r1)));
    6e08:	e17fff17 	ldw	r5,-4(fp)
    6e0c:	e13ffe17 	ldw	r4,-8(fp)
    6e10:	00029180 	call	2918 <rr8>
    6e14:	10803fcc 	andi	r2,r2,255
    6e18:	100b883a 	mov	r5,r2
    6e1c:	e13ffe17 	ldw	r4,-8(fp)
    6e20:	0006f140 	call	6f14 <_SWAPn>
    6e24:	10803fcc 	andi	r2,r2,255
    6e28:	100d883a 	mov	r6,r2
    6e2c:	e17fff17 	ldw	r5,-4(fp)
    6e30:	e13ffe17 	ldw	r4,-8(fp)
    6e34:	0002b7c0 	call	2b7c <wr8>
    cpu->clock.c += 4;
    6e38:	e0bffe17 	ldw	r2,-8(fp)
    6e3c:	10800017 	ldw	r2,0(r2)
    6e40:	10c00104 	addi	r3,r2,4
    6e44:	e0bffe17 	ldw	r2,-8(fp)
    6e48:	10c00015 	stw	r3,0(r2)
}
    6e4c:	0001883a 	nop
    6e50:	e037883a 	mov	sp,fp
    6e54:	dfc00117 	ldw	ra,4(sp)
    6e58:	df000017 	ldw	fp,0(sp)
    6e5c:	dec00204 	addi	sp,sp,8
    6e60:	f800283a 	ret

00006e64 <SWAPrra>:

void SWAPrra(CPU* cpu, reg_name r1, reg_name r2) {
    6e64:	defff904 	addi	sp,sp,-28
    6e68:	dfc00615 	stw	ra,24(sp)
    6e6c:	df000515 	stw	fp,20(sp)
    6e70:	dc000415 	stw	r16,16(sp)
    6e74:	df000504 	addi	fp,sp,20
    6e78:	e13ffc15 	stw	r4,-16(fp)
    6e7c:	e17ffd15 	stw	r5,-12(fp)
    6e80:	e1bffe15 	stw	r6,-8(fp)
    word addr = ((0x0000 + rr8(cpu, r1)) << 8) + rr8(cpu, r2);
    6e84:	e17ffd17 	ldw	r5,-12(fp)
    6e88:	e13ffc17 	ldw	r4,-16(fp)
    6e8c:	00029180 	call	2918 <rr8>
    6e90:	10803fcc 	andi	r2,r2,255
    6e94:	1004923a 	slli	r2,r2,8
    6e98:	1021883a 	mov	r16,r2
    6e9c:	e17ffe17 	ldw	r5,-8(fp)
    6ea0:	e13ffc17 	ldw	r4,-16(fp)
    6ea4:	00029180 	call	2918 <rr8>
    6ea8:	10803fcc 	andi	r2,r2,255
    6eac:	8085883a 	add	r2,r16,r2
    6eb0:	e0bffb0d 	sth	r2,-20(fp)
    writeData(addr, _SWAPn(cpu, readData(addr)));
    6eb4:	e43ffb0b 	ldhu	r16,-20(fp)
    6eb8:	e0bffb0b 	ldhu	r2,-20(fp)
    6ebc:	1009883a 	mov	r4,r2
    6ec0:	000026c0 	call	26c <readData>
    6ec4:	10803fcc 	andi	r2,r2,255
    6ec8:	100b883a 	mov	r5,r2
    6ecc:	e13ffc17 	ldw	r4,-16(fp)
    6ed0:	0006f140 	call	6f14 <_SWAPn>
    6ed4:	10803fcc 	andi	r2,r2,255
    6ed8:	100b883a 	mov	r5,r2
    6edc:	8009883a 	mov	r4,r16
    6ee0:	00003640 	call	364 <writeData>
    cpu->clock.c += 12;
    6ee4:	e0bffc17 	ldw	r2,-16(fp)
    6ee8:	10800017 	ldw	r2,0(r2)
    6eec:	10c00304 	addi	r3,r2,12
    6ef0:	e0bffc17 	ldw	r2,-16(fp)
    6ef4:	10c00015 	stw	r3,0(r2)
}
    6ef8:	0001883a 	nop
    6efc:	e6ffff04 	addi	sp,fp,-4
    6f00:	dfc00217 	ldw	ra,8(sp)
    6f04:	df000117 	ldw	fp,4(sp)
    6f08:	dc000017 	ldw	r16,0(sp)
    6f0c:	dec00304 	addi	sp,sp,12
    6f10:	f800283a 	ret

00006f14 <_SWAPn>:

byte _SWAPn(CPU* cpu, byte n) {
    6f14:	defffd04 	addi	sp,sp,-12
    6f18:	df000215 	stw	fp,8(sp)
    6f1c:	df000204 	addi	fp,sp,8
    6f20:	e13ffe15 	stw	r4,-8(fp)
    6f24:	2805883a 	mov	r2,r5
    6f28:	e0bfff05 	stb	r2,-4(fp)
    cpu->registers.f = (n == 0) ? 0x80 : 0;
    6f2c:	e0bfff03 	ldbu	r2,-4(fp)
    6f30:	1000021e 	bne	r2,zero,6f3c <_SWAPn+0x28>
    6f34:	00bfe004 	movi	r2,-128
    6f38:	00000106 	br	6f40 <_SWAPn+0x2c>
    6f3c:	0005883a 	mov	r2,zero
    6f40:	e0fffe17 	ldw	r3,-8(fp)
    6f44:	188003c5 	stb	r2,15(r3)
    return (((n & 0xF0) >> 4) | ((n & 0x0F) << 4));
    6f48:	e0bfff03 	ldbu	r2,-4(fp)
    6f4c:	1004d13a 	srli	r2,r2,4
    6f50:	1007883a 	mov	r3,r2
    6f54:	e0bfff03 	ldbu	r2,-4(fp)
    6f58:	1004913a 	slli	r2,r2,4
    6f5c:	1884b03a 	or	r2,r3,r2
}
    6f60:	e037883a 	mov	sp,fp
    6f64:	df000017 	ldw	fp,0(sp)
    6f68:	dec00104 	addi	sp,sp,4
    6f6c:	f800283a 	ret

00006f70 <JPnn>:

void JPnn(CPU* cpu) {
    6f70:	defffc04 	addi	sp,sp,-16
    6f74:	dfc00315 	stw	ra,12(sp)
    6f78:	df000215 	stw	fp,8(sp)
    6f7c:	dc000115 	stw	r16,4(sp)
    6f80:	df000204 	addi	fp,sp,8
    6f84:	e13ffe15 	stw	r4,-8(fp)
    wr16(cpu, PC, ((0x0000 + readData(rr16(cpu, PC) + 1)) << 8) + readData(rr16(cpu, PC)));
    6f88:	01400344 	movi	r5,13
    6f8c:	e13ffe17 	ldw	r4,-8(fp)
    6f90:	00029e80 	call	29e8 <rr16>
    6f94:	10800044 	addi	r2,r2,1
    6f98:	10bfffcc 	andi	r2,r2,65535
    6f9c:	1009883a 	mov	r4,r2
    6fa0:	000026c0 	call	26c <readData>
    6fa4:	10803fcc 	andi	r2,r2,255
    6fa8:	1004923a 	slli	r2,r2,8
    6fac:	1021883a 	mov	r16,r2
    6fb0:	01400344 	movi	r5,13
    6fb4:	e13ffe17 	ldw	r4,-8(fp)
    6fb8:	00029e80 	call	29e8 <rr16>
    6fbc:	10bfffcc 	andi	r2,r2,65535
    6fc0:	1009883a 	mov	r4,r2
    6fc4:	000026c0 	call	26c <readData>
    6fc8:	10803fcc 	andi	r2,r2,255
    6fcc:	8085883a 	add	r2,r16,r2
    6fd0:	10bfffcc 	andi	r2,r2,65535
    6fd4:	100d883a 	mov	r6,r2
    6fd8:	01400344 	movi	r5,13
    6fdc:	e13ffe17 	ldw	r4,-8(fp)
    6fe0:	0002c780 	call	2c78 <wr16>
    cpu->clock.c += 16;
    6fe4:	e0bffe17 	ldw	r2,-8(fp)
    6fe8:	10800017 	ldw	r2,0(r2)
    6fec:	10c00404 	addi	r3,r2,16
    6ff0:	e0bffe17 	ldw	r2,-8(fp)
    6ff4:	10c00015 	stw	r3,0(r2)
}
    6ff8:	0001883a 	nop
    6ffc:	e6ffff04 	addi	sp,fp,-4
    7000:	dfc00217 	ldw	ra,8(sp)
    7004:	df000117 	ldw	fp,4(sp)
    7008:	dc000017 	ldw	r16,0(sp)
    700c:	dec00304 	addi	sp,sp,12
    7010:	f800283a 	ret

00007014 <testFlag>:

int testFlag(CPU* cpu, cond_code cc) {
    7014:	defffc04 	addi	sp,sp,-16
    7018:	df000315 	stw	fp,12(sp)
    701c:	df000304 	addi	fp,sp,12
    7020:	e13ffe15 	stw	r4,-8(fp)
    7024:	e17fff15 	stw	r5,-4(fp)
    byte test = 1;
    7028:	00800044 	movi	r2,1
    702c:	e0bffd05 	stb	r2,-12(fp)
    byte mask = 0x10;
    7030:	00800404 	movi	r2,16
    7034:	e0bffd45 	stb	r2,-11(fp)
    if (cc == NC || cc == NZ) test = 0;
    7038:	e0bfff17 	ldw	r2,-4(fp)
    703c:	10800060 	cmpeqi	r2,r2,1
    7040:	1000021e 	bne	r2,zero,704c <testFlag+0x38>
    7044:	e0bfff17 	ldw	r2,-4(fp)
    7048:	1000011e 	bne	r2,zero,7050 <testFlag+0x3c>
    704c:	e03ffd05 	stb	zero,-12(fp)
    if (cc == NZ || cc == Z) mask = 0x80;
    7050:	e0bfff17 	ldw	r2,-4(fp)
    7054:	10000326 	beq	r2,zero,7064 <testFlag+0x50>
    7058:	e0bfff17 	ldw	r2,-4(fp)
    705c:	10800098 	cmpnei	r2,r2,2
    7060:	1000021e 	bne	r2,zero,706c <testFlag+0x58>
    7064:	00bfe004 	movi	r2,-128
    7068:	e0bffd45 	stb	r2,-11(fp)

    byte c1 = (test && (cpu->registers.f & mask)) ? 1 : 0;
    706c:	e0bffd03 	ldbu	r2,-12(fp)
    7070:	10000826 	beq	r2,zero,7094 <testFlag+0x80>
    7074:	e0bffe17 	ldw	r2,-8(fp)
    7078:	10c003c3 	ldbu	r3,15(r2)
    707c:	e0bffd43 	ldbu	r2,-11(fp)
    7080:	1884703a 	and	r2,r3,r2
    7084:	10803fcc 	andi	r2,r2,255
    7088:	10000226 	beq	r2,zero,7094 <testFlag+0x80>
    708c:	00800044 	movi	r2,1
    7090:	00000106 	br	7098 <testFlag+0x84>
    7094:	0005883a 	mov	r2,zero
    7098:	e0bffd85 	stb	r2,-10(fp)
    byte c2 = !(test || (cpu->registers.f & mask)) ? 1 : 0;
    709c:	e0bffd03 	ldbu	r2,-12(fp)
    70a0:	1000081e 	bne	r2,zero,70c4 <testFlag+0xb0>
    70a4:	e0bffe17 	ldw	r2,-8(fp)
    70a8:	10c003c3 	ldbu	r3,15(r2)
    70ac:	e0bffd43 	ldbu	r2,-11(fp)
    70b0:	1884703a 	and	r2,r3,r2
    70b4:	10803fcc 	andi	r2,r2,255
    70b8:	1000021e 	bne	r2,zero,70c4 <testFlag+0xb0>
    70bc:	00800044 	movi	r2,1
    70c0:	00000106 	br	70c8 <testFlag+0xb4>
    70c4:	0005883a 	mov	r2,zero
    70c8:	e0bffdc5 	stb	r2,-9(fp)

    return c1 || c2;
    70cc:	e0bffd83 	ldbu	r2,-10(fp)
    70d0:	1000021e 	bne	r2,zero,70dc <testFlag+0xc8>
    70d4:	e0bffdc3 	ldbu	r2,-9(fp)
    70d8:	10000226 	beq	r2,zero,70e4 <testFlag+0xd0>
    70dc:	00800044 	movi	r2,1
    70e0:	00000106 	br	70e8 <testFlag+0xd4>
    70e4:	0005883a 	mov	r2,zero
}
    70e8:	e037883a 	mov	sp,fp
    70ec:	df000017 	ldw	fp,0(sp)
    70f0:	dec00104 	addi	sp,sp,4
    70f4:	f800283a 	ret

000070f8 <JRccn>:

void JRccn(CPU* cpu, cond_code cc) {
    70f8:	defffa04 	addi	sp,sp,-24
    70fc:	dfc00515 	stw	ra,20(sp)
    7100:	df000415 	stw	fp,16(sp)
    7104:	df000404 	addi	fp,sp,16
    7108:	e13ffe15 	stw	r4,-8(fp)
    710c:	e17fff15 	stw	r5,-4(fp)
    if (testFlag(cpu, cc) == 1) {
    7110:	e17fff17 	ldw	r5,-4(fp)
    7114:	e13ffe17 	ldw	r4,-8(fp)
    7118:	00070140 	call	7014 <testFlag>
    711c:	10800058 	cmpnei	r2,r2,1
    7120:	10001b1e 	bne	r2,zero,7190 <JRccn+0x98>
        byte v = readData(cpu->registers.pc++);
    7124:	e0bffe17 	ldw	r2,-8(fp)
    7128:	1080040b 	ldhu	r2,16(r2)
    712c:	10c00044 	addi	r3,r2,1
    7130:	1809883a 	mov	r4,r3
    7134:	e0fffe17 	ldw	r3,-8(fp)
    7138:	1900040d 	sth	r4,16(r3)
    713c:	10bfffcc 	andi	r2,r2,65535
    7140:	1009883a 	mov	r4,r2
    7144:	000026c0 	call	26c <readData>
    7148:	e0bffc05 	stb	r2,-16(fp)
        int r = getSignedValue(v);
    714c:	e0bffc03 	ldbu	r2,-16(fp)
    7150:	1009883a 	mov	r4,r2
    7154:	000327c0 	call	327c <getSignedValue>
    7158:	e0bffd15 	stw	r2,-12(fp)
        cpu->registers.pc += r;
    715c:	e0bffe17 	ldw	r2,-8(fp)
    7160:	1080040b 	ldhu	r2,16(r2)
    7164:	e0fffd17 	ldw	r3,-12(fp)
    7168:	10c5883a 	add	r2,r2,r3
    716c:	1007883a 	mov	r3,r2
    7170:	e0bffe17 	ldw	r2,-8(fp)
    7174:	10c0040d 	sth	r3,16(r2)
        cpu->clock.c += 4;
    7178:	e0bffe17 	ldw	r2,-8(fp)
    717c:	10800017 	ldw	r2,0(r2)
    7180:	10c00104 	addi	r3,r2,4
    7184:	e0bffe17 	ldw	r2,-8(fp)
    7188:	10c00015 	stw	r3,0(r2)
    718c:	00000606 	br	71a8 <JRccn+0xb0>
    }
    else {
        cpu->registers.pc++;
    7190:	e0bffe17 	ldw	r2,-8(fp)
    7194:	1080040b 	ldhu	r2,16(r2)
    7198:	10800044 	addi	r2,r2,1
    719c:	1007883a 	mov	r3,r2
    71a0:	e0bffe17 	ldw	r2,-8(fp)
    71a4:	10c0040d 	sth	r3,16(r2)
    }
    cpu->clock.c += 8;
    71a8:	e0bffe17 	ldw	r2,-8(fp)
    71ac:	10800017 	ldw	r2,0(r2)
    71b0:	10c00204 	addi	r3,r2,8
    71b4:	e0bffe17 	ldw	r2,-8(fp)
    71b8:	10c00015 	stw	r3,0(r2)
}
    71bc:	0001883a 	nop
    71c0:	e037883a 	mov	sp,fp
    71c4:	dfc00117 	ldw	ra,4(sp)
    71c8:	df000017 	ldw	fp,0(sp)
    71cc:	dec00204 	addi	sp,sp,8
    71d0:	f800283a 	ret

000071d4 <JPccnn>:

void JPccnn(CPU* cpu, cond_code cc) {
    71d4:	defffb04 	addi	sp,sp,-20
    71d8:	dfc00415 	stw	ra,16(sp)
    71dc:	df000315 	stw	fp,12(sp)
    71e0:	dc000215 	stw	r16,8(sp)
    71e4:	df000304 	addi	fp,sp,12
    71e8:	e13ffd15 	stw	r4,-12(fp)
    71ec:	e17ffe15 	stw	r5,-8(fp)
    if (testFlag(cpu, cc) == 1) {
    71f0:	e17ffe17 	ldw	r5,-8(fp)
    71f4:	e13ffd17 	ldw	r4,-12(fp)
    71f8:	00070140 	call	7014 <testFlag>
    71fc:	10800058 	cmpnei	r2,r2,1
    7200:	10001b1e 	bne	r2,zero,7270 <JPccnn+0x9c>
        wr16(cpu, PC, ((0x0000 + readData(cpu->registers.pc + 1)) << 8) + readData(cpu->registers.pc));
    7204:	e0bffd17 	ldw	r2,-12(fp)
    7208:	1080040b 	ldhu	r2,16(r2)
    720c:	10800044 	addi	r2,r2,1
    7210:	10bfffcc 	andi	r2,r2,65535
    7214:	1009883a 	mov	r4,r2
    7218:	000026c0 	call	26c <readData>
    721c:	10803fcc 	andi	r2,r2,255
    7220:	1004923a 	slli	r2,r2,8
    7224:	1021883a 	mov	r16,r2
    7228:	e0bffd17 	ldw	r2,-12(fp)
    722c:	1080040b 	ldhu	r2,16(r2)
    7230:	10bfffcc 	andi	r2,r2,65535
    7234:	1009883a 	mov	r4,r2
    7238:	000026c0 	call	26c <readData>
    723c:	10803fcc 	andi	r2,r2,255
    7240:	8085883a 	add	r2,r16,r2
    7244:	10bfffcc 	andi	r2,r2,65535
    7248:	100d883a 	mov	r6,r2
    724c:	01400344 	movi	r5,13
    7250:	e13ffd17 	ldw	r4,-12(fp)
    7254:	0002c780 	call	2c78 <wr16>
        cpu->clock.c += 4;
    7258:	e0bffd17 	ldw	r2,-12(fp)
    725c:	10800017 	ldw	r2,0(r2)
    7260:	10c00104 	addi	r3,r2,4
    7264:	e0bffd17 	ldw	r2,-12(fp)
    7268:	10c00015 	stw	r3,0(r2)
    726c:	00000606 	br	7288 <JPccnn+0xb4>
    }
    else {
        cpu->registers.pc += 2;
    7270:	e0bffd17 	ldw	r2,-12(fp)
    7274:	1080040b 	ldhu	r2,16(r2)
    7278:	10800084 	addi	r2,r2,2
    727c:	1007883a 	mov	r3,r2
    7280:	e0bffd17 	ldw	r2,-12(fp)
    7284:	10c0040d 	sth	r3,16(r2)
    }

    cpu->clock.c += 12;
    7288:	e0bffd17 	ldw	r2,-12(fp)
    728c:	10800017 	ldw	r2,0(r2)
    7290:	10c00304 	addi	r3,r2,12
    7294:	e0bffd17 	ldw	r2,-12(fp)
    7298:	10c00015 	stw	r3,0(r2)
}
    729c:	0001883a 	nop
    72a0:	e6ffff04 	addi	sp,fp,-4
    72a4:	dfc00217 	ldw	ra,8(sp)
    72a8:	df000117 	ldw	fp,4(sp)
    72ac:	dc000017 	ldw	r16,0(sp)
    72b0:	dec00304 	addi	sp,sp,12
    72b4:	f800283a 	ret

000072b8 <JPrr>:

void JPrr(CPU* cpu, reg_name r1, reg_name r2) {
    72b8:	defffa04 	addi	sp,sp,-24
    72bc:	dfc00515 	stw	ra,20(sp)
    72c0:	df000415 	stw	fp,16(sp)
    72c4:	dc000315 	stw	r16,12(sp)
    72c8:	df000404 	addi	fp,sp,16
    72cc:	e13ffc15 	stw	r4,-16(fp)
    72d0:	e17ffd15 	stw	r5,-12(fp)
    72d4:	e1bffe15 	stw	r6,-8(fp)
    wr16(cpu, PC, ((0x0000 + rr8(cpu, r1)) + rr8(cpu, r2)));
    72d8:	e17ffd17 	ldw	r5,-12(fp)
    72dc:	e13ffc17 	ldw	r4,-16(fp)
    72e0:	00029180 	call	2918 <rr8>
    72e4:	14003fcc 	andi	r16,r2,255
    72e8:	e17ffe17 	ldw	r5,-8(fp)
    72ec:	e13ffc17 	ldw	r4,-16(fp)
    72f0:	00029180 	call	2918 <rr8>
    72f4:	10803fcc 	andi	r2,r2,255
    72f8:	8085883a 	add	r2,r16,r2
    72fc:	10bfffcc 	andi	r2,r2,65535
    7300:	100d883a 	mov	r6,r2
    7304:	01400344 	movi	r5,13
    7308:	e13ffc17 	ldw	r4,-16(fp)
    730c:	0002c780 	call	2c78 <wr16>
    cpu->clock.c += 4;
    7310:	e0bffc17 	ldw	r2,-16(fp)
    7314:	10800017 	ldw	r2,0(r2)
    7318:	10c00104 	addi	r3,r2,4
    731c:	e0bffc17 	ldw	r2,-16(fp)
    7320:	10c00015 	stw	r3,0(r2)
}
    7324:	0001883a 	nop
    7328:	e6ffff04 	addi	sp,fp,-4
    732c:	dfc00217 	ldw	ra,8(sp)
    7330:	df000117 	ldw	fp,4(sp)
    7334:	dc000017 	ldw	r16,0(sp)
    7338:	dec00304 	addi	sp,sp,12
    733c:	f800283a 	ret

00007340 <JRn>:

void JRn(CPU* cpu) {
    7340:	defffc04 	addi	sp,sp,-16
    7344:	dfc00315 	stw	ra,12(sp)
    7348:	df000215 	stw	fp,8(sp)
    734c:	df000204 	addi	fp,sp,8
    7350:	e13fff15 	stw	r4,-4(fp)
    byte v = readData(cpu->registers.pc++);
    7354:	e0bfff17 	ldw	r2,-4(fp)
    7358:	1080040b 	ldhu	r2,16(r2)
    735c:	10c00044 	addi	r3,r2,1
    7360:	1809883a 	mov	r4,r3
    7364:	e0ffff17 	ldw	r3,-4(fp)
    7368:	1900040d 	sth	r4,16(r3)
    736c:	10bfffcc 	andi	r2,r2,65535
    7370:	1009883a 	mov	r4,r2
    7374:	000026c0 	call	26c <readData>
    7378:	e0bffe05 	stb	r2,-8(fp)
    v = getSignedValue(v);
    737c:	e0bffe03 	ldbu	r2,-8(fp)
    7380:	1009883a 	mov	r4,r2
    7384:	000327c0 	call	327c <getSignedValue>
    7388:	e0bffe05 	stb	r2,-8(fp)
    cpu->registers.pc += v;
    738c:	e0bfff17 	ldw	r2,-4(fp)
    7390:	10c0040b 	ldhu	r3,16(r2)
    7394:	e0bffe03 	ldbu	r2,-8(fp)
    7398:	1885883a 	add	r2,r3,r2
    739c:	1007883a 	mov	r3,r2
    73a0:	e0bfff17 	ldw	r2,-4(fp)
    73a4:	10c0040d 	sth	r3,16(r2)
    cpu->clock.c += 12;
    73a8:	e0bfff17 	ldw	r2,-4(fp)
    73ac:	10800017 	ldw	r2,0(r2)
    73b0:	10c00304 	addi	r3,r2,12
    73b4:	e0bfff17 	ldw	r2,-4(fp)
    73b8:	10c00015 	stw	r3,0(r2)
}
    73bc:	0001883a 	nop
    73c0:	e037883a 	mov	sp,fp
    73c4:	dfc00117 	ldw	ra,4(sp)
    73c8:	df000017 	ldw	fp,0(sp)
    73cc:	dec00204 	addi	sp,sp,8
    73d0:	f800283a 	ret

000073d4 <PUSHrr>:

void PUSHrr(CPU* cpu, reg_name r1, reg_name r2) {
    73d4:	defffa04 	addi	sp,sp,-24
    73d8:	dfc00515 	stw	ra,20(sp)
    73dc:	df000415 	stw	fp,16(sp)
    73e0:	dc000315 	stw	r16,12(sp)
    73e4:	df000404 	addi	fp,sp,16
    73e8:	e13ffc15 	stw	r4,-16(fp)
    73ec:	e17ffd15 	stw	r5,-12(fp)
    73f0:	e1bffe15 	stw	r6,-8(fp)
    wr16(cpu, SP, cpu->registers.sp - 1);
    73f4:	e0bffc17 	ldw	r2,-16(fp)
    73f8:	1080048b 	ldhu	r2,18(r2)
    73fc:	10bfffc4 	addi	r2,r2,-1
    7400:	10bfffcc 	andi	r2,r2,65535
    7404:	100d883a 	mov	r6,r2
    7408:	01400304 	movi	r5,12
    740c:	e13ffc17 	ldw	r4,-16(fp)
    7410:	0002c780 	call	2c78 <wr16>
    writeData(cpu->registers.sp, rr8(cpu, r1));
    7414:	e0bffc17 	ldw	r2,-16(fp)
    7418:	1080048b 	ldhu	r2,18(r2)
    741c:	143fffcc 	andi	r16,r2,65535
    7420:	e17ffd17 	ldw	r5,-12(fp)
    7424:	e13ffc17 	ldw	r4,-16(fp)
    7428:	00029180 	call	2918 <rr8>
    742c:	10803fcc 	andi	r2,r2,255
    7430:	100b883a 	mov	r5,r2
    7434:	8009883a 	mov	r4,r16
    7438:	00003640 	call	364 <writeData>
    wr16(cpu, SP, cpu->registers.sp - 1);
    743c:	e0bffc17 	ldw	r2,-16(fp)
    7440:	1080048b 	ldhu	r2,18(r2)
    7444:	10bfffc4 	addi	r2,r2,-1
    7448:	10bfffcc 	andi	r2,r2,65535
    744c:	100d883a 	mov	r6,r2
    7450:	01400304 	movi	r5,12
    7454:	e13ffc17 	ldw	r4,-16(fp)
    7458:	0002c780 	call	2c78 <wr16>
    writeData(cpu->registers.sp, rr8(cpu, r2));
    745c:	e0bffc17 	ldw	r2,-16(fp)
    7460:	1080048b 	ldhu	r2,18(r2)
    7464:	143fffcc 	andi	r16,r2,65535
    7468:	e17ffe17 	ldw	r5,-8(fp)
    746c:	e13ffc17 	ldw	r4,-16(fp)
    7470:	00029180 	call	2918 <rr8>
    7474:	10803fcc 	andi	r2,r2,255
    7478:	100b883a 	mov	r5,r2
    747c:	8009883a 	mov	r4,r16
    7480:	00003640 	call	364 <writeData>
    cpu->clock.c += 16;
    7484:	e0bffc17 	ldw	r2,-16(fp)
    7488:	10800017 	ldw	r2,0(r2)
    748c:	10c00404 	addi	r3,r2,16
    7490:	e0bffc17 	ldw	r2,-16(fp)
    7494:	10c00015 	stw	r3,0(r2)
}
    7498:	0001883a 	nop
    749c:	e6ffff04 	addi	sp,fp,-4
    74a0:	dfc00217 	ldw	ra,8(sp)
    74a4:	df000117 	ldw	fp,4(sp)
    74a8:	dc000017 	ldw	r16,0(sp)
    74ac:	dec00304 	addi	sp,sp,12
    74b0:	f800283a 	ret

000074b4 <POPrr>:

void POPrr(CPU* cpu, reg_name r1, reg_name r2) {
    74b4:	defffb04 	addi	sp,sp,-20
    74b8:	dfc00415 	stw	ra,16(sp)
    74bc:	df000315 	stw	fp,12(sp)
    74c0:	df000304 	addi	fp,sp,12
    74c4:	e13ffd15 	stw	r4,-12(fp)
    74c8:	e17ffe15 	stw	r5,-8(fp)
    74cc:	e1bfff15 	stw	r6,-4(fp)
    wr8(cpu, r2, readData(cpu->registers.sp));
    74d0:	e0bffd17 	ldw	r2,-12(fp)
    74d4:	1080048b 	ldhu	r2,18(r2)
    74d8:	10bfffcc 	andi	r2,r2,65535
    74dc:	1009883a 	mov	r4,r2
    74e0:	000026c0 	call	26c <readData>
    74e4:	10803fcc 	andi	r2,r2,255
    74e8:	100d883a 	mov	r6,r2
    74ec:	e17fff17 	ldw	r5,-4(fp)
    74f0:	e13ffd17 	ldw	r4,-12(fp)
    74f4:	0002b7c0 	call	2b7c <wr8>
    wr16(cpu, SP, cpu->registers.sp + 1);
    74f8:	e0bffd17 	ldw	r2,-12(fp)
    74fc:	1080048b 	ldhu	r2,18(r2)
    7500:	10800044 	addi	r2,r2,1
    7504:	10bfffcc 	andi	r2,r2,65535
    7508:	100d883a 	mov	r6,r2
    750c:	01400304 	movi	r5,12
    7510:	e13ffd17 	ldw	r4,-12(fp)
    7514:	0002c780 	call	2c78 <wr16>
    wr8(cpu, r1, readData(cpu->registers.sp));
    7518:	e0bffd17 	ldw	r2,-12(fp)
    751c:	1080048b 	ldhu	r2,18(r2)
    7520:	10bfffcc 	andi	r2,r2,65535
    7524:	1009883a 	mov	r4,r2
    7528:	000026c0 	call	26c <readData>
    752c:	10803fcc 	andi	r2,r2,255
    7530:	100d883a 	mov	r6,r2
    7534:	e17ffe17 	ldw	r5,-8(fp)
    7538:	e13ffd17 	ldw	r4,-12(fp)
    753c:	0002b7c0 	call	2b7c <wr8>
    wr16(cpu, SP, cpu->registers.sp + 1);
    7540:	e0bffd17 	ldw	r2,-12(fp)
    7544:	1080048b 	ldhu	r2,18(r2)
    7548:	10800044 	addi	r2,r2,1
    754c:	10bfffcc 	andi	r2,r2,65535
    7550:	100d883a 	mov	r6,r2
    7554:	01400304 	movi	r5,12
    7558:	e13ffd17 	ldw	r4,-12(fp)
    755c:	0002c780 	call	2c78 <wr16>
    cpu->clock.c += 12;
    7560:	e0bffd17 	ldw	r2,-12(fp)
    7564:	10800017 	ldw	r2,0(r2)
    7568:	10c00304 	addi	r3,r2,12
    756c:	e0bffd17 	ldw	r2,-12(fp)
    7570:	10c00015 	stw	r3,0(r2)
}
    7574:	0001883a 	nop
    7578:	e037883a 	mov	sp,fp
    757c:	dfc00117 	ldw	ra,4(sp)
    7580:	df000017 	ldw	fp,0(sp)
    7584:	dec00204 	addi	sp,sp,8
    7588:	f800283a 	ret

0000758c <RSTn>:

void RSTn(CPU* cpu, word n) {
    758c:	defffc04 	addi	sp,sp,-16
    7590:	dfc00315 	stw	ra,12(sp)
    7594:	df000215 	stw	fp,8(sp)
    7598:	df000204 	addi	fp,sp,8
    759c:	e13ffe15 	stw	r4,-8(fp)
    75a0:	2805883a 	mov	r2,r5
    75a4:	e0bfff0d 	sth	r2,-4(fp)
    wr16(cpu, SP, cpu->registers.sp - 1);
    75a8:	e0bffe17 	ldw	r2,-8(fp)
    75ac:	1080048b 	ldhu	r2,18(r2)
    75b0:	10bfffc4 	addi	r2,r2,-1
    75b4:	10bfffcc 	andi	r2,r2,65535
    75b8:	100d883a 	mov	r6,r2
    75bc:	01400304 	movi	r5,12
    75c0:	e13ffe17 	ldw	r4,-8(fp)
    75c4:	0002c780 	call	2c78 <wr16>
    writeData(cpu->registers.sp, cpu->registers.pc >> 8);
    75c8:	e0bffe17 	ldw	r2,-8(fp)
    75cc:	1080048b 	ldhu	r2,18(r2)
    75d0:	10ffffcc 	andi	r3,r2,65535
    75d4:	e0bffe17 	ldw	r2,-8(fp)
    75d8:	1080040b 	ldhu	r2,16(r2)
    75dc:	10bfffcc 	andi	r2,r2,65535
    75e0:	1004d23a 	srli	r2,r2,8
    75e4:	10803fcc 	andi	r2,r2,255
    75e8:	100b883a 	mov	r5,r2
    75ec:	1809883a 	mov	r4,r3
    75f0:	00003640 	call	364 <writeData>
    wr16(cpu, SP, cpu->registers.sp - 1);
    75f4:	e0bffe17 	ldw	r2,-8(fp)
    75f8:	1080048b 	ldhu	r2,18(r2)
    75fc:	10bfffc4 	addi	r2,r2,-1
    7600:	10bfffcc 	andi	r2,r2,65535
    7604:	100d883a 	mov	r6,r2
    7608:	01400304 	movi	r5,12
    760c:	e13ffe17 	ldw	r4,-8(fp)
    7610:	0002c780 	call	2c78 <wr16>
    writeData(cpu->registers.sp, cpu->registers.pc & 0xFF);
    7614:	e0bffe17 	ldw	r2,-8(fp)
    7618:	1080048b 	ldhu	r2,18(r2)
    761c:	10ffffcc 	andi	r3,r2,65535
    7620:	e0bffe17 	ldw	r2,-8(fp)
    7624:	1080040b 	ldhu	r2,16(r2)
    7628:	10803fcc 	andi	r2,r2,255
    762c:	100b883a 	mov	r5,r2
    7630:	1809883a 	mov	r4,r3
    7634:	00003640 	call	364 <writeData>
    wr16(cpu, PC, n);
    7638:	e0bfff0b 	ldhu	r2,-4(fp)
    763c:	100d883a 	mov	r6,r2
    7640:	01400344 	movi	r5,13
    7644:	e13ffe17 	ldw	r4,-8(fp)
    7648:	0002c780 	call	2c78 <wr16>
    cpu->clock.c += 16;
    764c:	e0bffe17 	ldw	r2,-8(fp)
    7650:	10800017 	ldw	r2,0(r2)
    7654:	10c00404 	addi	r3,r2,16
    7658:	e0bffe17 	ldw	r2,-8(fp)
    765c:	10c00015 	stw	r3,0(r2)
}
    7660:	0001883a 	nop
    7664:	e037883a 	mov	sp,fp
    7668:	dfc00117 	ldw	ra,4(sp)
    766c:	df000017 	ldw	fp,0(sp)
    7670:	dec00204 	addi	sp,sp,8
    7674:	f800283a 	ret

00007678 <RET>:

void RET(CPU* cpu) {
    7678:	defffd04 	addi	sp,sp,-12
    767c:	dfc00215 	stw	ra,8(sp)
    7680:	df000115 	stw	fp,4(sp)
    7684:	df000104 	addi	fp,sp,4
    7688:	e13fff15 	stw	r4,-4(fp)
    wr16(cpu, PC, readData(cpu->registers.sp));
    768c:	e0bfff17 	ldw	r2,-4(fp)
    7690:	1080048b 	ldhu	r2,18(r2)
    7694:	10bfffcc 	andi	r2,r2,65535
    7698:	1009883a 	mov	r4,r2
    769c:	000026c0 	call	26c <readData>
    76a0:	10803fcc 	andi	r2,r2,255
    76a4:	100d883a 	mov	r6,r2
    76a8:	01400344 	movi	r5,13
    76ac:	e13fff17 	ldw	r4,-4(fp)
    76b0:	0002c780 	call	2c78 <wr16>
    wr16(cpu, SP, cpu->registers.sp + 1);
    76b4:	e0bfff17 	ldw	r2,-4(fp)
    76b8:	1080048b 	ldhu	r2,18(r2)
    76bc:	10800044 	addi	r2,r2,1
    76c0:	10bfffcc 	andi	r2,r2,65535
    76c4:	100d883a 	mov	r6,r2
    76c8:	01400304 	movi	r5,12
    76cc:	e13fff17 	ldw	r4,-4(fp)
    76d0:	0002c780 	call	2c78 <wr16>
    wr16(cpu, PC, (0x0000 + readData(cpu->registers.sp)) << 8);
    76d4:	e0bfff17 	ldw	r2,-4(fp)
    76d8:	1080048b 	ldhu	r2,18(r2)
    76dc:	10bfffcc 	andi	r2,r2,65535
    76e0:	1009883a 	mov	r4,r2
    76e4:	000026c0 	call	26c <readData>
    76e8:	10803fcc 	andi	r2,r2,255
    76ec:	1004923a 	slli	r2,r2,8
    76f0:	10bfffcc 	andi	r2,r2,65535
    76f4:	100d883a 	mov	r6,r2
    76f8:	01400344 	movi	r5,13
    76fc:	e13fff17 	ldw	r4,-4(fp)
    7700:	0002c780 	call	2c78 <wr16>
    wr16(cpu, SP, cpu->registers.sp + 1);
    7704:	e0bfff17 	ldw	r2,-4(fp)
    7708:	1080048b 	ldhu	r2,18(r2)
    770c:	10800044 	addi	r2,r2,1
    7710:	10bfffcc 	andi	r2,r2,65535
    7714:	100d883a 	mov	r6,r2
    7718:	01400304 	movi	r5,12
    771c:	e13fff17 	ldw	r4,-4(fp)
    7720:	0002c780 	call	2c78 <wr16>
    cpu->clock.c += 16;
    7724:	e0bfff17 	ldw	r2,-4(fp)
    7728:	10800017 	ldw	r2,0(r2)
    772c:	10c00404 	addi	r3,r2,16
    7730:	e0bfff17 	ldw	r2,-4(fp)
    7734:	10c00015 	stw	r3,0(r2)
}
    7738:	0001883a 	nop
    773c:	e037883a 	mov	sp,fp
    7740:	dfc00117 	ldw	ra,4(sp)
    7744:	df000017 	ldw	fp,0(sp)
    7748:	dec00204 	addi	sp,sp,8
    774c:	f800283a 	ret

00007750 <RETcc>:

void RETcc(CPU* cpu, cond_code cc) {
    7750:	defffc04 	addi	sp,sp,-16
    7754:	dfc00315 	stw	ra,12(sp)
    7758:	df000215 	stw	fp,8(sp)
    775c:	df000204 	addi	fp,sp,8
    7760:	e13ffe15 	stw	r4,-8(fp)
    7764:	e17fff15 	stw	r5,-4(fp)
    if (testFlag(cpu, cc) == 1) {
    7768:	e17fff17 	ldw	r5,-4(fp)
    776c:	e13ffe17 	ldw	r4,-8(fp)
    7770:	00070140 	call	7014 <testFlag>
    7774:	10800058 	cmpnei	r2,r2,1
    7778:	10002b1e 	bne	r2,zero,7828 <RETcc+0xd8>
        wr16(cpu, PC, readData(cpu->registers.sp));
    777c:	e0bffe17 	ldw	r2,-8(fp)
    7780:	1080048b 	ldhu	r2,18(r2)
    7784:	10bfffcc 	andi	r2,r2,65535
    7788:	1009883a 	mov	r4,r2
    778c:	000026c0 	call	26c <readData>
    7790:	10803fcc 	andi	r2,r2,255
    7794:	100d883a 	mov	r6,r2
    7798:	01400344 	movi	r5,13
    779c:	e13ffe17 	ldw	r4,-8(fp)
    77a0:	0002c780 	call	2c78 <wr16>
        wr16(cpu, SP, cpu->registers.sp + 1);
    77a4:	e0bffe17 	ldw	r2,-8(fp)
    77a8:	1080048b 	ldhu	r2,18(r2)
    77ac:	10800044 	addi	r2,r2,1
    77b0:	10bfffcc 	andi	r2,r2,65535
    77b4:	100d883a 	mov	r6,r2
    77b8:	01400304 	movi	r5,12
    77bc:	e13ffe17 	ldw	r4,-8(fp)
    77c0:	0002c780 	call	2c78 <wr16>
        wr16(cpu, PC, (0x0000 + readData(cpu->registers.sp)) << 8);
    77c4:	e0bffe17 	ldw	r2,-8(fp)
    77c8:	1080048b 	ldhu	r2,18(r2)
    77cc:	10bfffcc 	andi	r2,r2,65535
    77d0:	1009883a 	mov	r4,r2
    77d4:	000026c0 	call	26c <readData>
    77d8:	10803fcc 	andi	r2,r2,255
    77dc:	1004923a 	slli	r2,r2,8
    77e0:	10bfffcc 	andi	r2,r2,65535
    77e4:	100d883a 	mov	r6,r2
    77e8:	01400344 	movi	r5,13
    77ec:	e13ffe17 	ldw	r4,-8(fp)
    77f0:	0002c780 	call	2c78 <wr16>
        wr16(cpu, SP, cpu->registers.sp + 1);
    77f4:	e0bffe17 	ldw	r2,-8(fp)
    77f8:	1080048b 	ldhu	r2,18(r2)
    77fc:	10800044 	addi	r2,r2,1
    7800:	10bfffcc 	andi	r2,r2,65535
    7804:	100d883a 	mov	r6,r2
    7808:	01400304 	movi	r5,12
    780c:	e13ffe17 	ldw	r4,-8(fp)
    7810:	0002c780 	call	2c78 <wr16>
        cpu->clock.c += 12;
    7814:	e0bffe17 	ldw	r2,-8(fp)
    7818:	10800017 	ldw	r2,0(r2)
    781c:	10c00304 	addi	r3,r2,12
    7820:	e0bffe17 	ldw	r2,-8(fp)
    7824:	10c00015 	stw	r3,0(r2)
    }
    cpu->clock.c += 8;
    7828:	e0bffe17 	ldw	r2,-8(fp)
    782c:	10800017 	ldw	r2,0(r2)
    7830:	10c00204 	addi	r3,r2,8
    7834:	e0bffe17 	ldw	r2,-8(fp)
    7838:	10c00015 	stw	r3,0(r2)
}
    783c:	0001883a 	nop
    7840:	e037883a 	mov	sp,fp
    7844:	dfc00117 	ldw	ra,4(sp)
    7848:	df000017 	ldw	fp,0(sp)
    784c:	dec00204 	addi	sp,sp,8
    7850:	f800283a 	ret

00007854 <CALLnn>:

void _CALLnn(CPU* cpu);

void CALLnn(CPU* cpu) {
    7854:	defffd04 	addi	sp,sp,-12
    7858:	dfc00215 	stw	ra,8(sp)
    785c:	df000115 	stw	fp,4(sp)
    7860:	df000104 	addi	fp,sp,4
    7864:	e13fff15 	stw	r4,-4(fp)
    _CALLnn(cpu);
    7868:	e13fff17 	ldw	r4,-4(fp)
    786c:	000792c0 	call	792c <_CALLnn>
    cpu->clock.c += 24;
    7870:	e0bfff17 	ldw	r2,-4(fp)
    7874:	10800017 	ldw	r2,0(r2)
    7878:	10c00604 	addi	r3,r2,24
    787c:	e0bfff17 	ldw	r2,-4(fp)
    7880:	10c00015 	stw	r3,0(r2)
}
    7884:	0001883a 	nop
    7888:	e037883a 	mov	sp,fp
    788c:	dfc00117 	ldw	ra,4(sp)
    7890:	df000017 	ldw	fp,0(sp)
    7894:	dec00204 	addi	sp,sp,8
    7898:	f800283a 	ret

0000789c <CALLccnn>:

void CALLccnn(CPU* cpu, cond_code cc) {
    789c:	defffc04 	addi	sp,sp,-16
    78a0:	dfc00315 	stw	ra,12(sp)
    78a4:	df000215 	stw	fp,8(sp)
    78a8:	df000204 	addi	fp,sp,8
    78ac:	e13ffe15 	stw	r4,-8(fp)
    78b0:	e17fff15 	stw	r5,-4(fp)
    if (testFlag(cpu, cc) == 1) {
    78b4:	e17fff17 	ldw	r5,-4(fp)
    78b8:	e13ffe17 	ldw	r4,-8(fp)
    78bc:	00070140 	call	7014 <testFlag>
    78c0:	10800058 	cmpnei	r2,r2,1
    78c4:	1000081e 	bne	r2,zero,78e8 <CALLccnn+0x4c>
        _CALLnn(cpu);
    78c8:	e13ffe17 	ldw	r4,-8(fp)
    78cc:	000792c0 	call	792c <_CALLnn>
        cpu->clock.c += 12;
    78d0:	e0bffe17 	ldw	r2,-8(fp)
    78d4:	10800017 	ldw	r2,0(r2)
    78d8:	10c00304 	addi	r3,r2,12
    78dc:	e0bffe17 	ldw	r2,-8(fp)
    78e0:	10c00015 	stw	r3,0(r2)
    78e4:	00000606 	br	7900 <CALLccnn+0x64>
    }
    else {
        cpu->registers.pc += 2;
    78e8:	e0bffe17 	ldw	r2,-8(fp)
    78ec:	1080040b 	ldhu	r2,16(r2)
    78f0:	10800084 	addi	r2,r2,2
    78f4:	1007883a 	mov	r3,r2
    78f8:	e0bffe17 	ldw	r2,-8(fp)
    78fc:	10c0040d 	sth	r3,16(r2)
    }
    cpu->clock.c += 12;
    7900:	e0bffe17 	ldw	r2,-8(fp)
    7904:	10800017 	ldw	r2,0(r2)
    7908:	10c00304 	addi	r3,r2,12
    790c:	e0bffe17 	ldw	r2,-8(fp)
    7910:	10c00015 	stw	r3,0(r2)
}
    7914:	0001883a 	nop
    7918:	e037883a 	mov	sp,fp
    791c:	dfc00117 	ldw	ra,4(sp)
    7920:	df000017 	ldw	fp,0(sp)
    7924:	dec00204 	addi	sp,sp,8
    7928:	f800283a 	ret

0000792c <_CALLnn>:

void _CALLnn(CPU* cpu) {
    792c:	defffb04 	addi	sp,sp,-20
    7930:	dfc00415 	stw	ra,16(sp)
    7934:	df000315 	stw	fp,12(sp)
    7938:	dc000215 	stw	r16,8(sp)
    793c:	df000304 	addi	fp,sp,12
    7940:	e13ffe15 	stw	r4,-8(fp)
    wr16(cpu, SP, cpu->registers.sp - 1);
    7944:	e0bffe17 	ldw	r2,-8(fp)
    7948:	1080048b 	ldhu	r2,18(r2)
    794c:	10bfffc4 	addi	r2,r2,-1
    7950:	10bfffcc 	andi	r2,r2,65535
    7954:	100d883a 	mov	r6,r2
    7958:	01400304 	movi	r5,12
    795c:	e13ffe17 	ldw	r4,-8(fp)
    7960:	0002c780 	call	2c78 <wr16>
    writeData(cpu->registers.sp, ((cpu->registers.pc + 2) & 0xFF00) >> 8);
    7964:	e0bffe17 	ldw	r2,-8(fp)
    7968:	1080048b 	ldhu	r2,18(r2)
    796c:	10ffffcc 	andi	r3,r2,65535
    7970:	e0bffe17 	ldw	r2,-8(fp)
    7974:	1080040b 	ldhu	r2,16(r2)
    7978:	10bfffcc 	andi	r2,r2,65535
    797c:	10800084 	addi	r2,r2,2
    7980:	10bfc00c 	andi	r2,r2,65280
    7984:	1005d23a 	srai	r2,r2,8
    7988:	10803fcc 	andi	r2,r2,255
    798c:	100b883a 	mov	r5,r2
    7990:	1809883a 	mov	r4,r3
    7994:	00003640 	call	364 <writeData>
    wr16(cpu, SP, cpu->registers.sp - 1);
    7998:	e0bffe17 	ldw	r2,-8(fp)
    799c:	1080048b 	ldhu	r2,18(r2)
    79a0:	10bfffc4 	addi	r2,r2,-1
    79a4:	10bfffcc 	andi	r2,r2,65535
    79a8:	100d883a 	mov	r6,r2
    79ac:	01400304 	movi	r5,12
    79b0:	e13ffe17 	ldw	r4,-8(fp)
    79b4:	0002c780 	call	2c78 <wr16>
    writeData(cpu->registers.sp, ((cpu->registers.pc + 2) & 0x00FF));
    79b8:	e0bffe17 	ldw	r2,-8(fp)
    79bc:	1080048b 	ldhu	r2,18(r2)
    79c0:	10ffffcc 	andi	r3,r2,65535
    79c4:	e0bffe17 	ldw	r2,-8(fp)
    79c8:	1080040b 	ldhu	r2,16(r2)
    79cc:	10800084 	addi	r2,r2,2
    79d0:	10803fcc 	andi	r2,r2,255
    79d4:	100b883a 	mov	r5,r2
    79d8:	1809883a 	mov	r4,r3
    79dc:	00003640 	call	364 <writeData>
    word j = (0x0000 + readData(cpu->registers.pc)) + ((0x0000 + readData(cpu->registers.pc + 1)) << 8);
    79e0:	e0bffe17 	ldw	r2,-8(fp)
    79e4:	1080040b 	ldhu	r2,16(r2)
    79e8:	10bfffcc 	andi	r2,r2,65535
    79ec:	1009883a 	mov	r4,r2
    79f0:	000026c0 	call	26c <readData>
    79f4:	14003fcc 	andi	r16,r2,255
    79f8:	e0bffe17 	ldw	r2,-8(fp)
    79fc:	1080040b 	ldhu	r2,16(r2)
    7a00:	10800044 	addi	r2,r2,1
    7a04:	10bfffcc 	andi	r2,r2,65535
    7a08:	1009883a 	mov	r4,r2
    7a0c:	000026c0 	call	26c <readData>
    7a10:	10803fcc 	andi	r2,r2,255
    7a14:	1004923a 	slli	r2,r2,8
    7a18:	8085883a 	add	r2,r16,r2
    7a1c:	e0bffd0d 	sth	r2,-12(fp)
    wr16(cpu, PC, j);
    7a20:	e0bffd0b 	ldhu	r2,-12(fp)
    7a24:	100d883a 	mov	r6,r2
    7a28:	01400344 	movi	r5,13
    7a2c:	e13ffe17 	ldw	r4,-8(fp)
    7a30:	0002c780 	call	2c78 <wr16>
}
    7a34:	0001883a 	nop
    7a38:	e6ffff04 	addi	sp,fp,-4
    7a3c:	dfc00217 	ldw	ra,8(sp)
    7a40:	df000117 	ldw	fp,4(sp)
    7a44:	dc000017 	ldw	r16,0(sp)
    7a48:	dec00304 	addi	sp,sp,12
    7a4c:	f800283a 	ret

00007a50 <CPL>:

void CPL(CPU* cpu) {
    7a50:	defffd04 	addi	sp,sp,-12
    7a54:	dfc00215 	stw	ra,8(sp)
    7a58:	df000115 	stw	fp,4(sp)
    7a5c:	df000104 	addi	fp,sp,4
    7a60:	e13fff15 	stw	r4,-4(fp)
    wr8(cpu, A, (~cpu->registers.a) & 0xFF);
    7a64:	e0bfff17 	ldw	r2,-4(fp)
    7a68:	10800203 	ldbu	r2,8(r2)
    7a6c:	0084303a 	nor	r2,zero,r2
    7a70:	10803fcc 	andi	r2,r2,255
    7a74:	100d883a 	mov	r6,r2
    7a78:	000b883a 	mov	r5,zero
    7a7c:	e13fff17 	ldw	r4,-4(fp)
    7a80:	0002b7c0 	call	2b7c <wr8>
    cpu->registers.f |= 0x60;
    7a84:	e0bfff17 	ldw	r2,-4(fp)
    7a88:	108003c3 	ldbu	r2,15(r2)
    7a8c:	10801814 	ori	r2,r2,96
    7a90:	1007883a 	mov	r3,r2
    7a94:	e0bfff17 	ldw	r2,-4(fp)
    7a98:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    7a9c:	e0bfff17 	ldw	r2,-4(fp)
    7aa0:	10800017 	ldw	r2,0(r2)
    7aa4:	10c00104 	addi	r3,r2,4
    7aa8:	e0bfff17 	ldw	r2,-4(fp)
    7aac:	10c00015 	stw	r3,0(r2)
}
    7ab0:	0001883a 	nop
    7ab4:	e037883a 	mov	sp,fp
    7ab8:	dfc00117 	ldw	ra,4(sp)
    7abc:	df000017 	ldw	fp,0(sp)
    7ac0:	dec00204 	addi	sp,sp,8
    7ac4:	f800283a 	ret

00007ac8 <CCF>:

void CCF(CPU* cpu) {
    7ac8:	defffe04 	addi	sp,sp,-8
    7acc:	df000115 	stw	fp,4(sp)
    7ad0:	df000104 	addi	fp,sp,4
    7ad4:	e13fff15 	stw	r4,-4(fp)
    cpu->registers.f &= 0x9F;
    7ad8:	e0bfff17 	ldw	r2,-4(fp)
    7adc:	10c003c3 	ldbu	r3,15(r2)
    7ae0:	00bfe7c4 	movi	r2,-97
    7ae4:	1884703a 	and	r2,r3,r2
    7ae8:	1007883a 	mov	r3,r2
    7aec:	e0bfff17 	ldw	r2,-4(fp)
    7af0:	10c003c5 	stb	r3,15(r2)
    if ((cpu->registers.f & 0x10) != 0) {
    7af4:	e0bfff17 	ldw	r2,-4(fp)
    7af8:	108003c3 	ldbu	r2,15(r2)
    7afc:	10803fcc 	andi	r2,r2,255
    7b00:	1080040c 	andi	r2,r2,16
    7b04:	10000826 	beq	r2,zero,7b28 <CCF+0x60>
    	cpu->registers.f &= 0xE0;
    7b08:	e0bfff17 	ldw	r2,-4(fp)
    7b0c:	10c003c3 	ldbu	r3,15(r2)
    7b10:	00bff804 	movi	r2,-32
    7b14:	1884703a 	and	r2,r3,r2
    7b18:	1007883a 	mov	r3,r2
    7b1c:	e0bfff17 	ldw	r2,-4(fp)
    7b20:	10c003c5 	stb	r3,15(r2)
    7b24:	00000606 	br	7b40 <CCF+0x78>
    }
    else {
    	cpu->registers.f |= 0x10;
    7b28:	e0bfff17 	ldw	r2,-4(fp)
    7b2c:	108003c3 	ldbu	r2,15(r2)
    7b30:	10800414 	ori	r2,r2,16
    7b34:	1007883a 	mov	r3,r2
    7b38:	e0bfff17 	ldw	r2,-4(fp)
    7b3c:	10c003c5 	stb	r3,15(r2)
    }
    cpu->clock.c += 4;
    7b40:	e0bfff17 	ldw	r2,-4(fp)
    7b44:	10800017 	ldw	r2,0(r2)
    7b48:	10c00104 	addi	r3,r2,4
    7b4c:	e0bfff17 	ldw	r2,-4(fp)
    7b50:	10c00015 	stw	r3,0(r2)
}
    7b54:	0001883a 	nop
    7b58:	e037883a 	mov	sp,fp
    7b5c:	df000017 	ldw	fp,0(sp)
    7b60:	dec00104 	addi	sp,sp,4
    7b64:	f800283a 	ret

00007b68 <SCF>:

void SCF(CPU* cpu) {
    7b68:	defffe04 	addi	sp,sp,-8
    7b6c:	df000115 	stw	fp,4(sp)
    7b70:	df000104 	addi	fp,sp,4
    7b74:	e13fff15 	stw	r4,-4(fp)
    cpu->registers.f &= 0x9F;
    7b78:	e0bfff17 	ldw	r2,-4(fp)
    7b7c:	10c003c3 	ldbu	r3,15(r2)
    7b80:	00bfe7c4 	movi	r2,-97
    7b84:	1884703a 	and	r2,r3,r2
    7b88:	1007883a 	mov	r3,r2
    7b8c:	e0bfff17 	ldw	r2,-4(fp)
    7b90:	10c003c5 	stb	r3,15(r2)
    cpu->registers.f |= 0x10;
    7b94:	e0bfff17 	ldw	r2,-4(fp)
    7b98:	108003c3 	ldbu	r2,15(r2)
    7b9c:	10800414 	ori	r2,r2,16
    7ba0:	1007883a 	mov	r3,r2
    7ba4:	e0bfff17 	ldw	r2,-4(fp)
    7ba8:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    7bac:	e0bfff17 	ldw	r2,-4(fp)
    7bb0:	10800017 	ldw	r2,0(r2)
    7bb4:	10c00104 	addi	r3,r2,4
    7bb8:	e0bfff17 	ldw	r2,-4(fp)
    7bbc:	10c00015 	stw	r3,0(r2)
}
    7bc0:	0001883a 	nop
    7bc4:	e037883a 	mov	sp,fp
    7bc8:	df000017 	ldw	fp,0(sp)
    7bcc:	dec00104 	addi	sp,sp,4
    7bd0:	f800283a 	ret

00007bd4 <DAA>:

void DAA(CPU* cpu) {
    7bd4:	defffc04 	addi	sp,sp,-16
    7bd8:	df000315 	stw	fp,12(sp)
    7bdc:	df000304 	addi	fp,sp,12
    7be0:	e13fff15 	stw	r4,-4(fp)
    byte sub = (cpu->registers.f & 0x40) ? 1 : 0;
    7be4:	e0bfff17 	ldw	r2,-4(fp)
    7be8:	108003c3 	ldbu	r2,15(r2)
    7bec:	10803fcc 	andi	r2,r2,255
    7bf0:	1080100c 	andi	r2,r2,64
    7bf4:	1004c03a 	cmpne	r2,r2,zero
    7bf8:	e0bffe05 	stb	r2,-8(fp)
    byte h = (cpu->registers.f & 0x20) ? 1 : 0;
    7bfc:	e0bfff17 	ldw	r2,-4(fp)
    7c00:	108003c3 	ldbu	r2,15(r2)
    7c04:	10803fcc 	andi	r2,r2,255
    7c08:	1080080c 	andi	r2,r2,32
    7c0c:	1004c03a 	cmpne	r2,r2,zero
    7c10:	e0bffe45 	stb	r2,-7(fp)
    byte c = (cpu->registers.f & 0x10) ? 1 : 0;
    7c14:	e0bfff17 	ldw	r2,-4(fp)
    7c18:	108003c3 	ldbu	r2,15(r2)
    7c1c:	10803fcc 	andi	r2,r2,255
    7c20:	1080040c 	andi	r2,r2,16
    7c24:	1004c03a 	cmpne	r2,r2,zero
    7c28:	e0bffe85 	stb	r2,-6(fp)
    int suba = cpu->registers.a;
    7c2c:	e0bfff17 	ldw	r2,-4(fp)
    7c30:	10800203 	ldbu	r2,8(r2)
    7c34:	10803fcc 	andi	r2,r2,255
    7c38:	e0bffd15 	stw	r2,-12(fp)

    if (sub == 1) {
    7c3c:	e0bffe03 	ldbu	r2,-8(fp)
    7c40:	10800058 	cmpnei	r2,r2,1
    7c44:	1000201e 	bne	r2,zero,7cc8 <DAA+0xf4>
        if (h == 1) {
    7c48:	e0bffe43 	ldbu	r2,-7(fp)
    7c4c:	10800058 	cmpnei	r2,r2,1
    7c50:	1000101e 	bne	r2,zero,7c94 <DAA+0xc0>
            cpu->registers.a -= 0x6;
    7c54:	e0bfff17 	ldw	r2,-4(fp)
    7c58:	10800203 	ldbu	r2,8(r2)
    7c5c:	10bffe84 	addi	r2,r2,-6
    7c60:	1007883a 	mov	r3,r2
    7c64:	e0bfff17 	ldw	r2,-4(fp)
    7c68:	10c00205 	stb	r3,8(r2)
            cpu->registers.a &= 0xFF;
    7c6c:	e0bfff17 	ldw	r2,-4(fp)
    7c70:	10c00203 	ldbu	r3,8(r2)
    7c74:	e0bfff17 	ldw	r2,-4(fp)
    7c78:	10c00205 	stb	r3,8(r2)
            suba -= 0x6;
    7c7c:	e0bffd17 	ldw	r2,-12(fp)
    7c80:	10bffe84 	addi	r2,r2,-6
    7c84:	e0bffd15 	stw	r2,-12(fp)
            suba &= 0xFF;
    7c88:	e0bffd17 	ldw	r2,-12(fp)
    7c8c:	10803fcc 	andi	r2,r2,255
    7c90:	e0bffd15 	stw	r2,-12(fp)
        }
        if (c == 1)  {
    7c94:	e0bffe83 	ldbu	r2,-6(fp)
    7c98:	10800058 	cmpnei	r2,r2,1
    7c9c:	10002d1e 	bne	r2,zero,7d54 <DAA+0x180>
            cpu->registers.a -= 0x60;
    7ca0:	e0bfff17 	ldw	r2,-4(fp)
    7ca4:	10800203 	ldbu	r2,8(r2)
    7ca8:	10bfe804 	addi	r2,r2,-96
    7cac:	1007883a 	mov	r3,r2
    7cb0:	e0bfff17 	ldw	r2,-4(fp)
    7cb4:	10c00205 	stb	r3,8(r2)
            suba -= 0x60;
    7cb8:	e0bffd17 	ldw	r2,-12(fp)
    7cbc:	10bfe804 	addi	r2,r2,-96
    7cc0:	e0bffd15 	stw	r2,-12(fp)
    7cc4:	00002306 	br	7d54 <DAA+0x180>
        }
    }
    else {
        if (((cpu->registers.a & 0xF) > 9) || h == 1) {
    7cc8:	e0bfff17 	ldw	r2,-4(fp)
    7ccc:	10800203 	ldbu	r2,8(r2)
    7cd0:	10803fcc 	andi	r2,r2,255
    7cd4:	108003cc 	andi	r2,r2,15
    7cd8:	10800288 	cmpgei	r2,r2,10
    7cdc:	1000031e 	bne	r2,zero,7cec <DAA+0x118>
    7ce0:	e0bffe43 	ldbu	r2,-7(fp)
    7ce4:	10800058 	cmpnei	r2,r2,1
    7ce8:	1000091e 	bne	r2,zero,7d10 <DAA+0x13c>
            cpu->registers.a += 0x6;
    7cec:	e0bfff17 	ldw	r2,-4(fp)
    7cf0:	10800203 	ldbu	r2,8(r2)
    7cf4:	10800184 	addi	r2,r2,6
    7cf8:	1007883a 	mov	r3,r2
    7cfc:	e0bfff17 	ldw	r2,-4(fp)
    7d00:	10c00205 	stb	r3,8(r2)
            suba += 0x6;
    7d04:	e0bffd17 	ldw	r2,-12(fp)
    7d08:	10800184 	addi	r2,r2,6
    7d0c:	e0bffd15 	stw	r2,-12(fp)
        }
        if ((cpu->registers.a > 0x9F) || c == 1) {
    7d10:	e0bfff17 	ldw	r2,-4(fp)
    7d14:	10800203 	ldbu	r2,8(r2)
    7d18:	10803fcc 	andi	r2,r2,255
    7d1c:	10802828 	cmpgeui	r2,r2,160
    7d20:	1000031e 	bne	r2,zero,7d30 <DAA+0x15c>
    7d24:	e0bffe83 	ldbu	r2,-6(fp)
    7d28:	10800058 	cmpnei	r2,r2,1
    7d2c:	1000091e 	bne	r2,zero,7d54 <DAA+0x180>
            cpu->registers.a += 0x60;
    7d30:	e0bfff17 	ldw	r2,-4(fp)
    7d34:	10800203 	ldbu	r2,8(r2)
    7d38:	10801804 	addi	r2,r2,96
    7d3c:	1007883a 	mov	r3,r2
    7d40:	e0bfff17 	ldw	r2,-4(fp)
    7d44:	10c00205 	stb	r3,8(r2)
            suba += 0x60;
    7d48:	e0bffd17 	ldw	r2,-12(fp)
    7d4c:	10801804 	addi	r2,r2,96
    7d50:	e0bffd15 	stw	r2,-12(fp)
        }
    }

    if ((suba & 0x100) != 0) c = 1;
    7d54:	e0bffd17 	ldw	r2,-12(fp)
    7d58:	1080400c 	andi	r2,r2,256
    7d5c:	10000226 	beq	r2,zero,7d68 <DAA+0x194>
    7d60:	00800044 	movi	r2,1
    7d64:	e0bffe85 	stb	r2,-6(fp)

    cpu->registers.a &= 0xFF;
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	10c00203 	ldbu	r3,8(r2)
    7d70:	e0bfff17 	ldw	r2,-4(fp)
    7d74:	10c00205 	stb	r3,8(r2)
    cpu->registers.f &= 0x40;
    7d78:	e0bfff17 	ldw	r2,-4(fp)
    7d7c:	108003c3 	ldbu	r2,15(r2)
    7d80:	1080100c 	andi	r2,r2,64
    7d84:	1007883a 	mov	r3,r2
    7d88:	e0bfff17 	ldw	r2,-4(fp)
    7d8c:	10c003c5 	stb	r3,15(r2)

    if (cpu->registers.a == 0) cpu->registers.f |= 0x80;
    7d90:	e0bfff17 	ldw	r2,-4(fp)
    7d94:	10800203 	ldbu	r2,8(r2)
    7d98:	10803fcc 	andi	r2,r2,255
    7d9c:	1000071e 	bne	r2,zero,7dbc <DAA+0x1e8>
    7da0:	e0bfff17 	ldw	r2,-4(fp)
    7da4:	10c003c3 	ldbu	r3,15(r2)
    7da8:	00bfe004 	movi	r2,-128
    7dac:	1884b03a 	or	r2,r3,r2
    7db0:	1007883a 	mov	r3,r2
    7db4:	e0bfff17 	ldw	r2,-4(fp)
    7db8:	10c003c5 	stb	r3,15(r2)
    cpu->clock.c += 4;
    7dbc:	e0bfff17 	ldw	r2,-4(fp)
    7dc0:	10800017 	ldw	r2,0(r2)
    7dc4:	10c00104 	addi	r3,r2,4
    7dc8:	e0bfff17 	ldw	r2,-4(fp)
    7dcc:	10c00015 	stw	r3,0(r2)
}
    7dd0:	0001883a 	nop
    7dd4:	e037883a 	mov	sp,fp
    7dd8:	df000017 	ldw	fp,0(sp)
    7ddc:	dec00104 	addi	sp,sp,4
    7de0:	f800283a 	ret

00007de4 <HALT>:

void HALT(CPU* cpu) {
    7de4:	defffd04 	addi	sp,sp,-12
    7de8:	dfc00215 	stw	ra,8(sp)
    7dec:	df000115 	stw	fp,4(sp)
    7df0:	df000104 	addi	fp,sp,4
    7df4:	e13fff15 	stw	r4,-4(fp)
    halt(cpu);
    7df8:	e13fff17 	ldw	r4,-4(fp)
    7dfc:	0002d980 	call	2d98 <halt>
    cpu->clock.c += 4;
    7e00:	e0bfff17 	ldw	r2,-4(fp)
    7e04:	10800017 	ldw	r2,0(r2)
    7e08:	10c00104 	addi	r3,r2,4
    7e0c:	e0bfff17 	ldw	r2,-4(fp)
    7e10:	10c00015 	stw	r3,0(r2)
}
    7e14:	0001883a 	nop
    7e18:	e037883a 	mov	sp,fp
    7e1c:	dfc00117 	ldw	ra,4(sp)
    7e20:	df000017 	ldw	fp,0(sp)
    7e24:	dec00204 	addi	sp,sp,8
    7e28:	f800283a 	ret

00007e2c <DI>:

void DI(CPU* cpu) {
    7e2c:	defffd04 	addi	sp,sp,-12
    7e30:	dfc00215 	stw	ra,8(sp)
    7e34:	df000115 	stw	fp,4(sp)
    7e38:	df000104 	addi	fp,sp,4
    7e3c:	e13fff15 	stw	r4,-4(fp)
    disableInterrupts(cpu);
    7e40:	e13fff17 	ldw	r4,-4(fp)
    7e44:	00031d40 	call	31d4 <disableInterrupts>
    cpu->clock.c += 4;
    7e48:	e0bfff17 	ldw	r2,-4(fp)
    7e4c:	10800017 	ldw	r2,0(r2)
    7e50:	10c00104 	addi	r3,r2,4
    7e54:	e0bfff17 	ldw	r2,-4(fp)
    7e58:	10c00015 	stw	r3,0(r2)
}
    7e5c:	0001883a 	nop
    7e60:	e037883a 	mov	sp,fp
    7e64:	dfc00117 	ldw	ra,4(sp)
    7e68:	df000017 	ldw	fp,0(sp)
    7e6c:	dec00204 	addi	sp,sp,8
    7e70:	f800283a 	ret

00007e74 <EI>:

void EI(CPU* cpu) {
    7e74:	defffd04 	addi	sp,sp,-12
    7e78:	dfc00215 	stw	ra,8(sp)
    7e7c:	df000115 	stw	fp,4(sp)
    7e80:	df000104 	addi	fp,sp,4
    7e84:	e13fff15 	stw	r4,-4(fp)
    enableInterrupts(cpu);
    7e88:	e13fff17 	ldw	r4,-4(fp)
    7e8c:	00031a40 	call	31a4 <enableInterrupts>
    cpu->clock.c += 4;
    7e90:	e0bfff17 	ldw	r2,-4(fp)
    7e94:	10800017 	ldw	r2,0(r2)
    7e98:	10c00104 	addi	r3,r2,4
    7e9c:	e0bfff17 	ldw	r2,-4(fp)
    7ea0:	10c00015 	stw	r3,0(r2)
}
    7ea4:	0001883a 	nop
    7ea8:	e037883a 	mov	sp,fp
    7eac:	dfc00117 	ldw	ra,4(sp)
    7eb0:	df000017 	ldw	fp,0(sp)
    7eb4:	dec00204 	addi	sp,sp,8
    7eb8:	f800283a 	ret

00007ebc <RETI>:

void RETI(CPU* cpu) {
    7ebc:	defffd04 	addi	sp,sp,-12
    7ec0:	dfc00215 	stw	ra,8(sp)
    7ec4:	df000115 	stw	fp,4(sp)
    7ec8:	df000104 	addi	fp,sp,4
    7ecc:	e13fff15 	stw	r4,-4(fp)
    enableInterrupts(cpu);
    7ed0:	e13fff17 	ldw	r4,-4(fp)
    7ed4:	00031a40 	call	31a4 <enableInterrupts>
    RET(cpu);
    7ed8:	e13fff17 	ldw	r4,-4(fp)
    7edc:	00076780 	call	7678 <RET>
}
    7ee0:	0001883a 	nop
    7ee4:	e037883a 	mov	sp,fp
    7ee8:	dfc00117 	ldw	ra,4(sp)
    7eec:	df000017 	ldw	fp,0(sp)
    7ef0:	dec00204 	addi	sp,sp,8
    7ef4:	f800283a 	ret

00007ef8 <x00>:

//End Instructions

//Start Opcodes

void x00(CPU* cpu) {cpu->clock.c += 4;}
    7ef8:	defffe04 	addi	sp,sp,-8
    7efc:	df000115 	stw	fp,4(sp)
    7f00:	df000104 	addi	fp,sp,4
    7f04:	e13fff15 	stw	r4,-4(fp)
    7f08:	e0bfff17 	ldw	r2,-4(fp)
    7f0c:	10800017 	ldw	r2,0(r2)
    7f10:	10c00104 	addi	r3,r2,4
    7f14:	e0bfff17 	ldw	r2,-4(fp)
    7f18:	10c00015 	stw	r3,0(r2)
    7f1c:	0001883a 	nop
    7f20:	e037883a 	mov	sp,fp
    7f24:	df000017 	ldw	fp,0(sp)
    7f28:	dec00104 	addi	sp,sp,4
    7f2c:	f800283a 	ret

00007f30 <x01>:
void x01(CPU* cpu) {LDrrnn(cpu, B, C);}
    7f30:	defffd04 	addi	sp,sp,-12
    7f34:	dfc00215 	stw	ra,8(sp)
    7f38:	df000115 	stw	fp,4(sp)
    7f3c:	df000104 	addi	fp,sp,4
    7f40:	e13fff15 	stw	r4,-4(fp)
    7f44:	01800084 	movi	r6,2
    7f48:	01400044 	movi	r5,1
    7f4c:	e13fff17 	ldw	r4,-4(fp)
    7f50:	00032ec0 	call	32ec <LDrrnn>
    7f54:	0001883a 	nop
    7f58:	e037883a 	mov	sp,fp
    7f5c:	dfc00117 	ldw	ra,4(sp)
    7f60:	df000017 	ldw	fp,0(sp)
    7f64:	dec00204 	addi	sp,sp,8
    7f68:	f800283a 	ret

00007f6c <x02>:
void x02(CPU* cpu) {LDrrar(cpu, B, C, A);}
    7f6c:	defffd04 	addi	sp,sp,-12
    7f70:	dfc00215 	stw	ra,8(sp)
    7f74:	df000115 	stw	fp,4(sp)
    7f78:	df000104 	addi	fp,sp,4
    7f7c:	e13fff15 	stw	r4,-4(fp)
    7f80:	000f883a 	mov	r7,zero
    7f84:	01800084 	movi	r6,2
    7f88:	01400044 	movi	r5,1
    7f8c:	e13fff17 	ldw	r4,-4(fp)
    7f90:	00033a00 	call	33a0 <LDrrar>
    7f94:	0001883a 	nop
    7f98:	e037883a 	mov	sp,fp
    7f9c:	dfc00117 	ldw	ra,4(sp)
    7fa0:	df000017 	ldw	fp,0(sp)
    7fa4:	dec00204 	addi	sp,sp,8
    7fa8:	f800283a 	ret

00007fac <x03>:
void x03(CPU* cpu) {INCrr(cpu, B, C); }
    7fac:	defffd04 	addi	sp,sp,-12
    7fb0:	dfc00215 	stw	ra,8(sp)
    7fb4:	df000115 	stw	fp,4(sp)
    7fb8:	df000104 	addi	fp,sp,4
    7fbc:	e13fff15 	stw	r4,-4(fp)
    7fc0:	01800084 	movi	r6,2
    7fc4:	01400044 	movi	r5,1
    7fc8:	e13fff17 	ldw	r4,-4(fp)
    7fcc:	0003de00 	call	3de0 <INCrr>
    7fd0:	0001883a 	nop
    7fd4:	e037883a 	mov	sp,fp
    7fd8:	dfc00117 	ldw	ra,4(sp)
    7fdc:	df000017 	ldw	fp,0(sp)
    7fe0:	dec00204 	addi	sp,sp,8
    7fe4:	f800283a 	ret

00007fe8 <x04>:
void x04(CPU* cpu) {INCr(cpu, B);}
    7fe8:	defffd04 	addi	sp,sp,-12
    7fec:	dfc00215 	stw	ra,8(sp)
    7ff0:	df000115 	stw	fp,4(sp)
    7ff4:	df000104 	addi	fp,sp,4
    7ff8:	e13fff15 	stw	r4,-4(fp)
    7ffc:	01400044 	movi	r5,1
    8000:	e13fff17 	ldw	r4,-4(fp)
    8004:	00040080 	call	4008 <INCr>
    8008:	0001883a 	nop
    800c:	e037883a 	mov	sp,fp
    8010:	dfc00117 	ldw	ra,4(sp)
    8014:	df000017 	ldw	fp,0(sp)
    8018:	dec00204 	addi	sp,sp,8
    801c:	f800283a 	ret

00008020 <x05>:
void x05(CPU* cpu) {DECr(cpu, B);}
    8020:	defffd04 	addi	sp,sp,-12
    8024:	dfc00215 	stw	ra,8(sp)
    8028:	df000115 	stw	fp,4(sp)
    802c:	df000104 	addi	fp,sp,4
    8030:	e13fff15 	stw	r4,-4(fp)
    8034:	01400044 	movi	r5,1
    8038:	e13fff17 	ldw	r4,-4(fp)
    803c:	00042240 	call	4224 <DECr>
    8040:	0001883a 	nop
    8044:	e037883a 	mov	sp,fp
    8048:	dfc00117 	ldw	ra,4(sp)
    804c:	df000017 	ldw	fp,0(sp)
    8050:	dec00204 	addi	sp,sp,8
    8054:	f800283a 	ret

00008058 <x06>:
void x06(CPU* cpu) {LDrn(cpu, B);}
    8058:	defffd04 	addi	sp,sp,-12
    805c:	dfc00215 	stw	ra,8(sp)
    8060:	df000115 	stw	fp,4(sp)
    8064:	df000104 	addi	fp,sp,4
    8068:	e13fff15 	stw	r4,-4(fp)
    806c:	01400044 	movi	r5,1
    8070:	e13fff17 	ldw	r4,-4(fp)
    8074:	00034a40 	call	34a4 <LDrn>
    8078:	0001883a 	nop
    807c:	e037883a 	mov	sp,fp
    8080:	dfc00117 	ldw	ra,4(sp)
    8084:	df000017 	ldw	fp,0(sp)
    8088:	dec00204 	addi	sp,sp,8
    808c:	f800283a 	ret

00008090 <x07>:
void x07(CPU* cpu) {
    8090:	defffc04 	addi	sp,sp,-16
    8094:	dfc00315 	stw	ra,12(sp)
    8098:	df000215 	stw	fp,8(sp)
    809c:	df000204 	addi	fp,sp,8
    80a0:	e13fff15 	stw	r4,-4(fp)
	int out = (rr8(cpu, A) & 0x80) ? 1 : 0;
    80a4:	000b883a 	mov	r5,zero
    80a8:	e13fff17 	ldw	r4,-4(fp)
    80ac:	00029180 	call	2918 <rr8>
    80b0:	10803fcc 	andi	r2,r2,255
    80b4:	1004d1fa 	srli	r2,r2,7
    80b8:	10803fcc 	andi	r2,r2,255
    80bc:	e0bffe15 	stw	r2,-8(fp)
	out ? wr8(cpu, F, 0x10) : wr8(cpu, F, 0x00);
    80c0:	e0bffe17 	ldw	r2,-8(fp)
    80c4:	10000526 	beq	r2,zero,80dc <x07+0x4c>
    80c8:	01800404 	movi	r6,16
    80cc:	01400144 	movi	r5,5
    80d0:	e13fff17 	ldw	r4,-4(fp)
    80d4:	0002b7c0 	call	2b7c <wr8>
    80d8:	00000406 	br	80ec <x07+0x5c>
    80dc:	000d883a 	mov	r6,zero
    80e0:	01400144 	movi	r5,5
    80e4:	e13fff17 	ldw	r4,-4(fp)
    80e8:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, A, (rr8(cpu, A)<<1) + out);
    80ec:	000b883a 	mov	r5,zero
    80f0:	e13fff17 	ldw	r4,-4(fp)
    80f4:	00029180 	call	2918 <rr8>
    80f8:	1085883a 	add	r2,r2,r2
    80fc:	1007883a 	mov	r3,r2
    8100:	e0bffe17 	ldw	r2,-8(fp)
    8104:	1885883a 	add	r2,r3,r2
    8108:	10803fcc 	andi	r2,r2,255
    810c:	100d883a 	mov	r6,r2
    8110:	000b883a 	mov	r5,zero
    8114:	e13fff17 	ldw	r4,-4(fp)
    8118:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 4;
    811c:	e0bfff17 	ldw	r2,-4(fp)
    8120:	10800017 	ldw	r2,0(r2)
    8124:	10c00104 	addi	r3,r2,4
    8128:	e0bfff17 	ldw	r2,-4(fp)
    812c:	10c00015 	stw	r3,0(r2)
}
    8130:	0001883a 	nop
    8134:	e037883a 	mov	sp,fp
    8138:	dfc00117 	ldw	ra,4(sp)
    813c:	df000017 	ldw	fp,0(sp)
    8140:	dec00204 	addi	sp,sp,8
    8144:	f800283a 	ret

00008148 <x08>:
void x08(CPU* cpu) {LDnnsp(cpu);}
    8148:	defffd04 	addi	sp,sp,-12
    814c:	dfc00215 	stw	ra,8(sp)
    8150:	df000115 	stw	fp,4(sp)
    8154:	df000104 	addi	fp,sp,4
    8158:	e13fff15 	stw	r4,-4(fp)
    815c:	e13fff17 	ldw	r4,-4(fp)
    8160:	0003aa80 	call	3aa8 <LDnnsp>
    8164:	0001883a 	nop
    8168:	e037883a 	mov	sp,fp
    816c:	dfc00117 	ldw	ra,4(sp)
    8170:	df000017 	ldw	fp,0(sp)
    8174:	dec00204 	addi	sp,sp,8
    8178:	f800283a 	ret

0000817c <x09>:
void x09(CPU* cpu) {ADDrrrr(cpu, H, L, B, C);}
    817c:	defffc04 	addi	sp,sp,-16
    8180:	dfc00315 	stw	ra,12(sp)
    8184:	df000215 	stw	fp,8(sp)
    8188:	df000204 	addi	fp,sp,8
    818c:	e13fff15 	stw	r4,-4(fp)
    8190:	00800084 	movi	r2,2
    8194:	d8800015 	stw	r2,0(sp)
    8198:	01c00044 	movi	r7,1
    819c:	018001c4 	movi	r6,7
    81a0:	01400184 	movi	r5,6
    81a4:	e13fff17 	ldw	r4,-4(fp)
    81a8:	00046840 	call	4684 <ADDrrrr>
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <x0A>:
void x0A(CPU* cpu) {LDrrra(cpu, A, B, C);}
    81c4:	defffd04 	addi	sp,sp,-12
    81c8:	dfc00215 	stw	ra,8(sp)
    81cc:	df000115 	stw	fp,4(sp)
    81d0:	df000104 	addi	fp,sp,4
    81d4:	e13fff15 	stw	r4,-4(fp)
    81d8:	01c00084 	movi	r7,2
    81dc:	01800044 	movi	r6,1
    81e0:	000b883a 	mov	r5,zero
    81e4:	e13fff17 	ldw	r4,-4(fp)
    81e8:	00034280 	call	3428 <LDrrra>
    81ec:	0001883a 	nop
    81f0:	e037883a 	mov	sp,fp
    81f4:	dfc00117 	ldw	ra,4(sp)
    81f8:	df000017 	ldw	fp,0(sp)
    81fc:	dec00204 	addi	sp,sp,8
    8200:	f800283a 	ret

00008204 <x0B>:
void x0B(CPU* cpu) {DECrr(cpu, B, C);}
    8204:	defffd04 	addi	sp,sp,-12
    8208:	dfc00215 	stw	ra,8(sp)
    820c:	df000115 	stw	fp,4(sp)
    8210:	df000104 	addi	fp,sp,4
    8214:	e13fff15 	stw	r4,-4(fp)
    8218:	01800084 	movi	r6,2
    821c:	01400044 	movi	r5,1
    8220:	e13fff17 	ldw	r4,-4(fp)
    8224:	00041080 	call	4108 <DECrr>
    8228:	0001883a 	nop
    822c:	e037883a 	mov	sp,fp
    8230:	dfc00117 	ldw	ra,4(sp)
    8234:	df000017 	ldw	fp,0(sp)
    8238:	dec00204 	addi	sp,sp,8
    823c:	f800283a 	ret

00008240 <x0C>:
void x0C(CPU* cpu) {INCr(cpu, C); }
    8240:	defffd04 	addi	sp,sp,-12
    8244:	dfc00215 	stw	ra,8(sp)
    8248:	df000115 	stw	fp,4(sp)
    824c:	df000104 	addi	fp,sp,4
    8250:	e13fff15 	stw	r4,-4(fp)
    8254:	01400084 	movi	r5,2
    8258:	e13fff17 	ldw	r4,-4(fp)
    825c:	00040080 	call	4008 <INCr>
    8260:	0001883a 	nop
    8264:	e037883a 	mov	sp,fp
    8268:	dfc00117 	ldw	ra,4(sp)
    826c:	df000017 	ldw	fp,0(sp)
    8270:	dec00204 	addi	sp,sp,8
    8274:	f800283a 	ret

00008278 <x0D>:
void x0D(CPU* cpu) {DECr(cpu, C);}
    8278:	defffd04 	addi	sp,sp,-12
    827c:	dfc00215 	stw	ra,8(sp)
    8280:	df000115 	stw	fp,4(sp)
    8284:	df000104 	addi	fp,sp,4
    8288:	e13fff15 	stw	r4,-4(fp)
    828c:	01400084 	movi	r5,2
    8290:	e13fff17 	ldw	r4,-4(fp)
    8294:	00042240 	call	4224 <DECr>
    8298:	0001883a 	nop
    829c:	e037883a 	mov	sp,fp
    82a0:	dfc00117 	ldw	ra,4(sp)
    82a4:	df000017 	ldw	fp,0(sp)
    82a8:	dec00204 	addi	sp,sp,8
    82ac:	f800283a 	ret

000082b0 <x0E>:
void x0E(CPU* cpu) {LDrn(cpu, C);}
    82b0:	defffd04 	addi	sp,sp,-12
    82b4:	dfc00215 	stw	ra,8(sp)
    82b8:	df000115 	stw	fp,4(sp)
    82bc:	df000104 	addi	fp,sp,4
    82c0:	e13fff15 	stw	r4,-4(fp)
    82c4:	01400084 	movi	r5,2
    82c8:	e13fff17 	ldw	r4,-4(fp)
    82cc:	00034a40 	call	34a4 <LDrn>
    82d0:	0001883a 	nop
    82d4:	e037883a 	mov	sp,fp
    82d8:	dfc00117 	ldw	ra,4(sp)
    82dc:	df000017 	ldw	fp,0(sp)
    82e0:	dec00204 	addi	sp,sp,8
    82e4:	f800283a 	ret

000082e8 <x0F>:
void x0F(CPU* cpu) {
    82e8:	defffb04 	addi	sp,sp,-20
    82ec:	dfc00415 	stw	ra,16(sp)
    82f0:	df000315 	stw	fp,12(sp)
    82f4:	dc000215 	stw	r16,8(sp)
    82f8:	df000304 	addi	fp,sp,12
    82fc:	e13ffe15 	stw	r4,-8(fp)
	byte out = rr8(cpu, A) & 0x01;
    8300:	000b883a 	mov	r5,zero
    8304:	e13ffe17 	ldw	r4,-8(fp)
    8308:	00029180 	call	2918 <rr8>
    830c:	1080004c 	andi	r2,r2,1
    8310:	e0bffd05 	stb	r2,-12(fp)
	out ? wr8(cpu, F, 0x10) : wr8(cpu, F, 0x00);
    8314:	e0bffd03 	ldbu	r2,-12(fp)
    8318:	10000526 	beq	r2,zero,8330 <x0F+0x48>
    831c:	01800404 	movi	r6,16
    8320:	01400144 	movi	r5,5
    8324:	e13ffe17 	ldw	r4,-8(fp)
    8328:	0002b7c0 	call	2b7c <wr8>
    832c:	00000406 	br	8340 <x0F+0x58>
    8330:	000d883a 	mov	r6,zero
    8334:	01400144 	movi	r5,5
    8338:	e13ffe17 	ldw	r4,-8(fp)
    833c:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, A, (rr8(cpu, A)>>1) | (out*0x80));
    8340:	000b883a 	mov	r5,zero
    8344:	e13ffe17 	ldw	r4,-8(fp)
    8348:	00029180 	call	2918 <rr8>
    834c:	10803fcc 	andi	r2,r2,255
    8350:	1004d07a 	srli	r2,r2,1
    8354:	1021883a 	mov	r16,r2
    8358:	e0bffd03 	ldbu	r2,-12(fp)
    835c:	017fe004 	movi	r5,-128
    8360:	1009883a 	mov	r4,r2
    8364:	000cefc0 	call	cefc <__mulsi3>
    8368:	8084b03a 	or	r2,r16,r2
    836c:	10803fcc 	andi	r2,r2,255
    8370:	100d883a 	mov	r6,r2
    8374:	000b883a 	mov	r5,zero
    8378:	e13ffe17 	ldw	r4,-8(fp)
    837c:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 4;
    8380:	e0bffe17 	ldw	r2,-8(fp)
    8384:	10800017 	ldw	r2,0(r2)
    8388:	10c00104 	addi	r3,r2,4
    838c:	e0bffe17 	ldw	r2,-8(fp)
    8390:	10c00015 	stw	r3,0(r2)
}
    8394:	0001883a 	nop
    8398:	e6ffff04 	addi	sp,fp,-4
    839c:	dfc00217 	ldw	ra,8(sp)
    83a0:	df000117 	ldw	fp,4(sp)
    83a4:	dc000017 	ldw	r16,0(sp)
    83a8:	dec00304 	addi	sp,sp,12
    83ac:	f800283a 	ret

000083b0 <x10>:

void x10(CPU* cpu) {cpu->registers.pc++; cpu->clock.c += 4;}
    83b0:	defffe04 	addi	sp,sp,-8
    83b4:	df000115 	stw	fp,4(sp)
    83b8:	df000104 	addi	fp,sp,4
    83bc:	e13fff15 	stw	r4,-4(fp)
    83c0:	e0bfff17 	ldw	r2,-4(fp)
    83c4:	1080040b 	ldhu	r2,16(r2)
    83c8:	10800044 	addi	r2,r2,1
    83cc:	1007883a 	mov	r3,r2
    83d0:	e0bfff17 	ldw	r2,-4(fp)
    83d4:	10c0040d 	sth	r3,16(r2)
    83d8:	e0bfff17 	ldw	r2,-4(fp)
    83dc:	10800017 	ldw	r2,0(r2)
    83e0:	10c00104 	addi	r3,r2,4
    83e4:	e0bfff17 	ldw	r2,-4(fp)
    83e8:	10c00015 	stw	r3,0(r2)
    83ec:	0001883a 	nop
    83f0:	e037883a 	mov	sp,fp
    83f4:	df000017 	ldw	fp,0(sp)
    83f8:	dec00104 	addi	sp,sp,4
    83fc:	f800283a 	ret

00008400 <x11>:
void x11(CPU* cpu) {LDrrnn(cpu, D, E);}
    8400:	defffd04 	addi	sp,sp,-12
    8404:	dfc00215 	stw	ra,8(sp)
    8408:	df000115 	stw	fp,4(sp)
    840c:	df000104 	addi	fp,sp,4
    8410:	e13fff15 	stw	r4,-4(fp)
    8414:	01800104 	movi	r6,4
    8418:	014000c4 	movi	r5,3
    841c:	e13fff17 	ldw	r4,-4(fp)
    8420:	00032ec0 	call	32ec <LDrrnn>
    8424:	0001883a 	nop
    8428:	e037883a 	mov	sp,fp
    842c:	dfc00117 	ldw	ra,4(sp)
    8430:	df000017 	ldw	fp,0(sp)
    8434:	dec00204 	addi	sp,sp,8
    8438:	f800283a 	ret

0000843c <x12>:
void x12(CPU* cpu) {LDrrar(cpu, D, E, A);}
    843c:	defffd04 	addi	sp,sp,-12
    8440:	dfc00215 	stw	ra,8(sp)
    8444:	df000115 	stw	fp,4(sp)
    8448:	df000104 	addi	fp,sp,4
    844c:	e13fff15 	stw	r4,-4(fp)
    8450:	000f883a 	mov	r7,zero
    8454:	01800104 	movi	r6,4
    8458:	014000c4 	movi	r5,3
    845c:	e13fff17 	ldw	r4,-4(fp)
    8460:	00033a00 	call	33a0 <LDrrar>
    8464:	0001883a 	nop
    8468:	e037883a 	mov	sp,fp
    846c:	dfc00117 	ldw	ra,4(sp)
    8470:	df000017 	ldw	fp,0(sp)
    8474:	dec00204 	addi	sp,sp,8
    8478:	f800283a 	ret

0000847c <x13>:
void x13(CPU* cpu) {INCrr(cpu, D, E);}
    847c:	defffd04 	addi	sp,sp,-12
    8480:	dfc00215 	stw	ra,8(sp)
    8484:	df000115 	stw	fp,4(sp)
    8488:	df000104 	addi	fp,sp,4
    848c:	e13fff15 	stw	r4,-4(fp)
    8490:	01800104 	movi	r6,4
    8494:	014000c4 	movi	r5,3
    8498:	e13fff17 	ldw	r4,-4(fp)
    849c:	0003de00 	call	3de0 <INCrr>
    84a0:	0001883a 	nop
    84a4:	e037883a 	mov	sp,fp
    84a8:	dfc00117 	ldw	ra,4(sp)
    84ac:	df000017 	ldw	fp,0(sp)
    84b0:	dec00204 	addi	sp,sp,8
    84b4:	f800283a 	ret

000084b8 <x14>:
void x14(CPU* cpu) {INCr(cpu, D);}
    84b8:	defffd04 	addi	sp,sp,-12
    84bc:	dfc00215 	stw	ra,8(sp)
    84c0:	df000115 	stw	fp,4(sp)
    84c4:	df000104 	addi	fp,sp,4
    84c8:	e13fff15 	stw	r4,-4(fp)
    84cc:	014000c4 	movi	r5,3
    84d0:	e13fff17 	ldw	r4,-4(fp)
    84d4:	00040080 	call	4008 <INCr>
    84d8:	0001883a 	nop
    84dc:	e037883a 	mov	sp,fp
    84e0:	dfc00117 	ldw	ra,4(sp)
    84e4:	df000017 	ldw	fp,0(sp)
    84e8:	dec00204 	addi	sp,sp,8
    84ec:	f800283a 	ret

000084f0 <x15>:
void x15(CPU* cpu) {DECr(cpu, D);}
    84f0:	defffd04 	addi	sp,sp,-12
    84f4:	dfc00215 	stw	ra,8(sp)
    84f8:	df000115 	stw	fp,4(sp)
    84fc:	df000104 	addi	fp,sp,4
    8500:	e13fff15 	stw	r4,-4(fp)
    8504:	014000c4 	movi	r5,3
    8508:	e13fff17 	ldw	r4,-4(fp)
    850c:	00042240 	call	4224 <DECr>
    8510:	0001883a 	nop
    8514:	e037883a 	mov	sp,fp
    8518:	dfc00117 	ldw	ra,4(sp)
    851c:	df000017 	ldw	fp,0(sp)
    8520:	dec00204 	addi	sp,sp,8
    8524:	f800283a 	ret

00008528 <x16>:
void x16(CPU* cpu) {LDrn(cpu, D);}
    8528:	defffd04 	addi	sp,sp,-12
    852c:	dfc00215 	stw	ra,8(sp)
    8530:	df000115 	stw	fp,4(sp)
    8534:	df000104 	addi	fp,sp,4
    8538:	e13fff15 	stw	r4,-4(fp)
    853c:	014000c4 	movi	r5,3
    8540:	e13fff17 	ldw	r4,-4(fp)
    8544:	00034a40 	call	34a4 <LDrn>
    8548:	0001883a 	nop
    854c:	e037883a 	mov	sp,fp
    8550:	dfc00117 	ldw	ra,4(sp)
    8554:	df000017 	ldw	fp,0(sp)
    8558:	dec00204 	addi	sp,sp,8
    855c:	f800283a 	ret

00008560 <x17>:
void x17(CPU* cpu) {
    8560:	defffb04 	addi	sp,sp,-20
    8564:	dfc00415 	stw	ra,16(sp)
    8568:	df000315 	stw	fp,12(sp)
    856c:	df000304 	addi	fp,sp,12
    8570:	e13fff15 	stw	r4,-4(fp)
	int c = (rr8(cpu, F) & 0x10) ? 1 : 0;
    8574:	01400144 	movi	r5,5
    8578:	e13fff17 	ldw	r4,-4(fp)
    857c:	00029180 	call	2918 <rr8>
    8580:	10803fcc 	andi	r2,r2,255
    8584:	1080040c 	andi	r2,r2,16
    8588:	1004c03a 	cmpne	r2,r2,zero
    858c:	10803fcc 	andi	r2,r2,255
    8590:	e0bffd15 	stw	r2,-12(fp)
	int out = (rr8(cpu, A) & 0x80) ? 1 : 0;
    8594:	000b883a 	mov	r5,zero
    8598:	e13fff17 	ldw	r4,-4(fp)
    859c:	00029180 	call	2918 <rr8>
    85a0:	10803fcc 	andi	r2,r2,255
    85a4:	1004d1fa 	srli	r2,r2,7
    85a8:	10803fcc 	andi	r2,r2,255
    85ac:	e0bffe15 	stw	r2,-8(fp)
	out ? wr8(cpu, F, 0x10) : wr8(cpu, F, 0x00);
    85b0:	e0bffe17 	ldw	r2,-8(fp)
    85b4:	10000526 	beq	r2,zero,85cc <x17+0x6c>
    85b8:	01800404 	movi	r6,16
    85bc:	01400144 	movi	r5,5
    85c0:	e13fff17 	ldw	r4,-4(fp)
    85c4:	0002b7c0 	call	2b7c <wr8>
    85c8:	00000406 	br	85dc <x17+0x7c>
    85cc:	000d883a 	mov	r6,zero
    85d0:	01400144 	movi	r5,5
    85d4:	e13fff17 	ldw	r4,-4(fp)
    85d8:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, A, (rr8(cpu, A)<<1) + c);
    85dc:	000b883a 	mov	r5,zero
    85e0:	e13fff17 	ldw	r4,-4(fp)
    85e4:	00029180 	call	2918 <rr8>
    85e8:	1085883a 	add	r2,r2,r2
    85ec:	1007883a 	mov	r3,r2
    85f0:	e0bffd17 	ldw	r2,-12(fp)
    85f4:	1885883a 	add	r2,r3,r2
    85f8:	10803fcc 	andi	r2,r2,255
    85fc:	100d883a 	mov	r6,r2
    8600:	000b883a 	mov	r5,zero
    8604:	e13fff17 	ldw	r4,-4(fp)
    8608:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 4;
    860c:	e0bfff17 	ldw	r2,-4(fp)
    8610:	10800017 	ldw	r2,0(r2)
    8614:	10c00104 	addi	r3,r2,4
    8618:	e0bfff17 	ldw	r2,-4(fp)
    861c:	10c00015 	stw	r3,0(r2)
}
    8620:	0001883a 	nop
    8624:	e037883a 	mov	sp,fp
    8628:	dfc00117 	ldw	ra,4(sp)
    862c:	df000017 	ldw	fp,0(sp)
    8630:	dec00204 	addi	sp,sp,8
    8634:	f800283a 	ret

00008638 <x18>:
void x18(CPU* cpu) {JRn(cpu);}
    8638:	defffd04 	addi	sp,sp,-12
    863c:	dfc00215 	stw	ra,8(sp)
    8640:	df000115 	stw	fp,4(sp)
    8644:	df000104 	addi	fp,sp,4
    8648:	e13fff15 	stw	r4,-4(fp)
    864c:	e13fff17 	ldw	r4,-4(fp)
    8650:	00073400 	call	7340 <JRn>
    8654:	0001883a 	nop
    8658:	e037883a 	mov	sp,fp
    865c:	dfc00117 	ldw	ra,4(sp)
    8660:	df000017 	ldw	fp,0(sp)
    8664:	dec00204 	addi	sp,sp,8
    8668:	f800283a 	ret

0000866c <x19>:
void x19(CPU* cpu) {ADDrrrr(cpu, H, L, D, E);}
    866c:	defffc04 	addi	sp,sp,-16
    8670:	dfc00315 	stw	ra,12(sp)
    8674:	df000215 	stw	fp,8(sp)
    8678:	df000204 	addi	fp,sp,8
    867c:	e13fff15 	stw	r4,-4(fp)
    8680:	00800104 	movi	r2,4
    8684:	d8800015 	stw	r2,0(sp)
    8688:	01c000c4 	movi	r7,3
    868c:	018001c4 	movi	r6,7
    8690:	01400184 	movi	r5,6
    8694:	e13fff17 	ldw	r4,-4(fp)
    8698:	00046840 	call	4684 <ADDrrrr>
    869c:	0001883a 	nop
    86a0:	e037883a 	mov	sp,fp
    86a4:	dfc00117 	ldw	ra,4(sp)
    86a8:	df000017 	ldw	fp,0(sp)
    86ac:	dec00204 	addi	sp,sp,8
    86b0:	f800283a 	ret

000086b4 <x1A>:
void x1A(CPU* cpu) {LDrrra(cpu, A, D, E);}
    86b4:	defffd04 	addi	sp,sp,-12
    86b8:	dfc00215 	stw	ra,8(sp)
    86bc:	df000115 	stw	fp,4(sp)
    86c0:	df000104 	addi	fp,sp,4
    86c4:	e13fff15 	stw	r4,-4(fp)
    86c8:	01c00104 	movi	r7,4
    86cc:	018000c4 	movi	r6,3
    86d0:	000b883a 	mov	r5,zero
    86d4:	e13fff17 	ldw	r4,-4(fp)
    86d8:	00034280 	call	3428 <LDrrra>
    86dc:	0001883a 	nop
    86e0:	e037883a 	mov	sp,fp
    86e4:	dfc00117 	ldw	ra,4(sp)
    86e8:	df000017 	ldw	fp,0(sp)
    86ec:	dec00204 	addi	sp,sp,8
    86f0:	f800283a 	ret

000086f4 <x1B>:
void x1B(CPU* cpu) {DECrr(cpu, D, E);}
    86f4:	defffd04 	addi	sp,sp,-12
    86f8:	dfc00215 	stw	ra,8(sp)
    86fc:	df000115 	stw	fp,4(sp)
    8700:	df000104 	addi	fp,sp,4
    8704:	e13fff15 	stw	r4,-4(fp)
    8708:	01800104 	movi	r6,4
    870c:	014000c4 	movi	r5,3
    8710:	e13fff17 	ldw	r4,-4(fp)
    8714:	00041080 	call	4108 <DECrr>
    8718:	0001883a 	nop
    871c:	e037883a 	mov	sp,fp
    8720:	dfc00117 	ldw	ra,4(sp)
    8724:	df000017 	ldw	fp,0(sp)
    8728:	dec00204 	addi	sp,sp,8
    872c:	f800283a 	ret

00008730 <x1C>:
void x1C(CPU* cpu) {INCr(cpu, E);}
    8730:	defffd04 	addi	sp,sp,-12
    8734:	dfc00215 	stw	ra,8(sp)
    8738:	df000115 	stw	fp,4(sp)
    873c:	df000104 	addi	fp,sp,4
    8740:	e13fff15 	stw	r4,-4(fp)
    8744:	01400104 	movi	r5,4
    8748:	e13fff17 	ldw	r4,-4(fp)
    874c:	00040080 	call	4008 <INCr>
    8750:	0001883a 	nop
    8754:	e037883a 	mov	sp,fp
    8758:	dfc00117 	ldw	ra,4(sp)
    875c:	df000017 	ldw	fp,0(sp)
    8760:	dec00204 	addi	sp,sp,8
    8764:	f800283a 	ret

00008768 <x1D>:
void x1D(CPU* cpu) {DECr(cpu, E);}
    8768:	defffd04 	addi	sp,sp,-12
    876c:	dfc00215 	stw	ra,8(sp)
    8770:	df000115 	stw	fp,4(sp)
    8774:	df000104 	addi	fp,sp,4
    8778:	e13fff15 	stw	r4,-4(fp)
    877c:	01400104 	movi	r5,4
    8780:	e13fff17 	ldw	r4,-4(fp)
    8784:	00042240 	call	4224 <DECr>
    8788:	0001883a 	nop
    878c:	e037883a 	mov	sp,fp
    8790:	dfc00117 	ldw	ra,4(sp)
    8794:	df000017 	ldw	fp,0(sp)
    8798:	dec00204 	addi	sp,sp,8
    879c:	f800283a 	ret

000087a0 <x1E>:
void x1E(CPU* cpu) {LDrn(cpu, E);}
    87a0:	defffd04 	addi	sp,sp,-12
    87a4:	dfc00215 	stw	ra,8(sp)
    87a8:	df000115 	stw	fp,4(sp)
    87ac:	df000104 	addi	fp,sp,4
    87b0:	e13fff15 	stw	r4,-4(fp)
    87b4:	01400104 	movi	r5,4
    87b8:	e13fff17 	ldw	r4,-4(fp)
    87bc:	00034a40 	call	34a4 <LDrn>
    87c0:	0001883a 	nop
    87c4:	e037883a 	mov	sp,fp
    87c8:	dfc00117 	ldw	ra,4(sp)
    87cc:	df000017 	ldw	fp,0(sp)
    87d0:	dec00204 	addi	sp,sp,8
    87d4:	f800283a 	ret

000087d8 <x1F>:
void x1F(CPU* cpu) {
    87d8:	defffa04 	addi	sp,sp,-24
    87dc:	dfc00515 	stw	ra,20(sp)
    87e0:	df000415 	stw	fp,16(sp)
    87e4:	dc000315 	stw	r16,12(sp)
    87e8:	df000404 	addi	fp,sp,16
    87ec:	e13ffe15 	stw	r4,-8(fp)
	int c = (rr8(cpu, F) & 0x10) ? 1 : 0;
    87f0:	01400144 	movi	r5,5
    87f4:	e13ffe17 	ldw	r4,-8(fp)
    87f8:	00029180 	call	2918 <rr8>
    87fc:	10803fcc 	andi	r2,r2,255
    8800:	1080040c 	andi	r2,r2,16
    8804:	1004c03a 	cmpne	r2,r2,zero
    8808:	10803fcc 	andi	r2,r2,255
    880c:	e0bffc15 	stw	r2,-16(fp)
	int out = rr8(cpu, A) & 0x01;
    8810:	000b883a 	mov	r5,zero
    8814:	e13ffe17 	ldw	r4,-8(fp)
    8818:	00029180 	call	2918 <rr8>
    881c:	10803fcc 	andi	r2,r2,255
    8820:	1080004c 	andi	r2,r2,1
    8824:	e0bffd15 	stw	r2,-12(fp)
	out ? wr8(cpu, F, 0x10) : wr8(cpu, F, 0x00);
    8828:	e0bffd17 	ldw	r2,-12(fp)
    882c:	10000526 	beq	r2,zero,8844 <x1F+0x6c>
    8830:	01800404 	movi	r6,16
    8834:	01400144 	movi	r5,5
    8838:	e13ffe17 	ldw	r4,-8(fp)
    883c:	0002b7c0 	call	2b7c <wr8>
    8840:	00000406 	br	8854 <x1F+0x7c>
    8844:	000d883a 	mov	r6,zero
    8848:	01400144 	movi	r5,5
    884c:	e13ffe17 	ldw	r4,-8(fp)
    8850:	0002b7c0 	call	2b7c <wr8>
	wr8(cpu, A, (rr8(cpu, A)>>1) | (c*0x80));
    8854:	000b883a 	mov	r5,zero
    8858:	e13ffe17 	ldw	r4,-8(fp)
    885c:	00029180 	call	2918 <rr8>
    8860:	10803fcc 	andi	r2,r2,255
    8864:	1004d07a 	srli	r2,r2,1
    8868:	1021883a 	mov	r16,r2
    886c:	e0bffc17 	ldw	r2,-16(fp)
    8870:	017fe004 	movi	r5,-128
    8874:	1009883a 	mov	r4,r2
    8878:	000cefc0 	call	cefc <__mulsi3>
    887c:	8084b03a 	or	r2,r16,r2
    8880:	10803fcc 	andi	r2,r2,255
    8884:	100d883a 	mov	r6,r2
    8888:	000b883a 	mov	r5,zero
    888c:	e13ffe17 	ldw	r4,-8(fp)
    8890:	0002b7c0 	call	2b7c <wr8>
	cpu->clock.c += 4;
    8894:	e0bffe17 	ldw	r2,-8(fp)
    8898:	10800017 	ldw	r2,0(r2)
    889c:	10c00104 	addi	r3,r2,4
    88a0:	e0bffe17 	ldw	r2,-8(fp)
    88a4:	10c00015 	stw	r3,0(r2)
}
    88a8:	0001883a 	nop
    88ac:	e6ffff04 	addi	sp,fp,-4
    88b0:	dfc00217 	ldw	ra,8(sp)
    88b4:	df000117 	ldw	fp,4(sp)
    88b8:	dc000017 	ldw	r16,0(sp)
    88bc:	dec00304 	addi	sp,sp,12
    88c0:	f800283a 	ret

000088c4 <x20>:

void x20(CPU* cpu) {JRccn(cpu, NZ);}
    88c4:	defffd04 	addi	sp,sp,-12
    88c8:	dfc00215 	stw	ra,8(sp)
    88cc:	df000115 	stw	fp,4(sp)
    88d0:	df000104 	addi	fp,sp,4
    88d4:	e13fff15 	stw	r4,-4(fp)
    88d8:	000b883a 	mov	r5,zero
    88dc:	e13fff17 	ldw	r4,-4(fp)
    88e0:	00070f80 	call	70f8 <JRccn>
    88e4:	0001883a 	nop
    88e8:	e037883a 	mov	sp,fp
    88ec:	dfc00117 	ldw	ra,4(sp)
    88f0:	df000017 	ldw	fp,0(sp)
    88f4:	dec00204 	addi	sp,sp,8
    88f8:	f800283a 	ret

000088fc <x21>:
void x21(CPU* cpu) {LDrrnn(cpu, H, L);}
    88fc:	defffd04 	addi	sp,sp,-12
    8900:	dfc00215 	stw	ra,8(sp)
    8904:	df000115 	stw	fp,4(sp)
    8908:	df000104 	addi	fp,sp,4
    890c:	e13fff15 	stw	r4,-4(fp)
    8910:	018001c4 	movi	r6,7
    8914:	01400184 	movi	r5,6
    8918:	e13fff17 	ldw	r4,-4(fp)
    891c:	00032ec0 	call	32ec <LDrrnn>
    8920:	0001883a 	nop
    8924:	e037883a 	mov	sp,fp
    8928:	dfc00117 	ldw	ra,4(sp)
    892c:	df000017 	ldw	fp,0(sp)
    8930:	dec00204 	addi	sp,sp,8
    8934:	f800283a 	ret

00008938 <x22>:
void x22(CPU* cpu) {LDrrar(cpu, H, L, A); INCrr(cpu, H, L); cpu->clock.c -= 8;}
    8938:	defffd04 	addi	sp,sp,-12
    893c:	dfc00215 	stw	ra,8(sp)
    8940:	df000115 	stw	fp,4(sp)
    8944:	df000104 	addi	fp,sp,4
    8948:	e13fff15 	stw	r4,-4(fp)
    894c:	000f883a 	mov	r7,zero
    8950:	018001c4 	movi	r6,7
    8954:	01400184 	movi	r5,6
    8958:	e13fff17 	ldw	r4,-4(fp)
    895c:	00033a00 	call	33a0 <LDrrar>
    8960:	018001c4 	movi	r6,7
    8964:	01400184 	movi	r5,6
    8968:	e13fff17 	ldw	r4,-4(fp)
    896c:	0003de00 	call	3de0 <INCrr>
    8970:	e0bfff17 	ldw	r2,-4(fp)
    8974:	10800017 	ldw	r2,0(r2)
    8978:	10fffe04 	addi	r3,r2,-8
    897c:	e0bfff17 	ldw	r2,-4(fp)
    8980:	10c00015 	stw	r3,0(r2)
    8984:	0001883a 	nop
    8988:	e037883a 	mov	sp,fp
    898c:	dfc00117 	ldw	ra,4(sp)
    8990:	df000017 	ldw	fp,0(sp)
    8994:	dec00204 	addi	sp,sp,8
    8998:	f800283a 	ret

0000899c <x23>:
void x23(CPU* cpu) {INCrr(cpu, H, L);}
    899c:	defffd04 	addi	sp,sp,-12
    89a0:	dfc00215 	stw	ra,8(sp)
    89a4:	df000115 	stw	fp,4(sp)
    89a8:	df000104 	addi	fp,sp,4
    89ac:	e13fff15 	stw	r4,-4(fp)
    89b0:	018001c4 	movi	r6,7
    89b4:	01400184 	movi	r5,6
    89b8:	e13fff17 	ldw	r4,-4(fp)
    89bc:	0003de00 	call	3de0 <INCrr>
    89c0:	0001883a 	nop
    89c4:	e037883a 	mov	sp,fp
    89c8:	dfc00117 	ldw	ra,4(sp)
    89cc:	df000017 	ldw	fp,0(sp)
    89d0:	dec00204 	addi	sp,sp,8
    89d4:	f800283a 	ret

000089d8 <x24>:
void x24(CPU* cpu) {INCr(cpu, H);}
    89d8:	defffd04 	addi	sp,sp,-12
    89dc:	dfc00215 	stw	ra,8(sp)
    89e0:	df000115 	stw	fp,4(sp)
    89e4:	df000104 	addi	fp,sp,4
    89e8:	e13fff15 	stw	r4,-4(fp)
    89ec:	01400184 	movi	r5,6
    89f0:	e13fff17 	ldw	r4,-4(fp)
    89f4:	00040080 	call	4008 <INCr>
    89f8:	0001883a 	nop
    89fc:	e037883a 	mov	sp,fp
    8a00:	dfc00117 	ldw	ra,4(sp)
    8a04:	df000017 	ldw	fp,0(sp)
    8a08:	dec00204 	addi	sp,sp,8
    8a0c:	f800283a 	ret

00008a10 <x25>:
void x25(CPU* cpu) {DECr(cpu, H);}
    8a10:	defffd04 	addi	sp,sp,-12
    8a14:	dfc00215 	stw	ra,8(sp)
    8a18:	df000115 	stw	fp,4(sp)
    8a1c:	df000104 	addi	fp,sp,4
    8a20:	e13fff15 	stw	r4,-4(fp)
    8a24:	01400184 	movi	r5,6
    8a28:	e13fff17 	ldw	r4,-4(fp)
    8a2c:	00042240 	call	4224 <DECr>
    8a30:	0001883a 	nop
    8a34:	e037883a 	mov	sp,fp
    8a38:	dfc00117 	ldw	ra,4(sp)
    8a3c:	df000017 	ldw	fp,0(sp)
    8a40:	dec00204 	addi	sp,sp,8
    8a44:	f800283a 	ret

00008a48 <x26>:
void x26(CPU* cpu) {LDrn(cpu, H);}
    8a48:	defffd04 	addi	sp,sp,-12
    8a4c:	dfc00215 	stw	ra,8(sp)
    8a50:	df000115 	stw	fp,4(sp)
    8a54:	df000104 	addi	fp,sp,4
    8a58:	e13fff15 	stw	r4,-4(fp)
    8a5c:	01400184 	movi	r5,6
    8a60:	e13fff17 	ldw	r4,-4(fp)
    8a64:	00034a40 	call	34a4 <LDrn>
    8a68:	0001883a 	nop
    8a6c:	e037883a 	mov	sp,fp
    8a70:	dfc00117 	ldw	ra,4(sp)
    8a74:	df000017 	ldw	fp,0(sp)
    8a78:	dec00204 	addi	sp,sp,8
    8a7c:	f800283a 	ret

00008a80 <x27>:
void x27(CPU* cpu) {DAA(cpu);}
    8a80:	defffd04 	addi	sp,sp,-12
    8a84:	dfc00215 	stw	ra,8(sp)
    8a88:	df000115 	stw	fp,4(sp)
    8a8c:	df000104 	addi	fp,sp,4
    8a90:	e13fff15 	stw	r4,-4(fp)
    8a94:	e13fff17 	ldw	r4,-4(fp)
    8a98:	0007bd40 	call	7bd4 <DAA>
    8a9c:	0001883a 	nop
    8aa0:	e037883a 	mov	sp,fp
    8aa4:	dfc00117 	ldw	ra,4(sp)
    8aa8:	df000017 	ldw	fp,0(sp)
    8aac:	dec00204 	addi	sp,sp,8
    8ab0:	f800283a 	ret

00008ab4 <x28>:
void x28(CPU* cpu) {JRccn(cpu, Z);}
    8ab4:	defffd04 	addi	sp,sp,-12
    8ab8:	dfc00215 	stw	ra,8(sp)
    8abc:	df000115 	stw	fp,4(sp)
    8ac0:	df000104 	addi	fp,sp,4
    8ac4:	e13fff15 	stw	r4,-4(fp)
    8ac8:	01400084 	movi	r5,2
    8acc:	e13fff17 	ldw	r4,-4(fp)
    8ad0:	00070f80 	call	70f8 <JRccn>
    8ad4:	0001883a 	nop
    8ad8:	e037883a 	mov	sp,fp
    8adc:	dfc00117 	ldw	ra,4(sp)
    8ae0:	df000017 	ldw	fp,0(sp)
    8ae4:	dec00204 	addi	sp,sp,8
    8ae8:	f800283a 	ret

00008aec <x29>:
void x29(CPU* cpu) {ADDrrrr(cpu, H, L, H, L);}
    8aec:	defffc04 	addi	sp,sp,-16
    8af0:	dfc00315 	stw	ra,12(sp)
    8af4:	df000215 	stw	fp,8(sp)
    8af8:	df000204 	addi	fp,sp,8
    8afc:	e13fff15 	stw	r4,-4(fp)
    8b00:	008001c4 	movi	r2,7
    8b04:	d8800015 	stw	r2,0(sp)
    8b08:	01c00184 	movi	r7,6
    8b0c:	018001c4 	movi	r6,7
    8b10:	01400184 	movi	r5,6
    8b14:	e13fff17 	ldw	r4,-4(fp)
    8b18:	00046840 	call	4684 <ADDrrrr>
    8b1c:	0001883a 	nop
    8b20:	e037883a 	mov	sp,fp
    8b24:	dfc00117 	ldw	ra,4(sp)
    8b28:	df000017 	ldw	fp,0(sp)
    8b2c:	dec00204 	addi	sp,sp,8
    8b30:	f800283a 	ret

00008b34 <x2A>:
void x2A(CPU* cpu) {LDrrra(cpu, A, H, L); INCrr(cpu, H, L); cpu->clock.c -= 8;}
    8b34:	defffd04 	addi	sp,sp,-12
    8b38:	dfc00215 	stw	ra,8(sp)
    8b3c:	df000115 	stw	fp,4(sp)
    8b40:	df000104 	addi	fp,sp,4
    8b44:	e13fff15 	stw	r4,-4(fp)
    8b48:	01c001c4 	movi	r7,7
    8b4c:	01800184 	movi	r6,6
    8b50:	000b883a 	mov	r5,zero
    8b54:	e13fff17 	ldw	r4,-4(fp)
    8b58:	00034280 	call	3428 <LDrrra>
    8b5c:	018001c4 	movi	r6,7
    8b60:	01400184 	movi	r5,6
    8b64:	e13fff17 	ldw	r4,-4(fp)
    8b68:	0003de00 	call	3de0 <INCrr>
    8b6c:	e0bfff17 	ldw	r2,-4(fp)
    8b70:	10800017 	ldw	r2,0(r2)
    8b74:	10fffe04 	addi	r3,r2,-8
    8b78:	e0bfff17 	ldw	r2,-4(fp)
    8b7c:	10c00015 	stw	r3,0(r2)
    8b80:	0001883a 	nop
    8b84:	e037883a 	mov	sp,fp
    8b88:	dfc00117 	ldw	ra,4(sp)
    8b8c:	df000017 	ldw	fp,0(sp)
    8b90:	dec00204 	addi	sp,sp,8
    8b94:	f800283a 	ret

00008b98 <x2B>:
void x2B(CPU* cpu) {DECrr(cpu, H, L);}
    8b98:	defffd04 	addi	sp,sp,-12
    8b9c:	dfc00215 	stw	ra,8(sp)
    8ba0:	df000115 	stw	fp,4(sp)
    8ba4:	df000104 	addi	fp,sp,4
    8ba8:	e13fff15 	stw	r4,-4(fp)
    8bac:	018001c4 	movi	r6,7
    8bb0:	01400184 	movi	r5,6
    8bb4:	e13fff17 	ldw	r4,-4(fp)
    8bb8:	00041080 	call	4108 <DECrr>
    8bbc:	0001883a 	nop
    8bc0:	e037883a 	mov	sp,fp
    8bc4:	dfc00117 	ldw	ra,4(sp)
    8bc8:	df000017 	ldw	fp,0(sp)
    8bcc:	dec00204 	addi	sp,sp,8
    8bd0:	f800283a 	ret

00008bd4 <x2C>:
void x2C(CPU* cpu) {INCr(cpu, L);}
    8bd4:	defffd04 	addi	sp,sp,-12
    8bd8:	dfc00215 	stw	ra,8(sp)
    8bdc:	df000115 	stw	fp,4(sp)
    8be0:	df000104 	addi	fp,sp,4
    8be4:	e13fff15 	stw	r4,-4(fp)
    8be8:	014001c4 	movi	r5,7
    8bec:	e13fff17 	ldw	r4,-4(fp)
    8bf0:	00040080 	call	4008 <INCr>
    8bf4:	0001883a 	nop
    8bf8:	e037883a 	mov	sp,fp
    8bfc:	dfc00117 	ldw	ra,4(sp)
    8c00:	df000017 	ldw	fp,0(sp)
    8c04:	dec00204 	addi	sp,sp,8
    8c08:	f800283a 	ret

00008c0c <x2D>:
void x2D(CPU* cpu) {DECr(cpu, L);}
    8c0c:	defffd04 	addi	sp,sp,-12
    8c10:	dfc00215 	stw	ra,8(sp)
    8c14:	df000115 	stw	fp,4(sp)
    8c18:	df000104 	addi	fp,sp,4
    8c1c:	e13fff15 	stw	r4,-4(fp)
    8c20:	014001c4 	movi	r5,7
    8c24:	e13fff17 	ldw	r4,-4(fp)
    8c28:	00042240 	call	4224 <DECr>
    8c2c:	0001883a 	nop
    8c30:	e037883a 	mov	sp,fp
    8c34:	dfc00117 	ldw	ra,4(sp)
    8c38:	df000017 	ldw	fp,0(sp)
    8c3c:	dec00204 	addi	sp,sp,8
    8c40:	f800283a 	ret

00008c44 <x2E>:
void x2E(CPU* cpu) {LDrn(cpu, L);}
    8c44:	defffd04 	addi	sp,sp,-12
    8c48:	dfc00215 	stw	ra,8(sp)
    8c4c:	df000115 	stw	fp,4(sp)
    8c50:	df000104 	addi	fp,sp,4
    8c54:	e13fff15 	stw	r4,-4(fp)
    8c58:	014001c4 	movi	r5,7
    8c5c:	e13fff17 	ldw	r4,-4(fp)
    8c60:	00034a40 	call	34a4 <LDrn>
    8c64:	0001883a 	nop
    8c68:	e037883a 	mov	sp,fp
    8c6c:	dfc00117 	ldw	ra,4(sp)
    8c70:	df000017 	ldw	fp,0(sp)
    8c74:	dec00204 	addi	sp,sp,8
    8c78:	f800283a 	ret

00008c7c <x2F>:
void x2F(CPU* cpu) {CPL(cpu);}
    8c7c:	defffd04 	addi	sp,sp,-12
    8c80:	dfc00215 	stw	ra,8(sp)
    8c84:	df000115 	stw	fp,4(sp)
    8c88:	df000104 	addi	fp,sp,4
    8c8c:	e13fff15 	stw	r4,-4(fp)
    8c90:	e13fff17 	ldw	r4,-4(fp)
    8c94:	0007a500 	call	7a50 <CPL>
    8c98:	0001883a 	nop
    8c9c:	e037883a 	mov	sp,fp
    8ca0:	dfc00117 	ldw	ra,4(sp)
    8ca4:	df000017 	ldw	fp,0(sp)
    8ca8:	dec00204 	addi	sp,sp,8
    8cac:	f800283a 	ret

00008cb0 <x30>:

void x30(CPU* cpu) {JRccn(cpu, NC);}
    8cb0:	defffd04 	addi	sp,sp,-12
    8cb4:	dfc00215 	stw	ra,8(sp)
    8cb8:	df000115 	stw	fp,4(sp)
    8cbc:	df000104 	addi	fp,sp,4
    8cc0:	e13fff15 	stw	r4,-4(fp)
    8cc4:	01400044 	movi	r5,1
    8cc8:	e13fff17 	ldw	r4,-4(fp)
    8ccc:	00070f80 	call	70f8 <JRccn>
    8cd0:	0001883a 	nop
    8cd4:	e037883a 	mov	sp,fp
    8cd8:	dfc00117 	ldw	ra,4(sp)
    8cdc:	df000017 	ldw	fp,0(sp)
    8ce0:	dec00204 	addi	sp,sp,8
    8ce4:	f800283a 	ret

00008ce8 <x31>:
void x31(CPU* cpu) {LDspnn(cpu);}
    8ce8:	defffd04 	addi	sp,sp,-12
    8cec:	dfc00215 	stw	ra,8(sp)
    8cf0:	df000115 	stw	fp,4(sp)
    8cf4:	df000104 	addi	fp,sp,4
    8cf8:	e13fff15 	stw	r4,-4(fp)
    8cfc:	e13fff17 	ldw	r4,-4(fp)
    8d00:	00036880 	call	3688 <LDspnn>
    8d04:	0001883a 	nop
    8d08:	e037883a 	mov	sp,fp
    8d0c:	dfc00117 	ldw	ra,4(sp)
    8d10:	df000017 	ldw	fp,0(sp)
    8d14:	dec00204 	addi	sp,sp,8
    8d18:	f800283a 	ret

00008d1c <x32>:
void x32(CPU* cpu) {LDrrar(cpu, H, L, A); DECrr(cpu, H, L); cpu->clock.c -= 8;}
    8d1c:	defffd04 	addi	sp,sp,-12
    8d20:	dfc00215 	stw	ra,8(sp)
    8d24:	df000115 	stw	fp,4(sp)
    8d28:	df000104 	addi	fp,sp,4
    8d2c:	e13fff15 	stw	r4,-4(fp)
    8d30:	000f883a 	mov	r7,zero
    8d34:	018001c4 	movi	r6,7
    8d38:	01400184 	movi	r5,6
    8d3c:	e13fff17 	ldw	r4,-4(fp)
    8d40:	00033a00 	call	33a0 <LDrrar>
    8d44:	018001c4 	movi	r6,7
    8d48:	01400184 	movi	r5,6
    8d4c:	e13fff17 	ldw	r4,-4(fp)
    8d50:	00041080 	call	4108 <DECrr>
    8d54:	e0bfff17 	ldw	r2,-4(fp)
    8d58:	10800017 	ldw	r2,0(r2)
    8d5c:	10fffe04 	addi	r3,r2,-8
    8d60:	e0bfff17 	ldw	r2,-4(fp)
    8d64:	10c00015 	stw	r3,0(r2)
    8d68:	0001883a 	nop
    8d6c:	e037883a 	mov	sp,fp
    8d70:	dfc00117 	ldw	ra,4(sp)
    8d74:	df000017 	ldw	fp,0(sp)
    8d78:	dec00204 	addi	sp,sp,8
    8d7c:	f800283a 	ret

00008d80 <x33>:
void x33(CPU* cpu) {INCsp(cpu);}
    8d80:	defffd04 	addi	sp,sp,-12
    8d84:	dfc00215 	stw	ra,8(sp)
    8d88:	df000115 	stw	fp,4(sp)
    8d8c:	df000104 	addi	fp,sp,4
    8d90:	e13fff15 	stw	r4,-4(fp)
    8d94:	e13fff17 	ldw	r4,-4(fp)
    8d98:	0003f980 	call	3f98 <INCsp>
    8d9c:	0001883a 	nop
    8da0:	e037883a 	mov	sp,fp
    8da4:	dfc00117 	ldw	ra,4(sp)
    8da8:	df000017 	ldw	fp,0(sp)
    8dac:	dec00204 	addi	sp,sp,8
    8db0:	f800283a 	ret

00008db4 <x34>:
void x34(CPU* cpu) {INCrra(cpu, H, L);}
    8db4:	defffd04 	addi	sp,sp,-12
    8db8:	dfc00215 	stw	ra,8(sp)
    8dbc:	df000115 	stw	fp,4(sp)
    8dc0:	df000104 	addi	fp,sp,4
    8dc4:	e13fff15 	stw	r4,-4(fp)
    8dc8:	018001c4 	movi	r6,7
    8dcc:	01400184 	movi	r5,6
    8dd0:	e13fff17 	ldw	r4,-4(fp)
    8dd4:	0003e840 	call	3e84 <INCrra>
    8dd8:	0001883a 	nop
    8ddc:	e037883a 	mov	sp,fp
    8de0:	dfc00117 	ldw	ra,4(sp)
    8de4:	df000017 	ldw	fp,0(sp)
    8de8:	dec00204 	addi	sp,sp,8
    8dec:	f800283a 	ret

00008df0 <x35>:
void x35(CPU* cpu) {DECrra(cpu, H, L);}
    8df0:	defffd04 	addi	sp,sp,-12
    8df4:	dfc00215 	stw	ra,8(sp)
    8df8:	df000115 	stw	fp,4(sp)
    8dfc:	df000104 	addi	fp,sp,4
    8e00:	e13fff15 	stw	r4,-4(fp)
    8e04:	018001c4 	movi	r6,7
    8e08:	01400184 	movi	r5,6
    8e0c:	e13fff17 	ldw	r4,-4(fp)
    8e10:	000433c0 	call	433c <DECrra>
    8e14:	0001883a 	nop
    8e18:	e037883a 	mov	sp,fp
    8e1c:	dfc00117 	ldw	ra,4(sp)
    8e20:	df000017 	ldw	fp,0(sp)
    8e24:	dec00204 	addi	sp,sp,8
    8e28:	f800283a 	ret

00008e2c <x36>:
void x36(CPU* cpu) {LDrran(cpu, H, L);}
    8e2c:	defffd04 	addi	sp,sp,-12
    8e30:	dfc00215 	stw	ra,8(sp)
    8e34:	df000115 	stw	fp,4(sp)
    8e38:	df000104 	addi	fp,sp,4
    8e3c:	e13fff15 	stw	r4,-4(fp)
    8e40:	018001c4 	movi	r6,7
    8e44:	01400184 	movi	r5,6
    8e48:	e13fff17 	ldw	r4,-4(fp)
    8e4c:	0003bc80 	call	3bc8 <LDrran>
    8e50:	0001883a 	nop
    8e54:	e037883a 	mov	sp,fp
    8e58:	dfc00117 	ldw	ra,4(sp)
    8e5c:	df000017 	ldw	fp,0(sp)
    8e60:	dec00204 	addi	sp,sp,8
    8e64:	f800283a 	ret

00008e68 <x37>:
void x37(CPU* cpu) {SCF(cpu);}
    8e68:	defffd04 	addi	sp,sp,-12
    8e6c:	dfc00215 	stw	ra,8(sp)
    8e70:	df000115 	stw	fp,4(sp)
    8e74:	df000104 	addi	fp,sp,4
    8e78:	e13fff15 	stw	r4,-4(fp)
    8e7c:	e13fff17 	ldw	r4,-4(fp)
    8e80:	0007b680 	call	7b68 <SCF>
    8e84:	0001883a 	nop
    8e88:	e037883a 	mov	sp,fp
    8e8c:	dfc00117 	ldw	ra,4(sp)
    8e90:	df000017 	ldw	fp,0(sp)
    8e94:	dec00204 	addi	sp,sp,8
    8e98:	f800283a 	ret

00008e9c <x38>:
void x38(CPU* cpu) {JRccn(cpu, C);}
    8e9c:	defffd04 	addi	sp,sp,-12
    8ea0:	dfc00215 	stw	ra,8(sp)
    8ea4:	df000115 	stw	fp,4(sp)
    8ea8:	df000104 	addi	fp,sp,4
    8eac:	e13fff15 	stw	r4,-4(fp)
    8eb0:	01400084 	movi	r5,2
    8eb4:	e13fff17 	ldw	r4,-4(fp)
    8eb8:	00070f80 	call	70f8 <JRccn>
    8ebc:	0001883a 	nop
    8ec0:	e037883a 	mov	sp,fp
    8ec4:	dfc00117 	ldw	ra,4(sp)
    8ec8:	df000017 	ldw	fp,0(sp)
    8ecc:	dec00204 	addi	sp,sp,8
    8ed0:	f800283a 	ret

00008ed4 <x39>:
void x39(CPU* cpu) {ADDrrsp(cpu, H, L);}
    8ed4:	defffd04 	addi	sp,sp,-12
    8ed8:	dfc00215 	stw	ra,8(sp)
    8edc:	df000115 	stw	fp,4(sp)
    8ee0:	df000104 	addi	fp,sp,4
    8ee4:	e13fff15 	stw	r4,-4(fp)
    8ee8:	018001c4 	movi	r6,7
    8eec:	01400184 	movi	r5,6
    8ef0:	e13fff17 	ldw	r4,-4(fp)
    8ef4:	00047280 	call	4728 <ADDrrsp>
    8ef8:	0001883a 	nop
    8efc:	e037883a 	mov	sp,fp
    8f00:	dfc00117 	ldw	ra,4(sp)
    8f04:	df000017 	ldw	fp,0(sp)
    8f08:	dec00204 	addi	sp,sp,8
    8f0c:	f800283a 	ret

00008f10 <x3A>:
void x3A(CPU* cpu) {LDrrra(cpu, A, H, L); DECrr(cpu, H, L); cpu->clock.c -= 8;}
    8f10:	defffd04 	addi	sp,sp,-12
    8f14:	dfc00215 	stw	ra,8(sp)
    8f18:	df000115 	stw	fp,4(sp)
    8f1c:	df000104 	addi	fp,sp,4
    8f20:	e13fff15 	stw	r4,-4(fp)
    8f24:	01c001c4 	movi	r7,7
    8f28:	01800184 	movi	r6,6
    8f2c:	000b883a 	mov	r5,zero
    8f30:	e13fff17 	ldw	r4,-4(fp)
    8f34:	00034280 	call	3428 <LDrrra>
    8f38:	018001c4 	movi	r6,7
    8f3c:	01400184 	movi	r5,6
    8f40:	e13fff17 	ldw	r4,-4(fp)
    8f44:	00041080 	call	4108 <DECrr>
    8f48:	e0bfff17 	ldw	r2,-4(fp)
    8f4c:	10800017 	ldw	r2,0(r2)
    8f50:	10fffe04 	addi	r3,r2,-8
    8f54:	e0bfff17 	ldw	r2,-4(fp)
    8f58:	10c00015 	stw	r3,0(r2)
    8f5c:	0001883a 	nop
    8f60:	e037883a 	mov	sp,fp
    8f64:	dfc00117 	ldw	ra,4(sp)
    8f68:	df000017 	ldw	fp,0(sp)
    8f6c:	dec00204 	addi	sp,sp,8
    8f70:	f800283a 	ret

00008f74 <x3B>:
void x3B(CPU* cpu) {DECsp(cpu);}
    8f74:	defffd04 	addi	sp,sp,-12
    8f78:	dfc00215 	stw	ra,8(sp)
    8f7c:	df000115 	stw	fp,4(sp)
    8f80:	df000104 	addi	fp,sp,4
    8f84:	e13fff15 	stw	r4,-4(fp)
    8f88:	e13fff17 	ldw	r4,-4(fp)
    8f8c:	00041b00 	call	41b0 <DECsp>
    8f90:	0001883a 	nop
    8f94:	e037883a 	mov	sp,fp
    8f98:	dfc00117 	ldw	ra,4(sp)
    8f9c:	df000017 	ldw	fp,0(sp)
    8fa0:	dec00204 	addi	sp,sp,8
    8fa4:	f800283a 	ret

00008fa8 <x3C>:
void x3C(CPU* cpu) {INCr(cpu, A);}
    8fa8:	defffd04 	addi	sp,sp,-12
    8fac:	dfc00215 	stw	ra,8(sp)
    8fb0:	df000115 	stw	fp,4(sp)
    8fb4:	df000104 	addi	fp,sp,4
    8fb8:	e13fff15 	stw	r4,-4(fp)
    8fbc:	000b883a 	mov	r5,zero
    8fc0:	e13fff17 	ldw	r4,-4(fp)
    8fc4:	00040080 	call	4008 <INCr>
    8fc8:	0001883a 	nop
    8fcc:	e037883a 	mov	sp,fp
    8fd0:	dfc00117 	ldw	ra,4(sp)
    8fd4:	df000017 	ldw	fp,0(sp)
    8fd8:	dec00204 	addi	sp,sp,8
    8fdc:	f800283a 	ret

00008fe0 <x3D>:
void x3D(CPU* cpu) {DECr(cpu, A);}
    8fe0:	defffd04 	addi	sp,sp,-12
    8fe4:	dfc00215 	stw	ra,8(sp)
    8fe8:	df000115 	stw	fp,4(sp)
    8fec:	df000104 	addi	fp,sp,4
    8ff0:	e13fff15 	stw	r4,-4(fp)
    8ff4:	000b883a 	mov	r5,zero
    8ff8:	e13fff17 	ldw	r4,-4(fp)
    8ffc:	00042240 	call	4224 <DECr>
    9000:	0001883a 	nop
    9004:	e037883a 	mov	sp,fp
    9008:	dfc00117 	ldw	ra,4(sp)
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00204 	addi	sp,sp,8
    9014:	f800283a 	ret

00009018 <x3E>:
void x3E(CPU* cpu) {LDrn(cpu, A);}
    9018:	defffd04 	addi	sp,sp,-12
    901c:	dfc00215 	stw	ra,8(sp)
    9020:	df000115 	stw	fp,4(sp)
    9024:	df000104 	addi	fp,sp,4
    9028:	e13fff15 	stw	r4,-4(fp)
    902c:	000b883a 	mov	r5,zero
    9030:	e13fff17 	ldw	r4,-4(fp)
    9034:	00034a40 	call	34a4 <LDrn>
    9038:	0001883a 	nop
    903c:	e037883a 	mov	sp,fp
    9040:	dfc00117 	ldw	ra,4(sp)
    9044:	df000017 	ldw	fp,0(sp)
    9048:	dec00204 	addi	sp,sp,8
    904c:	f800283a 	ret

00009050 <x3F>:
void x3F(CPU* cpu) {CCF(cpu);}
    9050:	defffd04 	addi	sp,sp,-12
    9054:	dfc00215 	stw	ra,8(sp)
    9058:	df000115 	stw	fp,4(sp)
    905c:	df000104 	addi	fp,sp,4
    9060:	e13fff15 	stw	r4,-4(fp)
    9064:	e13fff17 	ldw	r4,-4(fp)
    9068:	0007ac80 	call	7ac8 <CCF>
    906c:	0001883a 	nop
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <x40>:

void x40(CPU* cpu){LDrr(cpu, B, B);}
    9084:	defffd04 	addi	sp,sp,-12
    9088:	dfc00215 	stw	ra,8(sp)
    908c:	df000115 	stw	fp,4(sp)
    9090:	df000104 	addi	fp,sp,4
    9094:	e13fff15 	stw	r4,-4(fp)
    9098:	01800044 	movi	r6,1
    909c:	01400044 	movi	r5,1
    90a0:	e13fff17 	ldw	r4,-4(fp)
    90a4:	00035200 	call	3520 <LDrr>
    90a8:	0001883a 	nop
    90ac:	e037883a 	mov	sp,fp
    90b0:	dfc00117 	ldw	ra,4(sp)
    90b4:	df000017 	ldw	fp,0(sp)
    90b8:	dec00204 	addi	sp,sp,8
    90bc:	f800283a 	ret

000090c0 <x41>:
void x41(CPU* cpu){LDrr(cpu, B, C);}
    90c0:	defffd04 	addi	sp,sp,-12
    90c4:	dfc00215 	stw	ra,8(sp)
    90c8:	df000115 	stw	fp,4(sp)
    90cc:	df000104 	addi	fp,sp,4
    90d0:	e13fff15 	stw	r4,-4(fp)
    90d4:	01800084 	movi	r6,2
    90d8:	01400044 	movi	r5,1
    90dc:	e13fff17 	ldw	r4,-4(fp)
    90e0:	00035200 	call	3520 <LDrr>
    90e4:	0001883a 	nop
    90e8:	e037883a 	mov	sp,fp
    90ec:	dfc00117 	ldw	ra,4(sp)
    90f0:	df000017 	ldw	fp,0(sp)
    90f4:	dec00204 	addi	sp,sp,8
    90f8:	f800283a 	ret

000090fc <x42>:
void x42(CPU* cpu){LDrr(cpu, B, D);}
    90fc:	defffd04 	addi	sp,sp,-12
    9100:	dfc00215 	stw	ra,8(sp)
    9104:	df000115 	stw	fp,4(sp)
    9108:	df000104 	addi	fp,sp,4
    910c:	e13fff15 	stw	r4,-4(fp)
    9110:	018000c4 	movi	r6,3
    9114:	01400044 	movi	r5,1
    9118:	e13fff17 	ldw	r4,-4(fp)
    911c:	00035200 	call	3520 <LDrr>
    9120:	0001883a 	nop
    9124:	e037883a 	mov	sp,fp
    9128:	dfc00117 	ldw	ra,4(sp)
    912c:	df000017 	ldw	fp,0(sp)
    9130:	dec00204 	addi	sp,sp,8
    9134:	f800283a 	ret

00009138 <x43>:
void x43(CPU* cpu){LDrr(cpu, B, E);}
    9138:	defffd04 	addi	sp,sp,-12
    913c:	dfc00215 	stw	ra,8(sp)
    9140:	df000115 	stw	fp,4(sp)
    9144:	df000104 	addi	fp,sp,4
    9148:	e13fff15 	stw	r4,-4(fp)
    914c:	01800104 	movi	r6,4
    9150:	01400044 	movi	r5,1
    9154:	e13fff17 	ldw	r4,-4(fp)
    9158:	00035200 	call	3520 <LDrr>
    915c:	0001883a 	nop
    9160:	e037883a 	mov	sp,fp
    9164:	dfc00117 	ldw	ra,4(sp)
    9168:	df000017 	ldw	fp,0(sp)
    916c:	dec00204 	addi	sp,sp,8
    9170:	f800283a 	ret

00009174 <x44>:
void x44(CPU* cpu){LDrr(cpu, B, H);}
    9174:	defffd04 	addi	sp,sp,-12
    9178:	dfc00215 	stw	ra,8(sp)
    917c:	df000115 	stw	fp,4(sp)
    9180:	df000104 	addi	fp,sp,4
    9184:	e13fff15 	stw	r4,-4(fp)
    9188:	01800184 	movi	r6,6
    918c:	01400044 	movi	r5,1
    9190:	e13fff17 	ldw	r4,-4(fp)
    9194:	00035200 	call	3520 <LDrr>
    9198:	0001883a 	nop
    919c:	e037883a 	mov	sp,fp
    91a0:	dfc00117 	ldw	ra,4(sp)
    91a4:	df000017 	ldw	fp,0(sp)
    91a8:	dec00204 	addi	sp,sp,8
    91ac:	f800283a 	ret

000091b0 <x45>:
void x45(CPU* cpu){LDrr(cpu, B, L);}
    91b0:	defffd04 	addi	sp,sp,-12
    91b4:	dfc00215 	stw	ra,8(sp)
    91b8:	df000115 	stw	fp,4(sp)
    91bc:	df000104 	addi	fp,sp,4
    91c0:	e13fff15 	stw	r4,-4(fp)
    91c4:	018001c4 	movi	r6,7
    91c8:	01400044 	movi	r5,1
    91cc:	e13fff17 	ldw	r4,-4(fp)
    91d0:	00035200 	call	3520 <LDrr>
    91d4:	0001883a 	nop
    91d8:	e037883a 	mov	sp,fp
    91dc:	dfc00117 	ldw	ra,4(sp)
    91e0:	df000017 	ldw	fp,0(sp)
    91e4:	dec00204 	addi	sp,sp,8
    91e8:	f800283a 	ret

000091ec <x46>:
void x46(CPU* cpu){LDrrra(cpu, B, H, L);}
    91ec:	defffd04 	addi	sp,sp,-12
    91f0:	dfc00215 	stw	ra,8(sp)
    91f4:	df000115 	stw	fp,4(sp)
    91f8:	df000104 	addi	fp,sp,4
    91fc:	e13fff15 	stw	r4,-4(fp)
    9200:	01c001c4 	movi	r7,7
    9204:	01800184 	movi	r6,6
    9208:	01400044 	movi	r5,1
    920c:	e13fff17 	ldw	r4,-4(fp)
    9210:	00034280 	call	3428 <LDrrra>
    9214:	0001883a 	nop
    9218:	e037883a 	mov	sp,fp
    921c:	dfc00117 	ldw	ra,4(sp)
    9220:	df000017 	ldw	fp,0(sp)
    9224:	dec00204 	addi	sp,sp,8
    9228:	f800283a 	ret

0000922c <x47>:
void x47(CPU* cpu){LDrr(cpu, B, A);}
    922c:	defffd04 	addi	sp,sp,-12
    9230:	dfc00215 	stw	ra,8(sp)
    9234:	df000115 	stw	fp,4(sp)
    9238:	df000104 	addi	fp,sp,4
    923c:	e13fff15 	stw	r4,-4(fp)
    9240:	000d883a 	mov	r6,zero
    9244:	01400044 	movi	r5,1
    9248:	e13fff17 	ldw	r4,-4(fp)
    924c:	00035200 	call	3520 <LDrr>
    9250:	0001883a 	nop
    9254:	e037883a 	mov	sp,fp
    9258:	dfc00117 	ldw	ra,4(sp)
    925c:	df000017 	ldw	fp,0(sp)
    9260:	dec00204 	addi	sp,sp,8
    9264:	f800283a 	ret

00009268 <x48>:
void x48(CPU* cpu){LDrr(cpu, C, B);}
    9268:	defffd04 	addi	sp,sp,-12
    926c:	dfc00215 	stw	ra,8(sp)
    9270:	df000115 	stw	fp,4(sp)
    9274:	df000104 	addi	fp,sp,4
    9278:	e13fff15 	stw	r4,-4(fp)
    927c:	01800044 	movi	r6,1
    9280:	01400084 	movi	r5,2
    9284:	e13fff17 	ldw	r4,-4(fp)
    9288:	00035200 	call	3520 <LDrr>
    928c:	0001883a 	nop
    9290:	e037883a 	mov	sp,fp
    9294:	dfc00117 	ldw	ra,4(sp)
    9298:	df000017 	ldw	fp,0(sp)
    929c:	dec00204 	addi	sp,sp,8
    92a0:	f800283a 	ret

000092a4 <x49>:
void x49(CPU* cpu){LDrr(cpu, C, C);}
    92a4:	defffd04 	addi	sp,sp,-12
    92a8:	dfc00215 	stw	ra,8(sp)
    92ac:	df000115 	stw	fp,4(sp)
    92b0:	df000104 	addi	fp,sp,4
    92b4:	e13fff15 	stw	r4,-4(fp)
    92b8:	01800084 	movi	r6,2
    92bc:	01400084 	movi	r5,2
    92c0:	e13fff17 	ldw	r4,-4(fp)
    92c4:	00035200 	call	3520 <LDrr>
    92c8:	0001883a 	nop
    92cc:	e037883a 	mov	sp,fp
    92d0:	dfc00117 	ldw	ra,4(sp)
    92d4:	df000017 	ldw	fp,0(sp)
    92d8:	dec00204 	addi	sp,sp,8
    92dc:	f800283a 	ret

000092e0 <x4A>:
void x4A(CPU* cpu){LDrr(cpu, C, D);}
    92e0:	defffd04 	addi	sp,sp,-12
    92e4:	dfc00215 	stw	ra,8(sp)
    92e8:	df000115 	stw	fp,4(sp)
    92ec:	df000104 	addi	fp,sp,4
    92f0:	e13fff15 	stw	r4,-4(fp)
    92f4:	018000c4 	movi	r6,3
    92f8:	01400084 	movi	r5,2
    92fc:	e13fff17 	ldw	r4,-4(fp)
    9300:	00035200 	call	3520 <LDrr>
    9304:	0001883a 	nop
    9308:	e037883a 	mov	sp,fp
    930c:	dfc00117 	ldw	ra,4(sp)
    9310:	df000017 	ldw	fp,0(sp)
    9314:	dec00204 	addi	sp,sp,8
    9318:	f800283a 	ret

0000931c <x4B>:
void x4B(CPU* cpu){LDrr(cpu, C, E);}
    931c:	defffd04 	addi	sp,sp,-12
    9320:	dfc00215 	stw	ra,8(sp)
    9324:	df000115 	stw	fp,4(sp)
    9328:	df000104 	addi	fp,sp,4
    932c:	e13fff15 	stw	r4,-4(fp)
    9330:	01800104 	movi	r6,4
    9334:	01400084 	movi	r5,2
    9338:	e13fff17 	ldw	r4,-4(fp)
    933c:	00035200 	call	3520 <LDrr>
    9340:	0001883a 	nop
    9344:	e037883a 	mov	sp,fp
    9348:	dfc00117 	ldw	ra,4(sp)
    934c:	df000017 	ldw	fp,0(sp)
    9350:	dec00204 	addi	sp,sp,8
    9354:	f800283a 	ret

00009358 <x4C>:
void x4C(CPU* cpu){LDrr(cpu, C, H);}
    9358:	defffd04 	addi	sp,sp,-12
    935c:	dfc00215 	stw	ra,8(sp)
    9360:	df000115 	stw	fp,4(sp)
    9364:	df000104 	addi	fp,sp,4
    9368:	e13fff15 	stw	r4,-4(fp)
    936c:	01800184 	movi	r6,6
    9370:	01400084 	movi	r5,2
    9374:	e13fff17 	ldw	r4,-4(fp)
    9378:	00035200 	call	3520 <LDrr>
    937c:	0001883a 	nop
    9380:	e037883a 	mov	sp,fp
    9384:	dfc00117 	ldw	ra,4(sp)
    9388:	df000017 	ldw	fp,0(sp)
    938c:	dec00204 	addi	sp,sp,8
    9390:	f800283a 	ret

00009394 <x4D>:
void x4D(CPU* cpu){LDrr(cpu, C, L);}
    9394:	defffd04 	addi	sp,sp,-12
    9398:	dfc00215 	stw	ra,8(sp)
    939c:	df000115 	stw	fp,4(sp)
    93a0:	df000104 	addi	fp,sp,4
    93a4:	e13fff15 	stw	r4,-4(fp)
    93a8:	018001c4 	movi	r6,7
    93ac:	01400084 	movi	r5,2
    93b0:	e13fff17 	ldw	r4,-4(fp)
    93b4:	00035200 	call	3520 <LDrr>
    93b8:	0001883a 	nop
    93bc:	e037883a 	mov	sp,fp
    93c0:	dfc00117 	ldw	ra,4(sp)
    93c4:	df000017 	ldw	fp,0(sp)
    93c8:	dec00204 	addi	sp,sp,8
    93cc:	f800283a 	ret

000093d0 <x4E>:
void x4E(CPU* cpu){LDrrra(cpu, C, H, L);}
    93d0:	defffd04 	addi	sp,sp,-12
    93d4:	dfc00215 	stw	ra,8(sp)
    93d8:	df000115 	stw	fp,4(sp)
    93dc:	df000104 	addi	fp,sp,4
    93e0:	e13fff15 	stw	r4,-4(fp)
    93e4:	01c001c4 	movi	r7,7
    93e8:	01800184 	movi	r6,6
    93ec:	01400084 	movi	r5,2
    93f0:	e13fff17 	ldw	r4,-4(fp)
    93f4:	00034280 	call	3428 <LDrrra>
    93f8:	0001883a 	nop
    93fc:	e037883a 	mov	sp,fp
    9400:	dfc00117 	ldw	ra,4(sp)
    9404:	df000017 	ldw	fp,0(sp)
    9408:	dec00204 	addi	sp,sp,8
    940c:	f800283a 	ret

00009410 <x4F>:
void x4F(CPU* cpu){LDrr(cpu, C, A);}
    9410:	defffd04 	addi	sp,sp,-12
    9414:	dfc00215 	stw	ra,8(sp)
    9418:	df000115 	stw	fp,4(sp)
    941c:	df000104 	addi	fp,sp,4
    9420:	e13fff15 	stw	r4,-4(fp)
    9424:	000d883a 	mov	r6,zero
    9428:	01400084 	movi	r5,2
    942c:	e13fff17 	ldw	r4,-4(fp)
    9430:	00035200 	call	3520 <LDrr>
    9434:	0001883a 	nop
    9438:	e037883a 	mov	sp,fp
    943c:	dfc00117 	ldw	ra,4(sp)
    9440:	df000017 	ldw	fp,0(sp)
    9444:	dec00204 	addi	sp,sp,8
    9448:	f800283a 	ret

0000944c <x50>:

void x50(CPU* cpu){LDrr(cpu, D, B);}
    944c:	defffd04 	addi	sp,sp,-12
    9450:	dfc00215 	stw	ra,8(sp)
    9454:	df000115 	stw	fp,4(sp)
    9458:	df000104 	addi	fp,sp,4
    945c:	e13fff15 	stw	r4,-4(fp)
    9460:	01800044 	movi	r6,1
    9464:	014000c4 	movi	r5,3
    9468:	e13fff17 	ldw	r4,-4(fp)
    946c:	00035200 	call	3520 <LDrr>
    9470:	0001883a 	nop
    9474:	e037883a 	mov	sp,fp
    9478:	dfc00117 	ldw	ra,4(sp)
    947c:	df000017 	ldw	fp,0(sp)
    9480:	dec00204 	addi	sp,sp,8
    9484:	f800283a 	ret

00009488 <x51>:
void x51(CPU* cpu){LDrr(cpu, D, C);}
    9488:	defffd04 	addi	sp,sp,-12
    948c:	dfc00215 	stw	ra,8(sp)
    9490:	df000115 	stw	fp,4(sp)
    9494:	df000104 	addi	fp,sp,4
    9498:	e13fff15 	stw	r4,-4(fp)
    949c:	01800084 	movi	r6,2
    94a0:	014000c4 	movi	r5,3
    94a4:	e13fff17 	ldw	r4,-4(fp)
    94a8:	00035200 	call	3520 <LDrr>
    94ac:	0001883a 	nop
    94b0:	e037883a 	mov	sp,fp
    94b4:	dfc00117 	ldw	ra,4(sp)
    94b8:	df000017 	ldw	fp,0(sp)
    94bc:	dec00204 	addi	sp,sp,8
    94c0:	f800283a 	ret

000094c4 <x52>:
void x52(CPU* cpu){LDrr(cpu, D, D);}
    94c4:	defffd04 	addi	sp,sp,-12
    94c8:	dfc00215 	stw	ra,8(sp)
    94cc:	df000115 	stw	fp,4(sp)
    94d0:	df000104 	addi	fp,sp,4
    94d4:	e13fff15 	stw	r4,-4(fp)
    94d8:	018000c4 	movi	r6,3
    94dc:	014000c4 	movi	r5,3
    94e0:	e13fff17 	ldw	r4,-4(fp)
    94e4:	00035200 	call	3520 <LDrr>
    94e8:	0001883a 	nop
    94ec:	e037883a 	mov	sp,fp
    94f0:	dfc00117 	ldw	ra,4(sp)
    94f4:	df000017 	ldw	fp,0(sp)
    94f8:	dec00204 	addi	sp,sp,8
    94fc:	f800283a 	ret

00009500 <x53>:
void x53(CPU* cpu){LDrr(cpu, D, E);}
    9500:	defffd04 	addi	sp,sp,-12
    9504:	dfc00215 	stw	ra,8(sp)
    9508:	df000115 	stw	fp,4(sp)
    950c:	df000104 	addi	fp,sp,4
    9510:	e13fff15 	stw	r4,-4(fp)
    9514:	01800104 	movi	r6,4
    9518:	014000c4 	movi	r5,3
    951c:	e13fff17 	ldw	r4,-4(fp)
    9520:	00035200 	call	3520 <LDrr>
    9524:	0001883a 	nop
    9528:	e037883a 	mov	sp,fp
    952c:	dfc00117 	ldw	ra,4(sp)
    9530:	df000017 	ldw	fp,0(sp)
    9534:	dec00204 	addi	sp,sp,8
    9538:	f800283a 	ret

0000953c <x54>:
void x54(CPU* cpu){LDrr(cpu, D, H);}
    953c:	defffd04 	addi	sp,sp,-12
    9540:	dfc00215 	stw	ra,8(sp)
    9544:	df000115 	stw	fp,4(sp)
    9548:	df000104 	addi	fp,sp,4
    954c:	e13fff15 	stw	r4,-4(fp)
    9550:	01800184 	movi	r6,6
    9554:	014000c4 	movi	r5,3
    9558:	e13fff17 	ldw	r4,-4(fp)
    955c:	00035200 	call	3520 <LDrr>
    9560:	0001883a 	nop
    9564:	e037883a 	mov	sp,fp
    9568:	dfc00117 	ldw	ra,4(sp)
    956c:	df000017 	ldw	fp,0(sp)
    9570:	dec00204 	addi	sp,sp,8
    9574:	f800283a 	ret

00009578 <x55>:
void x55(CPU* cpu){LDrr(cpu, D, L);}
    9578:	defffd04 	addi	sp,sp,-12
    957c:	dfc00215 	stw	ra,8(sp)
    9580:	df000115 	stw	fp,4(sp)
    9584:	df000104 	addi	fp,sp,4
    9588:	e13fff15 	stw	r4,-4(fp)
    958c:	018001c4 	movi	r6,7
    9590:	014000c4 	movi	r5,3
    9594:	e13fff17 	ldw	r4,-4(fp)
    9598:	00035200 	call	3520 <LDrr>
    959c:	0001883a 	nop
    95a0:	e037883a 	mov	sp,fp
    95a4:	dfc00117 	ldw	ra,4(sp)
    95a8:	df000017 	ldw	fp,0(sp)
    95ac:	dec00204 	addi	sp,sp,8
    95b0:	f800283a 	ret

000095b4 <x56>:
void x56(CPU* cpu){LDrrra(cpu, D, H, L);}
    95b4:	defffd04 	addi	sp,sp,-12
    95b8:	dfc00215 	stw	ra,8(sp)
    95bc:	df000115 	stw	fp,4(sp)
    95c0:	df000104 	addi	fp,sp,4
    95c4:	e13fff15 	stw	r4,-4(fp)
    95c8:	01c001c4 	movi	r7,7
    95cc:	01800184 	movi	r6,6
    95d0:	014000c4 	movi	r5,3
    95d4:	e13fff17 	ldw	r4,-4(fp)
    95d8:	00034280 	call	3428 <LDrrra>
    95dc:	0001883a 	nop
    95e0:	e037883a 	mov	sp,fp
    95e4:	dfc00117 	ldw	ra,4(sp)
    95e8:	df000017 	ldw	fp,0(sp)
    95ec:	dec00204 	addi	sp,sp,8
    95f0:	f800283a 	ret

000095f4 <x57>:
void x57(CPU* cpu){LDrr(cpu, D, A);}
    95f4:	defffd04 	addi	sp,sp,-12
    95f8:	dfc00215 	stw	ra,8(sp)
    95fc:	df000115 	stw	fp,4(sp)
    9600:	df000104 	addi	fp,sp,4
    9604:	e13fff15 	stw	r4,-4(fp)
    9608:	000d883a 	mov	r6,zero
    960c:	014000c4 	movi	r5,3
    9610:	e13fff17 	ldw	r4,-4(fp)
    9614:	00035200 	call	3520 <LDrr>
    9618:	0001883a 	nop
    961c:	e037883a 	mov	sp,fp
    9620:	dfc00117 	ldw	ra,4(sp)
    9624:	df000017 	ldw	fp,0(sp)
    9628:	dec00204 	addi	sp,sp,8
    962c:	f800283a 	ret

00009630 <x58>:
void x58(CPU* cpu){LDrr(cpu, E, B);}
    9630:	defffd04 	addi	sp,sp,-12
    9634:	dfc00215 	stw	ra,8(sp)
    9638:	df000115 	stw	fp,4(sp)
    963c:	df000104 	addi	fp,sp,4
    9640:	e13fff15 	stw	r4,-4(fp)
    9644:	01800044 	movi	r6,1
    9648:	01400104 	movi	r5,4
    964c:	e13fff17 	ldw	r4,-4(fp)
    9650:	00035200 	call	3520 <LDrr>
    9654:	0001883a 	nop
    9658:	e037883a 	mov	sp,fp
    965c:	dfc00117 	ldw	ra,4(sp)
    9660:	df000017 	ldw	fp,0(sp)
    9664:	dec00204 	addi	sp,sp,8
    9668:	f800283a 	ret

0000966c <x59>:
void x59(CPU* cpu){LDrr(cpu, E, C);}
    966c:	defffd04 	addi	sp,sp,-12
    9670:	dfc00215 	stw	ra,8(sp)
    9674:	df000115 	stw	fp,4(sp)
    9678:	df000104 	addi	fp,sp,4
    967c:	e13fff15 	stw	r4,-4(fp)
    9680:	01800084 	movi	r6,2
    9684:	01400104 	movi	r5,4
    9688:	e13fff17 	ldw	r4,-4(fp)
    968c:	00035200 	call	3520 <LDrr>
    9690:	0001883a 	nop
    9694:	e037883a 	mov	sp,fp
    9698:	dfc00117 	ldw	ra,4(sp)
    969c:	df000017 	ldw	fp,0(sp)
    96a0:	dec00204 	addi	sp,sp,8
    96a4:	f800283a 	ret

000096a8 <x5A>:
void x5A(CPU* cpu){LDrr(cpu, E, D);}
    96a8:	defffd04 	addi	sp,sp,-12
    96ac:	dfc00215 	stw	ra,8(sp)
    96b0:	df000115 	stw	fp,4(sp)
    96b4:	df000104 	addi	fp,sp,4
    96b8:	e13fff15 	stw	r4,-4(fp)
    96bc:	018000c4 	movi	r6,3
    96c0:	01400104 	movi	r5,4
    96c4:	e13fff17 	ldw	r4,-4(fp)
    96c8:	00035200 	call	3520 <LDrr>
    96cc:	0001883a 	nop
    96d0:	e037883a 	mov	sp,fp
    96d4:	dfc00117 	ldw	ra,4(sp)
    96d8:	df000017 	ldw	fp,0(sp)
    96dc:	dec00204 	addi	sp,sp,8
    96e0:	f800283a 	ret

000096e4 <x5B>:
void x5B(CPU* cpu){LDrr(cpu, E, E);}
    96e4:	defffd04 	addi	sp,sp,-12
    96e8:	dfc00215 	stw	ra,8(sp)
    96ec:	df000115 	stw	fp,4(sp)
    96f0:	df000104 	addi	fp,sp,4
    96f4:	e13fff15 	stw	r4,-4(fp)
    96f8:	01800104 	movi	r6,4
    96fc:	01400104 	movi	r5,4
    9700:	e13fff17 	ldw	r4,-4(fp)
    9704:	00035200 	call	3520 <LDrr>
    9708:	0001883a 	nop
    970c:	e037883a 	mov	sp,fp
    9710:	dfc00117 	ldw	ra,4(sp)
    9714:	df000017 	ldw	fp,0(sp)
    9718:	dec00204 	addi	sp,sp,8
    971c:	f800283a 	ret

00009720 <x5C>:
void x5C(CPU* cpu){LDrr(cpu, E, H);}
    9720:	defffd04 	addi	sp,sp,-12
    9724:	dfc00215 	stw	ra,8(sp)
    9728:	df000115 	stw	fp,4(sp)
    972c:	df000104 	addi	fp,sp,4
    9730:	e13fff15 	stw	r4,-4(fp)
    9734:	01800184 	movi	r6,6
    9738:	01400104 	movi	r5,4
    973c:	e13fff17 	ldw	r4,-4(fp)
    9740:	00035200 	call	3520 <LDrr>
    9744:	0001883a 	nop
    9748:	e037883a 	mov	sp,fp
    974c:	dfc00117 	ldw	ra,4(sp)
    9750:	df000017 	ldw	fp,0(sp)
    9754:	dec00204 	addi	sp,sp,8
    9758:	f800283a 	ret

0000975c <x5D>:
void x5D(CPU* cpu){LDrr(cpu, E, L);}
    975c:	defffd04 	addi	sp,sp,-12
    9760:	dfc00215 	stw	ra,8(sp)
    9764:	df000115 	stw	fp,4(sp)
    9768:	df000104 	addi	fp,sp,4
    976c:	e13fff15 	stw	r4,-4(fp)
    9770:	018001c4 	movi	r6,7
    9774:	01400104 	movi	r5,4
    9778:	e13fff17 	ldw	r4,-4(fp)
    977c:	00035200 	call	3520 <LDrr>
    9780:	0001883a 	nop
    9784:	e037883a 	mov	sp,fp
    9788:	dfc00117 	ldw	ra,4(sp)
    978c:	df000017 	ldw	fp,0(sp)
    9790:	dec00204 	addi	sp,sp,8
    9794:	f800283a 	ret

00009798 <x5E>:
void x5E(CPU* cpu){LDrrra(cpu, E, H, L);}
    9798:	defffd04 	addi	sp,sp,-12
    979c:	dfc00215 	stw	ra,8(sp)
    97a0:	df000115 	stw	fp,4(sp)
    97a4:	df000104 	addi	fp,sp,4
    97a8:	e13fff15 	stw	r4,-4(fp)
    97ac:	01c001c4 	movi	r7,7
    97b0:	01800184 	movi	r6,6
    97b4:	01400104 	movi	r5,4
    97b8:	e13fff17 	ldw	r4,-4(fp)
    97bc:	00034280 	call	3428 <LDrrra>
    97c0:	0001883a 	nop
    97c4:	e037883a 	mov	sp,fp
    97c8:	dfc00117 	ldw	ra,4(sp)
    97cc:	df000017 	ldw	fp,0(sp)
    97d0:	dec00204 	addi	sp,sp,8
    97d4:	f800283a 	ret

000097d8 <x5F>:
void x5F(CPU* cpu){LDrr(cpu, E, A);}
    97d8:	defffd04 	addi	sp,sp,-12
    97dc:	dfc00215 	stw	ra,8(sp)
    97e0:	df000115 	stw	fp,4(sp)
    97e4:	df000104 	addi	fp,sp,4
    97e8:	e13fff15 	stw	r4,-4(fp)
    97ec:	000d883a 	mov	r6,zero
    97f0:	01400104 	movi	r5,4
    97f4:	e13fff17 	ldw	r4,-4(fp)
    97f8:	00035200 	call	3520 <LDrr>
    97fc:	0001883a 	nop
    9800:	e037883a 	mov	sp,fp
    9804:	dfc00117 	ldw	ra,4(sp)
    9808:	df000017 	ldw	fp,0(sp)
    980c:	dec00204 	addi	sp,sp,8
    9810:	f800283a 	ret

00009814 <x60>:

void x60(CPU* cpu){LDrr(cpu, H, B);}
    9814:	defffd04 	addi	sp,sp,-12
    9818:	dfc00215 	stw	ra,8(sp)
    981c:	df000115 	stw	fp,4(sp)
    9820:	df000104 	addi	fp,sp,4
    9824:	e13fff15 	stw	r4,-4(fp)
    9828:	01800044 	movi	r6,1
    982c:	01400184 	movi	r5,6
    9830:	e13fff17 	ldw	r4,-4(fp)
    9834:	00035200 	call	3520 <LDrr>
    9838:	0001883a 	nop
    983c:	e037883a 	mov	sp,fp
    9840:	dfc00117 	ldw	ra,4(sp)
    9844:	df000017 	ldw	fp,0(sp)
    9848:	dec00204 	addi	sp,sp,8
    984c:	f800283a 	ret

00009850 <x61>:
void x61(CPU* cpu){LDrr(cpu, H, C);}
    9850:	defffd04 	addi	sp,sp,-12
    9854:	dfc00215 	stw	ra,8(sp)
    9858:	df000115 	stw	fp,4(sp)
    985c:	df000104 	addi	fp,sp,4
    9860:	e13fff15 	stw	r4,-4(fp)
    9864:	01800084 	movi	r6,2
    9868:	01400184 	movi	r5,6
    986c:	e13fff17 	ldw	r4,-4(fp)
    9870:	00035200 	call	3520 <LDrr>
    9874:	0001883a 	nop
    9878:	e037883a 	mov	sp,fp
    987c:	dfc00117 	ldw	ra,4(sp)
    9880:	df000017 	ldw	fp,0(sp)
    9884:	dec00204 	addi	sp,sp,8
    9888:	f800283a 	ret

0000988c <x62>:
void x62(CPU* cpu){LDrr(cpu, H, D);}
    988c:	defffd04 	addi	sp,sp,-12
    9890:	dfc00215 	stw	ra,8(sp)
    9894:	df000115 	stw	fp,4(sp)
    9898:	df000104 	addi	fp,sp,4
    989c:	e13fff15 	stw	r4,-4(fp)
    98a0:	018000c4 	movi	r6,3
    98a4:	01400184 	movi	r5,6
    98a8:	e13fff17 	ldw	r4,-4(fp)
    98ac:	00035200 	call	3520 <LDrr>
    98b0:	0001883a 	nop
    98b4:	e037883a 	mov	sp,fp
    98b8:	dfc00117 	ldw	ra,4(sp)
    98bc:	df000017 	ldw	fp,0(sp)
    98c0:	dec00204 	addi	sp,sp,8
    98c4:	f800283a 	ret

000098c8 <x63>:
void x63(CPU* cpu){LDrr(cpu, H, E);}
    98c8:	defffd04 	addi	sp,sp,-12
    98cc:	dfc00215 	stw	ra,8(sp)
    98d0:	df000115 	stw	fp,4(sp)
    98d4:	df000104 	addi	fp,sp,4
    98d8:	e13fff15 	stw	r4,-4(fp)
    98dc:	01800104 	movi	r6,4
    98e0:	01400184 	movi	r5,6
    98e4:	e13fff17 	ldw	r4,-4(fp)
    98e8:	00035200 	call	3520 <LDrr>
    98ec:	0001883a 	nop
    98f0:	e037883a 	mov	sp,fp
    98f4:	dfc00117 	ldw	ra,4(sp)
    98f8:	df000017 	ldw	fp,0(sp)
    98fc:	dec00204 	addi	sp,sp,8
    9900:	f800283a 	ret

00009904 <x64>:
void x64(CPU* cpu){LDrr(cpu, H, H);}
    9904:	defffd04 	addi	sp,sp,-12
    9908:	dfc00215 	stw	ra,8(sp)
    990c:	df000115 	stw	fp,4(sp)
    9910:	df000104 	addi	fp,sp,4
    9914:	e13fff15 	stw	r4,-4(fp)
    9918:	01800184 	movi	r6,6
    991c:	01400184 	movi	r5,6
    9920:	e13fff17 	ldw	r4,-4(fp)
    9924:	00035200 	call	3520 <LDrr>
    9928:	0001883a 	nop
    992c:	e037883a 	mov	sp,fp
    9930:	dfc00117 	ldw	ra,4(sp)
    9934:	df000017 	ldw	fp,0(sp)
    9938:	dec00204 	addi	sp,sp,8
    993c:	f800283a 	ret

00009940 <x65>:
void x65(CPU* cpu){LDrr(cpu, H, L);}
    9940:	defffd04 	addi	sp,sp,-12
    9944:	dfc00215 	stw	ra,8(sp)
    9948:	df000115 	stw	fp,4(sp)
    994c:	df000104 	addi	fp,sp,4
    9950:	e13fff15 	stw	r4,-4(fp)
    9954:	018001c4 	movi	r6,7
    9958:	01400184 	movi	r5,6
    995c:	e13fff17 	ldw	r4,-4(fp)
    9960:	00035200 	call	3520 <LDrr>
    9964:	0001883a 	nop
    9968:	e037883a 	mov	sp,fp
    996c:	dfc00117 	ldw	ra,4(sp)
    9970:	df000017 	ldw	fp,0(sp)
    9974:	dec00204 	addi	sp,sp,8
    9978:	f800283a 	ret

0000997c <x66>:
void x66(CPU* cpu){LDrrra(cpu, H, H, L);}
    997c:	defffd04 	addi	sp,sp,-12
    9980:	dfc00215 	stw	ra,8(sp)
    9984:	df000115 	stw	fp,4(sp)
    9988:	df000104 	addi	fp,sp,4
    998c:	e13fff15 	stw	r4,-4(fp)
    9990:	01c001c4 	movi	r7,7
    9994:	01800184 	movi	r6,6
    9998:	01400184 	movi	r5,6
    999c:	e13fff17 	ldw	r4,-4(fp)
    99a0:	00034280 	call	3428 <LDrrra>
    99a4:	0001883a 	nop
    99a8:	e037883a 	mov	sp,fp
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	df000017 	ldw	fp,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret

000099bc <x67>:
void x67(CPU* cpu){LDrr(cpu, H, A);}
    99bc:	defffd04 	addi	sp,sp,-12
    99c0:	dfc00215 	stw	ra,8(sp)
    99c4:	df000115 	stw	fp,4(sp)
    99c8:	df000104 	addi	fp,sp,4
    99cc:	e13fff15 	stw	r4,-4(fp)
    99d0:	000d883a 	mov	r6,zero
    99d4:	01400184 	movi	r5,6
    99d8:	e13fff17 	ldw	r4,-4(fp)
    99dc:	00035200 	call	3520 <LDrr>
    99e0:	0001883a 	nop
    99e4:	e037883a 	mov	sp,fp
    99e8:	dfc00117 	ldw	ra,4(sp)
    99ec:	df000017 	ldw	fp,0(sp)
    99f0:	dec00204 	addi	sp,sp,8
    99f4:	f800283a 	ret

000099f8 <x68>:
void x68(CPU* cpu){LDrr(cpu, L, B);}
    99f8:	defffd04 	addi	sp,sp,-12
    99fc:	dfc00215 	stw	ra,8(sp)
    9a00:	df000115 	stw	fp,4(sp)
    9a04:	df000104 	addi	fp,sp,4
    9a08:	e13fff15 	stw	r4,-4(fp)
    9a0c:	01800044 	movi	r6,1
    9a10:	014001c4 	movi	r5,7
    9a14:	e13fff17 	ldw	r4,-4(fp)
    9a18:	00035200 	call	3520 <LDrr>
    9a1c:	0001883a 	nop
    9a20:	e037883a 	mov	sp,fp
    9a24:	dfc00117 	ldw	ra,4(sp)
    9a28:	df000017 	ldw	fp,0(sp)
    9a2c:	dec00204 	addi	sp,sp,8
    9a30:	f800283a 	ret

00009a34 <x69>:
void x69(CPU* cpu){LDrr(cpu, L, C);}
    9a34:	defffd04 	addi	sp,sp,-12
    9a38:	dfc00215 	stw	ra,8(sp)
    9a3c:	df000115 	stw	fp,4(sp)
    9a40:	df000104 	addi	fp,sp,4
    9a44:	e13fff15 	stw	r4,-4(fp)
    9a48:	01800084 	movi	r6,2
    9a4c:	014001c4 	movi	r5,7
    9a50:	e13fff17 	ldw	r4,-4(fp)
    9a54:	00035200 	call	3520 <LDrr>
    9a58:	0001883a 	nop
    9a5c:	e037883a 	mov	sp,fp
    9a60:	dfc00117 	ldw	ra,4(sp)
    9a64:	df000017 	ldw	fp,0(sp)
    9a68:	dec00204 	addi	sp,sp,8
    9a6c:	f800283a 	ret

00009a70 <x6A>:
void x6A(CPU* cpu){LDrr(cpu, L, D);}
    9a70:	defffd04 	addi	sp,sp,-12
    9a74:	dfc00215 	stw	ra,8(sp)
    9a78:	df000115 	stw	fp,4(sp)
    9a7c:	df000104 	addi	fp,sp,4
    9a80:	e13fff15 	stw	r4,-4(fp)
    9a84:	018000c4 	movi	r6,3
    9a88:	014001c4 	movi	r5,7
    9a8c:	e13fff17 	ldw	r4,-4(fp)
    9a90:	00035200 	call	3520 <LDrr>
    9a94:	0001883a 	nop
    9a98:	e037883a 	mov	sp,fp
    9a9c:	dfc00117 	ldw	ra,4(sp)
    9aa0:	df000017 	ldw	fp,0(sp)
    9aa4:	dec00204 	addi	sp,sp,8
    9aa8:	f800283a 	ret

00009aac <x6B>:
void x6B(CPU* cpu){LDrr(cpu, L, E);}
    9aac:	defffd04 	addi	sp,sp,-12
    9ab0:	dfc00215 	stw	ra,8(sp)
    9ab4:	df000115 	stw	fp,4(sp)
    9ab8:	df000104 	addi	fp,sp,4
    9abc:	e13fff15 	stw	r4,-4(fp)
    9ac0:	01800104 	movi	r6,4
    9ac4:	014001c4 	movi	r5,7
    9ac8:	e13fff17 	ldw	r4,-4(fp)
    9acc:	00035200 	call	3520 <LDrr>
    9ad0:	0001883a 	nop
    9ad4:	e037883a 	mov	sp,fp
    9ad8:	dfc00117 	ldw	ra,4(sp)
    9adc:	df000017 	ldw	fp,0(sp)
    9ae0:	dec00204 	addi	sp,sp,8
    9ae4:	f800283a 	ret

00009ae8 <x6C>:
void x6C(CPU* cpu){LDrr(cpu, L, H);}
    9ae8:	defffd04 	addi	sp,sp,-12
    9aec:	dfc00215 	stw	ra,8(sp)
    9af0:	df000115 	stw	fp,4(sp)
    9af4:	df000104 	addi	fp,sp,4
    9af8:	e13fff15 	stw	r4,-4(fp)
    9afc:	01800184 	movi	r6,6
    9b00:	014001c4 	movi	r5,7
    9b04:	e13fff17 	ldw	r4,-4(fp)
    9b08:	00035200 	call	3520 <LDrr>
    9b0c:	0001883a 	nop
    9b10:	e037883a 	mov	sp,fp
    9b14:	dfc00117 	ldw	ra,4(sp)
    9b18:	df000017 	ldw	fp,0(sp)
    9b1c:	dec00204 	addi	sp,sp,8
    9b20:	f800283a 	ret

00009b24 <x6D>:
void x6D(CPU* cpu){LDrr(cpu, L, L);}
    9b24:	defffd04 	addi	sp,sp,-12
    9b28:	dfc00215 	stw	ra,8(sp)
    9b2c:	df000115 	stw	fp,4(sp)
    9b30:	df000104 	addi	fp,sp,4
    9b34:	e13fff15 	stw	r4,-4(fp)
    9b38:	018001c4 	movi	r6,7
    9b3c:	014001c4 	movi	r5,7
    9b40:	e13fff17 	ldw	r4,-4(fp)
    9b44:	00035200 	call	3520 <LDrr>
    9b48:	0001883a 	nop
    9b4c:	e037883a 	mov	sp,fp
    9b50:	dfc00117 	ldw	ra,4(sp)
    9b54:	df000017 	ldw	fp,0(sp)
    9b58:	dec00204 	addi	sp,sp,8
    9b5c:	f800283a 	ret

00009b60 <x6E>:
void x6E(CPU* cpu){LDrrra(cpu, L, H, L);}
    9b60:	defffd04 	addi	sp,sp,-12
    9b64:	dfc00215 	stw	ra,8(sp)
    9b68:	df000115 	stw	fp,4(sp)
    9b6c:	df000104 	addi	fp,sp,4
    9b70:	e13fff15 	stw	r4,-4(fp)
    9b74:	01c001c4 	movi	r7,7
    9b78:	01800184 	movi	r6,6
    9b7c:	014001c4 	movi	r5,7
    9b80:	e13fff17 	ldw	r4,-4(fp)
    9b84:	00034280 	call	3428 <LDrrra>
    9b88:	0001883a 	nop
    9b8c:	e037883a 	mov	sp,fp
    9b90:	dfc00117 	ldw	ra,4(sp)
    9b94:	df000017 	ldw	fp,0(sp)
    9b98:	dec00204 	addi	sp,sp,8
    9b9c:	f800283a 	ret

00009ba0 <x6F>:
void x6F(CPU* cpu){LDrr(cpu, L, A);}
    9ba0:	defffd04 	addi	sp,sp,-12
    9ba4:	dfc00215 	stw	ra,8(sp)
    9ba8:	df000115 	stw	fp,4(sp)
    9bac:	df000104 	addi	fp,sp,4
    9bb0:	e13fff15 	stw	r4,-4(fp)
    9bb4:	000d883a 	mov	r6,zero
    9bb8:	014001c4 	movi	r5,7
    9bbc:	e13fff17 	ldw	r4,-4(fp)
    9bc0:	00035200 	call	3520 <LDrr>
    9bc4:	0001883a 	nop
    9bc8:	e037883a 	mov	sp,fp
    9bcc:	dfc00117 	ldw	ra,4(sp)
    9bd0:	df000017 	ldw	fp,0(sp)
    9bd4:	dec00204 	addi	sp,sp,8
    9bd8:	f800283a 	ret

00009bdc <x70>:

void x70(CPU* cpu){LDrrar(cpu, H, L, B);}
    9bdc:	defffd04 	addi	sp,sp,-12
    9be0:	dfc00215 	stw	ra,8(sp)
    9be4:	df000115 	stw	fp,4(sp)
    9be8:	df000104 	addi	fp,sp,4
    9bec:	e13fff15 	stw	r4,-4(fp)
    9bf0:	01c00044 	movi	r7,1
    9bf4:	018001c4 	movi	r6,7
    9bf8:	01400184 	movi	r5,6
    9bfc:	e13fff17 	ldw	r4,-4(fp)
    9c00:	00033a00 	call	33a0 <LDrrar>
    9c04:	0001883a 	nop
    9c08:	e037883a 	mov	sp,fp
    9c0c:	dfc00117 	ldw	ra,4(sp)
    9c10:	df000017 	ldw	fp,0(sp)
    9c14:	dec00204 	addi	sp,sp,8
    9c18:	f800283a 	ret

00009c1c <x71>:
void x71(CPU* cpu){LDrrar(cpu, H, L, C);}
    9c1c:	defffd04 	addi	sp,sp,-12
    9c20:	dfc00215 	stw	ra,8(sp)
    9c24:	df000115 	stw	fp,4(sp)
    9c28:	df000104 	addi	fp,sp,4
    9c2c:	e13fff15 	stw	r4,-4(fp)
    9c30:	01c00084 	movi	r7,2
    9c34:	018001c4 	movi	r6,7
    9c38:	01400184 	movi	r5,6
    9c3c:	e13fff17 	ldw	r4,-4(fp)
    9c40:	00033a00 	call	33a0 <LDrrar>
    9c44:	0001883a 	nop
    9c48:	e037883a 	mov	sp,fp
    9c4c:	dfc00117 	ldw	ra,4(sp)
    9c50:	df000017 	ldw	fp,0(sp)
    9c54:	dec00204 	addi	sp,sp,8
    9c58:	f800283a 	ret

00009c5c <x72>:
void x72(CPU* cpu){LDrrar(cpu, H, L, D);}
    9c5c:	defffd04 	addi	sp,sp,-12
    9c60:	dfc00215 	stw	ra,8(sp)
    9c64:	df000115 	stw	fp,4(sp)
    9c68:	df000104 	addi	fp,sp,4
    9c6c:	e13fff15 	stw	r4,-4(fp)
    9c70:	01c000c4 	movi	r7,3
    9c74:	018001c4 	movi	r6,7
    9c78:	01400184 	movi	r5,6
    9c7c:	e13fff17 	ldw	r4,-4(fp)
    9c80:	00033a00 	call	33a0 <LDrrar>
    9c84:	0001883a 	nop
    9c88:	e037883a 	mov	sp,fp
    9c8c:	dfc00117 	ldw	ra,4(sp)
    9c90:	df000017 	ldw	fp,0(sp)
    9c94:	dec00204 	addi	sp,sp,8
    9c98:	f800283a 	ret

00009c9c <x73>:
void x73(CPU* cpu){LDrrar(cpu, H, L, E);}
    9c9c:	defffd04 	addi	sp,sp,-12
    9ca0:	dfc00215 	stw	ra,8(sp)
    9ca4:	df000115 	stw	fp,4(sp)
    9ca8:	df000104 	addi	fp,sp,4
    9cac:	e13fff15 	stw	r4,-4(fp)
    9cb0:	01c00104 	movi	r7,4
    9cb4:	018001c4 	movi	r6,7
    9cb8:	01400184 	movi	r5,6
    9cbc:	e13fff17 	ldw	r4,-4(fp)
    9cc0:	00033a00 	call	33a0 <LDrrar>
    9cc4:	0001883a 	nop
    9cc8:	e037883a 	mov	sp,fp
    9ccc:	dfc00117 	ldw	ra,4(sp)
    9cd0:	df000017 	ldw	fp,0(sp)
    9cd4:	dec00204 	addi	sp,sp,8
    9cd8:	f800283a 	ret

00009cdc <x74>:
void x74(CPU* cpu){LDrrar(cpu, H, L, H);}
    9cdc:	defffd04 	addi	sp,sp,-12
    9ce0:	dfc00215 	stw	ra,8(sp)
    9ce4:	df000115 	stw	fp,4(sp)
    9ce8:	df000104 	addi	fp,sp,4
    9cec:	e13fff15 	stw	r4,-4(fp)
    9cf0:	01c00184 	movi	r7,6
    9cf4:	018001c4 	movi	r6,7
    9cf8:	01400184 	movi	r5,6
    9cfc:	e13fff17 	ldw	r4,-4(fp)
    9d00:	00033a00 	call	33a0 <LDrrar>
    9d04:	0001883a 	nop
    9d08:	e037883a 	mov	sp,fp
    9d0c:	dfc00117 	ldw	ra,4(sp)
    9d10:	df000017 	ldw	fp,0(sp)
    9d14:	dec00204 	addi	sp,sp,8
    9d18:	f800283a 	ret

00009d1c <x75>:
void x75(CPU* cpu){LDrrar(cpu, H, L, L);}
    9d1c:	defffd04 	addi	sp,sp,-12
    9d20:	dfc00215 	stw	ra,8(sp)
    9d24:	df000115 	stw	fp,4(sp)
    9d28:	df000104 	addi	fp,sp,4
    9d2c:	e13fff15 	stw	r4,-4(fp)
    9d30:	01c001c4 	movi	r7,7
    9d34:	018001c4 	movi	r6,7
    9d38:	01400184 	movi	r5,6
    9d3c:	e13fff17 	ldw	r4,-4(fp)
    9d40:	00033a00 	call	33a0 <LDrrar>
    9d44:	0001883a 	nop
    9d48:	e037883a 	mov	sp,fp
    9d4c:	dfc00117 	ldw	ra,4(sp)
    9d50:	df000017 	ldw	fp,0(sp)
    9d54:	dec00204 	addi	sp,sp,8
    9d58:	f800283a 	ret

00009d5c <x76>:
void x76(CPU* cpu){HALT(cpu);}
    9d5c:	defffd04 	addi	sp,sp,-12
    9d60:	dfc00215 	stw	ra,8(sp)
    9d64:	df000115 	stw	fp,4(sp)
    9d68:	df000104 	addi	fp,sp,4
    9d6c:	e13fff15 	stw	r4,-4(fp)
    9d70:	e13fff17 	ldw	r4,-4(fp)
    9d74:	0007de40 	call	7de4 <HALT>
    9d78:	0001883a 	nop
    9d7c:	e037883a 	mov	sp,fp
    9d80:	dfc00117 	ldw	ra,4(sp)
    9d84:	df000017 	ldw	fp,0(sp)
    9d88:	dec00204 	addi	sp,sp,8
    9d8c:	f800283a 	ret

00009d90 <x77>:
void x77(CPU* cpu){LDrrar(cpu, H, L, A);}
    9d90:	defffd04 	addi	sp,sp,-12
    9d94:	dfc00215 	stw	ra,8(sp)
    9d98:	df000115 	stw	fp,4(sp)
    9d9c:	df000104 	addi	fp,sp,4
    9da0:	e13fff15 	stw	r4,-4(fp)
    9da4:	000f883a 	mov	r7,zero
    9da8:	018001c4 	movi	r6,7
    9dac:	01400184 	movi	r5,6
    9db0:	e13fff17 	ldw	r4,-4(fp)
    9db4:	00033a00 	call	33a0 <LDrrar>
    9db8:	0001883a 	nop
    9dbc:	e037883a 	mov	sp,fp
    9dc0:	dfc00117 	ldw	ra,4(sp)
    9dc4:	df000017 	ldw	fp,0(sp)
    9dc8:	dec00204 	addi	sp,sp,8
    9dcc:	f800283a 	ret

00009dd0 <x78>:
void x78(CPU* cpu){LDrr(cpu, A, B);}
    9dd0:	defffd04 	addi	sp,sp,-12
    9dd4:	dfc00215 	stw	ra,8(sp)
    9dd8:	df000115 	stw	fp,4(sp)
    9ddc:	df000104 	addi	fp,sp,4
    9de0:	e13fff15 	stw	r4,-4(fp)
    9de4:	01800044 	movi	r6,1
    9de8:	000b883a 	mov	r5,zero
    9dec:	e13fff17 	ldw	r4,-4(fp)
    9df0:	00035200 	call	3520 <LDrr>
    9df4:	0001883a 	nop
    9df8:	e037883a 	mov	sp,fp
    9dfc:	dfc00117 	ldw	ra,4(sp)
    9e00:	df000017 	ldw	fp,0(sp)
    9e04:	dec00204 	addi	sp,sp,8
    9e08:	f800283a 	ret

00009e0c <x79>:
void x79(CPU* cpu){LDrr(cpu, A, C);}
    9e0c:	defffd04 	addi	sp,sp,-12
    9e10:	dfc00215 	stw	ra,8(sp)
    9e14:	df000115 	stw	fp,4(sp)
    9e18:	df000104 	addi	fp,sp,4
    9e1c:	e13fff15 	stw	r4,-4(fp)
    9e20:	01800084 	movi	r6,2
    9e24:	000b883a 	mov	r5,zero
    9e28:	e13fff17 	ldw	r4,-4(fp)
    9e2c:	00035200 	call	3520 <LDrr>
    9e30:	0001883a 	nop
    9e34:	e037883a 	mov	sp,fp
    9e38:	dfc00117 	ldw	ra,4(sp)
    9e3c:	df000017 	ldw	fp,0(sp)
    9e40:	dec00204 	addi	sp,sp,8
    9e44:	f800283a 	ret

00009e48 <x7A>:
void x7A(CPU* cpu){LDrr(cpu, A, D);}
    9e48:	defffd04 	addi	sp,sp,-12
    9e4c:	dfc00215 	stw	ra,8(sp)
    9e50:	df000115 	stw	fp,4(sp)
    9e54:	df000104 	addi	fp,sp,4
    9e58:	e13fff15 	stw	r4,-4(fp)
    9e5c:	018000c4 	movi	r6,3
    9e60:	000b883a 	mov	r5,zero
    9e64:	e13fff17 	ldw	r4,-4(fp)
    9e68:	00035200 	call	3520 <LDrr>
    9e6c:	0001883a 	nop
    9e70:	e037883a 	mov	sp,fp
    9e74:	dfc00117 	ldw	ra,4(sp)
    9e78:	df000017 	ldw	fp,0(sp)
    9e7c:	dec00204 	addi	sp,sp,8
    9e80:	f800283a 	ret

00009e84 <x7B>:
void x7B(CPU* cpu){LDrr(cpu, A, E);}
    9e84:	defffd04 	addi	sp,sp,-12
    9e88:	dfc00215 	stw	ra,8(sp)
    9e8c:	df000115 	stw	fp,4(sp)
    9e90:	df000104 	addi	fp,sp,4
    9e94:	e13fff15 	stw	r4,-4(fp)
    9e98:	01800104 	movi	r6,4
    9e9c:	000b883a 	mov	r5,zero
    9ea0:	e13fff17 	ldw	r4,-4(fp)
    9ea4:	00035200 	call	3520 <LDrr>
    9ea8:	0001883a 	nop
    9eac:	e037883a 	mov	sp,fp
    9eb0:	dfc00117 	ldw	ra,4(sp)
    9eb4:	df000017 	ldw	fp,0(sp)
    9eb8:	dec00204 	addi	sp,sp,8
    9ebc:	f800283a 	ret

00009ec0 <x7C>:
void x7C(CPU* cpu){LDrr(cpu, A, H);}
    9ec0:	defffd04 	addi	sp,sp,-12
    9ec4:	dfc00215 	stw	ra,8(sp)
    9ec8:	df000115 	stw	fp,4(sp)
    9ecc:	df000104 	addi	fp,sp,4
    9ed0:	e13fff15 	stw	r4,-4(fp)
    9ed4:	01800184 	movi	r6,6
    9ed8:	000b883a 	mov	r5,zero
    9edc:	e13fff17 	ldw	r4,-4(fp)
    9ee0:	00035200 	call	3520 <LDrr>
    9ee4:	0001883a 	nop
    9ee8:	e037883a 	mov	sp,fp
    9eec:	dfc00117 	ldw	ra,4(sp)
    9ef0:	df000017 	ldw	fp,0(sp)
    9ef4:	dec00204 	addi	sp,sp,8
    9ef8:	f800283a 	ret

00009efc <x7D>:
void x7D(CPU* cpu){LDrr(cpu, A, L);}
    9efc:	defffd04 	addi	sp,sp,-12
    9f00:	dfc00215 	stw	ra,8(sp)
    9f04:	df000115 	stw	fp,4(sp)
    9f08:	df000104 	addi	fp,sp,4
    9f0c:	e13fff15 	stw	r4,-4(fp)
    9f10:	018001c4 	movi	r6,7
    9f14:	000b883a 	mov	r5,zero
    9f18:	e13fff17 	ldw	r4,-4(fp)
    9f1c:	00035200 	call	3520 <LDrr>
    9f20:	0001883a 	nop
    9f24:	e037883a 	mov	sp,fp
    9f28:	dfc00117 	ldw	ra,4(sp)
    9f2c:	df000017 	ldw	fp,0(sp)
    9f30:	dec00204 	addi	sp,sp,8
    9f34:	f800283a 	ret

00009f38 <x7E>:
void x7E(CPU* cpu){LDrrra(cpu, A, H, L);}
    9f38:	defffd04 	addi	sp,sp,-12
    9f3c:	dfc00215 	stw	ra,8(sp)
    9f40:	df000115 	stw	fp,4(sp)
    9f44:	df000104 	addi	fp,sp,4
    9f48:	e13fff15 	stw	r4,-4(fp)
    9f4c:	01c001c4 	movi	r7,7
    9f50:	01800184 	movi	r6,6
    9f54:	000b883a 	mov	r5,zero
    9f58:	e13fff17 	ldw	r4,-4(fp)
    9f5c:	00034280 	call	3428 <LDrrra>
    9f60:	0001883a 	nop
    9f64:	e037883a 	mov	sp,fp
    9f68:	dfc00117 	ldw	ra,4(sp)
    9f6c:	df000017 	ldw	fp,0(sp)
    9f70:	dec00204 	addi	sp,sp,8
    9f74:	f800283a 	ret

00009f78 <x7F>:
void x7F(CPU* cpu){LDrr(cpu, A, A);}
    9f78:	defffd04 	addi	sp,sp,-12
    9f7c:	dfc00215 	stw	ra,8(sp)
    9f80:	df000115 	stw	fp,4(sp)
    9f84:	df000104 	addi	fp,sp,4
    9f88:	e13fff15 	stw	r4,-4(fp)
    9f8c:	000d883a 	mov	r6,zero
    9f90:	000b883a 	mov	r5,zero
    9f94:	e13fff17 	ldw	r4,-4(fp)
    9f98:	00035200 	call	3520 <LDrr>
    9f9c:	0001883a 	nop
    9fa0:	e037883a 	mov	sp,fp
    9fa4:	dfc00117 	ldw	ra,4(sp)
    9fa8:	df000017 	ldw	fp,0(sp)
    9fac:	dec00204 	addi	sp,sp,8
    9fb0:	f800283a 	ret

00009fb4 <x80>:

void x80(CPU* cpu) {ADDrr(cpu, A, B);}
    9fb4:	defffd04 	addi	sp,sp,-12
    9fb8:	dfc00215 	stw	ra,8(sp)
    9fbc:	df000115 	stw	fp,4(sp)
    9fc0:	df000104 	addi	fp,sp,4
    9fc4:	e13fff15 	stw	r4,-4(fp)
    9fc8:	01800044 	movi	r6,1
    9fcc:	000b883a 	mov	r5,zero
    9fd0:	e13fff17 	ldw	r4,-4(fp)
    9fd4:	000446c0 	call	446c <ADDrr>
    9fd8:	0001883a 	nop
    9fdc:	e037883a 	mov	sp,fp
    9fe0:	dfc00117 	ldw	ra,4(sp)
    9fe4:	df000017 	ldw	fp,0(sp)
    9fe8:	dec00204 	addi	sp,sp,8
    9fec:	f800283a 	ret

00009ff0 <x81>:
void x81(CPU* cpu) {ADDrr(cpu, A, C);}
    9ff0:	defffd04 	addi	sp,sp,-12
    9ff4:	dfc00215 	stw	ra,8(sp)
    9ff8:	df000115 	stw	fp,4(sp)
    9ffc:	df000104 	addi	fp,sp,4
    a000:	e13fff15 	stw	r4,-4(fp)
    a004:	01800084 	movi	r6,2
    a008:	000b883a 	mov	r5,zero
    a00c:	e13fff17 	ldw	r4,-4(fp)
    a010:	000446c0 	call	446c <ADDrr>
    a014:	0001883a 	nop
    a018:	e037883a 	mov	sp,fp
    a01c:	dfc00117 	ldw	ra,4(sp)
    a020:	df000017 	ldw	fp,0(sp)
    a024:	dec00204 	addi	sp,sp,8
    a028:	f800283a 	ret

0000a02c <x82>:
void x82(CPU* cpu) {ADDrr(cpu, A, D);}
    a02c:	defffd04 	addi	sp,sp,-12
    a030:	dfc00215 	stw	ra,8(sp)
    a034:	df000115 	stw	fp,4(sp)
    a038:	df000104 	addi	fp,sp,4
    a03c:	e13fff15 	stw	r4,-4(fp)
    a040:	018000c4 	movi	r6,3
    a044:	000b883a 	mov	r5,zero
    a048:	e13fff17 	ldw	r4,-4(fp)
    a04c:	000446c0 	call	446c <ADDrr>
    a050:	0001883a 	nop
    a054:	e037883a 	mov	sp,fp
    a058:	dfc00117 	ldw	ra,4(sp)
    a05c:	df000017 	ldw	fp,0(sp)
    a060:	dec00204 	addi	sp,sp,8
    a064:	f800283a 	ret

0000a068 <x83>:
void x83(CPU* cpu) {ADDrr(cpu, A, E);}
    a068:	defffd04 	addi	sp,sp,-12
    a06c:	dfc00215 	stw	ra,8(sp)
    a070:	df000115 	stw	fp,4(sp)
    a074:	df000104 	addi	fp,sp,4
    a078:	e13fff15 	stw	r4,-4(fp)
    a07c:	01800104 	movi	r6,4
    a080:	000b883a 	mov	r5,zero
    a084:	e13fff17 	ldw	r4,-4(fp)
    a088:	000446c0 	call	446c <ADDrr>
    a08c:	0001883a 	nop
    a090:	e037883a 	mov	sp,fp
    a094:	dfc00117 	ldw	ra,4(sp)
    a098:	df000017 	ldw	fp,0(sp)
    a09c:	dec00204 	addi	sp,sp,8
    a0a0:	f800283a 	ret

0000a0a4 <x84>:
void x84(CPU* cpu) {ADDrr(cpu, A, H);}
    a0a4:	defffd04 	addi	sp,sp,-12
    a0a8:	dfc00215 	stw	ra,8(sp)
    a0ac:	df000115 	stw	fp,4(sp)
    a0b0:	df000104 	addi	fp,sp,4
    a0b4:	e13fff15 	stw	r4,-4(fp)
    a0b8:	01800184 	movi	r6,6
    a0bc:	000b883a 	mov	r5,zero
    a0c0:	e13fff17 	ldw	r4,-4(fp)
    a0c4:	000446c0 	call	446c <ADDrr>
    a0c8:	0001883a 	nop
    a0cc:	e037883a 	mov	sp,fp
    a0d0:	dfc00117 	ldw	ra,4(sp)
    a0d4:	df000017 	ldw	fp,0(sp)
    a0d8:	dec00204 	addi	sp,sp,8
    a0dc:	f800283a 	ret

0000a0e0 <x85>:
void x85(CPU* cpu) {ADDrr(cpu, A, L);}
    a0e0:	defffd04 	addi	sp,sp,-12
    a0e4:	dfc00215 	stw	ra,8(sp)
    a0e8:	df000115 	stw	fp,4(sp)
    a0ec:	df000104 	addi	fp,sp,4
    a0f0:	e13fff15 	stw	r4,-4(fp)
    a0f4:	018001c4 	movi	r6,7
    a0f8:	000b883a 	mov	r5,zero
    a0fc:	e13fff17 	ldw	r4,-4(fp)
    a100:	000446c0 	call	446c <ADDrr>
    a104:	0001883a 	nop
    a108:	e037883a 	mov	sp,fp
    a10c:	dfc00117 	ldw	ra,4(sp)
    a110:	df000017 	ldw	fp,0(sp)
    a114:	dec00204 	addi	sp,sp,8
    a118:	f800283a 	ret

0000a11c <x86>:
void x86(CPU* cpu) {ADDrrra(cpu, A, H, L);}
    a11c:	defffd04 	addi	sp,sp,-12
    a120:	dfc00215 	stw	ra,8(sp)
    a124:	df000115 	stw	fp,4(sp)
    a128:	df000104 	addi	fp,sp,4
    a12c:	e13fff15 	stw	r4,-4(fp)
    a130:	01c001c4 	movi	r7,7
    a134:	01800184 	movi	r6,6
    a138:	000b883a 	mov	r5,zero
    a13c:	e13fff17 	ldw	r4,-4(fp)
    a140:	0004d0c0 	call	4d0c <ADDrrra>
    a144:	0001883a 	nop
    a148:	e037883a 	mov	sp,fp
    a14c:	dfc00117 	ldw	ra,4(sp)
    a150:	df000017 	ldw	fp,0(sp)
    a154:	dec00204 	addi	sp,sp,8
    a158:	f800283a 	ret

0000a15c <x87>:
void x87(CPU* cpu) {ADDrr(cpu, A, A);}
    a15c:	defffd04 	addi	sp,sp,-12
    a160:	dfc00215 	stw	ra,8(sp)
    a164:	df000115 	stw	fp,4(sp)
    a168:	df000104 	addi	fp,sp,4
    a16c:	e13fff15 	stw	r4,-4(fp)
    a170:	000d883a 	mov	r6,zero
    a174:	000b883a 	mov	r5,zero
    a178:	e13fff17 	ldw	r4,-4(fp)
    a17c:	000446c0 	call	446c <ADDrr>
    a180:	0001883a 	nop
    a184:	e037883a 	mov	sp,fp
    a188:	dfc00117 	ldw	ra,4(sp)
    a18c:	df000017 	ldw	fp,0(sp)
    a190:	dec00204 	addi	sp,sp,8
    a194:	f800283a 	ret

0000a198 <x88>:
void x88(CPU* cpu) {ADCrr(cpu, A, B);}
    a198:	defffd04 	addi	sp,sp,-12
    a19c:	dfc00215 	stw	ra,8(sp)
    a1a0:	df000115 	stw	fp,4(sp)
    a1a4:	df000104 	addi	fp,sp,4
    a1a8:	e13fff15 	stw	r4,-4(fp)
    a1ac:	01800044 	movi	r6,1
    a1b0:	000b883a 	mov	r5,zero
    a1b4:	e13fff17 	ldw	r4,-4(fp)
    a1b8:	0004a340 	call	4a34 <ADCrr>
    a1bc:	0001883a 	nop
    a1c0:	e037883a 	mov	sp,fp
    a1c4:	dfc00117 	ldw	ra,4(sp)
    a1c8:	df000017 	ldw	fp,0(sp)
    a1cc:	dec00204 	addi	sp,sp,8
    a1d0:	f800283a 	ret

0000a1d4 <x89>:
void x89(CPU* cpu) {ADCrr(cpu, A, C);}
    a1d4:	defffd04 	addi	sp,sp,-12
    a1d8:	dfc00215 	stw	ra,8(sp)
    a1dc:	df000115 	stw	fp,4(sp)
    a1e0:	df000104 	addi	fp,sp,4
    a1e4:	e13fff15 	stw	r4,-4(fp)
    a1e8:	01800084 	movi	r6,2
    a1ec:	000b883a 	mov	r5,zero
    a1f0:	e13fff17 	ldw	r4,-4(fp)
    a1f4:	0004a340 	call	4a34 <ADCrr>
    a1f8:	0001883a 	nop
    a1fc:	e037883a 	mov	sp,fp
    a200:	dfc00117 	ldw	ra,4(sp)
    a204:	df000017 	ldw	fp,0(sp)
    a208:	dec00204 	addi	sp,sp,8
    a20c:	f800283a 	ret

0000a210 <x8A>:
void x8A(CPU* cpu) {ADCrr(cpu, A, D);}
    a210:	defffd04 	addi	sp,sp,-12
    a214:	dfc00215 	stw	ra,8(sp)
    a218:	df000115 	stw	fp,4(sp)
    a21c:	df000104 	addi	fp,sp,4
    a220:	e13fff15 	stw	r4,-4(fp)
    a224:	018000c4 	movi	r6,3
    a228:	000b883a 	mov	r5,zero
    a22c:	e13fff17 	ldw	r4,-4(fp)
    a230:	0004a340 	call	4a34 <ADCrr>
    a234:	0001883a 	nop
    a238:	e037883a 	mov	sp,fp
    a23c:	dfc00117 	ldw	ra,4(sp)
    a240:	df000017 	ldw	fp,0(sp)
    a244:	dec00204 	addi	sp,sp,8
    a248:	f800283a 	ret

0000a24c <x8B>:
void x8B(CPU* cpu) {ADCrr(cpu, A, E);}
    a24c:	defffd04 	addi	sp,sp,-12
    a250:	dfc00215 	stw	ra,8(sp)
    a254:	df000115 	stw	fp,4(sp)
    a258:	df000104 	addi	fp,sp,4
    a25c:	e13fff15 	stw	r4,-4(fp)
    a260:	01800104 	movi	r6,4
    a264:	000b883a 	mov	r5,zero
    a268:	e13fff17 	ldw	r4,-4(fp)
    a26c:	0004a340 	call	4a34 <ADCrr>
    a270:	0001883a 	nop
    a274:	e037883a 	mov	sp,fp
    a278:	dfc00117 	ldw	ra,4(sp)
    a27c:	df000017 	ldw	fp,0(sp)
    a280:	dec00204 	addi	sp,sp,8
    a284:	f800283a 	ret

0000a288 <x8C>:
void x8C(CPU* cpu) {ADCrr(cpu, A, H);}
    a288:	defffd04 	addi	sp,sp,-12
    a28c:	dfc00215 	stw	ra,8(sp)
    a290:	df000115 	stw	fp,4(sp)
    a294:	df000104 	addi	fp,sp,4
    a298:	e13fff15 	stw	r4,-4(fp)
    a29c:	01800184 	movi	r6,6
    a2a0:	000b883a 	mov	r5,zero
    a2a4:	e13fff17 	ldw	r4,-4(fp)
    a2a8:	0004a340 	call	4a34 <ADCrr>
    a2ac:	0001883a 	nop
    a2b0:	e037883a 	mov	sp,fp
    a2b4:	dfc00117 	ldw	ra,4(sp)
    a2b8:	df000017 	ldw	fp,0(sp)
    a2bc:	dec00204 	addi	sp,sp,8
    a2c0:	f800283a 	ret

0000a2c4 <x8D>:
void x8D(CPU* cpu) {ADCrr(cpu, A, L);}
    a2c4:	defffd04 	addi	sp,sp,-12
    a2c8:	dfc00215 	stw	ra,8(sp)
    a2cc:	df000115 	stw	fp,4(sp)
    a2d0:	df000104 	addi	fp,sp,4
    a2d4:	e13fff15 	stw	r4,-4(fp)
    a2d8:	018001c4 	movi	r6,7
    a2dc:	000b883a 	mov	r5,zero
    a2e0:	e13fff17 	ldw	r4,-4(fp)
    a2e4:	0004a340 	call	4a34 <ADCrr>
    a2e8:	0001883a 	nop
    a2ec:	e037883a 	mov	sp,fp
    a2f0:	dfc00117 	ldw	ra,4(sp)
    a2f4:	df000017 	ldw	fp,0(sp)
    a2f8:	dec00204 	addi	sp,sp,8
    a2fc:	f800283a 	ret

0000a300 <x8E>:
void x8E(CPU* cpu) {ADCrrra(cpu, A, H, L);}
    a300:	defffd04 	addi	sp,sp,-12
    a304:	dfc00215 	stw	ra,8(sp)
    a308:	df000115 	stw	fp,4(sp)
    a30c:	df000104 	addi	fp,sp,4
    a310:	e13fff15 	stw	r4,-4(fp)
    a314:	01c001c4 	movi	r7,7
    a318:	01800184 	movi	r6,6
    a31c:	000b883a 	mov	r5,zero
    a320:	e13fff17 	ldw	r4,-4(fp)
    a324:	0004c8c0 	call	4c8c <ADCrrra>
    a328:	0001883a 	nop
    a32c:	e037883a 	mov	sp,fp
    a330:	dfc00117 	ldw	ra,4(sp)
    a334:	df000017 	ldw	fp,0(sp)
    a338:	dec00204 	addi	sp,sp,8
    a33c:	f800283a 	ret

0000a340 <x8F>:
void x8F(CPU* cpu) {ADCrr(cpu, A, A);}
    a340:	defffd04 	addi	sp,sp,-12
    a344:	dfc00215 	stw	ra,8(sp)
    a348:	df000115 	stw	fp,4(sp)
    a34c:	df000104 	addi	fp,sp,4
    a350:	e13fff15 	stw	r4,-4(fp)
    a354:	000d883a 	mov	r6,zero
    a358:	000b883a 	mov	r5,zero
    a35c:	e13fff17 	ldw	r4,-4(fp)
    a360:	0004a340 	call	4a34 <ADCrr>
    a364:	0001883a 	nop
    a368:	e037883a 	mov	sp,fp
    a36c:	dfc00117 	ldw	ra,4(sp)
    a370:	df000017 	ldw	fp,0(sp)
    a374:	dec00204 	addi	sp,sp,8
    a378:	f800283a 	ret

0000a37c <x90>:

void x90(CPU* cpu) {SUBr(cpu, B);}
    a37c:	defffd04 	addi	sp,sp,-12
    a380:	dfc00215 	stw	ra,8(sp)
    a384:	df000115 	stw	fp,4(sp)
    a388:	df000104 	addi	fp,sp,4
    a38c:	e13fff15 	stw	r4,-4(fp)
    a390:	01400044 	movi	r5,1
    a394:	e13fff17 	ldw	r4,-4(fp)
    a398:	0004e6c0 	call	4e6c <SUBr>
    a39c:	0001883a 	nop
    a3a0:	e037883a 	mov	sp,fp
    a3a4:	dfc00117 	ldw	ra,4(sp)
    a3a8:	df000017 	ldw	fp,0(sp)
    a3ac:	dec00204 	addi	sp,sp,8
    a3b0:	f800283a 	ret

0000a3b4 <x91>:
void x91(CPU* cpu) {SUBr(cpu, C);}
    a3b4:	defffd04 	addi	sp,sp,-12
    a3b8:	dfc00215 	stw	ra,8(sp)
    a3bc:	df000115 	stw	fp,4(sp)
    a3c0:	df000104 	addi	fp,sp,4
    a3c4:	e13fff15 	stw	r4,-4(fp)
    a3c8:	01400084 	movi	r5,2
    a3cc:	e13fff17 	ldw	r4,-4(fp)
    a3d0:	0004e6c0 	call	4e6c <SUBr>
    a3d4:	0001883a 	nop
    a3d8:	e037883a 	mov	sp,fp
    a3dc:	dfc00117 	ldw	ra,4(sp)
    a3e0:	df000017 	ldw	fp,0(sp)
    a3e4:	dec00204 	addi	sp,sp,8
    a3e8:	f800283a 	ret

0000a3ec <x92>:
void x92(CPU* cpu) {SUBr(cpu, D);}
    a3ec:	defffd04 	addi	sp,sp,-12
    a3f0:	dfc00215 	stw	ra,8(sp)
    a3f4:	df000115 	stw	fp,4(sp)
    a3f8:	df000104 	addi	fp,sp,4
    a3fc:	e13fff15 	stw	r4,-4(fp)
    a400:	014000c4 	movi	r5,3
    a404:	e13fff17 	ldw	r4,-4(fp)
    a408:	0004e6c0 	call	4e6c <SUBr>
    a40c:	0001883a 	nop
    a410:	e037883a 	mov	sp,fp
    a414:	dfc00117 	ldw	ra,4(sp)
    a418:	df000017 	ldw	fp,0(sp)
    a41c:	dec00204 	addi	sp,sp,8
    a420:	f800283a 	ret

0000a424 <x93>:
void x93(CPU* cpu) {SUBr(cpu, E);}
    a424:	defffd04 	addi	sp,sp,-12
    a428:	dfc00215 	stw	ra,8(sp)
    a42c:	df000115 	stw	fp,4(sp)
    a430:	df000104 	addi	fp,sp,4
    a434:	e13fff15 	stw	r4,-4(fp)
    a438:	01400104 	movi	r5,4
    a43c:	e13fff17 	ldw	r4,-4(fp)
    a440:	0004e6c0 	call	4e6c <SUBr>
    a444:	0001883a 	nop
    a448:	e037883a 	mov	sp,fp
    a44c:	dfc00117 	ldw	ra,4(sp)
    a450:	df000017 	ldw	fp,0(sp)
    a454:	dec00204 	addi	sp,sp,8
    a458:	f800283a 	ret

0000a45c <x94>:
void x94(CPU* cpu) {SUBr(cpu, H);}
    a45c:	defffd04 	addi	sp,sp,-12
    a460:	dfc00215 	stw	ra,8(sp)
    a464:	df000115 	stw	fp,4(sp)
    a468:	df000104 	addi	fp,sp,4
    a46c:	e13fff15 	stw	r4,-4(fp)
    a470:	01400184 	movi	r5,6
    a474:	e13fff17 	ldw	r4,-4(fp)
    a478:	0004e6c0 	call	4e6c <SUBr>
    a47c:	0001883a 	nop
    a480:	e037883a 	mov	sp,fp
    a484:	dfc00117 	ldw	ra,4(sp)
    a488:	df000017 	ldw	fp,0(sp)
    a48c:	dec00204 	addi	sp,sp,8
    a490:	f800283a 	ret

0000a494 <x95>:
void x95(CPU* cpu) {SUBr(cpu, L);}
    a494:	defffd04 	addi	sp,sp,-12
    a498:	dfc00215 	stw	ra,8(sp)
    a49c:	df000115 	stw	fp,4(sp)
    a4a0:	df000104 	addi	fp,sp,4
    a4a4:	e13fff15 	stw	r4,-4(fp)
    a4a8:	014001c4 	movi	r5,7
    a4ac:	e13fff17 	ldw	r4,-4(fp)
    a4b0:	0004e6c0 	call	4e6c <SUBr>
    a4b4:	0001883a 	nop
    a4b8:	e037883a 	mov	sp,fp
    a4bc:	dfc00117 	ldw	ra,4(sp)
    a4c0:	df000017 	ldw	fp,0(sp)
    a4c4:	dec00204 	addi	sp,sp,8
    a4c8:	f800283a 	ret

0000a4cc <x96>:
void x96(CPU* cpu) {SUBrra(cpu, H, L);}
    a4cc:	defffd04 	addi	sp,sp,-12
    a4d0:	dfc00215 	stw	ra,8(sp)
    a4d4:	df000115 	stw	fp,4(sp)
    a4d8:	df000104 	addi	fp,sp,4
    a4dc:	e13fff15 	stw	r4,-4(fp)
    a4e0:	018001c4 	movi	r6,7
    a4e4:	01400184 	movi	r5,6
    a4e8:	e13fff17 	ldw	r4,-4(fp)
    a4ec:	0004f480 	call	4f48 <SUBrra>
    a4f0:	0001883a 	nop
    a4f4:	e037883a 	mov	sp,fp
    a4f8:	dfc00117 	ldw	ra,4(sp)
    a4fc:	df000017 	ldw	fp,0(sp)
    a500:	dec00204 	addi	sp,sp,8
    a504:	f800283a 	ret

0000a508 <x97>:
void x97(CPU* cpu) {SUBr(cpu, A);}
    a508:	defffd04 	addi	sp,sp,-12
    a50c:	dfc00215 	stw	ra,8(sp)
    a510:	df000115 	stw	fp,4(sp)
    a514:	df000104 	addi	fp,sp,4
    a518:	e13fff15 	stw	r4,-4(fp)
    a51c:	000b883a 	mov	r5,zero
    a520:	e13fff17 	ldw	r4,-4(fp)
    a524:	0004e6c0 	call	4e6c <SUBr>
    a528:	0001883a 	nop
    a52c:	e037883a 	mov	sp,fp
    a530:	dfc00117 	ldw	ra,4(sp)
    a534:	df000017 	ldw	fp,0(sp)
    a538:	dec00204 	addi	sp,sp,8
    a53c:	f800283a 	ret

0000a540 <x98>:
void x98(CPU* cpu) {SBCr(cpu, B);}
    a540:	defffd04 	addi	sp,sp,-12
    a544:	dfc00215 	stw	ra,8(sp)
    a548:	df000115 	stw	fp,4(sp)
    a54c:	df000104 	addi	fp,sp,4
    a550:	e13fff15 	stw	r4,-4(fp)
    a554:	01400044 	movi	r5,1
    a558:	e13fff17 	ldw	r4,-4(fp)
    a55c:	00051580 	call	5158 <SBCr>
    a560:	0001883a 	nop
    a564:	e037883a 	mov	sp,fp
    a568:	dfc00117 	ldw	ra,4(sp)
    a56c:	df000017 	ldw	fp,0(sp)
    a570:	dec00204 	addi	sp,sp,8
    a574:	f800283a 	ret

0000a578 <x99>:
void x99(CPU* cpu) {SBCr(cpu, C);}
    a578:	defffd04 	addi	sp,sp,-12
    a57c:	dfc00215 	stw	ra,8(sp)
    a580:	df000115 	stw	fp,4(sp)
    a584:	df000104 	addi	fp,sp,4
    a588:	e13fff15 	stw	r4,-4(fp)
    a58c:	01400084 	movi	r5,2
    a590:	e13fff17 	ldw	r4,-4(fp)
    a594:	00051580 	call	5158 <SBCr>
    a598:	0001883a 	nop
    a59c:	e037883a 	mov	sp,fp
    a5a0:	dfc00117 	ldw	ra,4(sp)
    a5a4:	df000017 	ldw	fp,0(sp)
    a5a8:	dec00204 	addi	sp,sp,8
    a5ac:	f800283a 	ret

0000a5b0 <x9A>:
void x9A(CPU* cpu) {SBCr(cpu, D);}
    a5b0:	defffd04 	addi	sp,sp,-12
    a5b4:	dfc00215 	stw	ra,8(sp)
    a5b8:	df000115 	stw	fp,4(sp)
    a5bc:	df000104 	addi	fp,sp,4
    a5c0:	e13fff15 	stw	r4,-4(fp)
    a5c4:	014000c4 	movi	r5,3
    a5c8:	e13fff17 	ldw	r4,-4(fp)
    a5cc:	00051580 	call	5158 <SBCr>
    a5d0:	0001883a 	nop
    a5d4:	e037883a 	mov	sp,fp
    a5d8:	dfc00117 	ldw	ra,4(sp)
    a5dc:	df000017 	ldw	fp,0(sp)
    a5e0:	dec00204 	addi	sp,sp,8
    a5e4:	f800283a 	ret

0000a5e8 <x9B>:
void x9B(CPU* cpu) {SBCr(cpu, E);}
    a5e8:	defffd04 	addi	sp,sp,-12
    a5ec:	dfc00215 	stw	ra,8(sp)
    a5f0:	df000115 	stw	fp,4(sp)
    a5f4:	df000104 	addi	fp,sp,4
    a5f8:	e13fff15 	stw	r4,-4(fp)
    a5fc:	01400104 	movi	r5,4
    a600:	e13fff17 	ldw	r4,-4(fp)
    a604:	00051580 	call	5158 <SBCr>
    a608:	0001883a 	nop
    a60c:	e037883a 	mov	sp,fp
    a610:	dfc00117 	ldw	ra,4(sp)
    a614:	df000017 	ldw	fp,0(sp)
    a618:	dec00204 	addi	sp,sp,8
    a61c:	f800283a 	ret

0000a620 <x9C>:
void x9C(CPU* cpu) {SBCr(cpu, H);}
    a620:	defffd04 	addi	sp,sp,-12
    a624:	dfc00215 	stw	ra,8(sp)
    a628:	df000115 	stw	fp,4(sp)
    a62c:	df000104 	addi	fp,sp,4
    a630:	e13fff15 	stw	r4,-4(fp)
    a634:	01400184 	movi	r5,6
    a638:	e13fff17 	ldw	r4,-4(fp)
    a63c:	00051580 	call	5158 <SBCr>
    a640:	0001883a 	nop
    a644:	e037883a 	mov	sp,fp
    a648:	dfc00117 	ldw	ra,4(sp)
    a64c:	df000017 	ldw	fp,0(sp)
    a650:	dec00204 	addi	sp,sp,8
    a654:	f800283a 	ret

0000a658 <x9D>:
void x9D(CPU* cpu) {SBCr(cpu, L);}
    a658:	defffd04 	addi	sp,sp,-12
    a65c:	dfc00215 	stw	ra,8(sp)
    a660:	df000115 	stw	fp,4(sp)
    a664:	df000104 	addi	fp,sp,4
    a668:	e13fff15 	stw	r4,-4(fp)
    a66c:	014001c4 	movi	r5,7
    a670:	e13fff17 	ldw	r4,-4(fp)
    a674:	00051580 	call	5158 <SBCr>
    a678:	0001883a 	nop
    a67c:	e037883a 	mov	sp,fp
    a680:	dfc00117 	ldw	ra,4(sp)
    a684:	df000017 	ldw	fp,0(sp)
    a688:	dec00204 	addi	sp,sp,8
    a68c:	f800283a 	ret

0000a690 <x9E>:
void x9E(CPU* cpu) {SBCrra(cpu, H, L);}
    a690:	defffd04 	addi	sp,sp,-12
    a694:	dfc00215 	stw	ra,8(sp)
    a698:	df000115 	stw	fp,4(sp)
    a69c:	df000104 	addi	fp,sp,4
    a6a0:	e13fff15 	stw	r4,-4(fp)
    a6a4:	018001c4 	movi	r6,7
    a6a8:	01400184 	movi	r5,6
    a6ac:	e13fff17 	ldw	r4,-4(fp)
    a6b0:	00051bc0 	call	51bc <SBCrra>
    a6b4:	0001883a 	nop
    a6b8:	e037883a 	mov	sp,fp
    a6bc:	dfc00117 	ldw	ra,4(sp)
    a6c0:	df000017 	ldw	fp,0(sp)
    a6c4:	dec00204 	addi	sp,sp,8
    a6c8:	f800283a 	ret

0000a6cc <x9F>:
void x9F(CPU* cpu) {SBCr(cpu, A);}
    a6cc:	defffd04 	addi	sp,sp,-12
    a6d0:	dfc00215 	stw	ra,8(sp)
    a6d4:	df000115 	stw	fp,4(sp)
    a6d8:	df000104 	addi	fp,sp,4
    a6dc:	e13fff15 	stw	r4,-4(fp)
    a6e0:	000b883a 	mov	r5,zero
    a6e4:	e13fff17 	ldw	r4,-4(fp)
    a6e8:	00051580 	call	5158 <SBCr>
    a6ec:	0001883a 	nop
    a6f0:	e037883a 	mov	sp,fp
    a6f4:	dfc00117 	ldw	ra,4(sp)
    a6f8:	df000017 	ldw	fp,0(sp)
    a6fc:	dec00204 	addi	sp,sp,8
    a700:	f800283a 	ret

0000a704 <xA0>:

void xA0(CPU* cpu) {ANDr(cpu, B);}
    a704:	defffd04 	addi	sp,sp,-12
    a708:	dfc00215 	stw	ra,8(sp)
    a70c:	df000115 	stw	fp,4(sp)
    a710:	df000104 	addi	fp,sp,4
    a714:	e13fff15 	stw	r4,-4(fp)
    a718:	01400044 	movi	r5,1
    a71c:	e13fff17 	ldw	r4,-4(fp)
    a720:	00055b40 	call	55b4 <ANDr>
    a724:	0001883a 	nop
    a728:	e037883a 	mov	sp,fp
    a72c:	dfc00117 	ldw	ra,4(sp)
    a730:	df000017 	ldw	fp,0(sp)
    a734:	dec00204 	addi	sp,sp,8
    a738:	f800283a 	ret

0000a73c <xA1>:
void xA1(CPU* cpu) {ANDr(cpu, C);}
    a73c:	defffd04 	addi	sp,sp,-12
    a740:	dfc00215 	stw	ra,8(sp)
    a744:	df000115 	stw	fp,4(sp)
    a748:	df000104 	addi	fp,sp,4
    a74c:	e13fff15 	stw	r4,-4(fp)
    a750:	01400084 	movi	r5,2
    a754:	e13fff17 	ldw	r4,-4(fp)
    a758:	00055b40 	call	55b4 <ANDr>
    a75c:	0001883a 	nop
    a760:	e037883a 	mov	sp,fp
    a764:	dfc00117 	ldw	ra,4(sp)
    a768:	df000017 	ldw	fp,0(sp)
    a76c:	dec00204 	addi	sp,sp,8
    a770:	f800283a 	ret

0000a774 <xA2>:
void xA2(CPU* cpu) {ANDr(cpu, D);}
    a774:	defffd04 	addi	sp,sp,-12
    a778:	dfc00215 	stw	ra,8(sp)
    a77c:	df000115 	stw	fp,4(sp)
    a780:	df000104 	addi	fp,sp,4
    a784:	e13fff15 	stw	r4,-4(fp)
    a788:	014000c4 	movi	r5,3
    a78c:	e13fff17 	ldw	r4,-4(fp)
    a790:	00055b40 	call	55b4 <ANDr>
    a794:	0001883a 	nop
    a798:	e037883a 	mov	sp,fp
    a79c:	dfc00117 	ldw	ra,4(sp)
    a7a0:	df000017 	ldw	fp,0(sp)
    a7a4:	dec00204 	addi	sp,sp,8
    a7a8:	f800283a 	ret

0000a7ac <xA3>:
void xA3(CPU* cpu) {ANDr(cpu, E);}
    a7ac:	defffd04 	addi	sp,sp,-12
    a7b0:	dfc00215 	stw	ra,8(sp)
    a7b4:	df000115 	stw	fp,4(sp)
    a7b8:	df000104 	addi	fp,sp,4
    a7bc:	e13fff15 	stw	r4,-4(fp)
    a7c0:	01400104 	movi	r5,4
    a7c4:	e13fff17 	ldw	r4,-4(fp)
    a7c8:	00055b40 	call	55b4 <ANDr>
    a7cc:	0001883a 	nop
    a7d0:	e037883a 	mov	sp,fp
    a7d4:	dfc00117 	ldw	ra,4(sp)
    a7d8:	df000017 	ldw	fp,0(sp)
    a7dc:	dec00204 	addi	sp,sp,8
    a7e0:	f800283a 	ret

0000a7e4 <xA4>:
void xA4(CPU* cpu) {ANDr(cpu, H);}
    a7e4:	defffd04 	addi	sp,sp,-12
    a7e8:	dfc00215 	stw	ra,8(sp)
    a7ec:	df000115 	stw	fp,4(sp)
    a7f0:	df000104 	addi	fp,sp,4
    a7f4:	e13fff15 	stw	r4,-4(fp)
    a7f8:	01400184 	movi	r5,6
    a7fc:	e13fff17 	ldw	r4,-4(fp)
    a800:	00055b40 	call	55b4 <ANDr>
    a804:	0001883a 	nop
    a808:	e037883a 	mov	sp,fp
    a80c:	dfc00117 	ldw	ra,4(sp)
    a810:	df000017 	ldw	fp,0(sp)
    a814:	dec00204 	addi	sp,sp,8
    a818:	f800283a 	ret

0000a81c <xA5>:
void xA5(CPU* cpu) {ANDr(cpu, L);}
    a81c:	defffd04 	addi	sp,sp,-12
    a820:	dfc00215 	stw	ra,8(sp)
    a824:	df000115 	stw	fp,4(sp)
    a828:	df000104 	addi	fp,sp,4
    a82c:	e13fff15 	stw	r4,-4(fp)
    a830:	014001c4 	movi	r5,7
    a834:	e13fff17 	ldw	r4,-4(fp)
    a838:	00055b40 	call	55b4 <ANDr>
    a83c:	0001883a 	nop
    a840:	e037883a 	mov	sp,fp
    a844:	dfc00117 	ldw	ra,4(sp)
    a848:	df000017 	ldw	fp,0(sp)
    a84c:	dec00204 	addi	sp,sp,8
    a850:	f800283a 	ret

0000a854 <xA6>:
void xA6(CPU* cpu) {ANDrra(cpu, H, L);}
    a854:	defffd04 	addi	sp,sp,-12
    a858:	dfc00215 	stw	ra,8(sp)
    a85c:	df000115 	stw	fp,4(sp)
    a860:	df000104 	addi	fp,sp,4
    a864:	e13fff15 	stw	r4,-4(fp)
    a868:	018001c4 	movi	r6,7
    a86c:	01400184 	movi	r5,6
    a870:	e13fff17 	ldw	r4,-4(fp)
    a874:	00056e80 	call	56e8 <ANDrra>
    a878:	0001883a 	nop
    a87c:	e037883a 	mov	sp,fp
    a880:	dfc00117 	ldw	ra,4(sp)
    a884:	df000017 	ldw	fp,0(sp)
    a888:	dec00204 	addi	sp,sp,8
    a88c:	f800283a 	ret

0000a890 <xA7>:
void xA7(CPU* cpu) {XORr(cpu, A);}
    a890:	defffd04 	addi	sp,sp,-12
    a894:	dfc00215 	stw	ra,8(sp)
    a898:	df000115 	stw	fp,4(sp)
    a89c:	df000104 	addi	fp,sp,4
    a8a0:	e13fff15 	stw	r4,-4(fp)
    a8a4:	000b883a 	mov	r5,zero
    a8a8:	e13fff17 	ldw	r4,-4(fp)
    a8ac:	000578c0 	call	578c <XORr>
    a8b0:	0001883a 	nop
    a8b4:	e037883a 	mov	sp,fp
    a8b8:	dfc00117 	ldw	ra,4(sp)
    a8bc:	df000017 	ldw	fp,0(sp)
    a8c0:	dec00204 	addi	sp,sp,8
    a8c4:	f800283a 	ret

0000a8c8 <xA8>:
void xA8(CPU* cpu) {XORr(cpu, B);}
    a8c8:	defffd04 	addi	sp,sp,-12
    a8cc:	dfc00215 	stw	ra,8(sp)
    a8d0:	df000115 	stw	fp,4(sp)
    a8d4:	df000104 	addi	fp,sp,4
    a8d8:	e13fff15 	stw	r4,-4(fp)
    a8dc:	01400044 	movi	r5,1
    a8e0:	e13fff17 	ldw	r4,-4(fp)
    a8e4:	000578c0 	call	578c <XORr>
    a8e8:	0001883a 	nop
    a8ec:	e037883a 	mov	sp,fp
    a8f0:	dfc00117 	ldw	ra,4(sp)
    a8f4:	df000017 	ldw	fp,0(sp)
    a8f8:	dec00204 	addi	sp,sp,8
    a8fc:	f800283a 	ret

0000a900 <xA9>:
void xA9(CPU* cpu) {XORr(cpu, C);}
    a900:	defffd04 	addi	sp,sp,-12
    a904:	dfc00215 	stw	ra,8(sp)
    a908:	df000115 	stw	fp,4(sp)
    a90c:	df000104 	addi	fp,sp,4
    a910:	e13fff15 	stw	r4,-4(fp)
    a914:	01400084 	movi	r5,2
    a918:	e13fff17 	ldw	r4,-4(fp)
    a91c:	000578c0 	call	578c <XORr>
    a920:	0001883a 	nop
    a924:	e037883a 	mov	sp,fp
    a928:	dfc00117 	ldw	ra,4(sp)
    a92c:	df000017 	ldw	fp,0(sp)
    a930:	dec00204 	addi	sp,sp,8
    a934:	f800283a 	ret

0000a938 <xAA>:
void xAA(CPU* cpu) {XORr(cpu, D);}
    a938:	defffd04 	addi	sp,sp,-12
    a93c:	dfc00215 	stw	ra,8(sp)
    a940:	df000115 	stw	fp,4(sp)
    a944:	df000104 	addi	fp,sp,4
    a948:	e13fff15 	stw	r4,-4(fp)
    a94c:	014000c4 	movi	r5,3
    a950:	e13fff17 	ldw	r4,-4(fp)
    a954:	000578c0 	call	578c <XORr>
    a958:	0001883a 	nop
    a95c:	e037883a 	mov	sp,fp
    a960:	dfc00117 	ldw	ra,4(sp)
    a964:	df000017 	ldw	fp,0(sp)
    a968:	dec00204 	addi	sp,sp,8
    a96c:	f800283a 	ret

0000a970 <xAB>:
void xAB(CPU* cpu) {XORr(cpu, E);}
    a970:	defffd04 	addi	sp,sp,-12
    a974:	dfc00215 	stw	ra,8(sp)
    a978:	df000115 	stw	fp,4(sp)
    a97c:	df000104 	addi	fp,sp,4
    a980:	e13fff15 	stw	r4,-4(fp)
    a984:	01400104 	movi	r5,4
    a988:	e13fff17 	ldw	r4,-4(fp)
    a98c:	000578c0 	call	578c <XORr>
    a990:	0001883a 	nop
    a994:	e037883a 	mov	sp,fp
    a998:	dfc00117 	ldw	ra,4(sp)
    a99c:	df000017 	ldw	fp,0(sp)
    a9a0:	dec00204 	addi	sp,sp,8
    a9a4:	f800283a 	ret

0000a9a8 <xAC>:
void xAC(CPU* cpu) {XORr(cpu, H);}
    a9a8:	defffd04 	addi	sp,sp,-12
    a9ac:	dfc00215 	stw	ra,8(sp)
    a9b0:	df000115 	stw	fp,4(sp)
    a9b4:	df000104 	addi	fp,sp,4
    a9b8:	e13fff15 	stw	r4,-4(fp)
    a9bc:	01400184 	movi	r5,6
    a9c0:	e13fff17 	ldw	r4,-4(fp)
    a9c4:	000578c0 	call	578c <XORr>
    a9c8:	0001883a 	nop
    a9cc:	e037883a 	mov	sp,fp
    a9d0:	dfc00117 	ldw	ra,4(sp)
    a9d4:	df000017 	ldw	fp,0(sp)
    a9d8:	dec00204 	addi	sp,sp,8
    a9dc:	f800283a 	ret

0000a9e0 <xAD>:
void xAD(CPU* cpu) {XORr(cpu, L);}
    a9e0:	defffd04 	addi	sp,sp,-12
    a9e4:	dfc00215 	stw	ra,8(sp)
    a9e8:	df000115 	stw	fp,4(sp)
    a9ec:	df000104 	addi	fp,sp,4
    a9f0:	e13fff15 	stw	r4,-4(fp)
    a9f4:	014001c4 	movi	r5,7
    a9f8:	e13fff17 	ldw	r4,-4(fp)
    a9fc:	000578c0 	call	578c <XORr>
    aa00:	0001883a 	nop
    aa04:	e037883a 	mov	sp,fp
    aa08:	dfc00117 	ldw	ra,4(sp)
    aa0c:	df000017 	ldw	fp,0(sp)
    aa10:	dec00204 	addi	sp,sp,8
    aa14:	f800283a 	ret

0000aa18 <xAE>:
void xAE(CPU* cpu) {XORrra(cpu, H, L);}
    aa18:	defffd04 	addi	sp,sp,-12
    aa1c:	dfc00215 	stw	ra,8(sp)
    aa20:	df000115 	stw	fp,4(sp)
    aa24:	df000104 	addi	fp,sp,4
    aa28:	e13fff15 	stw	r4,-4(fp)
    aa2c:	018001c4 	movi	r6,7
    aa30:	01400184 	movi	r5,6
    aa34:	e13fff17 	ldw	r4,-4(fp)
    aa38:	00058c00 	call	58c0 <XORrra>
    aa3c:	0001883a 	nop
    aa40:	e037883a 	mov	sp,fp
    aa44:	dfc00117 	ldw	ra,4(sp)
    aa48:	df000017 	ldw	fp,0(sp)
    aa4c:	dec00204 	addi	sp,sp,8
    aa50:	f800283a 	ret

0000aa54 <xAF>:
void xAF(CPU* cpu) {XORr(cpu, A);}
    aa54:	defffd04 	addi	sp,sp,-12
    aa58:	dfc00215 	stw	ra,8(sp)
    aa5c:	df000115 	stw	fp,4(sp)
    aa60:	df000104 	addi	fp,sp,4
    aa64:	e13fff15 	stw	r4,-4(fp)
    aa68:	000b883a 	mov	r5,zero
    aa6c:	e13fff17 	ldw	r4,-4(fp)
    aa70:	000578c0 	call	578c <XORr>
    aa74:	0001883a 	nop
    aa78:	e037883a 	mov	sp,fp
    aa7c:	dfc00117 	ldw	ra,4(sp)
    aa80:	df000017 	ldw	fp,0(sp)
    aa84:	dec00204 	addi	sp,sp,8
    aa88:	f800283a 	ret

0000aa8c <xB0>:

void xB0(CPU* cpu) {ORr(cpu, B);}
    aa8c:	defffd04 	addi	sp,sp,-12
    aa90:	dfc00215 	stw	ra,8(sp)
    aa94:	df000115 	stw	fp,4(sp)
    aa98:	df000104 	addi	fp,sp,4
    aa9c:	e13fff15 	stw	r4,-4(fp)
    aaa0:	01400044 	movi	r5,1
    aaa4:	e13fff17 	ldw	r4,-4(fp)
    aaa8:	00053d00 	call	53d0 <ORr>
    aaac:	0001883a 	nop
    aab0:	e037883a 	mov	sp,fp
    aab4:	dfc00117 	ldw	ra,4(sp)
    aab8:	df000017 	ldw	fp,0(sp)
    aabc:	dec00204 	addi	sp,sp,8
    aac0:	f800283a 	ret

0000aac4 <xB1>:
void xB1(CPU* cpu) {ORr(cpu, C);}
    aac4:	defffd04 	addi	sp,sp,-12
    aac8:	dfc00215 	stw	ra,8(sp)
    aacc:	df000115 	stw	fp,4(sp)
    aad0:	df000104 	addi	fp,sp,4
    aad4:	e13fff15 	stw	r4,-4(fp)
    aad8:	01400084 	movi	r5,2
    aadc:	e13fff17 	ldw	r4,-4(fp)
    aae0:	00053d00 	call	53d0 <ORr>
    aae4:	0001883a 	nop
    aae8:	e037883a 	mov	sp,fp
    aaec:	dfc00117 	ldw	ra,4(sp)
    aaf0:	df000017 	ldw	fp,0(sp)
    aaf4:	dec00204 	addi	sp,sp,8
    aaf8:	f800283a 	ret

0000aafc <xB2>:
void xB2(CPU* cpu) {ORr(cpu, D);}
    aafc:	defffd04 	addi	sp,sp,-12
    ab00:	dfc00215 	stw	ra,8(sp)
    ab04:	df000115 	stw	fp,4(sp)
    ab08:	df000104 	addi	fp,sp,4
    ab0c:	e13fff15 	stw	r4,-4(fp)
    ab10:	014000c4 	movi	r5,3
    ab14:	e13fff17 	ldw	r4,-4(fp)
    ab18:	00053d00 	call	53d0 <ORr>
    ab1c:	0001883a 	nop
    ab20:	e037883a 	mov	sp,fp
    ab24:	dfc00117 	ldw	ra,4(sp)
    ab28:	df000017 	ldw	fp,0(sp)
    ab2c:	dec00204 	addi	sp,sp,8
    ab30:	f800283a 	ret

0000ab34 <xB3>:
void xB3(CPU* cpu) {ORr(cpu, E);}
    ab34:	defffd04 	addi	sp,sp,-12
    ab38:	dfc00215 	stw	ra,8(sp)
    ab3c:	df000115 	stw	fp,4(sp)
    ab40:	df000104 	addi	fp,sp,4
    ab44:	e13fff15 	stw	r4,-4(fp)
    ab48:	01400104 	movi	r5,4
    ab4c:	e13fff17 	ldw	r4,-4(fp)
    ab50:	00053d00 	call	53d0 <ORr>
    ab54:	0001883a 	nop
    ab58:	e037883a 	mov	sp,fp
    ab5c:	dfc00117 	ldw	ra,4(sp)
    ab60:	df000017 	ldw	fp,0(sp)
    ab64:	dec00204 	addi	sp,sp,8
    ab68:	f800283a 	ret

0000ab6c <xB4>:
void xB4(CPU* cpu) {ORr(cpu, H);}
    ab6c:	defffd04 	addi	sp,sp,-12
    ab70:	dfc00215 	stw	ra,8(sp)
    ab74:	df000115 	stw	fp,4(sp)
    ab78:	df000104 	addi	fp,sp,4
    ab7c:	e13fff15 	stw	r4,-4(fp)
    ab80:	01400184 	movi	r5,6
    ab84:	e13fff17 	ldw	r4,-4(fp)
    ab88:	00053d00 	call	53d0 <ORr>
    ab8c:	0001883a 	nop
    ab90:	e037883a 	mov	sp,fp
    ab94:	dfc00117 	ldw	ra,4(sp)
    ab98:	df000017 	ldw	fp,0(sp)
    ab9c:	dec00204 	addi	sp,sp,8
    aba0:	f800283a 	ret

0000aba4 <xB5>:
void xB5(CPU* cpu) {ORr(cpu, L);}
    aba4:	defffd04 	addi	sp,sp,-12
    aba8:	dfc00215 	stw	ra,8(sp)
    abac:	df000115 	stw	fp,4(sp)
    abb0:	df000104 	addi	fp,sp,4
    abb4:	e13fff15 	stw	r4,-4(fp)
    abb8:	014001c4 	movi	r5,7
    abbc:	e13fff17 	ldw	r4,-4(fp)
    abc0:	00053d00 	call	53d0 <ORr>
    abc4:	0001883a 	nop
    abc8:	e037883a 	mov	sp,fp
    abcc:	dfc00117 	ldw	ra,4(sp)
    abd0:	df000017 	ldw	fp,0(sp)
    abd4:	dec00204 	addi	sp,sp,8
    abd8:	f800283a 	ret

0000abdc <xB6>:
void xB6(CPU* cpu) {ORrra(cpu, H, L);}
    abdc:	defffd04 	addi	sp,sp,-12
    abe0:	dfc00215 	stw	ra,8(sp)
    abe4:	df000115 	stw	fp,4(sp)
    abe8:	df000104 	addi	fp,sp,4
    abec:	e13fff15 	stw	r4,-4(fp)
    abf0:	018001c4 	movi	r6,7
    abf4:	01400184 	movi	r5,6
    abf8:	e13fff17 	ldw	r4,-4(fp)
    abfc:	00055100 	call	5510 <ORrra>
    ac00:	0001883a 	nop
    ac04:	e037883a 	mov	sp,fp
    ac08:	dfc00117 	ldw	ra,4(sp)
    ac0c:	df000017 	ldw	fp,0(sp)
    ac10:	dec00204 	addi	sp,sp,8
    ac14:	f800283a 	ret

0000ac18 <xB7>:
void xB7(CPU* cpu) {ORr(cpu, A);}
    ac18:	defffd04 	addi	sp,sp,-12
    ac1c:	dfc00215 	stw	ra,8(sp)
    ac20:	df000115 	stw	fp,4(sp)
    ac24:	df000104 	addi	fp,sp,4
    ac28:	e13fff15 	stw	r4,-4(fp)
    ac2c:	000b883a 	mov	r5,zero
    ac30:	e13fff17 	ldw	r4,-4(fp)
    ac34:	00053d00 	call	53d0 <ORr>
    ac38:	0001883a 	nop
    ac3c:	e037883a 	mov	sp,fp
    ac40:	dfc00117 	ldw	ra,4(sp)
    ac44:	df000017 	ldw	fp,0(sp)
    ac48:	dec00204 	addi	sp,sp,8
    ac4c:	f800283a 	ret

0000ac50 <xB8>:
void xB8(CPU* cpu) {CPr(cpu, B);}
    ac50:	defffd04 	addi	sp,sp,-12
    ac54:	dfc00215 	stw	ra,8(sp)
    ac58:	df000115 	stw	fp,4(sp)
    ac5c:	df000104 	addi	fp,sp,4
    ac60:	e13fff15 	stw	r4,-4(fp)
    ac64:	01400044 	movi	r5,1
    ac68:	e13fff17 	ldw	r4,-4(fp)
    ac6c:	00059640 	call	5964 <CPr>
    ac70:	0001883a 	nop
    ac74:	e037883a 	mov	sp,fp
    ac78:	dfc00117 	ldw	ra,4(sp)
    ac7c:	df000017 	ldw	fp,0(sp)
    ac80:	dec00204 	addi	sp,sp,8
    ac84:	f800283a 	ret

0000ac88 <xB9>:
void xB9(CPU* cpu) {CPr(cpu, C);}
    ac88:	defffd04 	addi	sp,sp,-12
    ac8c:	dfc00215 	stw	ra,8(sp)
    ac90:	df000115 	stw	fp,4(sp)
    ac94:	df000104 	addi	fp,sp,4
    ac98:	e13fff15 	stw	r4,-4(fp)
    ac9c:	01400084 	movi	r5,2
    aca0:	e13fff17 	ldw	r4,-4(fp)
    aca4:	00059640 	call	5964 <CPr>
    aca8:	0001883a 	nop
    acac:	e037883a 	mov	sp,fp
    acb0:	dfc00117 	ldw	ra,4(sp)
    acb4:	df000017 	ldw	fp,0(sp)
    acb8:	dec00204 	addi	sp,sp,8
    acbc:	f800283a 	ret

0000acc0 <xBA>:
void xBA(CPU* cpu) {CPr(cpu, D);}
    acc0:	defffd04 	addi	sp,sp,-12
    acc4:	dfc00215 	stw	ra,8(sp)
    acc8:	df000115 	stw	fp,4(sp)
    accc:	df000104 	addi	fp,sp,4
    acd0:	e13fff15 	stw	r4,-4(fp)
    acd4:	014000c4 	movi	r5,3
    acd8:	e13fff17 	ldw	r4,-4(fp)
    acdc:	00059640 	call	5964 <CPr>
    ace0:	0001883a 	nop
    ace4:	e037883a 	mov	sp,fp
    ace8:	dfc00117 	ldw	ra,4(sp)
    acec:	df000017 	ldw	fp,0(sp)
    acf0:	dec00204 	addi	sp,sp,8
    acf4:	f800283a 	ret

0000acf8 <xBB>:
void xBB(CPU* cpu) {CPr(cpu, E);}
    acf8:	defffd04 	addi	sp,sp,-12
    acfc:	dfc00215 	stw	ra,8(sp)
    ad00:	df000115 	stw	fp,4(sp)
    ad04:	df000104 	addi	fp,sp,4
    ad08:	e13fff15 	stw	r4,-4(fp)
    ad0c:	01400104 	movi	r5,4
    ad10:	e13fff17 	ldw	r4,-4(fp)
    ad14:	00059640 	call	5964 <CPr>
    ad18:	0001883a 	nop
    ad1c:	e037883a 	mov	sp,fp
    ad20:	dfc00117 	ldw	ra,4(sp)
    ad24:	df000017 	ldw	fp,0(sp)
    ad28:	dec00204 	addi	sp,sp,8
    ad2c:	f800283a 	ret

0000ad30 <xBC>:
void xBC(CPU* cpu) {CPr(cpu, H);}
    ad30:	defffd04 	addi	sp,sp,-12
    ad34:	dfc00215 	stw	ra,8(sp)
    ad38:	df000115 	stw	fp,4(sp)
    ad3c:	df000104 	addi	fp,sp,4
    ad40:	e13fff15 	stw	r4,-4(fp)
    ad44:	01400184 	movi	r5,6
    ad48:	e13fff17 	ldw	r4,-4(fp)
    ad4c:	00059640 	call	5964 <CPr>
    ad50:	0001883a 	nop
    ad54:	e037883a 	mov	sp,fp
    ad58:	dfc00117 	ldw	ra,4(sp)
    ad5c:	df000017 	ldw	fp,0(sp)
    ad60:	dec00204 	addi	sp,sp,8
    ad64:	f800283a 	ret

0000ad68 <xBD>:
void xBD(CPU* cpu) {CPr(cpu, L);}
    ad68:	defffd04 	addi	sp,sp,-12
    ad6c:	dfc00215 	stw	ra,8(sp)
    ad70:	df000115 	stw	fp,4(sp)
    ad74:	df000104 	addi	fp,sp,4
    ad78:	e13fff15 	stw	r4,-4(fp)
    ad7c:	014001c4 	movi	r5,7
    ad80:	e13fff17 	ldw	r4,-4(fp)
    ad84:	00059640 	call	5964 <CPr>
    ad88:	0001883a 	nop
    ad8c:	e037883a 	mov	sp,fp
    ad90:	dfc00117 	ldw	ra,4(sp)
    ad94:	df000017 	ldw	fp,0(sp)
    ad98:	dec00204 	addi	sp,sp,8
    ad9c:	f800283a 	ret

0000ada0 <xBE>:
void xBE(CPU* cpu) {CPrra(cpu, H, L);}
    ada0:	defffd04 	addi	sp,sp,-12
    ada4:	dfc00215 	stw	ra,8(sp)
    ada8:	df000115 	stw	fp,4(sp)
    adac:	df000104 	addi	fp,sp,4
    adb0:	e13fff15 	stw	r4,-4(fp)
    adb4:	018001c4 	movi	r6,7
    adb8:	01400184 	movi	r5,6
    adbc:	e13fff17 	ldw	r4,-4(fp)
    adc0:	0005a400 	call	5a40 <CPrra>
    adc4:	0001883a 	nop
    adc8:	e037883a 	mov	sp,fp
    adcc:	dfc00117 	ldw	ra,4(sp)
    add0:	df000017 	ldw	fp,0(sp)
    add4:	dec00204 	addi	sp,sp,8
    add8:	f800283a 	ret

0000addc <xBF>:
void xBF(CPU* cpu) {CPr(cpu, A);}
    addc:	defffd04 	addi	sp,sp,-12
    ade0:	dfc00215 	stw	ra,8(sp)
    ade4:	df000115 	stw	fp,4(sp)
    ade8:	df000104 	addi	fp,sp,4
    adec:	e13fff15 	stw	r4,-4(fp)
    adf0:	000b883a 	mov	r5,zero
    adf4:	e13fff17 	ldw	r4,-4(fp)
    adf8:	00059640 	call	5964 <CPr>
    adfc:	0001883a 	nop
    ae00:	e037883a 	mov	sp,fp
    ae04:	dfc00117 	ldw	ra,4(sp)
    ae08:	df000017 	ldw	fp,0(sp)
    ae0c:	dec00204 	addi	sp,sp,8
    ae10:	f800283a 	ret

0000ae14 <xC0>:

void xC0(CPU* cpu) {RETcc(cpu, NZ);}
    ae14:	defffd04 	addi	sp,sp,-12
    ae18:	dfc00215 	stw	ra,8(sp)
    ae1c:	df000115 	stw	fp,4(sp)
    ae20:	df000104 	addi	fp,sp,4
    ae24:	e13fff15 	stw	r4,-4(fp)
    ae28:	000b883a 	mov	r5,zero
    ae2c:	e13fff17 	ldw	r4,-4(fp)
    ae30:	00077500 	call	7750 <RETcc>
    ae34:	0001883a 	nop
    ae38:	e037883a 	mov	sp,fp
    ae3c:	dfc00117 	ldw	ra,4(sp)
    ae40:	df000017 	ldw	fp,0(sp)
    ae44:	dec00204 	addi	sp,sp,8
    ae48:	f800283a 	ret

0000ae4c <xC1>:
void xC1(CPU* cpu) {POPrr(cpu, B, C);}
    ae4c:	defffd04 	addi	sp,sp,-12
    ae50:	dfc00215 	stw	ra,8(sp)
    ae54:	df000115 	stw	fp,4(sp)
    ae58:	df000104 	addi	fp,sp,4
    ae5c:	e13fff15 	stw	r4,-4(fp)
    ae60:	01800084 	movi	r6,2
    ae64:	01400044 	movi	r5,1
    ae68:	e13fff17 	ldw	r4,-4(fp)
    ae6c:	00074b40 	call	74b4 <POPrr>
    ae70:	0001883a 	nop
    ae74:	e037883a 	mov	sp,fp
    ae78:	dfc00117 	ldw	ra,4(sp)
    ae7c:	df000017 	ldw	fp,0(sp)
    ae80:	dec00204 	addi	sp,sp,8
    ae84:	f800283a 	ret

0000ae88 <xC2>:
void xC2(CPU* cpu) {JPccnn(cpu, NZ);}
    ae88:	defffd04 	addi	sp,sp,-12
    ae8c:	dfc00215 	stw	ra,8(sp)
    ae90:	df000115 	stw	fp,4(sp)
    ae94:	df000104 	addi	fp,sp,4
    ae98:	e13fff15 	stw	r4,-4(fp)
    ae9c:	000b883a 	mov	r5,zero
    aea0:	e13fff17 	ldw	r4,-4(fp)
    aea4:	00071d40 	call	71d4 <JPccnn>
    aea8:	0001883a 	nop
    aeac:	e037883a 	mov	sp,fp
    aeb0:	dfc00117 	ldw	ra,4(sp)
    aeb4:	df000017 	ldw	fp,0(sp)
    aeb8:	dec00204 	addi	sp,sp,8
    aebc:	f800283a 	ret

0000aec0 <xC3>:
void xC3(CPU* cpu) {JPnn(cpu);}
    aec0:	defffd04 	addi	sp,sp,-12
    aec4:	dfc00215 	stw	ra,8(sp)
    aec8:	df000115 	stw	fp,4(sp)
    aecc:	df000104 	addi	fp,sp,4
    aed0:	e13fff15 	stw	r4,-4(fp)
    aed4:	e13fff17 	ldw	r4,-4(fp)
    aed8:	0006f700 	call	6f70 <JPnn>
    aedc:	0001883a 	nop
    aee0:	e037883a 	mov	sp,fp
    aee4:	dfc00117 	ldw	ra,4(sp)
    aee8:	df000017 	ldw	fp,0(sp)
    aeec:	dec00204 	addi	sp,sp,8
    aef0:	f800283a 	ret

0000aef4 <xC4>:
void xC4(CPU* cpu) {CALLccnn(cpu, NZ);}
    aef4:	defffd04 	addi	sp,sp,-12
    aef8:	dfc00215 	stw	ra,8(sp)
    aefc:	df000115 	stw	fp,4(sp)
    af00:	df000104 	addi	fp,sp,4
    af04:	e13fff15 	stw	r4,-4(fp)
    af08:	000b883a 	mov	r5,zero
    af0c:	e13fff17 	ldw	r4,-4(fp)
    af10:	000789c0 	call	789c <CALLccnn>
    af14:	0001883a 	nop
    af18:	e037883a 	mov	sp,fp
    af1c:	dfc00117 	ldw	ra,4(sp)
    af20:	df000017 	ldw	fp,0(sp)
    af24:	dec00204 	addi	sp,sp,8
    af28:	f800283a 	ret

0000af2c <xC5>:
void xC5(CPU* cpu) {PUSHrr(cpu, B, C);}
    af2c:	defffd04 	addi	sp,sp,-12
    af30:	dfc00215 	stw	ra,8(sp)
    af34:	df000115 	stw	fp,4(sp)
    af38:	df000104 	addi	fp,sp,4
    af3c:	e13fff15 	stw	r4,-4(fp)
    af40:	01800084 	movi	r6,2
    af44:	01400044 	movi	r5,1
    af48:	e13fff17 	ldw	r4,-4(fp)
    af4c:	00073d40 	call	73d4 <PUSHrr>
    af50:	0001883a 	nop
    af54:	e037883a 	mov	sp,fp
    af58:	dfc00117 	ldw	ra,4(sp)
    af5c:	df000017 	ldw	fp,0(sp)
    af60:	dec00204 	addi	sp,sp,8
    af64:	f800283a 	ret

0000af68 <xC6>:
void xC6(CPU* cpu) {ADDrn(cpu, A);}
    af68:	defffd04 	addi	sp,sp,-12
    af6c:	dfc00215 	stw	ra,8(sp)
    af70:	df000115 	stw	fp,4(sp)
    af74:	df000104 	addi	fp,sp,4
    af78:	e13fff15 	stw	r4,-4(fp)
    af7c:	000b883a 	mov	r5,zero
    af80:	e13fff17 	ldw	r4,-4(fp)
    af84:	00044d80 	call	44d8 <ADDrn>
    af88:	0001883a 	nop
    af8c:	e037883a 	mov	sp,fp
    af90:	dfc00117 	ldw	ra,4(sp)
    af94:	df000017 	ldw	fp,0(sp)
    af98:	dec00204 	addi	sp,sp,8
    af9c:	f800283a 	ret

0000afa0 <xC7>:
void xC7(CPU* cpu) {RSTn(cpu, 0x00);}
    afa0:	defffd04 	addi	sp,sp,-12
    afa4:	dfc00215 	stw	ra,8(sp)
    afa8:	df000115 	stw	fp,4(sp)
    afac:	df000104 	addi	fp,sp,4
    afb0:	e13fff15 	stw	r4,-4(fp)
    afb4:	000b883a 	mov	r5,zero
    afb8:	e13fff17 	ldw	r4,-4(fp)
    afbc:	000758c0 	call	758c <RSTn>
    afc0:	0001883a 	nop
    afc4:	e037883a 	mov	sp,fp
    afc8:	dfc00117 	ldw	ra,4(sp)
    afcc:	df000017 	ldw	fp,0(sp)
    afd0:	dec00204 	addi	sp,sp,8
    afd4:	f800283a 	ret

0000afd8 <xC8>:
void xC8(CPU* cpu) {RETcc(cpu, Z);}
    afd8:	defffd04 	addi	sp,sp,-12
    afdc:	dfc00215 	stw	ra,8(sp)
    afe0:	df000115 	stw	fp,4(sp)
    afe4:	df000104 	addi	fp,sp,4
    afe8:	e13fff15 	stw	r4,-4(fp)
    afec:	01400084 	movi	r5,2
    aff0:	e13fff17 	ldw	r4,-4(fp)
    aff4:	00077500 	call	7750 <RETcc>
    aff8:	0001883a 	nop
    affc:	e037883a 	mov	sp,fp
    b000:	dfc00117 	ldw	ra,4(sp)
    b004:	df000017 	ldw	fp,0(sp)
    b008:	dec00204 	addi	sp,sp,8
    b00c:	f800283a 	ret

0000b010 <xC9>:
void xC9(CPU* cpu) {RET(cpu);}
    b010:	defffd04 	addi	sp,sp,-12
    b014:	dfc00215 	stw	ra,8(sp)
    b018:	df000115 	stw	fp,4(sp)
    b01c:	df000104 	addi	fp,sp,4
    b020:	e13fff15 	stw	r4,-4(fp)
    b024:	e13fff17 	ldw	r4,-4(fp)
    b028:	00076780 	call	7678 <RET>
    b02c:	0001883a 	nop
    b030:	e037883a 	mov	sp,fp
    b034:	dfc00117 	ldw	ra,4(sp)
    b038:	df000017 	ldw	fp,0(sp)
    b03c:	dec00204 	addi	sp,sp,8
    b040:	f800283a 	ret

0000b044 <xCA>:
void xCA(CPU* cpu) {JPccnn(cpu, Z);}
    b044:	defffd04 	addi	sp,sp,-12
    b048:	dfc00215 	stw	ra,8(sp)
    b04c:	df000115 	stw	fp,4(sp)
    b050:	df000104 	addi	fp,sp,4
    b054:	e13fff15 	stw	r4,-4(fp)
    b058:	01400084 	movi	r5,2
    b05c:	e13fff17 	ldw	r4,-4(fp)
    b060:	00071d40 	call	71d4 <JPccnn>
    b064:	0001883a 	nop
    b068:	e037883a 	mov	sp,fp
    b06c:	dfc00117 	ldw	ra,4(sp)
    b070:	df000017 	ldw	fp,0(sp)
    b074:	dec00204 	addi	sp,sp,8
    b078:	f800283a 	ret

0000b07c <xCC>:
//void xCB(CPU* cpu) {CB(cpu);}
void xCC(CPU* cpu) {CALLccnn(cpu, Z);}
    b07c:	defffd04 	addi	sp,sp,-12
    b080:	dfc00215 	stw	ra,8(sp)
    b084:	df000115 	stw	fp,4(sp)
    b088:	df000104 	addi	fp,sp,4
    b08c:	e13fff15 	stw	r4,-4(fp)
    b090:	01400084 	movi	r5,2
    b094:	e13fff17 	ldw	r4,-4(fp)
    b098:	000789c0 	call	789c <CALLccnn>
    b09c:	0001883a 	nop
    b0a0:	e037883a 	mov	sp,fp
    b0a4:	dfc00117 	ldw	ra,4(sp)
    b0a8:	df000017 	ldw	fp,0(sp)
    b0ac:	dec00204 	addi	sp,sp,8
    b0b0:	f800283a 	ret

0000b0b4 <xCD>:
void xCD(CPU* cpu) {CALLnn(cpu);}
    b0b4:	defffd04 	addi	sp,sp,-12
    b0b8:	dfc00215 	stw	ra,8(sp)
    b0bc:	df000115 	stw	fp,4(sp)
    b0c0:	df000104 	addi	fp,sp,4
    b0c4:	e13fff15 	stw	r4,-4(fp)
    b0c8:	e13fff17 	ldw	r4,-4(fp)
    b0cc:	00078540 	call	7854 <CALLnn>
    b0d0:	0001883a 	nop
    b0d4:	e037883a 	mov	sp,fp
    b0d8:	dfc00117 	ldw	ra,4(sp)
    b0dc:	df000017 	ldw	fp,0(sp)
    b0e0:	dec00204 	addi	sp,sp,8
    b0e4:	f800283a 	ret

0000b0e8 <xCE>:
void xCE(CPU* cpu) {ADCrn(cpu, A);}
    b0e8:	defffd04 	addi	sp,sp,-12
    b0ec:	dfc00215 	stw	ra,8(sp)
    b0f0:	df000115 	stw	fp,4(sp)
    b0f4:	df000104 	addi	fp,sp,4
    b0f8:	e13fff15 	stw	r4,-4(fp)
    b0fc:	000b883a 	mov	r5,zero
    b100:	e13fff17 	ldw	r4,-4(fp)
    b104:	0004aa00 	call	4aa0 <ADCrn>
    b108:	0001883a 	nop
    b10c:	e037883a 	mov	sp,fp
    b110:	dfc00117 	ldw	ra,4(sp)
    b114:	df000017 	ldw	fp,0(sp)
    b118:	dec00204 	addi	sp,sp,8
    b11c:	f800283a 	ret

0000b120 <xCF>:
void xCF(CPU* cpu) {RSTn(cpu, 0x08);}
    b120:	defffd04 	addi	sp,sp,-12
    b124:	dfc00215 	stw	ra,8(sp)
    b128:	df000115 	stw	fp,4(sp)
    b12c:	df000104 	addi	fp,sp,4
    b130:	e13fff15 	stw	r4,-4(fp)
    b134:	01400204 	movi	r5,8
    b138:	e13fff17 	ldw	r4,-4(fp)
    b13c:	000758c0 	call	758c <RSTn>
    b140:	0001883a 	nop
    b144:	e037883a 	mov	sp,fp
    b148:	dfc00117 	ldw	ra,4(sp)
    b14c:	df000017 	ldw	fp,0(sp)
    b150:	dec00204 	addi	sp,sp,8
    b154:	f800283a 	ret

0000b158 <xD0>:

void xD0(CPU* cpu) {RETcc(cpu, NC);}
    b158:	defffd04 	addi	sp,sp,-12
    b15c:	dfc00215 	stw	ra,8(sp)
    b160:	df000115 	stw	fp,4(sp)
    b164:	df000104 	addi	fp,sp,4
    b168:	e13fff15 	stw	r4,-4(fp)
    b16c:	01400044 	movi	r5,1
    b170:	e13fff17 	ldw	r4,-4(fp)
    b174:	00077500 	call	7750 <RETcc>
    b178:	0001883a 	nop
    b17c:	e037883a 	mov	sp,fp
    b180:	dfc00117 	ldw	ra,4(sp)
    b184:	df000017 	ldw	fp,0(sp)
    b188:	dec00204 	addi	sp,sp,8
    b18c:	f800283a 	ret

0000b190 <xD1>:
void xD1(CPU* cpu) {POPrr(cpu, D, E);}
    b190:	defffd04 	addi	sp,sp,-12
    b194:	dfc00215 	stw	ra,8(sp)
    b198:	df000115 	stw	fp,4(sp)
    b19c:	df000104 	addi	fp,sp,4
    b1a0:	e13fff15 	stw	r4,-4(fp)
    b1a4:	01800104 	movi	r6,4
    b1a8:	014000c4 	movi	r5,3
    b1ac:	e13fff17 	ldw	r4,-4(fp)
    b1b0:	00074b40 	call	74b4 <POPrr>
    b1b4:	0001883a 	nop
    b1b8:	e037883a 	mov	sp,fp
    b1bc:	dfc00117 	ldw	ra,4(sp)
    b1c0:	df000017 	ldw	fp,0(sp)
    b1c4:	dec00204 	addi	sp,sp,8
    b1c8:	f800283a 	ret

0000b1cc <xD2>:
void xD2(CPU* cpu) {JPccnn(cpu, NC);}
    b1cc:	defffd04 	addi	sp,sp,-12
    b1d0:	dfc00215 	stw	ra,8(sp)
    b1d4:	df000115 	stw	fp,4(sp)
    b1d8:	df000104 	addi	fp,sp,4
    b1dc:	e13fff15 	stw	r4,-4(fp)
    b1e0:	01400044 	movi	r5,1
    b1e4:	e13fff17 	ldw	r4,-4(fp)
    b1e8:	00071d40 	call	71d4 <JPccnn>
    b1ec:	0001883a 	nop
    b1f0:	e037883a 	mov	sp,fp
    b1f4:	dfc00117 	ldw	ra,4(sp)
    b1f8:	df000017 	ldw	fp,0(sp)
    b1fc:	dec00204 	addi	sp,sp,8
    b200:	f800283a 	ret

0000b204 <xD4>:
//xD3
void xD4(CPU* cpu) {CALLccnn(cpu, NC);}
    b204:	defffd04 	addi	sp,sp,-12
    b208:	dfc00215 	stw	ra,8(sp)
    b20c:	df000115 	stw	fp,4(sp)
    b210:	df000104 	addi	fp,sp,4
    b214:	e13fff15 	stw	r4,-4(fp)
    b218:	01400044 	movi	r5,1
    b21c:	e13fff17 	ldw	r4,-4(fp)
    b220:	000789c0 	call	789c <CALLccnn>
    b224:	0001883a 	nop
    b228:	e037883a 	mov	sp,fp
    b22c:	dfc00117 	ldw	ra,4(sp)
    b230:	df000017 	ldw	fp,0(sp)
    b234:	dec00204 	addi	sp,sp,8
    b238:	f800283a 	ret

0000b23c <xD5>:
void xD5(CPU* cpu) {PUSHrr(cpu, D, E);}
    b23c:	defffd04 	addi	sp,sp,-12
    b240:	dfc00215 	stw	ra,8(sp)
    b244:	df000115 	stw	fp,4(sp)
    b248:	df000104 	addi	fp,sp,4
    b24c:	e13fff15 	stw	r4,-4(fp)
    b250:	01800104 	movi	r6,4
    b254:	014000c4 	movi	r5,3
    b258:	e13fff17 	ldw	r4,-4(fp)
    b25c:	00073d40 	call	73d4 <PUSHrr>
    b260:	0001883a 	nop
    b264:	e037883a 	mov	sp,fp
    b268:	dfc00117 	ldw	ra,4(sp)
    b26c:	df000017 	ldw	fp,0(sp)
    b270:	dec00204 	addi	sp,sp,8
    b274:	f800283a 	ret

0000b278 <xD6>:
void xD6(CPU* cpu) {SUBn(cpu);}
    b278:	defffd04 	addi	sp,sp,-12
    b27c:	dfc00215 	stw	ra,8(sp)
    b280:	df000115 	stw	fp,4(sp)
    b284:	df000104 	addi	fp,sp,4
    b288:	e13fff15 	stw	r4,-4(fp)
    b28c:	e13fff17 	ldw	r4,-4(fp)
    b290:	0004ed00 	call	4ed0 <SUBn>
    b294:	0001883a 	nop
    b298:	e037883a 	mov	sp,fp
    b29c:	dfc00117 	ldw	ra,4(sp)
    b2a0:	df000017 	ldw	fp,0(sp)
    b2a4:	dec00204 	addi	sp,sp,8
    b2a8:	f800283a 	ret

0000b2ac <xD7>:
void xD7(CPU* cpu) {RSTn(cpu, 0x10);}
    b2ac:	defffd04 	addi	sp,sp,-12
    b2b0:	dfc00215 	stw	ra,8(sp)
    b2b4:	df000115 	stw	fp,4(sp)
    b2b8:	df000104 	addi	fp,sp,4
    b2bc:	e13fff15 	stw	r4,-4(fp)
    b2c0:	01400404 	movi	r5,16
    b2c4:	e13fff17 	ldw	r4,-4(fp)
    b2c8:	000758c0 	call	758c <RSTn>
    b2cc:	0001883a 	nop
    b2d0:	e037883a 	mov	sp,fp
    b2d4:	dfc00117 	ldw	ra,4(sp)
    b2d8:	df000017 	ldw	fp,0(sp)
    b2dc:	dec00204 	addi	sp,sp,8
    b2e0:	f800283a 	ret

0000b2e4 <xD8>:
void xD8(CPU* cpu) {RETcc(cpu, C);}
    b2e4:	defffd04 	addi	sp,sp,-12
    b2e8:	dfc00215 	stw	ra,8(sp)
    b2ec:	df000115 	stw	fp,4(sp)
    b2f0:	df000104 	addi	fp,sp,4
    b2f4:	e13fff15 	stw	r4,-4(fp)
    b2f8:	01400084 	movi	r5,2
    b2fc:	e13fff17 	ldw	r4,-4(fp)
    b300:	00077500 	call	7750 <RETcc>
    b304:	0001883a 	nop
    b308:	e037883a 	mov	sp,fp
    b30c:	dfc00117 	ldw	ra,4(sp)
    b310:	df000017 	ldw	fp,0(sp)
    b314:	dec00204 	addi	sp,sp,8
    b318:	f800283a 	ret

0000b31c <xD9>:
void xD9(CPU* cpu) {RETI(cpu);}
    b31c:	defffd04 	addi	sp,sp,-12
    b320:	dfc00215 	stw	ra,8(sp)
    b324:	df000115 	stw	fp,4(sp)
    b328:	df000104 	addi	fp,sp,4
    b32c:	e13fff15 	stw	r4,-4(fp)
    b330:	e13fff17 	ldw	r4,-4(fp)
    b334:	0007ebc0 	call	7ebc <RETI>
    b338:	0001883a 	nop
    b33c:	e037883a 	mov	sp,fp
    b340:	dfc00117 	ldw	ra,4(sp)
    b344:	df000017 	ldw	fp,0(sp)
    b348:	dec00204 	addi	sp,sp,8
    b34c:	f800283a 	ret

0000b350 <xDA>:
void xDA(CPU* cpu) {JPccnn(cpu, C);}
    b350:	defffd04 	addi	sp,sp,-12
    b354:	dfc00215 	stw	ra,8(sp)
    b358:	df000115 	stw	fp,4(sp)
    b35c:	df000104 	addi	fp,sp,4
    b360:	e13fff15 	stw	r4,-4(fp)
    b364:	01400084 	movi	r5,2
    b368:	e13fff17 	ldw	r4,-4(fp)
    b36c:	00071d40 	call	71d4 <JPccnn>
    b370:	0001883a 	nop
    b374:	e037883a 	mov	sp,fp
    b378:	dfc00117 	ldw	ra,4(sp)
    b37c:	df000017 	ldw	fp,0(sp)
    b380:	dec00204 	addi	sp,sp,8
    b384:	f800283a 	ret

0000b388 <xDC>:
//xDB
void xDC(CPU* cpu) {CALLccnn(cpu, C);}
    b388:	defffd04 	addi	sp,sp,-12
    b38c:	dfc00215 	stw	ra,8(sp)
    b390:	df000115 	stw	fp,4(sp)
    b394:	df000104 	addi	fp,sp,4
    b398:	e13fff15 	stw	r4,-4(fp)
    b39c:	01400084 	movi	r5,2
    b3a0:	e13fff17 	ldw	r4,-4(fp)
    b3a4:	000789c0 	call	789c <CALLccnn>
    b3a8:	0001883a 	nop
    b3ac:	e037883a 	mov	sp,fp
    b3b0:	dfc00117 	ldw	ra,4(sp)
    b3b4:	df000017 	ldw	fp,0(sp)
    b3b8:	dec00204 	addi	sp,sp,8
    b3bc:	f800283a 	ret

0000b3c0 <xDE>:
//xDD
void xDE(CPU* cpu) {SBCn(cpu);}
    b3c0:	defffd04 	addi	sp,sp,-12
    b3c4:	dfc00215 	stw	ra,8(sp)
    b3c8:	df000115 	stw	fp,4(sp)
    b3cc:	df000104 	addi	fp,sp,4
    b3d0:	e13fff15 	stw	r4,-4(fp)
    b3d4:	e13fff17 	ldw	r4,-4(fp)
    b3d8:	00050e00 	call	50e0 <SBCn>
    b3dc:	0001883a 	nop
    b3e0:	e037883a 	mov	sp,fp
    b3e4:	dfc00117 	ldw	ra,4(sp)
    b3e8:	df000017 	ldw	fp,0(sp)
    b3ec:	dec00204 	addi	sp,sp,8
    b3f0:	f800283a 	ret

0000b3f4 <xDF>:
void xDF(CPU* cpu) {RSTn(cpu, 0x18);}
    b3f4:	defffd04 	addi	sp,sp,-12
    b3f8:	dfc00215 	stw	ra,8(sp)
    b3fc:	df000115 	stw	fp,4(sp)
    b400:	df000104 	addi	fp,sp,4
    b404:	e13fff15 	stw	r4,-4(fp)
    b408:	01400604 	movi	r5,24
    b40c:	e13fff17 	ldw	r4,-4(fp)
    b410:	000758c0 	call	758c <RSTn>
    b414:	0001883a 	nop
    b418:	e037883a 	mov	sp,fp
    b41c:	dfc00117 	ldw	ra,4(sp)
    b420:	df000017 	ldw	fp,0(sp)
    b424:	dec00204 	addi	sp,sp,8
    b428:	f800283a 	ret

0000b42c <xE0>:

void xE0(CPU* cpu) {LDHnar(cpu, A);}
    b42c:	defffd04 	addi	sp,sp,-12
    b430:	dfc00215 	stw	ra,8(sp)
    b434:	df000115 	stw	fp,4(sp)
    b438:	df000104 	addi	fp,sp,4
    b43c:	e13fff15 	stw	r4,-4(fp)
    b440:	000b883a 	mov	r5,zero
    b444:	e13fff17 	ldw	r4,-4(fp)
    b448:	0003cb80 	call	3cb8 <LDHnar>
    b44c:	0001883a 	nop
    b450:	e037883a 	mov	sp,fp
    b454:	dfc00117 	ldw	ra,4(sp)
    b458:	df000017 	ldw	fp,0(sp)
    b45c:	dec00204 	addi	sp,sp,8
    b460:	f800283a 	ret

0000b464 <xE1>:
void xE1(CPU* cpu) {POPrr(cpu, H, L);}
    b464:	defffd04 	addi	sp,sp,-12
    b468:	dfc00215 	stw	ra,8(sp)
    b46c:	df000115 	stw	fp,4(sp)
    b470:	df000104 	addi	fp,sp,4
    b474:	e13fff15 	stw	r4,-4(fp)
    b478:	018001c4 	movi	r6,7
    b47c:	01400184 	movi	r5,6
    b480:	e13fff17 	ldw	r4,-4(fp)
    b484:	00074b40 	call	74b4 <POPrr>
    b488:	0001883a 	nop
    b48c:	e037883a 	mov	sp,fp
    b490:	dfc00117 	ldw	ra,4(sp)
    b494:	df000017 	ldw	fp,0(sp)
    b498:	dec00204 	addi	sp,sp,8
    b49c:	f800283a 	ret

0000b4a0 <xE2>:
void xE2(CPU* cpu) {LDrar(cpu, C, A);}
    b4a0:	defffd04 	addi	sp,sp,-12
    b4a4:	dfc00215 	stw	ra,8(sp)
    b4a8:	df000115 	stw	fp,4(sp)
    b4ac:	df000104 	addi	fp,sp,4
    b4b0:	e13fff15 	stw	r4,-4(fp)
    b4b4:	000d883a 	mov	r6,zero
    b4b8:	01400084 	movi	r5,2
    b4bc:	e13fff17 	ldw	r4,-4(fp)
    b4c0:	00035880 	call	3588 <LDrar>
    b4c4:	0001883a 	nop
    b4c8:	e037883a 	mov	sp,fp
    b4cc:	dfc00117 	ldw	ra,4(sp)
    b4d0:	df000017 	ldw	fp,0(sp)
    b4d4:	dec00204 	addi	sp,sp,8
    b4d8:	f800283a 	ret

0000b4dc <xE5>:
//xE3
//xE4
void xE5(CPU* cpu) {PUSHrr(cpu, H, L);}
    b4dc:	defffd04 	addi	sp,sp,-12
    b4e0:	dfc00215 	stw	ra,8(sp)
    b4e4:	df000115 	stw	fp,4(sp)
    b4e8:	df000104 	addi	fp,sp,4
    b4ec:	e13fff15 	stw	r4,-4(fp)
    b4f0:	018001c4 	movi	r6,7
    b4f4:	01400184 	movi	r5,6
    b4f8:	e13fff17 	ldw	r4,-4(fp)
    b4fc:	00073d40 	call	73d4 <PUSHrr>
    b500:	0001883a 	nop
    b504:	e037883a 	mov	sp,fp
    b508:	dfc00117 	ldw	ra,4(sp)
    b50c:	df000017 	ldw	fp,0(sp)
    b510:	dec00204 	addi	sp,sp,8
    b514:	f800283a 	ret

0000b518 <xE6>:
void xE6(CPU* cpu) {ANDn(cpu);}
    b518:	defffd04 	addi	sp,sp,-12
    b51c:	dfc00215 	stw	ra,8(sp)
    b520:	df000115 	stw	fp,4(sp)
    b524:	df000104 	addi	fp,sp,4
    b528:	e13fff15 	stw	r4,-4(fp)
    b52c:	e13fff17 	ldw	r4,-4(fp)
    b530:	00056440 	call	5644 <ANDn>
    b534:	0001883a 	nop
    b538:	e037883a 	mov	sp,fp
    b53c:	dfc00117 	ldw	ra,4(sp)
    b540:	df000017 	ldw	fp,0(sp)
    b544:	dec00204 	addi	sp,sp,8
    b548:	f800283a 	ret

0000b54c <xE7>:
void xE7(CPU* cpu) {RSTn(cpu, 0x20);}
    b54c:	defffd04 	addi	sp,sp,-12
    b550:	dfc00215 	stw	ra,8(sp)
    b554:	df000115 	stw	fp,4(sp)
    b558:	df000104 	addi	fp,sp,4
    b55c:	e13fff15 	stw	r4,-4(fp)
    b560:	01400804 	movi	r5,32
    b564:	e13fff17 	ldw	r4,-4(fp)
    b568:	000758c0 	call	758c <RSTn>
    b56c:	0001883a 	nop
    b570:	e037883a 	mov	sp,fp
    b574:	dfc00117 	ldw	ra,4(sp)
    b578:	df000017 	ldw	fp,0(sp)
    b57c:	dec00204 	addi	sp,sp,8
    b580:	f800283a 	ret

0000b584 <xE8>:
void xE8(CPU* cpu) {ADDspn(cpu);}
    b584:	defffd04 	addi	sp,sp,-12
    b588:	dfc00215 	stw	ra,8(sp)
    b58c:	df000115 	stw	fp,4(sp)
    b590:	df000104 	addi	fp,sp,4
    b594:	e13fff15 	stw	r4,-4(fp)
    b598:	e13fff17 	ldw	r4,-4(fp)
    b59c:	00047940 	call	4794 <ADDspn>
    b5a0:	0001883a 	nop
    b5a4:	e037883a 	mov	sp,fp
    b5a8:	dfc00117 	ldw	ra,4(sp)
    b5ac:	df000017 	ldw	fp,0(sp)
    b5b0:	dec00204 	addi	sp,sp,8
    b5b4:	f800283a 	ret

0000b5b8 <xE9>:
void xE9(CPU* cpu) {JPrr(cpu, H, L);}
    b5b8:	defffd04 	addi	sp,sp,-12
    b5bc:	dfc00215 	stw	ra,8(sp)
    b5c0:	df000115 	stw	fp,4(sp)
    b5c4:	df000104 	addi	fp,sp,4
    b5c8:	e13fff15 	stw	r4,-4(fp)
    b5cc:	018001c4 	movi	r6,7
    b5d0:	01400184 	movi	r5,6
    b5d4:	e13fff17 	ldw	r4,-4(fp)
    b5d8:	00072b80 	call	72b8 <JPrr>
    b5dc:	0001883a 	nop
    b5e0:	e037883a 	mov	sp,fp
    b5e4:	dfc00117 	ldw	ra,4(sp)
    b5e8:	df000017 	ldw	fp,0(sp)
    b5ec:	dec00204 	addi	sp,sp,8
    b5f0:	f800283a 	ret

0000b5f4 <xEA>:
void xEA(CPU* cpu) {LDnnar(cpu, A);}
    b5f4:	defffd04 	addi	sp,sp,-12
    b5f8:	dfc00215 	stw	ra,8(sp)
    b5fc:	df000115 	stw	fp,4(sp)
    b600:	df000104 	addi	fp,sp,4
    b604:	e13fff15 	stw	r4,-4(fp)
    b608:	000b883a 	mov	r5,zero
    b60c:	e13fff17 	ldw	r4,-4(fp)
    b610:	00037a40 	call	37a4 <LDnnar>
    b614:	0001883a 	nop
    b618:	e037883a 	mov	sp,fp
    b61c:	dfc00117 	ldw	ra,4(sp)
    b620:	df000017 	ldw	fp,0(sp)
    b624:	dec00204 	addi	sp,sp,8
    b628:	f800283a 	ret

0000b62c <xEE>:
//xEB
//xEC
//xED
void xEE(CPU* cpu) {XORn(cpu);}
    b62c:	defffd04 	addi	sp,sp,-12
    b630:	dfc00215 	stw	ra,8(sp)
    b634:	df000115 	stw	fp,4(sp)
    b638:	df000104 	addi	fp,sp,4
    b63c:	e13fff15 	stw	r4,-4(fp)
    b640:	e13fff17 	ldw	r4,-4(fp)
    b644:	000581c0 	call	581c <XORn>
    b648:	0001883a 	nop
    b64c:	e037883a 	mov	sp,fp
    b650:	dfc00117 	ldw	ra,4(sp)
    b654:	df000017 	ldw	fp,0(sp)
    b658:	dec00204 	addi	sp,sp,8
    b65c:	f800283a 	ret

0000b660 <xEF>:
void xEF(CPU* cpu) {RSTn(cpu, 0x28);}
    b660:	defffd04 	addi	sp,sp,-12
    b664:	dfc00215 	stw	ra,8(sp)
    b668:	df000115 	stw	fp,4(sp)
    b66c:	df000104 	addi	fp,sp,4
    b670:	e13fff15 	stw	r4,-4(fp)
    b674:	01400a04 	movi	r5,40
    b678:	e13fff17 	ldw	r4,-4(fp)
    b67c:	000758c0 	call	758c <RSTn>
    b680:	0001883a 	nop
    b684:	e037883a 	mov	sp,fp
    b688:	dfc00117 	ldw	ra,4(sp)
    b68c:	df000017 	ldw	fp,0(sp)
    b690:	dec00204 	addi	sp,sp,8
    b694:	f800283a 	ret

0000b698 <xF0>:

void xF0(CPU* cpu) {LDHrna(cpu, A);}
    b698:	defffd04 	addi	sp,sp,-12
    b69c:	dfc00215 	stw	ra,8(sp)
    b6a0:	df000115 	stw	fp,4(sp)
    b6a4:	df000104 	addi	fp,sp,4
    b6a8:	e13fff15 	stw	r4,-4(fp)
    b6ac:	000b883a 	mov	r5,zero
    b6b0:	e13fff17 	ldw	r4,-4(fp)
    b6b4:	0003d500 	call	3d50 <LDHrna>
    b6b8:	0001883a 	nop
    b6bc:	e037883a 	mov	sp,fp
    b6c0:	dfc00117 	ldw	ra,4(sp)
    b6c4:	df000017 	ldw	fp,0(sp)
    b6c8:	dec00204 	addi	sp,sp,8
    b6cc:	f800283a 	ret

0000b6d0 <xF1>:
void xF1(CPU* cpu) {POPrr(cpu, A, F);}
    b6d0:	defffd04 	addi	sp,sp,-12
    b6d4:	dfc00215 	stw	ra,8(sp)
    b6d8:	df000115 	stw	fp,4(sp)
    b6dc:	df000104 	addi	fp,sp,4
    b6e0:	e13fff15 	stw	r4,-4(fp)
    b6e4:	01800144 	movi	r6,5
    b6e8:	000b883a 	mov	r5,zero
    b6ec:	e13fff17 	ldw	r4,-4(fp)
    b6f0:	00074b40 	call	74b4 <POPrr>
    b6f4:	0001883a 	nop
    b6f8:	e037883a 	mov	sp,fp
    b6fc:	dfc00117 	ldw	ra,4(sp)
    b700:	df000017 	ldw	fp,0(sp)
    b704:	dec00204 	addi	sp,sp,8
    b708:	f800283a 	ret

0000b70c <xF2>:
void xF2(CPU* cpu) {LDrra(cpu, A, C);}
    b70c:	defffd04 	addi	sp,sp,-12
    b710:	dfc00215 	stw	ra,8(sp)
    b714:	df000115 	stw	fp,4(sp)
    b718:	df000104 	addi	fp,sp,4
    b71c:	e13fff15 	stw	r4,-4(fp)
    b720:	01800084 	movi	r6,2
    b724:	000b883a 	mov	r5,zero
    b728:	e13fff17 	ldw	r4,-4(fp)
    b72c:	000360c0 	call	360c <LDrra>
    b730:	0001883a 	nop
    b734:	e037883a 	mov	sp,fp
    b738:	dfc00117 	ldw	ra,4(sp)
    b73c:	df000017 	ldw	fp,0(sp)
    b740:	dec00204 	addi	sp,sp,8
    b744:	f800283a 	ret

0000b748 <xF3>:
void xF3(CPU* cpu) {DI(cpu);}
    b748:	defffd04 	addi	sp,sp,-12
    b74c:	dfc00215 	stw	ra,8(sp)
    b750:	df000115 	stw	fp,4(sp)
    b754:	df000104 	addi	fp,sp,4
    b758:	e13fff15 	stw	r4,-4(fp)
    b75c:	e13fff17 	ldw	r4,-4(fp)
    b760:	0007e2c0 	call	7e2c <DI>
    b764:	0001883a 	nop
    b768:	e037883a 	mov	sp,fp
    b76c:	dfc00117 	ldw	ra,4(sp)
    b770:	df000017 	ldw	fp,0(sp)
    b774:	dec00204 	addi	sp,sp,8
    b778:	f800283a 	ret

0000b77c <xF5>:
//xF4
void xF5(CPU* cpu) {PUSHrr(cpu, A, F);}
    b77c:	defffd04 	addi	sp,sp,-12
    b780:	dfc00215 	stw	ra,8(sp)
    b784:	df000115 	stw	fp,4(sp)
    b788:	df000104 	addi	fp,sp,4
    b78c:	e13fff15 	stw	r4,-4(fp)
    b790:	01800144 	movi	r6,5
    b794:	000b883a 	mov	r5,zero
    b798:	e13fff17 	ldw	r4,-4(fp)
    b79c:	00073d40 	call	73d4 <PUSHrr>
    b7a0:	0001883a 	nop
    b7a4:	e037883a 	mov	sp,fp
    b7a8:	dfc00117 	ldw	ra,4(sp)
    b7ac:	df000017 	ldw	fp,0(sp)
    b7b0:	dec00204 	addi	sp,sp,8
    b7b4:	f800283a 	ret

0000b7b8 <xF6>:
void xF6(CPU* cpu) {ORn(cpu);}
    b7b8:	defffd04 	addi	sp,sp,-12
    b7bc:	dfc00215 	stw	ra,8(sp)
    b7c0:	df000115 	stw	fp,4(sp)
    b7c4:	df000104 	addi	fp,sp,4
    b7c8:	e13fff15 	stw	r4,-4(fp)
    b7cc:	e13fff17 	ldw	r4,-4(fp)
    b7d0:	000546c0 	call	546c <ORn>
    b7d4:	0001883a 	nop
    b7d8:	e037883a 	mov	sp,fp
    b7dc:	dfc00117 	ldw	ra,4(sp)
    b7e0:	df000017 	ldw	fp,0(sp)
    b7e4:	dec00204 	addi	sp,sp,8
    b7e8:	f800283a 	ret

0000b7ec <xF7>:
void xF7(CPU* cpu) {RSTn(cpu, 0x30);}
    b7ec:	defffd04 	addi	sp,sp,-12
    b7f0:	dfc00215 	stw	ra,8(sp)
    b7f4:	df000115 	stw	fp,4(sp)
    b7f8:	df000104 	addi	fp,sp,4
    b7fc:	e13fff15 	stw	r4,-4(fp)
    b800:	01400c04 	movi	r5,48
    b804:	e13fff17 	ldw	r4,-4(fp)
    b808:	000758c0 	call	758c <RSTn>
    b80c:	0001883a 	nop
    b810:	e037883a 	mov	sp,fp
    b814:	dfc00117 	ldw	ra,4(sp)
    b818:	df000017 	ldw	fp,0(sp)
    b81c:	dec00204 	addi	sp,sp,8
    b820:	f800283a 	ret

0000b824 <xF8>:
void xF8(CPU* cpu) {LDrrspn(cpu, H, L);}
    b824:	defffd04 	addi	sp,sp,-12
    b828:	dfc00215 	stw	ra,8(sp)
    b82c:	df000115 	stw	fp,4(sp)
    b830:	df000104 	addi	fp,sp,4
    b834:	e13fff15 	stw	r4,-4(fp)
    b838:	018001c4 	movi	r6,7
    b83c:	01400184 	movi	r5,6
    b840:	e13fff17 	ldw	r4,-4(fp)
    b844:	00039340 	call	3934 <LDrrspn>
    b848:	0001883a 	nop
    b84c:	e037883a 	mov	sp,fp
    b850:	dfc00117 	ldw	ra,4(sp)
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00204 	addi	sp,sp,8
    b85c:	f800283a 	ret

0000b860 <xF9>:
void xF9(CPU* cpu) {LDsprr(cpu, H, L);}
    b860:	defffd04 	addi	sp,sp,-12
    b864:	dfc00215 	stw	ra,8(sp)
    b868:	df000115 	stw	fp,4(sp)
    b86c:	df000104 	addi	fp,sp,4
    b870:	e13fff15 	stw	r4,-4(fp)
    b874:	018001c4 	movi	r6,7
    b878:	01400184 	movi	r5,6
    b87c:	e13fff17 	ldw	r4,-4(fp)
    b880:	00037380 	call	3738 <LDsprr>
    b884:	0001883a 	nop
    b888:	e037883a 	mov	sp,fp
    b88c:	dfc00117 	ldw	ra,4(sp)
    b890:	df000017 	ldw	fp,0(sp)
    b894:	dec00204 	addi	sp,sp,8
    b898:	f800283a 	ret

0000b89c <xFA>:
void xFA(CPU* cpu) {LDrnna(cpu, A);}
    b89c:	defffd04 	addi	sp,sp,-12
    b8a0:	dfc00215 	stw	ra,8(sp)
    b8a4:	df000115 	stw	fp,4(sp)
    b8a8:	df000104 	addi	fp,sp,4
    b8ac:	e13fff15 	stw	r4,-4(fp)
    b8b0:	000b883a 	mov	r5,zero
    b8b4:	e13fff17 	ldw	r4,-4(fp)
    b8b8:	000386c0 	call	386c <LDrnna>
    b8bc:	0001883a 	nop
    b8c0:	e037883a 	mov	sp,fp
    b8c4:	dfc00117 	ldw	ra,4(sp)
    b8c8:	df000017 	ldw	fp,0(sp)
    b8cc:	dec00204 	addi	sp,sp,8
    b8d0:	f800283a 	ret

0000b8d4 <xFB>:
void xFB(CPU* cpu) {EI(cpu);}
    b8d4:	defffd04 	addi	sp,sp,-12
    b8d8:	dfc00215 	stw	ra,8(sp)
    b8dc:	df000115 	stw	fp,4(sp)
    b8e0:	df000104 	addi	fp,sp,4
    b8e4:	e13fff15 	stw	r4,-4(fp)
    b8e8:	e13fff17 	ldw	r4,-4(fp)
    b8ec:	0007e740 	call	7e74 <EI>
    b8f0:	0001883a 	nop
    b8f4:	e037883a 	mov	sp,fp
    b8f8:	dfc00117 	ldw	ra,4(sp)
    b8fc:	df000017 	ldw	fp,0(sp)
    b900:	dec00204 	addi	sp,sp,8
    b904:	f800283a 	ret

0000b908 <xFE>:
//xFC
//xFD
void xFE(CPU* cpu) {CPn(cpu);}
    b908:	defffd04 	addi	sp,sp,-12
    b90c:	dfc00215 	stw	ra,8(sp)
    b910:	df000115 	stw	fp,4(sp)
    b914:	df000104 	addi	fp,sp,4
    b918:	e13fff15 	stw	r4,-4(fp)
    b91c:	e13fff17 	ldw	r4,-4(fp)
    b920:	00059c80 	call	59c8 <CPn>
    b924:	0001883a 	nop
    b928:	e037883a 	mov	sp,fp
    b92c:	dfc00117 	ldw	ra,4(sp)
    b930:	df000017 	ldw	fp,0(sp)
    b934:	dec00204 	addi	sp,sp,8
    b938:	f800283a 	ret

0000b93c <xFF>:
void xFF(CPU* cpu) {RSTn(cpu, 0x38);}
    b93c:	defffd04 	addi	sp,sp,-12
    b940:	dfc00215 	stw	ra,8(sp)
    b944:	df000115 	stw	fp,4(sp)
    b948:	df000104 	addi	fp,sp,4
    b94c:	e13fff15 	stw	r4,-4(fp)
    b950:	01400e04 	movi	r5,56
    b954:	e13fff17 	ldw	r4,-4(fp)
    b958:	000758c0 	call	758c <RSTn>
    b95c:	0001883a 	nop
    b960:	e037883a 	mov	sp,fp
    b964:	dfc00117 	ldw	ra,4(sp)
    b968:	df000017 	ldw	fp,0(sp)
    b96c:	dec00204 	addi	sp,sp,8
    b970:	f800283a 	ret

0000b974 <initOpcodes>:

void initOpcodes(){
    b974:	defffe04 	addi	sp,sp,-8
    b978:	df000115 	stw	fp,4(sp)
    b97c:	df000104 	addi	fp,sp,4
	for(int i = 0; i < 256; i++) {
    b980:	e03fff15 	stw	zero,-4(fp)
    b984:	00000a06 	br	b9b0 <initOpcodes+0x3c>
		opcodeArray[i] = NULL;
    b988:	008000b4 	movhi	r2,2
    b98c:	10bf4a04 	addi	r2,r2,-728
    b990:	e0ffff17 	ldw	r3,-4(fp)
    b994:	18c7883a 	add	r3,r3,r3
    b998:	18c7883a 	add	r3,r3,r3
    b99c:	10c5883a 	add	r2,r2,r3
    b9a0:	10000015 	stw	zero,0(r2)
//xFD
void xFE(CPU* cpu) {CPn(cpu);}
void xFF(CPU* cpu) {RSTn(cpu, 0x38);}

void initOpcodes(){
	for(int i = 0; i < 256; i++) {
    b9a4:	e0bfff17 	ldw	r2,-4(fp)
    b9a8:	10800044 	addi	r2,r2,1
    b9ac:	e0bfff15 	stw	r2,-4(fp)
    b9b0:	e0bfff17 	ldw	r2,-4(fp)
    b9b4:	10804010 	cmplti	r2,r2,256
    b9b8:	103ff31e 	bne	r2,zero,b988 <__alt_data_end+0xfc00b988>
		opcodeArray[i] = NULL;
	}
	opcodeArray[0x00] = &x00;
    b9bc:	008000b4 	movhi	r2,2
    b9c0:	10bf4a04 	addi	r2,r2,-728
    b9c4:	00c00034 	movhi	r3,0
    b9c8:	18dfbe04 	addi	r3,r3,32504
    b9cc:	10c00015 	stw	r3,0(r2)
	opcodeArray[0x01] = &x01;
    b9d0:	008000b4 	movhi	r2,2
    b9d4:	10bf4a04 	addi	r2,r2,-728
    b9d8:	00c00034 	movhi	r3,0
    b9dc:	18dfcc04 	addi	r3,r3,32560
    b9e0:	10c00115 	stw	r3,4(r2)
	opcodeArray[0x02] = &x02;
    b9e4:	008000b4 	movhi	r2,2
    b9e8:	10bf4a04 	addi	r2,r2,-728
    b9ec:	00c00034 	movhi	r3,0
    b9f0:	18dfdb04 	addi	r3,r3,32620
    b9f4:	10c00215 	stw	r3,8(r2)
	opcodeArray[0x03] = &x03;
    b9f8:	008000b4 	movhi	r2,2
    b9fc:	10bf4a04 	addi	r2,r2,-728
    ba00:	00c00034 	movhi	r3,0
    ba04:	18dfeb04 	addi	r3,r3,32684
    ba08:	10c00315 	stw	r3,12(r2)
	opcodeArray[0x04] = &x04;
    ba0c:	008000b4 	movhi	r2,2
    ba10:	10bf4a04 	addi	r2,r2,-728
    ba14:	00c00034 	movhi	r3,0
    ba18:	18dffa04 	addi	r3,r3,32744
    ba1c:	10c00415 	stw	r3,16(r2)
	opcodeArray[0x05] = &x05;
    ba20:	008000b4 	movhi	r2,2
    ba24:	10bf4a04 	addi	r2,r2,-728
    ba28:	00c00074 	movhi	r3,1
    ba2c:	18e00804 	addi	r3,r3,-32736
    ba30:	10c00515 	stw	r3,20(r2)
	opcodeArray[0x06] = &x06;
    ba34:	008000b4 	movhi	r2,2
    ba38:	10bf4a04 	addi	r2,r2,-728
    ba3c:	00c00074 	movhi	r3,1
    ba40:	18e01604 	addi	r3,r3,-32680
    ba44:	10c00615 	stw	r3,24(r2)
	opcodeArray[0x07] = &x07;
    ba48:	008000b4 	movhi	r2,2
    ba4c:	10bf4a04 	addi	r2,r2,-728
    ba50:	00c00074 	movhi	r3,1
    ba54:	18e02404 	addi	r3,r3,-32624
    ba58:	10c00715 	stw	r3,28(r2)
	opcodeArray[0x08] = &x08;
    ba5c:	008000b4 	movhi	r2,2
    ba60:	10bf4a04 	addi	r2,r2,-728
    ba64:	00c00074 	movhi	r3,1
    ba68:	18e05204 	addi	r3,r3,-32440
    ba6c:	10c00815 	stw	r3,32(r2)
	opcodeArray[0x09] = &x09;
    ba70:	008000b4 	movhi	r2,2
    ba74:	10bf4a04 	addi	r2,r2,-728
    ba78:	00c00074 	movhi	r3,1
    ba7c:	18e05f04 	addi	r3,r3,-32388
    ba80:	10c00915 	stw	r3,36(r2)
	opcodeArray[0x0A] = &x0A;
    ba84:	008000b4 	movhi	r2,2
    ba88:	10bf4a04 	addi	r2,r2,-728
    ba8c:	00c00074 	movhi	r3,1
    ba90:	18e07104 	addi	r3,r3,-32316
    ba94:	10c00a15 	stw	r3,40(r2)
	opcodeArray[0x0B] = &x0B;
    ba98:	008000b4 	movhi	r2,2
    ba9c:	10bf4a04 	addi	r2,r2,-728
    baa0:	00c00074 	movhi	r3,1
    baa4:	18e08104 	addi	r3,r3,-32252
    baa8:	10c00b15 	stw	r3,44(r2)
	opcodeArray[0x0C] = &x0C;
    baac:	008000b4 	movhi	r2,2
    bab0:	10bf4a04 	addi	r2,r2,-728
    bab4:	00c00074 	movhi	r3,1
    bab8:	18e09004 	addi	r3,r3,-32192
    babc:	10c00c15 	stw	r3,48(r2)
	opcodeArray[0x0D] = &x0D;
    bac0:	008000b4 	movhi	r2,2
    bac4:	10bf4a04 	addi	r2,r2,-728
    bac8:	00c00074 	movhi	r3,1
    bacc:	18e09e04 	addi	r3,r3,-32136
    bad0:	10c00d15 	stw	r3,52(r2)
	opcodeArray[0x0E] = &x0E;
    bad4:	008000b4 	movhi	r2,2
    bad8:	10bf4a04 	addi	r2,r2,-728
    badc:	00c00074 	movhi	r3,1
    bae0:	18e0ac04 	addi	r3,r3,-32080
    bae4:	10c00e15 	stw	r3,56(r2)
	opcodeArray[0x0F] = &x0F;
    bae8:	008000b4 	movhi	r2,2
    baec:	10bf4a04 	addi	r2,r2,-728
    baf0:	00c00074 	movhi	r3,1
    baf4:	18e0ba04 	addi	r3,r3,-32024
    baf8:	10c00f15 	stw	r3,60(r2)
	opcodeArray[0x10] = &x10;
    bafc:	008000b4 	movhi	r2,2
    bb00:	10bf4a04 	addi	r2,r2,-728
    bb04:	00c00074 	movhi	r3,1
    bb08:	18e0ec04 	addi	r3,r3,-31824
    bb0c:	10c01015 	stw	r3,64(r2)
	opcodeArray[0x11] = &x11;
    bb10:	008000b4 	movhi	r2,2
    bb14:	10bf4a04 	addi	r2,r2,-728
    bb18:	00c00074 	movhi	r3,1
    bb1c:	18e10004 	addi	r3,r3,-31744
    bb20:	10c01115 	stw	r3,68(r2)
	opcodeArray[0x12] = &x12;
    bb24:	008000b4 	movhi	r2,2
    bb28:	10bf4a04 	addi	r2,r2,-728
    bb2c:	00c00074 	movhi	r3,1
    bb30:	18e10f04 	addi	r3,r3,-31684
    bb34:	10c01215 	stw	r3,72(r2)
	opcodeArray[0x13] = &x13;
    bb38:	008000b4 	movhi	r2,2
    bb3c:	10bf4a04 	addi	r2,r2,-728
    bb40:	00c00074 	movhi	r3,1
    bb44:	18e11f04 	addi	r3,r3,-31620
    bb48:	10c01315 	stw	r3,76(r2)
	opcodeArray[0x14] = &x14;
    bb4c:	008000b4 	movhi	r2,2
    bb50:	10bf4a04 	addi	r2,r2,-728
    bb54:	00c00074 	movhi	r3,1
    bb58:	18e12e04 	addi	r3,r3,-31560
    bb5c:	10c01415 	stw	r3,80(r2)
	opcodeArray[0x15] = &x15;
    bb60:	008000b4 	movhi	r2,2
    bb64:	10bf4a04 	addi	r2,r2,-728
    bb68:	00c00074 	movhi	r3,1
    bb6c:	18e13c04 	addi	r3,r3,-31504
    bb70:	10c01515 	stw	r3,84(r2)
	opcodeArray[0x16] = &x16;
    bb74:	008000b4 	movhi	r2,2
    bb78:	10bf4a04 	addi	r2,r2,-728
    bb7c:	00c00074 	movhi	r3,1
    bb80:	18e14a04 	addi	r3,r3,-31448
    bb84:	10c01615 	stw	r3,88(r2)
	opcodeArray[0x17] = &x17;
    bb88:	008000b4 	movhi	r2,2
    bb8c:	10bf4a04 	addi	r2,r2,-728
    bb90:	00c00074 	movhi	r3,1
    bb94:	18e15804 	addi	r3,r3,-31392
    bb98:	10c01715 	stw	r3,92(r2)
	opcodeArray[0x18] = &x18;
    bb9c:	008000b4 	movhi	r2,2
    bba0:	10bf4a04 	addi	r2,r2,-728
    bba4:	00c00074 	movhi	r3,1
    bba8:	18e18e04 	addi	r3,r3,-31176
    bbac:	10c01815 	stw	r3,96(r2)
	opcodeArray[0x19] = &x19;
    bbb0:	008000b4 	movhi	r2,2
    bbb4:	10bf4a04 	addi	r2,r2,-728
    bbb8:	00c00074 	movhi	r3,1
    bbbc:	18e19b04 	addi	r3,r3,-31124
    bbc0:	10c01915 	stw	r3,100(r2)
	opcodeArray[0x1A] = &x1A;
    bbc4:	008000b4 	movhi	r2,2
    bbc8:	10bf4a04 	addi	r2,r2,-728
    bbcc:	00c00074 	movhi	r3,1
    bbd0:	18e1ad04 	addi	r3,r3,-31052
    bbd4:	10c01a15 	stw	r3,104(r2)
	opcodeArray[0x1B] = &x1B;
    bbd8:	008000b4 	movhi	r2,2
    bbdc:	10bf4a04 	addi	r2,r2,-728
    bbe0:	00c00074 	movhi	r3,1
    bbe4:	18e1bd04 	addi	r3,r3,-30988
    bbe8:	10c01b15 	stw	r3,108(r2)
	opcodeArray[0x1C] = &x1C;
    bbec:	008000b4 	movhi	r2,2
    bbf0:	10bf4a04 	addi	r2,r2,-728
    bbf4:	00c00074 	movhi	r3,1
    bbf8:	18e1cc04 	addi	r3,r3,-30928
    bbfc:	10c01c15 	stw	r3,112(r2)
	opcodeArray[0x1D] = &x1D;
    bc00:	008000b4 	movhi	r2,2
    bc04:	10bf4a04 	addi	r2,r2,-728
    bc08:	00c00074 	movhi	r3,1
    bc0c:	18e1da04 	addi	r3,r3,-30872
    bc10:	10c01d15 	stw	r3,116(r2)
	opcodeArray[0x1E] = &x1E;
    bc14:	008000b4 	movhi	r2,2
    bc18:	10bf4a04 	addi	r2,r2,-728
    bc1c:	00c00074 	movhi	r3,1
    bc20:	18e1e804 	addi	r3,r3,-30816
    bc24:	10c01e15 	stw	r3,120(r2)
	opcodeArray[0x1F] = &x1F;
    bc28:	008000b4 	movhi	r2,2
    bc2c:	10bf4a04 	addi	r2,r2,-728
    bc30:	00c00074 	movhi	r3,1
    bc34:	18e1f604 	addi	r3,r3,-30760
    bc38:	10c01f15 	stw	r3,124(r2)
	opcodeArray[0x20] = &x20;
    bc3c:	008000b4 	movhi	r2,2
    bc40:	10bf4a04 	addi	r2,r2,-728
    bc44:	00c00074 	movhi	r3,1
    bc48:	18e23104 	addi	r3,r3,-30524
    bc4c:	10c02015 	stw	r3,128(r2)
	opcodeArray[0x21] = &x21;
    bc50:	008000b4 	movhi	r2,2
    bc54:	10bf4a04 	addi	r2,r2,-728
    bc58:	00c00074 	movhi	r3,1
    bc5c:	18e23f04 	addi	r3,r3,-30468
    bc60:	10c02115 	stw	r3,132(r2)
	opcodeArray[0x22] = &x22;
    bc64:	008000b4 	movhi	r2,2
    bc68:	10bf4a04 	addi	r2,r2,-728
    bc6c:	00c00074 	movhi	r3,1
    bc70:	18e24e04 	addi	r3,r3,-30408
    bc74:	10c02215 	stw	r3,136(r2)
	opcodeArray[0x23] = &x23;
    bc78:	008000b4 	movhi	r2,2
    bc7c:	10bf4a04 	addi	r2,r2,-728
    bc80:	00c00074 	movhi	r3,1
    bc84:	18e26704 	addi	r3,r3,-30308
    bc88:	10c02315 	stw	r3,140(r2)
	opcodeArray[0x24] = &x24;
    bc8c:	008000b4 	movhi	r2,2
    bc90:	10bf4a04 	addi	r2,r2,-728
    bc94:	00c00074 	movhi	r3,1
    bc98:	18e27604 	addi	r3,r3,-30248
    bc9c:	10c02415 	stw	r3,144(r2)
	opcodeArray[0x25] = &x25;
    bca0:	008000b4 	movhi	r2,2
    bca4:	10bf4a04 	addi	r2,r2,-728
    bca8:	00c00074 	movhi	r3,1
    bcac:	18e28404 	addi	r3,r3,-30192
    bcb0:	10c02515 	stw	r3,148(r2)
	opcodeArray[0x26] = &x26;
    bcb4:	008000b4 	movhi	r2,2
    bcb8:	10bf4a04 	addi	r2,r2,-728
    bcbc:	00c00074 	movhi	r3,1
    bcc0:	18e29204 	addi	r3,r3,-30136
    bcc4:	10c02615 	stw	r3,152(r2)
	opcodeArray[0x27] = &x27;
    bcc8:	008000b4 	movhi	r2,2
    bccc:	10bf4a04 	addi	r2,r2,-728
    bcd0:	00c00074 	movhi	r3,1
    bcd4:	18e2a004 	addi	r3,r3,-30080
    bcd8:	10c02715 	stw	r3,156(r2)
	opcodeArray[0x28] = &x28;
    bcdc:	008000b4 	movhi	r2,2
    bce0:	10bf4a04 	addi	r2,r2,-728
    bce4:	00c00074 	movhi	r3,1
    bce8:	18e2ad04 	addi	r3,r3,-30028
    bcec:	10c02815 	stw	r3,160(r2)
	opcodeArray[0x29] = &x29;
    bcf0:	008000b4 	movhi	r2,2
    bcf4:	10bf4a04 	addi	r2,r2,-728
    bcf8:	00c00074 	movhi	r3,1
    bcfc:	18e2bb04 	addi	r3,r3,-29972
    bd00:	10c02915 	stw	r3,164(r2)
	opcodeArray[0x2A] = &x2A;
    bd04:	008000b4 	movhi	r2,2
    bd08:	10bf4a04 	addi	r2,r2,-728
    bd0c:	00c00074 	movhi	r3,1
    bd10:	18e2cd04 	addi	r3,r3,-29900
    bd14:	10c02a15 	stw	r3,168(r2)
	opcodeArray[0x2B] = &x2B;
    bd18:	008000b4 	movhi	r2,2
    bd1c:	10bf4a04 	addi	r2,r2,-728
    bd20:	00c00074 	movhi	r3,1
    bd24:	18e2e604 	addi	r3,r3,-29800
    bd28:	10c02b15 	stw	r3,172(r2)
	opcodeArray[0x2C] = &x2C;
    bd2c:	008000b4 	movhi	r2,2
    bd30:	10bf4a04 	addi	r2,r2,-728
    bd34:	00c00074 	movhi	r3,1
    bd38:	18e2f504 	addi	r3,r3,-29740
    bd3c:	10c02c15 	stw	r3,176(r2)
	opcodeArray[0x2D] = &x2D;
    bd40:	008000b4 	movhi	r2,2
    bd44:	10bf4a04 	addi	r2,r2,-728
    bd48:	00c00074 	movhi	r3,1
    bd4c:	18e30304 	addi	r3,r3,-29684
    bd50:	10c02d15 	stw	r3,180(r2)
	opcodeArray[0x2E] = &x2E;
    bd54:	008000b4 	movhi	r2,2
    bd58:	10bf4a04 	addi	r2,r2,-728
    bd5c:	00c00074 	movhi	r3,1
    bd60:	18e31104 	addi	r3,r3,-29628
    bd64:	10c02e15 	stw	r3,184(r2)
	opcodeArray[0x2F] = &x2F;
    bd68:	008000b4 	movhi	r2,2
    bd6c:	10bf4a04 	addi	r2,r2,-728
    bd70:	00c00074 	movhi	r3,1
    bd74:	18e31f04 	addi	r3,r3,-29572
    bd78:	10c02f15 	stw	r3,188(r2)
	opcodeArray[0x30] = &x30;
    bd7c:	008000b4 	movhi	r2,2
    bd80:	10bf4a04 	addi	r2,r2,-728
    bd84:	00c00074 	movhi	r3,1
    bd88:	18e32c04 	addi	r3,r3,-29520
    bd8c:	10c03015 	stw	r3,192(r2)
	opcodeArray[0x31] = &x31;
    bd90:	008000b4 	movhi	r2,2
    bd94:	10bf4a04 	addi	r2,r2,-728
    bd98:	00c00074 	movhi	r3,1
    bd9c:	18e33a04 	addi	r3,r3,-29464
    bda0:	10c03115 	stw	r3,196(r2)
	opcodeArray[0x32] = &x32;
    bda4:	008000b4 	movhi	r2,2
    bda8:	10bf4a04 	addi	r2,r2,-728
    bdac:	00c00074 	movhi	r3,1
    bdb0:	18e34704 	addi	r3,r3,-29412
    bdb4:	10c03215 	stw	r3,200(r2)
	opcodeArray[0x33] = &x33;
    bdb8:	008000b4 	movhi	r2,2
    bdbc:	10bf4a04 	addi	r2,r2,-728
    bdc0:	00c00074 	movhi	r3,1
    bdc4:	18e36004 	addi	r3,r3,-29312
    bdc8:	10c03315 	stw	r3,204(r2)
	opcodeArray[0x34] = &x34;
    bdcc:	008000b4 	movhi	r2,2
    bdd0:	10bf4a04 	addi	r2,r2,-728
    bdd4:	00c00074 	movhi	r3,1
    bdd8:	18e36d04 	addi	r3,r3,-29260
    bddc:	10c03415 	stw	r3,208(r2)
	opcodeArray[0x35] = &x35;
    bde0:	008000b4 	movhi	r2,2
    bde4:	10bf4a04 	addi	r2,r2,-728
    bde8:	00c00074 	movhi	r3,1
    bdec:	18e37c04 	addi	r3,r3,-29200
    bdf0:	10c03515 	stw	r3,212(r2)
	opcodeArray[0x36] = &x36;
    bdf4:	008000b4 	movhi	r2,2
    bdf8:	10bf4a04 	addi	r2,r2,-728
    bdfc:	00c00074 	movhi	r3,1
    be00:	18e38b04 	addi	r3,r3,-29140
    be04:	10c03615 	stw	r3,216(r2)
	opcodeArray[0x37] = &x37;
    be08:	008000b4 	movhi	r2,2
    be0c:	10bf4a04 	addi	r2,r2,-728
    be10:	00c00074 	movhi	r3,1
    be14:	18e39a04 	addi	r3,r3,-29080
    be18:	10c03715 	stw	r3,220(r2)
	opcodeArray[0x38] = &x38;
    be1c:	008000b4 	movhi	r2,2
    be20:	10bf4a04 	addi	r2,r2,-728
    be24:	00c00074 	movhi	r3,1
    be28:	18e3a704 	addi	r3,r3,-29028
    be2c:	10c03815 	stw	r3,224(r2)
	opcodeArray[0x39] = &x39;
    be30:	008000b4 	movhi	r2,2
    be34:	10bf4a04 	addi	r2,r2,-728
    be38:	00c00074 	movhi	r3,1
    be3c:	18e3b504 	addi	r3,r3,-28972
    be40:	10c03915 	stw	r3,228(r2)
	opcodeArray[0x3A] = &x3A;
    be44:	008000b4 	movhi	r2,2
    be48:	10bf4a04 	addi	r2,r2,-728
    be4c:	00c00074 	movhi	r3,1
    be50:	18e3c404 	addi	r3,r3,-28912
    be54:	10c03a15 	stw	r3,232(r2)
	opcodeArray[0x3B] = &x3B;
    be58:	008000b4 	movhi	r2,2
    be5c:	10bf4a04 	addi	r2,r2,-728
    be60:	00c00074 	movhi	r3,1
    be64:	18e3dd04 	addi	r3,r3,-28812
    be68:	10c03b15 	stw	r3,236(r2)
	opcodeArray[0x3C] = &x3C;
    be6c:	008000b4 	movhi	r2,2
    be70:	10bf4a04 	addi	r2,r2,-728
    be74:	00c00074 	movhi	r3,1
    be78:	18e3ea04 	addi	r3,r3,-28760
    be7c:	10c03c15 	stw	r3,240(r2)
	opcodeArray[0x3D] = &x3D;
    be80:	008000b4 	movhi	r2,2
    be84:	10bf4a04 	addi	r2,r2,-728
    be88:	00c00074 	movhi	r3,1
    be8c:	18e3f804 	addi	r3,r3,-28704
    be90:	10c03d15 	stw	r3,244(r2)
	opcodeArray[0x3E] = &x3E;
    be94:	008000b4 	movhi	r2,2
    be98:	10bf4a04 	addi	r2,r2,-728
    be9c:	00c00074 	movhi	r3,1
    bea0:	18e40604 	addi	r3,r3,-28648
    bea4:	10c03e15 	stw	r3,248(r2)
	opcodeArray[0x3F] = &x3F;
    bea8:	008000b4 	movhi	r2,2
    beac:	10bf4a04 	addi	r2,r2,-728
    beb0:	00c00074 	movhi	r3,1
    beb4:	18e41404 	addi	r3,r3,-28592
    beb8:	10c03f15 	stw	r3,252(r2)
	opcodeArray[0x40] = &x40;
    bebc:	008000b4 	movhi	r2,2
    bec0:	10bf4a04 	addi	r2,r2,-728
    bec4:	00c00074 	movhi	r3,1
    bec8:	18e42104 	addi	r3,r3,-28540
    becc:	10c04015 	stw	r3,256(r2)
	opcodeArray[0x41] = &x41;
    bed0:	008000b4 	movhi	r2,2
    bed4:	10bf4a04 	addi	r2,r2,-728
    bed8:	00c00074 	movhi	r3,1
    bedc:	18e43004 	addi	r3,r3,-28480
    bee0:	10c04115 	stw	r3,260(r2)
	opcodeArray[0x42] = &x42;
    bee4:	008000b4 	movhi	r2,2
    bee8:	10bf4a04 	addi	r2,r2,-728
    beec:	00c00074 	movhi	r3,1
    bef0:	18e43f04 	addi	r3,r3,-28420
    bef4:	10c04215 	stw	r3,264(r2)
	opcodeArray[0x43] = &x43;
    bef8:	008000b4 	movhi	r2,2
    befc:	10bf4a04 	addi	r2,r2,-728
    bf00:	00c00074 	movhi	r3,1
    bf04:	18e44e04 	addi	r3,r3,-28360
    bf08:	10c04315 	stw	r3,268(r2)
	opcodeArray[0x44] = &x44;
    bf0c:	008000b4 	movhi	r2,2
    bf10:	10bf4a04 	addi	r2,r2,-728
    bf14:	00c00074 	movhi	r3,1
    bf18:	18e45d04 	addi	r3,r3,-28300
    bf1c:	10c04415 	stw	r3,272(r2)
	opcodeArray[0x45] = &x45;
    bf20:	008000b4 	movhi	r2,2
    bf24:	10bf4a04 	addi	r2,r2,-728
    bf28:	00c00074 	movhi	r3,1
    bf2c:	18e46c04 	addi	r3,r3,-28240
    bf30:	10c04515 	stw	r3,276(r2)
	opcodeArray[0x46] = &x46;
    bf34:	008000b4 	movhi	r2,2
    bf38:	10bf4a04 	addi	r2,r2,-728
    bf3c:	00c00074 	movhi	r3,1
    bf40:	18e47b04 	addi	r3,r3,-28180
    bf44:	10c04615 	stw	r3,280(r2)
	opcodeArray[0x47] = &x47;
    bf48:	008000b4 	movhi	r2,2
    bf4c:	10bf4a04 	addi	r2,r2,-728
    bf50:	00c00074 	movhi	r3,1
    bf54:	18e48b04 	addi	r3,r3,-28116
    bf58:	10c04715 	stw	r3,284(r2)
	opcodeArray[0x48] = &x48;
    bf5c:	008000b4 	movhi	r2,2
    bf60:	10bf4a04 	addi	r2,r2,-728
    bf64:	00c00074 	movhi	r3,1
    bf68:	18e49a04 	addi	r3,r3,-28056
    bf6c:	10c04815 	stw	r3,288(r2)
	opcodeArray[0x49] = &x49;
    bf70:	008000b4 	movhi	r2,2
    bf74:	10bf4a04 	addi	r2,r2,-728
    bf78:	00c00074 	movhi	r3,1
    bf7c:	18e4a904 	addi	r3,r3,-27996
    bf80:	10c04915 	stw	r3,292(r2)
	opcodeArray[0x4A] = &x4A;
    bf84:	008000b4 	movhi	r2,2
    bf88:	10bf4a04 	addi	r2,r2,-728
    bf8c:	00c00074 	movhi	r3,1
    bf90:	18e4b804 	addi	r3,r3,-27936
    bf94:	10c04a15 	stw	r3,296(r2)
	opcodeArray[0x4B] = &x4B;
    bf98:	008000b4 	movhi	r2,2
    bf9c:	10bf4a04 	addi	r2,r2,-728
    bfa0:	00c00074 	movhi	r3,1
    bfa4:	18e4c704 	addi	r3,r3,-27876
    bfa8:	10c04b15 	stw	r3,300(r2)
	opcodeArray[0x4C] = &x4C;
    bfac:	008000b4 	movhi	r2,2
    bfb0:	10bf4a04 	addi	r2,r2,-728
    bfb4:	00c00074 	movhi	r3,1
    bfb8:	18e4d604 	addi	r3,r3,-27816
    bfbc:	10c04c15 	stw	r3,304(r2)
	opcodeArray[0x4D] = &x4D;
    bfc0:	008000b4 	movhi	r2,2
    bfc4:	10bf4a04 	addi	r2,r2,-728
    bfc8:	00c00074 	movhi	r3,1
    bfcc:	18e4e504 	addi	r3,r3,-27756
    bfd0:	10c04d15 	stw	r3,308(r2)
	opcodeArray[0x4E] = &x4E;
    bfd4:	008000b4 	movhi	r2,2
    bfd8:	10bf4a04 	addi	r2,r2,-728
    bfdc:	00c00074 	movhi	r3,1
    bfe0:	18e4f404 	addi	r3,r3,-27696
    bfe4:	10c04e15 	stw	r3,312(r2)
	opcodeArray[0x4F] = &x4F;
    bfe8:	008000b4 	movhi	r2,2
    bfec:	10bf4a04 	addi	r2,r2,-728
    bff0:	00c00074 	movhi	r3,1
    bff4:	18e50404 	addi	r3,r3,-27632
    bff8:	10c04f15 	stw	r3,316(r2)
	opcodeArray[0x50] = &x50;
    bffc:	008000b4 	movhi	r2,2
    c000:	10bf4a04 	addi	r2,r2,-728
    c004:	00c00074 	movhi	r3,1
    c008:	18e51304 	addi	r3,r3,-27572
    c00c:	10c05015 	stw	r3,320(r2)
	opcodeArray[0x51] = &x51;
    c010:	008000b4 	movhi	r2,2
    c014:	10bf4a04 	addi	r2,r2,-728
    c018:	00c00074 	movhi	r3,1
    c01c:	18e52204 	addi	r3,r3,-27512
    c020:	10c05115 	stw	r3,324(r2)
	opcodeArray[0x52] = &x52;
    c024:	008000b4 	movhi	r2,2
    c028:	10bf4a04 	addi	r2,r2,-728
    c02c:	00c00074 	movhi	r3,1
    c030:	18e53104 	addi	r3,r3,-27452
    c034:	10c05215 	stw	r3,328(r2)
	opcodeArray[0x53] = &x53;
    c038:	008000b4 	movhi	r2,2
    c03c:	10bf4a04 	addi	r2,r2,-728
    c040:	00c00074 	movhi	r3,1
    c044:	18e54004 	addi	r3,r3,-27392
    c048:	10c05315 	stw	r3,332(r2)
	opcodeArray[0x54] = &x54;
    c04c:	008000b4 	movhi	r2,2
    c050:	10bf4a04 	addi	r2,r2,-728
    c054:	00c00074 	movhi	r3,1
    c058:	18e54f04 	addi	r3,r3,-27332
    c05c:	10c05415 	stw	r3,336(r2)
	opcodeArray[0x55] = &x55;
    c060:	008000b4 	movhi	r2,2
    c064:	10bf4a04 	addi	r2,r2,-728
    c068:	00c00074 	movhi	r3,1
    c06c:	18e55e04 	addi	r3,r3,-27272
    c070:	10c05515 	stw	r3,340(r2)
	opcodeArray[0x56] = &x56;
    c074:	008000b4 	movhi	r2,2
    c078:	10bf4a04 	addi	r2,r2,-728
    c07c:	00c00074 	movhi	r3,1
    c080:	18e56d04 	addi	r3,r3,-27212
    c084:	10c05615 	stw	r3,344(r2)
	opcodeArray[0x57] = &x57;
    c088:	008000b4 	movhi	r2,2
    c08c:	10bf4a04 	addi	r2,r2,-728
    c090:	00c00074 	movhi	r3,1
    c094:	18e57d04 	addi	r3,r3,-27148
    c098:	10c05715 	stw	r3,348(r2)
	opcodeArray[0x58] = &x58;
    c09c:	008000b4 	movhi	r2,2
    c0a0:	10bf4a04 	addi	r2,r2,-728
    c0a4:	00c00074 	movhi	r3,1
    c0a8:	18e58c04 	addi	r3,r3,-27088
    c0ac:	10c05815 	stw	r3,352(r2)
	opcodeArray[0x59] = &x59;
    c0b0:	008000b4 	movhi	r2,2
    c0b4:	10bf4a04 	addi	r2,r2,-728
    c0b8:	00c00074 	movhi	r3,1
    c0bc:	18e59b04 	addi	r3,r3,-27028
    c0c0:	10c05915 	stw	r3,356(r2)
	opcodeArray[0x5A] = &x5A;
    c0c4:	008000b4 	movhi	r2,2
    c0c8:	10bf4a04 	addi	r2,r2,-728
    c0cc:	00c00074 	movhi	r3,1
    c0d0:	18e5aa04 	addi	r3,r3,-26968
    c0d4:	10c05a15 	stw	r3,360(r2)
	opcodeArray[0x5B] = &x5B;
    c0d8:	008000b4 	movhi	r2,2
    c0dc:	10bf4a04 	addi	r2,r2,-728
    c0e0:	00c00074 	movhi	r3,1
    c0e4:	18e5b904 	addi	r3,r3,-26908
    c0e8:	10c05b15 	stw	r3,364(r2)
	opcodeArray[0x5C] = &x5C;
    c0ec:	008000b4 	movhi	r2,2
    c0f0:	10bf4a04 	addi	r2,r2,-728
    c0f4:	00c00074 	movhi	r3,1
    c0f8:	18e5c804 	addi	r3,r3,-26848
    c0fc:	10c05c15 	stw	r3,368(r2)
	opcodeArray[0x5D] = &x5D;
    c100:	008000b4 	movhi	r2,2
    c104:	10bf4a04 	addi	r2,r2,-728
    c108:	00c00074 	movhi	r3,1
    c10c:	18e5d704 	addi	r3,r3,-26788
    c110:	10c05d15 	stw	r3,372(r2)
	opcodeArray[0x5E] = &x5E;
    c114:	008000b4 	movhi	r2,2
    c118:	10bf4a04 	addi	r2,r2,-728
    c11c:	00c00074 	movhi	r3,1
    c120:	18e5e604 	addi	r3,r3,-26728
    c124:	10c05e15 	stw	r3,376(r2)
	opcodeArray[0x5F] = &x5F;
    c128:	008000b4 	movhi	r2,2
    c12c:	10bf4a04 	addi	r2,r2,-728
    c130:	00c00074 	movhi	r3,1
    c134:	18e5f604 	addi	r3,r3,-26664
    c138:	10c05f15 	stw	r3,380(r2)
	opcodeArray[0x60] = &x60;
    c13c:	008000b4 	movhi	r2,2
    c140:	10bf4a04 	addi	r2,r2,-728
    c144:	00c00074 	movhi	r3,1
    c148:	18e60504 	addi	r3,r3,-26604
    c14c:	10c06015 	stw	r3,384(r2)
	opcodeArray[0x61] = &x61;
    c150:	008000b4 	movhi	r2,2
    c154:	10bf4a04 	addi	r2,r2,-728
    c158:	00c00074 	movhi	r3,1
    c15c:	18e61404 	addi	r3,r3,-26544
    c160:	10c06115 	stw	r3,388(r2)
	opcodeArray[0x62] = &x62;
    c164:	008000b4 	movhi	r2,2
    c168:	10bf4a04 	addi	r2,r2,-728
    c16c:	00c00074 	movhi	r3,1
    c170:	18e62304 	addi	r3,r3,-26484
    c174:	10c06215 	stw	r3,392(r2)
	opcodeArray[0x63] = &x63;
    c178:	008000b4 	movhi	r2,2
    c17c:	10bf4a04 	addi	r2,r2,-728
    c180:	00c00074 	movhi	r3,1
    c184:	18e63204 	addi	r3,r3,-26424
    c188:	10c06315 	stw	r3,396(r2)
	opcodeArray[0x64] = &x64;
    c18c:	008000b4 	movhi	r2,2
    c190:	10bf4a04 	addi	r2,r2,-728
    c194:	00c00074 	movhi	r3,1
    c198:	18e64104 	addi	r3,r3,-26364
    c19c:	10c06415 	stw	r3,400(r2)
	opcodeArray[0x65] = &x65;
    c1a0:	008000b4 	movhi	r2,2
    c1a4:	10bf4a04 	addi	r2,r2,-728
    c1a8:	00c00074 	movhi	r3,1
    c1ac:	18e65004 	addi	r3,r3,-26304
    c1b0:	10c06515 	stw	r3,404(r2)
	opcodeArray[0x66] = &x66;
    c1b4:	008000b4 	movhi	r2,2
    c1b8:	10bf4a04 	addi	r2,r2,-728
    c1bc:	00c00074 	movhi	r3,1
    c1c0:	18e65f04 	addi	r3,r3,-26244
    c1c4:	10c06615 	stw	r3,408(r2)
	opcodeArray[0x67] = &x67;
    c1c8:	008000b4 	movhi	r2,2
    c1cc:	10bf4a04 	addi	r2,r2,-728
    c1d0:	00c00074 	movhi	r3,1
    c1d4:	18e66f04 	addi	r3,r3,-26180
    c1d8:	10c06715 	stw	r3,412(r2)
	opcodeArray[0x68] = &x68;
    c1dc:	008000b4 	movhi	r2,2
    c1e0:	10bf4a04 	addi	r2,r2,-728
    c1e4:	00c00074 	movhi	r3,1
    c1e8:	18e67e04 	addi	r3,r3,-26120
    c1ec:	10c06815 	stw	r3,416(r2)
	opcodeArray[0x69] = &x69;
    c1f0:	008000b4 	movhi	r2,2
    c1f4:	10bf4a04 	addi	r2,r2,-728
    c1f8:	00c00074 	movhi	r3,1
    c1fc:	18e68d04 	addi	r3,r3,-26060
    c200:	10c06915 	stw	r3,420(r2)
	opcodeArray[0x6A] = &x6A;
    c204:	008000b4 	movhi	r2,2
    c208:	10bf4a04 	addi	r2,r2,-728
    c20c:	00c00074 	movhi	r3,1
    c210:	18e69c04 	addi	r3,r3,-26000
    c214:	10c06a15 	stw	r3,424(r2)
	opcodeArray[0x6B] = &x6B;
    c218:	008000b4 	movhi	r2,2
    c21c:	10bf4a04 	addi	r2,r2,-728
    c220:	00c00074 	movhi	r3,1
    c224:	18e6ab04 	addi	r3,r3,-25940
    c228:	10c06b15 	stw	r3,428(r2)
	opcodeArray[0x6C] = &x6C;
    c22c:	008000b4 	movhi	r2,2
    c230:	10bf4a04 	addi	r2,r2,-728
    c234:	00c00074 	movhi	r3,1
    c238:	18e6ba04 	addi	r3,r3,-25880
    c23c:	10c06c15 	stw	r3,432(r2)
	opcodeArray[0x6D] = &x6D;
    c240:	008000b4 	movhi	r2,2
    c244:	10bf4a04 	addi	r2,r2,-728
    c248:	00c00074 	movhi	r3,1
    c24c:	18e6c904 	addi	r3,r3,-25820
    c250:	10c06d15 	stw	r3,436(r2)
	opcodeArray[0x6E] = &x6E;
    c254:	008000b4 	movhi	r2,2
    c258:	10bf4a04 	addi	r2,r2,-728
    c25c:	00c00074 	movhi	r3,1
    c260:	18e6d804 	addi	r3,r3,-25760
    c264:	10c06e15 	stw	r3,440(r2)
	opcodeArray[0x6F] = &x6F;
    c268:	008000b4 	movhi	r2,2
    c26c:	10bf4a04 	addi	r2,r2,-728
    c270:	00c00074 	movhi	r3,1
    c274:	18e6e804 	addi	r3,r3,-25696
    c278:	10c06f15 	stw	r3,444(r2)
	opcodeArray[0x70] = &x70;
    c27c:	008000b4 	movhi	r2,2
    c280:	10bf4a04 	addi	r2,r2,-728
    c284:	00c00074 	movhi	r3,1
    c288:	18e6f704 	addi	r3,r3,-25636
    c28c:	10c07015 	stw	r3,448(r2)
	opcodeArray[0x71] = &x71;
    c290:	008000b4 	movhi	r2,2
    c294:	10bf4a04 	addi	r2,r2,-728
    c298:	00c00074 	movhi	r3,1
    c29c:	18e70704 	addi	r3,r3,-25572
    c2a0:	10c07115 	stw	r3,452(r2)
	opcodeArray[0x72] = &x72;
    c2a4:	008000b4 	movhi	r2,2
    c2a8:	10bf4a04 	addi	r2,r2,-728
    c2ac:	00c00074 	movhi	r3,1
    c2b0:	18e71704 	addi	r3,r3,-25508
    c2b4:	10c07215 	stw	r3,456(r2)
	opcodeArray[0x73] = &x73;
    c2b8:	008000b4 	movhi	r2,2
    c2bc:	10bf4a04 	addi	r2,r2,-728
    c2c0:	00c00074 	movhi	r3,1
    c2c4:	18e72704 	addi	r3,r3,-25444
    c2c8:	10c07315 	stw	r3,460(r2)
	opcodeArray[0x74] = &x74;
    c2cc:	008000b4 	movhi	r2,2
    c2d0:	10bf4a04 	addi	r2,r2,-728
    c2d4:	00c00074 	movhi	r3,1
    c2d8:	18e73704 	addi	r3,r3,-25380
    c2dc:	10c07415 	stw	r3,464(r2)
	opcodeArray[0x75] = &x75;
    c2e0:	008000b4 	movhi	r2,2
    c2e4:	10bf4a04 	addi	r2,r2,-728
    c2e8:	00c00074 	movhi	r3,1
    c2ec:	18e74704 	addi	r3,r3,-25316
    c2f0:	10c07515 	stw	r3,468(r2)
	opcodeArray[0x76] = &x76;
    c2f4:	008000b4 	movhi	r2,2
    c2f8:	10bf4a04 	addi	r2,r2,-728
    c2fc:	00c00074 	movhi	r3,1
    c300:	18e75704 	addi	r3,r3,-25252
    c304:	10c07615 	stw	r3,472(r2)
	opcodeArray[0x77] = &x77;
    c308:	008000b4 	movhi	r2,2
    c30c:	10bf4a04 	addi	r2,r2,-728
    c310:	00c00074 	movhi	r3,1
    c314:	18e76404 	addi	r3,r3,-25200
    c318:	10c07715 	stw	r3,476(r2)
	opcodeArray[0x78] = &x78;
    c31c:	008000b4 	movhi	r2,2
    c320:	10bf4a04 	addi	r2,r2,-728
    c324:	00c00074 	movhi	r3,1
    c328:	18e77404 	addi	r3,r3,-25136
    c32c:	10c07815 	stw	r3,480(r2)
	opcodeArray[0x79] = &x79;
    c330:	008000b4 	movhi	r2,2
    c334:	10bf4a04 	addi	r2,r2,-728
    c338:	00c00074 	movhi	r3,1
    c33c:	18e78304 	addi	r3,r3,-25076
    c340:	10c07915 	stw	r3,484(r2)
	opcodeArray[0x7A] = &x7A;
    c344:	008000b4 	movhi	r2,2
    c348:	10bf4a04 	addi	r2,r2,-728
    c34c:	00c00074 	movhi	r3,1
    c350:	18e79204 	addi	r3,r3,-25016
    c354:	10c07a15 	stw	r3,488(r2)
	opcodeArray[0x7B] = &x7B;
    c358:	008000b4 	movhi	r2,2
    c35c:	10bf4a04 	addi	r2,r2,-728
    c360:	00c00074 	movhi	r3,1
    c364:	18e7a104 	addi	r3,r3,-24956
    c368:	10c07b15 	stw	r3,492(r2)
	opcodeArray[0x7C] = &x7C;
    c36c:	008000b4 	movhi	r2,2
    c370:	10bf4a04 	addi	r2,r2,-728
    c374:	00c00074 	movhi	r3,1
    c378:	18e7b004 	addi	r3,r3,-24896
    c37c:	10c07c15 	stw	r3,496(r2)
	opcodeArray[0x7D] = &x7D;
    c380:	008000b4 	movhi	r2,2
    c384:	10bf4a04 	addi	r2,r2,-728
    c388:	00c00074 	movhi	r3,1
    c38c:	18e7bf04 	addi	r3,r3,-24836
    c390:	10c07d15 	stw	r3,500(r2)
	opcodeArray[0x7E] = &x7E;
    c394:	008000b4 	movhi	r2,2
    c398:	10bf4a04 	addi	r2,r2,-728
    c39c:	00c00074 	movhi	r3,1
    c3a0:	18e7ce04 	addi	r3,r3,-24776
    c3a4:	10c07e15 	stw	r3,504(r2)
	opcodeArray[0x7F] = &x7F;
    c3a8:	008000b4 	movhi	r2,2
    c3ac:	10bf4a04 	addi	r2,r2,-728
    c3b0:	00c00074 	movhi	r3,1
    c3b4:	18e7de04 	addi	r3,r3,-24712
    c3b8:	10c07f15 	stw	r3,508(r2)
	opcodeArray[0x80] = &x80;
    c3bc:	008000b4 	movhi	r2,2
    c3c0:	10bf4a04 	addi	r2,r2,-728
    c3c4:	00c00074 	movhi	r3,1
    c3c8:	18e7ed04 	addi	r3,r3,-24652
    c3cc:	10c08015 	stw	r3,512(r2)
	opcodeArray[0x81] = &x81;
    c3d0:	008000b4 	movhi	r2,2
    c3d4:	10bf4a04 	addi	r2,r2,-728
    c3d8:	00c00074 	movhi	r3,1
    c3dc:	18e7fc04 	addi	r3,r3,-24592
    c3e0:	10c08115 	stw	r3,516(r2)
	opcodeArray[0x82] = &x82;
    c3e4:	008000b4 	movhi	r2,2
    c3e8:	10bf4a04 	addi	r2,r2,-728
    c3ec:	00c00074 	movhi	r3,1
    c3f0:	18e80b04 	addi	r3,r3,-24532
    c3f4:	10c08215 	stw	r3,520(r2)
	opcodeArray[0x83] = &x83;
    c3f8:	008000b4 	movhi	r2,2
    c3fc:	10bf4a04 	addi	r2,r2,-728
    c400:	00c00074 	movhi	r3,1
    c404:	18e81a04 	addi	r3,r3,-24472
    c408:	10c08315 	stw	r3,524(r2)
	opcodeArray[0x84] = &x84;
    c40c:	008000b4 	movhi	r2,2
    c410:	10bf4a04 	addi	r2,r2,-728
    c414:	00c00074 	movhi	r3,1
    c418:	18e82904 	addi	r3,r3,-24412
    c41c:	10c08415 	stw	r3,528(r2)
	opcodeArray[0x85] = &x85;
    c420:	008000b4 	movhi	r2,2
    c424:	10bf4a04 	addi	r2,r2,-728
    c428:	00c00074 	movhi	r3,1
    c42c:	18e83804 	addi	r3,r3,-24352
    c430:	10c08515 	stw	r3,532(r2)
	opcodeArray[0x86] = &x86;
    c434:	008000b4 	movhi	r2,2
    c438:	10bf4a04 	addi	r2,r2,-728
    c43c:	00c00074 	movhi	r3,1
    c440:	18e84704 	addi	r3,r3,-24292
    c444:	10c08615 	stw	r3,536(r2)
	opcodeArray[0x87] = &x87;
    c448:	008000b4 	movhi	r2,2
    c44c:	10bf4a04 	addi	r2,r2,-728
    c450:	00c00074 	movhi	r3,1
    c454:	18e85704 	addi	r3,r3,-24228
    c458:	10c08715 	stw	r3,540(r2)
	opcodeArray[0x88] = &x88;
    c45c:	008000b4 	movhi	r2,2
    c460:	10bf4a04 	addi	r2,r2,-728
    c464:	00c00074 	movhi	r3,1
    c468:	18e86604 	addi	r3,r3,-24168
    c46c:	10c08815 	stw	r3,544(r2)
	opcodeArray[0x89] = &x89;
    c470:	008000b4 	movhi	r2,2
    c474:	10bf4a04 	addi	r2,r2,-728
    c478:	00c00074 	movhi	r3,1
    c47c:	18e87504 	addi	r3,r3,-24108
    c480:	10c08915 	stw	r3,548(r2)
	opcodeArray[0x8A] = &x8A;
    c484:	008000b4 	movhi	r2,2
    c488:	10bf4a04 	addi	r2,r2,-728
    c48c:	00c00074 	movhi	r3,1
    c490:	18e88404 	addi	r3,r3,-24048
    c494:	10c08a15 	stw	r3,552(r2)
	opcodeArray[0x8B] = &x8B;
    c498:	008000b4 	movhi	r2,2
    c49c:	10bf4a04 	addi	r2,r2,-728
    c4a0:	00c00074 	movhi	r3,1
    c4a4:	18e89304 	addi	r3,r3,-23988
    c4a8:	10c08b15 	stw	r3,556(r2)
	opcodeArray[0x8C] = &x8C;
    c4ac:	008000b4 	movhi	r2,2
    c4b0:	10bf4a04 	addi	r2,r2,-728
    c4b4:	00c00074 	movhi	r3,1
    c4b8:	18e8a204 	addi	r3,r3,-23928
    c4bc:	10c08c15 	stw	r3,560(r2)
	opcodeArray[0x8D] = &x8D;
    c4c0:	008000b4 	movhi	r2,2
    c4c4:	10bf4a04 	addi	r2,r2,-728
    c4c8:	00c00074 	movhi	r3,1
    c4cc:	18e8b104 	addi	r3,r3,-23868
    c4d0:	10c08d15 	stw	r3,564(r2)
	opcodeArray[0x8E] = &x8E;
    c4d4:	008000b4 	movhi	r2,2
    c4d8:	10bf4a04 	addi	r2,r2,-728
    c4dc:	00c00074 	movhi	r3,1
    c4e0:	18e8c004 	addi	r3,r3,-23808
    c4e4:	10c08e15 	stw	r3,568(r2)
	opcodeArray[0x8F] = &x8F;
    c4e8:	008000b4 	movhi	r2,2
    c4ec:	10bf4a04 	addi	r2,r2,-728
    c4f0:	00c00074 	movhi	r3,1
    c4f4:	18e8d004 	addi	r3,r3,-23744
    c4f8:	10c08f15 	stw	r3,572(r2)
	opcodeArray[0x90] = &x90;
    c4fc:	008000b4 	movhi	r2,2
    c500:	10bf4a04 	addi	r2,r2,-728
    c504:	00c00074 	movhi	r3,1
    c508:	18e8df04 	addi	r3,r3,-23684
    c50c:	10c09015 	stw	r3,576(r2)
	opcodeArray[0x91] = &x91;
    c510:	008000b4 	movhi	r2,2
    c514:	10bf4a04 	addi	r2,r2,-728
    c518:	00c00074 	movhi	r3,1
    c51c:	18e8ed04 	addi	r3,r3,-23628
    c520:	10c09115 	stw	r3,580(r2)
	opcodeArray[0x92] = &x92;
    c524:	008000b4 	movhi	r2,2
    c528:	10bf4a04 	addi	r2,r2,-728
    c52c:	00c00074 	movhi	r3,1
    c530:	18e8fb04 	addi	r3,r3,-23572
    c534:	10c09215 	stw	r3,584(r2)
	opcodeArray[0x93] = &x93;
    c538:	008000b4 	movhi	r2,2
    c53c:	10bf4a04 	addi	r2,r2,-728
    c540:	00c00074 	movhi	r3,1
    c544:	18e90904 	addi	r3,r3,-23516
    c548:	10c09315 	stw	r3,588(r2)
	opcodeArray[0x94] = &x94;
    c54c:	008000b4 	movhi	r2,2
    c550:	10bf4a04 	addi	r2,r2,-728
    c554:	00c00074 	movhi	r3,1
    c558:	18e91704 	addi	r3,r3,-23460
    c55c:	10c09415 	stw	r3,592(r2)
	opcodeArray[0x95] = &x95;
    c560:	008000b4 	movhi	r2,2
    c564:	10bf4a04 	addi	r2,r2,-728
    c568:	00c00074 	movhi	r3,1
    c56c:	18e92504 	addi	r3,r3,-23404
    c570:	10c09515 	stw	r3,596(r2)
	opcodeArray[0x96] = &x96;
    c574:	008000b4 	movhi	r2,2
    c578:	10bf4a04 	addi	r2,r2,-728
    c57c:	00c00074 	movhi	r3,1
    c580:	18e93304 	addi	r3,r3,-23348
    c584:	10c09615 	stw	r3,600(r2)
	opcodeArray[0x97] = &x97;
    c588:	008000b4 	movhi	r2,2
    c58c:	10bf4a04 	addi	r2,r2,-728
    c590:	00c00074 	movhi	r3,1
    c594:	18e94204 	addi	r3,r3,-23288
    c598:	10c09715 	stw	r3,604(r2)
	opcodeArray[0x98] = &x98;
    c59c:	008000b4 	movhi	r2,2
    c5a0:	10bf4a04 	addi	r2,r2,-728
    c5a4:	00c00074 	movhi	r3,1
    c5a8:	18e95004 	addi	r3,r3,-23232
    c5ac:	10c09815 	stw	r3,608(r2)
	opcodeArray[0x99] = &x99;
    c5b0:	008000b4 	movhi	r2,2
    c5b4:	10bf4a04 	addi	r2,r2,-728
    c5b8:	00c00074 	movhi	r3,1
    c5bc:	18e95e04 	addi	r3,r3,-23176
    c5c0:	10c09915 	stw	r3,612(r2)
	opcodeArray[0x9A] = &x9A;
    c5c4:	008000b4 	movhi	r2,2
    c5c8:	10bf4a04 	addi	r2,r2,-728
    c5cc:	00c00074 	movhi	r3,1
    c5d0:	18e96c04 	addi	r3,r3,-23120
    c5d4:	10c09a15 	stw	r3,616(r2)
	opcodeArray[0x9B] = &x9B;
    c5d8:	008000b4 	movhi	r2,2
    c5dc:	10bf4a04 	addi	r2,r2,-728
    c5e0:	00c00074 	movhi	r3,1
    c5e4:	18e97a04 	addi	r3,r3,-23064
    c5e8:	10c09b15 	stw	r3,620(r2)
	opcodeArray[0x9C] = &x9C;
    c5ec:	008000b4 	movhi	r2,2
    c5f0:	10bf4a04 	addi	r2,r2,-728
    c5f4:	00c00074 	movhi	r3,1
    c5f8:	18e98804 	addi	r3,r3,-23008
    c5fc:	10c09c15 	stw	r3,624(r2)
	opcodeArray[0x9D] = &x9D;
    c600:	008000b4 	movhi	r2,2
    c604:	10bf4a04 	addi	r2,r2,-728
    c608:	00c00074 	movhi	r3,1
    c60c:	18e99604 	addi	r3,r3,-22952
    c610:	10c09d15 	stw	r3,628(r2)
	opcodeArray[0x9E] = &x9E;
    c614:	008000b4 	movhi	r2,2
    c618:	10bf4a04 	addi	r2,r2,-728
    c61c:	00c00074 	movhi	r3,1
    c620:	18e9a404 	addi	r3,r3,-22896
    c624:	10c09e15 	stw	r3,632(r2)
	opcodeArray[0x9F] = &x9F;
    c628:	008000b4 	movhi	r2,2
    c62c:	10bf4a04 	addi	r2,r2,-728
    c630:	00c00074 	movhi	r3,1
    c634:	18e9b304 	addi	r3,r3,-22836
    c638:	10c09f15 	stw	r3,636(r2)
	opcodeArray[0xA0] = &xA0;
    c63c:	008000b4 	movhi	r2,2
    c640:	10bf4a04 	addi	r2,r2,-728
    c644:	00c00074 	movhi	r3,1
    c648:	18e9c104 	addi	r3,r3,-22780
    c64c:	10c0a015 	stw	r3,640(r2)
	opcodeArray[0xA1] = &xA1;
    c650:	008000b4 	movhi	r2,2
    c654:	10bf4a04 	addi	r2,r2,-728
    c658:	00c00074 	movhi	r3,1
    c65c:	18e9cf04 	addi	r3,r3,-22724
    c660:	10c0a115 	stw	r3,644(r2)
	opcodeArray[0xA2] = &xA2;
    c664:	008000b4 	movhi	r2,2
    c668:	10bf4a04 	addi	r2,r2,-728
    c66c:	00c00074 	movhi	r3,1
    c670:	18e9dd04 	addi	r3,r3,-22668
    c674:	10c0a215 	stw	r3,648(r2)
	opcodeArray[0xA3] = &xA3;
    c678:	008000b4 	movhi	r2,2
    c67c:	10bf4a04 	addi	r2,r2,-728
    c680:	00c00074 	movhi	r3,1
    c684:	18e9eb04 	addi	r3,r3,-22612
    c688:	10c0a315 	stw	r3,652(r2)
	opcodeArray[0xA4] = &xA4;
    c68c:	008000b4 	movhi	r2,2
    c690:	10bf4a04 	addi	r2,r2,-728
    c694:	00c00074 	movhi	r3,1
    c698:	18e9f904 	addi	r3,r3,-22556
    c69c:	10c0a415 	stw	r3,656(r2)
	opcodeArray[0xA5] = &xA5;
    c6a0:	008000b4 	movhi	r2,2
    c6a4:	10bf4a04 	addi	r2,r2,-728
    c6a8:	00c00074 	movhi	r3,1
    c6ac:	18ea0704 	addi	r3,r3,-22500
    c6b0:	10c0a515 	stw	r3,660(r2)
	opcodeArray[0xA6] = &xA6;
    c6b4:	008000b4 	movhi	r2,2
    c6b8:	10bf4a04 	addi	r2,r2,-728
    c6bc:	00c00074 	movhi	r3,1
    c6c0:	18ea1504 	addi	r3,r3,-22444
    c6c4:	10c0a615 	stw	r3,664(r2)
	opcodeArray[0xA7] = &xA7;
    c6c8:	008000b4 	movhi	r2,2
    c6cc:	10bf4a04 	addi	r2,r2,-728
    c6d0:	00c00074 	movhi	r3,1
    c6d4:	18ea2404 	addi	r3,r3,-22384
    c6d8:	10c0a715 	stw	r3,668(r2)
	opcodeArray[0xA8] = &xA8;
    c6dc:	008000b4 	movhi	r2,2
    c6e0:	10bf4a04 	addi	r2,r2,-728
    c6e4:	00c00074 	movhi	r3,1
    c6e8:	18ea3204 	addi	r3,r3,-22328
    c6ec:	10c0a815 	stw	r3,672(r2)
	opcodeArray[0xA9] = &xA9;
    c6f0:	008000b4 	movhi	r2,2
    c6f4:	10bf4a04 	addi	r2,r2,-728
    c6f8:	00c00074 	movhi	r3,1
    c6fc:	18ea4004 	addi	r3,r3,-22272
    c700:	10c0a915 	stw	r3,676(r2)
	opcodeArray[0xAA] = &xAA;
    c704:	008000b4 	movhi	r2,2
    c708:	10bf4a04 	addi	r2,r2,-728
    c70c:	00c00074 	movhi	r3,1
    c710:	18ea4e04 	addi	r3,r3,-22216
    c714:	10c0aa15 	stw	r3,680(r2)
	opcodeArray[0xAB] = &xAB;
    c718:	008000b4 	movhi	r2,2
    c71c:	10bf4a04 	addi	r2,r2,-728
    c720:	00c00074 	movhi	r3,1
    c724:	18ea5c04 	addi	r3,r3,-22160
    c728:	10c0ab15 	stw	r3,684(r2)
	opcodeArray[0xAC] = &xAC;
    c72c:	008000b4 	movhi	r2,2
    c730:	10bf4a04 	addi	r2,r2,-728
    c734:	00c00074 	movhi	r3,1
    c738:	18ea6a04 	addi	r3,r3,-22104
    c73c:	10c0ac15 	stw	r3,688(r2)
	opcodeArray[0xAD] = &xAD;
    c740:	008000b4 	movhi	r2,2
    c744:	10bf4a04 	addi	r2,r2,-728
    c748:	00c00074 	movhi	r3,1
    c74c:	18ea7804 	addi	r3,r3,-22048
    c750:	10c0ad15 	stw	r3,692(r2)
	opcodeArray[0xAE] = &xAE;
    c754:	008000b4 	movhi	r2,2
    c758:	10bf4a04 	addi	r2,r2,-728
    c75c:	00c00074 	movhi	r3,1
    c760:	18ea8604 	addi	r3,r3,-21992
    c764:	10c0ae15 	stw	r3,696(r2)
	opcodeArray[0xAF] = &xAF;
    c768:	008000b4 	movhi	r2,2
    c76c:	10bf4a04 	addi	r2,r2,-728
    c770:	00c00074 	movhi	r3,1
    c774:	18ea9504 	addi	r3,r3,-21932
    c778:	10c0af15 	stw	r3,700(r2)
	opcodeArray[0xB0] = &xB0;
    c77c:	008000b4 	movhi	r2,2
    c780:	10bf4a04 	addi	r2,r2,-728
    c784:	00c00074 	movhi	r3,1
    c788:	18eaa304 	addi	r3,r3,-21876
    c78c:	10c0b015 	stw	r3,704(r2)
	opcodeArray[0xB1] = &xB1;
    c790:	008000b4 	movhi	r2,2
    c794:	10bf4a04 	addi	r2,r2,-728
    c798:	00c00074 	movhi	r3,1
    c79c:	18eab104 	addi	r3,r3,-21820
    c7a0:	10c0b115 	stw	r3,708(r2)
	opcodeArray[0xB2] = &xB2;
    c7a4:	008000b4 	movhi	r2,2
    c7a8:	10bf4a04 	addi	r2,r2,-728
    c7ac:	00c00074 	movhi	r3,1
    c7b0:	18eabf04 	addi	r3,r3,-21764
    c7b4:	10c0b215 	stw	r3,712(r2)
	opcodeArray[0xB3] = &xB3;
    c7b8:	008000b4 	movhi	r2,2
    c7bc:	10bf4a04 	addi	r2,r2,-728
    c7c0:	00c00074 	movhi	r3,1
    c7c4:	18eacd04 	addi	r3,r3,-21708
    c7c8:	10c0b315 	stw	r3,716(r2)
	opcodeArray[0xB4] = &xB4;
    c7cc:	008000b4 	movhi	r2,2
    c7d0:	10bf4a04 	addi	r2,r2,-728
    c7d4:	00c00074 	movhi	r3,1
    c7d8:	18eadb04 	addi	r3,r3,-21652
    c7dc:	10c0b415 	stw	r3,720(r2)
	opcodeArray[0xB5] = &xB5;
    c7e0:	008000b4 	movhi	r2,2
    c7e4:	10bf4a04 	addi	r2,r2,-728
    c7e8:	00c00074 	movhi	r3,1
    c7ec:	18eae904 	addi	r3,r3,-21596
    c7f0:	10c0b515 	stw	r3,724(r2)
	opcodeArray[0xB6] = &xB6;
    c7f4:	008000b4 	movhi	r2,2
    c7f8:	10bf4a04 	addi	r2,r2,-728
    c7fc:	00c00074 	movhi	r3,1
    c800:	18eaf704 	addi	r3,r3,-21540
    c804:	10c0b615 	stw	r3,728(r2)
	opcodeArray[0xB7] = &xB7;
    c808:	008000b4 	movhi	r2,2
    c80c:	10bf4a04 	addi	r2,r2,-728
    c810:	00c00074 	movhi	r3,1
    c814:	18eb0604 	addi	r3,r3,-21480
    c818:	10c0b715 	stw	r3,732(r2)
	opcodeArray[0xB8] = &xB8;
    c81c:	008000b4 	movhi	r2,2
    c820:	10bf4a04 	addi	r2,r2,-728
    c824:	00c00074 	movhi	r3,1
    c828:	18eb1404 	addi	r3,r3,-21424
    c82c:	10c0b815 	stw	r3,736(r2)
	opcodeArray[0xB9] = &xB9;
    c830:	008000b4 	movhi	r2,2
    c834:	10bf4a04 	addi	r2,r2,-728
    c838:	00c00074 	movhi	r3,1
    c83c:	18eb2204 	addi	r3,r3,-21368
    c840:	10c0b915 	stw	r3,740(r2)
	opcodeArray[0xBA] = &xBA;
    c844:	008000b4 	movhi	r2,2
    c848:	10bf4a04 	addi	r2,r2,-728
    c84c:	00c00074 	movhi	r3,1
    c850:	18eb3004 	addi	r3,r3,-21312
    c854:	10c0ba15 	stw	r3,744(r2)
	opcodeArray[0xBB] = &xBB;
    c858:	008000b4 	movhi	r2,2
    c85c:	10bf4a04 	addi	r2,r2,-728
    c860:	00c00074 	movhi	r3,1
    c864:	18eb3e04 	addi	r3,r3,-21256
    c868:	10c0bb15 	stw	r3,748(r2)
	opcodeArray[0xBC] = &xBC;
    c86c:	008000b4 	movhi	r2,2
    c870:	10bf4a04 	addi	r2,r2,-728
    c874:	00c00074 	movhi	r3,1
    c878:	18eb4c04 	addi	r3,r3,-21200
    c87c:	10c0bc15 	stw	r3,752(r2)
	opcodeArray[0xBD] = &xBD;
    c880:	008000b4 	movhi	r2,2
    c884:	10bf4a04 	addi	r2,r2,-728
    c888:	00c00074 	movhi	r3,1
    c88c:	18eb5a04 	addi	r3,r3,-21144
    c890:	10c0bd15 	stw	r3,756(r2)
	opcodeArray[0xBE] = &xBE;
    c894:	008000b4 	movhi	r2,2
    c898:	10bf4a04 	addi	r2,r2,-728
    c89c:	00c00074 	movhi	r3,1
    c8a0:	18eb6804 	addi	r3,r3,-21088
    c8a4:	10c0be15 	stw	r3,760(r2)
	opcodeArray[0xBF] = &xBF;
    c8a8:	008000b4 	movhi	r2,2
    c8ac:	10bf4a04 	addi	r2,r2,-728
    c8b0:	00c00074 	movhi	r3,1
    c8b4:	18eb7704 	addi	r3,r3,-21028
    c8b8:	10c0bf15 	stw	r3,764(r2)
	opcodeArray[0xC0] = &xC0;
    c8bc:	008000b4 	movhi	r2,2
    c8c0:	10bf4a04 	addi	r2,r2,-728
    c8c4:	00c00074 	movhi	r3,1
    c8c8:	18eb8504 	addi	r3,r3,-20972
    c8cc:	10c0c015 	stw	r3,768(r2)
	opcodeArray[0xC1] = &xC1;
    c8d0:	008000b4 	movhi	r2,2
    c8d4:	10bf4a04 	addi	r2,r2,-728
    c8d8:	00c00074 	movhi	r3,1
    c8dc:	18eb9304 	addi	r3,r3,-20916
    c8e0:	10c0c115 	stw	r3,772(r2)
	opcodeArray[0xC2] = &xC2;
    c8e4:	008000b4 	movhi	r2,2
    c8e8:	10bf4a04 	addi	r2,r2,-728
    c8ec:	00c00074 	movhi	r3,1
    c8f0:	18eba204 	addi	r3,r3,-20856
    c8f4:	10c0c215 	stw	r3,776(r2)
	opcodeArray[0xC3] = &xC3;
    c8f8:	008000b4 	movhi	r2,2
    c8fc:	10bf4a04 	addi	r2,r2,-728
    c900:	00c00074 	movhi	r3,1
    c904:	18ebb004 	addi	r3,r3,-20800
    c908:	10c0c315 	stw	r3,780(r2)
	opcodeArray[0xC4] = &xC4;
    c90c:	008000b4 	movhi	r2,2
    c910:	10bf4a04 	addi	r2,r2,-728
    c914:	00c00074 	movhi	r3,1
    c918:	18ebbd04 	addi	r3,r3,-20748
    c91c:	10c0c415 	stw	r3,784(r2)
	opcodeArray[0xC5] = &xC5;
    c920:	008000b4 	movhi	r2,2
    c924:	10bf4a04 	addi	r2,r2,-728
    c928:	00c00074 	movhi	r3,1
    c92c:	18ebcb04 	addi	r3,r3,-20692
    c930:	10c0c515 	stw	r3,788(r2)
	opcodeArray[0xC6] = &xC6;
    c934:	008000b4 	movhi	r2,2
    c938:	10bf4a04 	addi	r2,r2,-728
    c93c:	00c00074 	movhi	r3,1
    c940:	18ebda04 	addi	r3,r3,-20632
    c944:	10c0c615 	stw	r3,792(r2)
	opcodeArray[0xC7] = &xC7;
    c948:	008000b4 	movhi	r2,2
    c94c:	10bf4a04 	addi	r2,r2,-728
    c950:	00c00074 	movhi	r3,1
    c954:	18ebe804 	addi	r3,r3,-20576
    c958:	10c0c715 	stw	r3,796(r2)
	opcodeArray[0xC8] = &xC8;
    c95c:	008000b4 	movhi	r2,2
    c960:	10bf4a04 	addi	r2,r2,-728
    c964:	00c00074 	movhi	r3,1
    c968:	18ebf604 	addi	r3,r3,-20520
    c96c:	10c0c815 	stw	r3,800(r2)
	opcodeArray[0xC9] = &xC9;
    c970:	008000b4 	movhi	r2,2
    c974:	10bf4a04 	addi	r2,r2,-728
    c978:	00c00074 	movhi	r3,1
    c97c:	18ec0404 	addi	r3,r3,-20464
    c980:	10c0c915 	stw	r3,804(r2)
	opcodeArray[0xCA] = &xCA;
    c984:	008000b4 	movhi	r2,2
    c988:	10bf4a04 	addi	r2,r2,-728
    c98c:	00c00074 	movhi	r3,1
    c990:	18ec1104 	addi	r3,r3,-20412
    c994:	10c0ca15 	stw	r3,808(r2)
//	opcodeArray[0xCB] = &xCB;
	opcodeArray[0xCC] = &xCC;
    c998:	008000b4 	movhi	r2,2
    c99c:	10bf4a04 	addi	r2,r2,-728
    c9a0:	00c00074 	movhi	r3,1
    c9a4:	18ec1f04 	addi	r3,r3,-20356
    c9a8:	10c0cc15 	stw	r3,816(r2)
	opcodeArray[0xCD] = &xCD;
    c9ac:	008000b4 	movhi	r2,2
    c9b0:	10bf4a04 	addi	r2,r2,-728
    c9b4:	00c00074 	movhi	r3,1
    c9b8:	18ec2d04 	addi	r3,r3,-20300
    c9bc:	10c0cd15 	stw	r3,820(r2)
	opcodeArray[0xCE] = &xCE;
    c9c0:	008000b4 	movhi	r2,2
    c9c4:	10bf4a04 	addi	r2,r2,-728
    c9c8:	00c00074 	movhi	r3,1
    c9cc:	18ec3a04 	addi	r3,r3,-20248
    c9d0:	10c0ce15 	stw	r3,824(r2)
	opcodeArray[0xCF] = &xCF;
    c9d4:	008000b4 	movhi	r2,2
    c9d8:	10bf4a04 	addi	r2,r2,-728
    c9dc:	00c00074 	movhi	r3,1
    c9e0:	18ec4804 	addi	r3,r3,-20192
    c9e4:	10c0cf15 	stw	r3,828(r2)
	opcodeArray[0xD0] = &xD0;
    c9e8:	008000b4 	movhi	r2,2
    c9ec:	10bf4a04 	addi	r2,r2,-728
    c9f0:	00c00074 	movhi	r3,1
    c9f4:	18ec5604 	addi	r3,r3,-20136
    c9f8:	10c0d015 	stw	r3,832(r2)
	opcodeArray[0xD1] = &xD1;
    c9fc:	008000b4 	movhi	r2,2
    ca00:	10bf4a04 	addi	r2,r2,-728
    ca04:	00c00074 	movhi	r3,1
    ca08:	18ec6404 	addi	r3,r3,-20080
    ca0c:	10c0d115 	stw	r3,836(r2)
	opcodeArray[0xD2] = &xD2;
    ca10:	008000b4 	movhi	r2,2
    ca14:	10bf4a04 	addi	r2,r2,-728
    ca18:	00c00074 	movhi	r3,1
    ca1c:	18ec7304 	addi	r3,r3,-20020
    ca20:	10c0d215 	stw	r3,840(r2)
//	opcodeArray[0xD3] = &xD3;
	opcodeArray[0xD4] = &xD4;
    ca24:	008000b4 	movhi	r2,2
    ca28:	10bf4a04 	addi	r2,r2,-728
    ca2c:	00c00074 	movhi	r3,1
    ca30:	18ec8104 	addi	r3,r3,-19964
    ca34:	10c0d415 	stw	r3,848(r2)
	opcodeArray[0xD5] = &xD5;
    ca38:	008000b4 	movhi	r2,2
    ca3c:	10bf4a04 	addi	r2,r2,-728
    ca40:	00c00074 	movhi	r3,1
    ca44:	18ec8f04 	addi	r3,r3,-19908
    ca48:	10c0d515 	stw	r3,852(r2)
	opcodeArray[0xD6] = &xD6;
    ca4c:	008000b4 	movhi	r2,2
    ca50:	10bf4a04 	addi	r2,r2,-728
    ca54:	00c00074 	movhi	r3,1
    ca58:	18ec9e04 	addi	r3,r3,-19848
    ca5c:	10c0d615 	stw	r3,856(r2)
	opcodeArray[0xD7] = &xD7;
    ca60:	008000b4 	movhi	r2,2
    ca64:	10bf4a04 	addi	r2,r2,-728
    ca68:	00c00074 	movhi	r3,1
    ca6c:	18ecab04 	addi	r3,r3,-19796
    ca70:	10c0d715 	stw	r3,860(r2)
	opcodeArray[0xD8] = &xD8;
    ca74:	008000b4 	movhi	r2,2
    ca78:	10bf4a04 	addi	r2,r2,-728
    ca7c:	00c00074 	movhi	r3,1
    ca80:	18ecb904 	addi	r3,r3,-19740
    ca84:	10c0d815 	stw	r3,864(r2)
	opcodeArray[0xD9] = &xD9;
    ca88:	008000b4 	movhi	r2,2
    ca8c:	10bf4a04 	addi	r2,r2,-728
    ca90:	00c00074 	movhi	r3,1
    ca94:	18ecc704 	addi	r3,r3,-19684
    ca98:	10c0d915 	stw	r3,868(r2)
	opcodeArray[0xDA] = &xDA;
    ca9c:	008000b4 	movhi	r2,2
    caa0:	10bf4a04 	addi	r2,r2,-728
    caa4:	00c00074 	movhi	r3,1
    caa8:	18ecd404 	addi	r3,r3,-19632
    caac:	10c0da15 	stw	r3,872(r2)
//	opcodeArray[0xDB] = &xDB;
	opcodeArray[0xDC] = &xDC;
    cab0:	008000b4 	movhi	r2,2
    cab4:	10bf4a04 	addi	r2,r2,-728
    cab8:	00c00074 	movhi	r3,1
    cabc:	18ece204 	addi	r3,r3,-19576
    cac0:	10c0dc15 	stw	r3,880(r2)
//	opcodeArray[0xDD] = &xDD;
	opcodeArray[0xDE] = &xDE;
    cac4:	008000b4 	movhi	r2,2
    cac8:	10bf4a04 	addi	r2,r2,-728
    cacc:	00c00074 	movhi	r3,1
    cad0:	18ecf004 	addi	r3,r3,-19520
    cad4:	10c0de15 	stw	r3,888(r2)
	opcodeArray[0xDF] = &xDF;
    cad8:	008000b4 	movhi	r2,2
    cadc:	10bf4a04 	addi	r2,r2,-728
    cae0:	00c00074 	movhi	r3,1
    cae4:	18ecfd04 	addi	r3,r3,-19468
    cae8:	10c0df15 	stw	r3,892(r2)
	opcodeArray[0xE0] = &xE0;
    caec:	008000b4 	movhi	r2,2
    caf0:	10bf4a04 	addi	r2,r2,-728
    caf4:	00c00074 	movhi	r3,1
    caf8:	18ed0b04 	addi	r3,r3,-19412
    cafc:	10c0e015 	stw	r3,896(r2)
	opcodeArray[0xE1] = &xE1;
    cb00:	008000b4 	movhi	r2,2
    cb04:	10bf4a04 	addi	r2,r2,-728
    cb08:	00c00074 	movhi	r3,1
    cb0c:	18ed1904 	addi	r3,r3,-19356
    cb10:	10c0e115 	stw	r3,900(r2)
	opcodeArray[0xE2] = &xE2;
    cb14:	008000b4 	movhi	r2,2
    cb18:	10bf4a04 	addi	r2,r2,-728
    cb1c:	00c00074 	movhi	r3,1
    cb20:	18ed2804 	addi	r3,r3,-19296
    cb24:	10c0e215 	stw	r3,904(r2)
//	opcodeArray[0xE3] = &xE3;
//	opcodeArray[0xE4] = &xE4;
	opcodeArray[0xE5] = &xE5;
    cb28:	008000b4 	movhi	r2,2
    cb2c:	10bf4a04 	addi	r2,r2,-728
    cb30:	00c00074 	movhi	r3,1
    cb34:	18ed3704 	addi	r3,r3,-19236
    cb38:	10c0e515 	stw	r3,916(r2)
	opcodeArray[0xE6] = &xE6;
    cb3c:	008000b4 	movhi	r2,2
    cb40:	10bf4a04 	addi	r2,r2,-728
    cb44:	00c00074 	movhi	r3,1
    cb48:	18ed4604 	addi	r3,r3,-19176
    cb4c:	10c0e615 	stw	r3,920(r2)
	opcodeArray[0xE7] = &xE7;
    cb50:	008000b4 	movhi	r2,2
    cb54:	10bf4a04 	addi	r2,r2,-728
    cb58:	00c00074 	movhi	r3,1
    cb5c:	18ed5304 	addi	r3,r3,-19124
    cb60:	10c0e715 	stw	r3,924(r2)
	opcodeArray[0xE8] = &xE8;
    cb64:	008000b4 	movhi	r2,2
    cb68:	10bf4a04 	addi	r2,r2,-728
    cb6c:	00c00074 	movhi	r3,1
    cb70:	18ed6104 	addi	r3,r3,-19068
    cb74:	10c0e815 	stw	r3,928(r2)
	opcodeArray[0xE9] = &xE9;
    cb78:	008000b4 	movhi	r2,2
    cb7c:	10bf4a04 	addi	r2,r2,-728
    cb80:	00c00074 	movhi	r3,1
    cb84:	18ed6e04 	addi	r3,r3,-19016
    cb88:	10c0e915 	stw	r3,932(r2)
	opcodeArray[0xEA] = &xEA;
    cb8c:	008000b4 	movhi	r2,2
    cb90:	10bf4a04 	addi	r2,r2,-728
    cb94:	00c00074 	movhi	r3,1
    cb98:	18ed7d04 	addi	r3,r3,-18956
    cb9c:	10c0ea15 	stw	r3,936(r2)
//	opcodeArray[0xEB] = &xEB;
//	opcodeArray[0xEC] = &xEC;
//	opcodeArray[0xED] = &xED;
	opcodeArray[0xEE] = &xEE;
    cba0:	008000b4 	movhi	r2,2
    cba4:	10bf4a04 	addi	r2,r2,-728
    cba8:	00c00074 	movhi	r3,1
    cbac:	18ed8b04 	addi	r3,r3,-18900
    cbb0:	10c0ee15 	stw	r3,952(r2)
	opcodeArray[0xEF] = &xEF;
    cbb4:	008000b4 	movhi	r2,2
    cbb8:	10bf4a04 	addi	r2,r2,-728
    cbbc:	00c00074 	movhi	r3,1
    cbc0:	18ed9804 	addi	r3,r3,-18848
    cbc4:	10c0ef15 	stw	r3,956(r2)
	opcodeArray[0xF0] = &xF0;
    cbc8:	008000b4 	movhi	r2,2
    cbcc:	10bf4a04 	addi	r2,r2,-728
    cbd0:	00c00074 	movhi	r3,1
    cbd4:	18eda604 	addi	r3,r3,-18792
    cbd8:	10c0f015 	stw	r3,960(r2)
	opcodeArray[0xF1] = &xF1;
    cbdc:	008000b4 	movhi	r2,2
    cbe0:	10bf4a04 	addi	r2,r2,-728
    cbe4:	00c00074 	movhi	r3,1
    cbe8:	18edb404 	addi	r3,r3,-18736
    cbec:	10c0f115 	stw	r3,964(r2)
	opcodeArray[0xF2] = &xF2;
    cbf0:	008000b4 	movhi	r2,2
    cbf4:	10bf4a04 	addi	r2,r2,-728
    cbf8:	00c00074 	movhi	r3,1
    cbfc:	18edc304 	addi	r3,r3,-18676
    cc00:	10c0f215 	stw	r3,968(r2)
	opcodeArray[0xF3] = &xF3;
    cc04:	008000b4 	movhi	r2,2
    cc08:	10bf4a04 	addi	r2,r2,-728
    cc0c:	00c00074 	movhi	r3,1
    cc10:	18edd204 	addi	r3,r3,-18616
    cc14:	10c0f315 	stw	r3,972(r2)
//	opcodeArray[0xF4] = &xF4;
	opcodeArray[0xF5] = &xF5;
    cc18:	008000b4 	movhi	r2,2
    cc1c:	10bf4a04 	addi	r2,r2,-728
    cc20:	00c00074 	movhi	r3,1
    cc24:	18eddf04 	addi	r3,r3,-18564
    cc28:	10c0f515 	stw	r3,980(r2)
	opcodeArray[0xF6] = &xF6;
    cc2c:	008000b4 	movhi	r2,2
    cc30:	10bf4a04 	addi	r2,r2,-728
    cc34:	00c00074 	movhi	r3,1
    cc38:	18edee04 	addi	r3,r3,-18504
    cc3c:	10c0f615 	stw	r3,984(r2)
	opcodeArray[0xF7] = &xF7;
    cc40:	008000b4 	movhi	r2,2
    cc44:	10bf4a04 	addi	r2,r2,-728
    cc48:	00c00074 	movhi	r3,1
    cc4c:	18edfb04 	addi	r3,r3,-18452
    cc50:	10c0f715 	stw	r3,988(r2)
	opcodeArray[0xF8] = &xF8;
    cc54:	008000b4 	movhi	r2,2
    cc58:	10bf4a04 	addi	r2,r2,-728
    cc5c:	00c00074 	movhi	r3,1
    cc60:	18ee0904 	addi	r3,r3,-18396
    cc64:	10c0f815 	stw	r3,992(r2)
	opcodeArray[0xF9] = &xF9;
    cc68:	008000b4 	movhi	r2,2
    cc6c:	10bf4a04 	addi	r2,r2,-728
    cc70:	00c00074 	movhi	r3,1
    cc74:	18ee1804 	addi	r3,r3,-18336
    cc78:	10c0f915 	stw	r3,996(r2)
	opcodeArray[0xFA] = &xFA;
    cc7c:	008000b4 	movhi	r2,2
    cc80:	10bf4a04 	addi	r2,r2,-728
    cc84:	00c00074 	movhi	r3,1
    cc88:	18ee2704 	addi	r3,r3,-18276
    cc8c:	10c0fa15 	stw	r3,1000(r2)
	opcodeArray[0xFB] = &xFB;
    cc90:	008000b4 	movhi	r2,2
    cc94:	10bf4a04 	addi	r2,r2,-728
    cc98:	00c00074 	movhi	r3,1
    cc9c:	18ee3504 	addi	r3,r3,-18220
    cca0:	10c0fb15 	stw	r3,1004(r2)
//	opcodeArray[0xFC] = &xFC;
//	opcodeArray[0xFD] = &xFD;
	opcodeArray[0xFE] = &xFE;
    cca4:	008000b4 	movhi	r2,2
    cca8:	10bf4a04 	addi	r2,r2,-728
    ccac:	00c00074 	movhi	r3,1
    ccb0:	18ee4204 	addi	r3,r3,-18168
    ccb4:	10c0fe15 	stw	r3,1016(r2)
	opcodeArray[0xFF] = &xFF;
    ccb8:	008000b4 	movhi	r2,2
    ccbc:	10bf4a04 	addi	r2,r2,-728
    ccc0:	00c00074 	movhi	r3,1
    ccc4:	18ee4f04 	addi	r3,r3,-18116
    ccc8:	10c0ff15 	stw	r3,1020(r2)

}
    cccc:	0001883a 	nop
    ccd0:	e037883a 	mov	sp,fp
    ccd4:	df000017 	ldw	fp,0(sp)
    ccd8:	dec00104 	addi	sp,sp,4
    ccdc:	f800283a 	ret

0000cce0 <main>:


//End Opcodes

int main() {
    cce0:	dee81e04 	addi	sp,sp,-24456
    cce4:	dfd7e115 	stw	ra,24452(sp)
    cce8:	df17e015 	stw	fp,24448(sp)
    ccec:	df17e004 	addi	fp,sp,24448

	printf("Starting\n");
    ccf0:	010000b4 	movhi	r4,2
    ccf4:	2130f004 	addi	r4,r4,-15424
    ccf8:	000d0880 	call	d088 <puts>
	initOpcodes();
    ccfc:	000b9740 	call	b974 <initOpcodes>
	CPU cpu;
	backup = &cpu;
    cd00:	e0a82004 	addi	r2,fp,-24448
    cd04:	d0a6d315 	stw	r2,-25780(gp)
	init_CPU(&cpu);
    cd08:	e1282004 	addi	r4,fp,-24448
    cd0c:	00024d40 	call	24d4 <init_CPU>
	GPU gpu;
	initGPU(&gpu);
    cd10:	e0a82f04 	addi	r2,fp,-24388
    cd14:	1009883a 	mov	r4,r2
    cd18:	000044c0 	call	44c <initGPU>
	cpu.gpu = &gpu;
    cd1c:	e0a82f04 	addi	r2,fp,-24388
    cd20:	e0a82e15 	stw	r2,-24392(fp)
	getGameName();
    cd24:	00025e40 	call	25e4 <getGameName>
	run(&cpu);
    cd28:	e1282004 	addi	r4,fp,-24448
    cd2c:	000266c0 	call	266c <run>
	return 0;
    cd30:	0005883a 	mov	r2,zero
}
    cd34:	e037883a 	mov	sp,fp
    cd38:	dfc00117 	ldw	ra,4(sp)
    cd3c:	df000017 	ldw	fp,0(sp)
    cd40:	dec00204 	addi	sp,sp,8
    cd44:	f800283a 	ret

0000cd48 <__divsi3>:
    cd48:	20001b16 	blt	r4,zero,cdb8 <__divsi3+0x70>
    cd4c:	000f883a 	mov	r7,zero
    cd50:	28001616 	blt	r5,zero,cdac <__divsi3+0x64>
    cd54:	200d883a 	mov	r6,r4
    cd58:	29001a2e 	bgeu	r5,r4,cdc4 <__divsi3+0x7c>
    cd5c:	00800804 	movi	r2,32
    cd60:	00c00044 	movi	r3,1
    cd64:	00000106 	br	cd6c <__divsi3+0x24>
    cd68:	10000d26 	beq	r2,zero,cda0 <__divsi3+0x58>
    cd6c:	294b883a 	add	r5,r5,r5
    cd70:	10bfffc4 	addi	r2,r2,-1
    cd74:	18c7883a 	add	r3,r3,r3
    cd78:	293ffb36 	bltu	r5,r4,cd68 <__alt_data_end+0xfc00cd68>
    cd7c:	0005883a 	mov	r2,zero
    cd80:	18000726 	beq	r3,zero,cda0 <__divsi3+0x58>
    cd84:	0005883a 	mov	r2,zero
    cd88:	31400236 	bltu	r6,r5,cd94 <__divsi3+0x4c>
    cd8c:	314dc83a 	sub	r6,r6,r5
    cd90:	10c4b03a 	or	r2,r2,r3
    cd94:	1806d07a 	srli	r3,r3,1
    cd98:	280ad07a 	srli	r5,r5,1
    cd9c:	183ffa1e 	bne	r3,zero,cd88 <__alt_data_end+0xfc00cd88>
    cda0:	38000126 	beq	r7,zero,cda8 <__divsi3+0x60>
    cda4:	0085c83a 	sub	r2,zero,r2
    cda8:	f800283a 	ret
    cdac:	014bc83a 	sub	r5,zero,r5
    cdb0:	39c0005c 	xori	r7,r7,1
    cdb4:	003fe706 	br	cd54 <__alt_data_end+0xfc00cd54>
    cdb8:	0109c83a 	sub	r4,zero,r4
    cdbc:	01c00044 	movi	r7,1
    cdc0:	003fe306 	br	cd50 <__alt_data_end+0xfc00cd50>
    cdc4:	00c00044 	movi	r3,1
    cdc8:	003fee06 	br	cd84 <__alt_data_end+0xfc00cd84>

0000cdcc <__modsi3>:
    cdcc:	20001716 	blt	r4,zero,ce2c <__modsi3+0x60>
    cdd0:	000f883a 	mov	r7,zero
    cdd4:	2005883a 	mov	r2,r4
    cdd8:	28001216 	blt	r5,zero,ce24 <__modsi3+0x58>
    cddc:	2900162e 	bgeu	r5,r4,ce38 <__modsi3+0x6c>
    cde0:	01800804 	movi	r6,32
    cde4:	00c00044 	movi	r3,1
    cde8:	00000106 	br	cdf0 <__modsi3+0x24>
    cdec:	30000a26 	beq	r6,zero,ce18 <__modsi3+0x4c>
    cdf0:	294b883a 	add	r5,r5,r5
    cdf4:	31bfffc4 	addi	r6,r6,-1
    cdf8:	18c7883a 	add	r3,r3,r3
    cdfc:	293ffb36 	bltu	r5,r4,cdec <__alt_data_end+0xfc00cdec>
    ce00:	18000526 	beq	r3,zero,ce18 <__modsi3+0x4c>
    ce04:	1806d07a 	srli	r3,r3,1
    ce08:	11400136 	bltu	r2,r5,ce10 <__modsi3+0x44>
    ce0c:	1145c83a 	sub	r2,r2,r5
    ce10:	280ad07a 	srli	r5,r5,1
    ce14:	183ffb1e 	bne	r3,zero,ce04 <__alt_data_end+0xfc00ce04>
    ce18:	38000126 	beq	r7,zero,ce20 <__modsi3+0x54>
    ce1c:	0085c83a 	sub	r2,zero,r2
    ce20:	f800283a 	ret
    ce24:	014bc83a 	sub	r5,zero,r5
    ce28:	003fec06 	br	cddc <__alt_data_end+0xfc00cddc>
    ce2c:	0109c83a 	sub	r4,zero,r4
    ce30:	01c00044 	movi	r7,1
    ce34:	003fe706 	br	cdd4 <__alt_data_end+0xfc00cdd4>
    ce38:	00c00044 	movi	r3,1
    ce3c:	003ff106 	br	ce04 <__alt_data_end+0xfc00ce04>

0000ce40 <__udivsi3>:
    ce40:	200d883a 	mov	r6,r4
    ce44:	2900152e 	bgeu	r5,r4,ce9c <__udivsi3+0x5c>
    ce48:	28001416 	blt	r5,zero,ce9c <__udivsi3+0x5c>
    ce4c:	00800804 	movi	r2,32
    ce50:	00c00044 	movi	r3,1
    ce54:	00000206 	br	ce60 <__udivsi3+0x20>
    ce58:	10000e26 	beq	r2,zero,ce94 <__udivsi3+0x54>
    ce5c:	28000516 	blt	r5,zero,ce74 <__udivsi3+0x34>
    ce60:	294b883a 	add	r5,r5,r5
    ce64:	10bfffc4 	addi	r2,r2,-1
    ce68:	18c7883a 	add	r3,r3,r3
    ce6c:	293ffa36 	bltu	r5,r4,ce58 <__alt_data_end+0xfc00ce58>
    ce70:	18000826 	beq	r3,zero,ce94 <__udivsi3+0x54>
    ce74:	0005883a 	mov	r2,zero
    ce78:	31400236 	bltu	r6,r5,ce84 <__udivsi3+0x44>
    ce7c:	314dc83a 	sub	r6,r6,r5
    ce80:	10c4b03a 	or	r2,r2,r3
    ce84:	1806d07a 	srli	r3,r3,1
    ce88:	280ad07a 	srli	r5,r5,1
    ce8c:	183ffa1e 	bne	r3,zero,ce78 <__alt_data_end+0xfc00ce78>
    ce90:	f800283a 	ret
    ce94:	0005883a 	mov	r2,zero
    ce98:	f800283a 	ret
    ce9c:	00c00044 	movi	r3,1
    cea0:	003ff406 	br	ce74 <__alt_data_end+0xfc00ce74>

0000cea4 <__umodsi3>:
    cea4:	2005883a 	mov	r2,r4
    cea8:	2900122e 	bgeu	r5,r4,cef4 <__umodsi3+0x50>
    ceac:	28001116 	blt	r5,zero,cef4 <__umodsi3+0x50>
    ceb0:	01800804 	movi	r6,32
    ceb4:	00c00044 	movi	r3,1
    ceb8:	00000206 	br	cec4 <__umodsi3+0x20>
    cebc:	30000c26 	beq	r6,zero,cef0 <__umodsi3+0x4c>
    cec0:	28000516 	blt	r5,zero,ced8 <__umodsi3+0x34>
    cec4:	294b883a 	add	r5,r5,r5
    cec8:	31bfffc4 	addi	r6,r6,-1
    cecc:	18c7883a 	add	r3,r3,r3
    ced0:	293ffa36 	bltu	r5,r4,cebc <__alt_data_end+0xfc00cebc>
    ced4:	18000626 	beq	r3,zero,cef0 <__umodsi3+0x4c>
    ced8:	1806d07a 	srli	r3,r3,1
    cedc:	11400136 	bltu	r2,r5,cee4 <__umodsi3+0x40>
    cee0:	1145c83a 	sub	r2,r2,r5
    cee4:	280ad07a 	srli	r5,r5,1
    cee8:	183ffb1e 	bne	r3,zero,ced8 <__alt_data_end+0xfc00ced8>
    ceec:	f800283a 	ret
    cef0:	f800283a 	ret
    cef4:	00c00044 	movi	r3,1
    cef8:	003ff706 	br	ced8 <__alt_data_end+0xfc00ced8>

0000cefc <__mulsi3>:
    cefc:	0005883a 	mov	r2,zero
    cf00:	20000726 	beq	r4,zero,cf20 <__mulsi3+0x24>
    cf04:	20c0004c 	andi	r3,r4,1
    cf08:	2008d07a 	srli	r4,r4,1
    cf0c:	18000126 	beq	r3,zero,cf14 <__mulsi3+0x18>
    cf10:	1145883a 	add	r2,r2,r5
    cf14:	294b883a 	add	r5,r5,r5
    cf18:	203ffa1e 	bne	r4,zero,cf04 <__alt_data_end+0xfc00cf04>
    cf1c:	f800283a 	ret
    cf20:	f800283a 	ret

0000cf24 <exit>:
    cf24:	defffe04 	addi	sp,sp,-8
    cf28:	000b883a 	mov	r5,zero
    cf2c:	dc000015 	stw	r16,0(sp)
    cf30:	dfc00115 	stw	ra,4(sp)
    cf34:	2021883a 	mov	r16,r4
    cf38:	000f63c0 	call	f63c <__call_exitprocs>
    cf3c:	008000b4 	movhi	r2,2
    cf40:	10b86204 	addi	r2,r2,-7800
    cf44:	11000017 	ldw	r4,0(r2)
    cf48:	20800f17 	ldw	r2,60(r4)
    cf4c:	10000126 	beq	r2,zero,cf54 <exit+0x30>
    cf50:	103ee83a 	callr	r2
    cf54:	8009883a 	mov	r4,r16
    cf58:	0019f800 	call	19f80 <_exit>

0000cf5c <_printf_r>:
    cf5c:	defffd04 	addi	sp,sp,-12
    cf60:	2805883a 	mov	r2,r5
    cf64:	dfc00015 	stw	ra,0(sp)
    cf68:	d9800115 	stw	r6,4(sp)
    cf6c:	d9c00215 	stw	r7,8(sp)
    cf70:	21400217 	ldw	r5,8(r4)
    cf74:	d9c00104 	addi	r7,sp,4
    cf78:	100d883a 	mov	r6,r2
    cf7c:	000d1340 	call	d134 <___vfprintf_internal_r>
    cf80:	dfc00017 	ldw	ra,0(sp)
    cf84:	dec00304 	addi	sp,sp,12
    cf88:	f800283a 	ret

0000cf8c <printf>:
    cf8c:	defffc04 	addi	sp,sp,-16
    cf90:	dfc00015 	stw	ra,0(sp)
    cf94:	d9400115 	stw	r5,4(sp)
    cf98:	d9800215 	stw	r6,8(sp)
    cf9c:	d9c00315 	stw	r7,12(sp)
    cfa0:	008000b4 	movhi	r2,2
    cfa4:	10b86304 	addi	r2,r2,-7796
    cfa8:	10800017 	ldw	r2,0(r2)
    cfac:	200b883a 	mov	r5,r4
    cfb0:	d9800104 	addi	r6,sp,4
    cfb4:	11000217 	ldw	r4,8(r2)
    cfb8:	000f4100 	call	f410 <__vfprintf_internal>
    cfbc:	dfc00017 	ldw	ra,0(sp)
    cfc0:	dec00404 	addi	sp,sp,16
    cfc4:	f800283a 	ret

0000cfc8 <_puts_r>:
    cfc8:	defff604 	addi	sp,sp,-40
    cfcc:	dc000715 	stw	r16,28(sp)
    cfd0:	2021883a 	mov	r16,r4
    cfd4:	2809883a 	mov	r4,r5
    cfd8:	dc400815 	stw	r17,32(sp)
    cfdc:	dfc00915 	stw	ra,36(sp)
    cfe0:	2823883a 	mov	r17,r5
    cfe4:	000d09c0 	call	d09c <strlen>
    cfe8:	10c00044 	addi	r3,r2,1
    cfec:	d8800115 	stw	r2,4(sp)
    cff0:	008000b4 	movhi	r2,2
    cff4:	10b0f404 	addi	r2,r2,-15408
    cff8:	d8800215 	stw	r2,8(sp)
    cffc:	00800044 	movi	r2,1
    d000:	d8800315 	stw	r2,12(sp)
    d004:	00800084 	movi	r2,2
    d008:	dc400015 	stw	r17,0(sp)
    d00c:	d8c00615 	stw	r3,24(sp)
    d010:	dec00415 	stw	sp,16(sp)
    d014:	d8800515 	stw	r2,20(sp)
    d018:	80000226 	beq	r16,zero,d024 <_puts_r+0x5c>
    d01c:	80800e17 	ldw	r2,56(r16)
    d020:	10001426 	beq	r2,zero,d074 <_puts_r+0xac>
    d024:	81400217 	ldw	r5,8(r16)
    d028:	2880030b 	ldhu	r2,12(r5)
    d02c:	10c8000c 	andi	r3,r2,8192
    d030:	1800061e 	bne	r3,zero,d04c <_puts_r+0x84>
    d034:	29001917 	ldw	r4,100(r5)
    d038:	00f7ffc4 	movi	r3,-8193
    d03c:	10880014 	ori	r2,r2,8192
    d040:	20c6703a 	and	r3,r4,r3
    d044:	2880030d 	sth	r2,12(r5)
    d048:	28c01915 	stw	r3,100(r5)
    d04c:	d9800404 	addi	r6,sp,16
    d050:	8009883a 	mov	r4,r16
    d054:	0011af80 	call	11af8 <__sfvwrite_r>
    d058:	1000091e 	bne	r2,zero,d080 <_puts_r+0xb8>
    d05c:	00800284 	movi	r2,10
    d060:	dfc00917 	ldw	ra,36(sp)
    d064:	dc400817 	ldw	r17,32(sp)
    d068:	dc000717 	ldw	r16,28(sp)
    d06c:	dec00a04 	addi	sp,sp,40
    d070:	f800283a 	ret
    d074:	8009883a 	mov	r4,r16
    d078:	00116740 	call	11674 <__sinit>
    d07c:	003fe906 	br	d024 <__alt_data_end+0xfc00d024>
    d080:	00bfffc4 	movi	r2,-1
    d084:	003ff606 	br	d060 <__alt_data_end+0xfc00d060>

0000d088 <puts>:
    d088:	008000b4 	movhi	r2,2
    d08c:	10b86304 	addi	r2,r2,-7796
    d090:	200b883a 	mov	r5,r4
    d094:	11000017 	ldw	r4,0(r2)
    d098:	000cfc81 	jmpi	cfc8 <_puts_r>

0000d09c <strlen>:
    d09c:	208000cc 	andi	r2,r4,3
    d0a0:	10002026 	beq	r2,zero,d124 <strlen+0x88>
    d0a4:	20800007 	ldb	r2,0(r4)
    d0a8:	10002026 	beq	r2,zero,d12c <strlen+0x90>
    d0ac:	2005883a 	mov	r2,r4
    d0b0:	00000206 	br	d0bc <strlen+0x20>
    d0b4:	10c00007 	ldb	r3,0(r2)
    d0b8:	18001826 	beq	r3,zero,d11c <strlen+0x80>
    d0bc:	10800044 	addi	r2,r2,1
    d0c0:	10c000cc 	andi	r3,r2,3
    d0c4:	183ffb1e 	bne	r3,zero,d0b4 <__alt_data_end+0xfc00d0b4>
    d0c8:	10c00017 	ldw	r3,0(r2)
    d0cc:	01ffbff4 	movhi	r7,65279
    d0d0:	39ffbfc4 	addi	r7,r7,-257
    d0d4:	00ca303a 	nor	r5,zero,r3
    d0d8:	01a02074 	movhi	r6,32897
    d0dc:	19c7883a 	add	r3,r3,r7
    d0e0:	31a02004 	addi	r6,r6,-32640
    d0e4:	1946703a 	and	r3,r3,r5
    d0e8:	1986703a 	and	r3,r3,r6
    d0ec:	1800091e 	bne	r3,zero,d114 <strlen+0x78>
    d0f0:	10800104 	addi	r2,r2,4
    d0f4:	10c00017 	ldw	r3,0(r2)
    d0f8:	19cb883a 	add	r5,r3,r7
    d0fc:	00c6303a 	nor	r3,zero,r3
    d100:	28c6703a 	and	r3,r5,r3
    d104:	1986703a 	and	r3,r3,r6
    d108:	183ff926 	beq	r3,zero,d0f0 <__alt_data_end+0xfc00d0f0>
    d10c:	00000106 	br	d114 <strlen+0x78>
    d110:	10800044 	addi	r2,r2,1
    d114:	10c00007 	ldb	r3,0(r2)
    d118:	183ffd1e 	bne	r3,zero,d110 <__alt_data_end+0xfc00d110>
    d11c:	1105c83a 	sub	r2,r2,r4
    d120:	f800283a 	ret
    d124:	2005883a 	mov	r2,r4
    d128:	003fe706 	br	d0c8 <__alt_data_end+0xfc00d0c8>
    d12c:	0005883a 	mov	r2,zero
    d130:	f800283a 	ret

0000d134 <___vfprintf_internal_r>:
    d134:	deffb804 	addi	sp,sp,-288
    d138:	dfc04715 	stw	ra,284(sp)
    d13c:	ddc04515 	stw	r23,276(sp)
    d140:	dd404315 	stw	r21,268(sp)
    d144:	d9002d15 	stw	r4,180(sp)
    d148:	282f883a 	mov	r23,r5
    d14c:	302b883a 	mov	r21,r6
    d150:	d9c02e15 	stw	r7,184(sp)
    d154:	df004615 	stw	fp,280(sp)
    d158:	dd804415 	stw	r22,272(sp)
    d15c:	dd004215 	stw	r20,264(sp)
    d160:	dcc04115 	stw	r19,260(sp)
    d164:	dc804015 	stw	r18,256(sp)
    d168:	dc403f15 	stw	r17,252(sp)
    d16c:	dc003e15 	stw	r16,248(sp)
    d170:	00121f40 	call	121f4 <_localeconv_r>
    d174:	10800017 	ldw	r2,0(r2)
    d178:	1009883a 	mov	r4,r2
    d17c:	d8803415 	stw	r2,208(sp)
    d180:	000d09c0 	call	d09c <strlen>
    d184:	d8803715 	stw	r2,220(sp)
    d188:	d8802d17 	ldw	r2,180(sp)
    d18c:	10000226 	beq	r2,zero,d198 <___vfprintf_internal_r+0x64>
    d190:	10800e17 	ldw	r2,56(r2)
    d194:	1000fb26 	beq	r2,zero,d584 <___vfprintf_internal_r+0x450>
    d198:	b880030b 	ldhu	r2,12(r23)
    d19c:	10c8000c 	andi	r3,r2,8192
    d1a0:	1800061e 	bne	r3,zero,d1bc <___vfprintf_internal_r+0x88>
    d1a4:	b9001917 	ldw	r4,100(r23)
    d1a8:	00f7ffc4 	movi	r3,-8193
    d1ac:	10880014 	ori	r2,r2,8192
    d1b0:	20c6703a 	and	r3,r4,r3
    d1b4:	b880030d 	sth	r2,12(r23)
    d1b8:	b8c01915 	stw	r3,100(r23)
    d1bc:	10c0020c 	andi	r3,r2,8
    d1c0:	1800c326 	beq	r3,zero,d4d0 <___vfprintf_internal_r+0x39c>
    d1c4:	b8c00417 	ldw	r3,16(r23)
    d1c8:	1800c126 	beq	r3,zero,d4d0 <___vfprintf_internal_r+0x39c>
    d1cc:	1080068c 	andi	r2,r2,26
    d1d0:	00c00284 	movi	r3,10
    d1d4:	10c0c626 	beq	r2,r3,d4f0 <___vfprintf_internal_r+0x3bc>
    d1d8:	d8c00404 	addi	r3,sp,16
    d1dc:	050000b4 	movhi	r20,2
    d1e0:	d9001e04 	addi	r4,sp,120
    d1e4:	a5310584 	addi	r20,r20,-15338
    d1e8:	d8c01e15 	stw	r3,120(sp)
    d1ec:	d8002015 	stw	zero,128(sp)
    d1f0:	d8001f15 	stw	zero,124(sp)
    d1f4:	d8003315 	stw	zero,204(sp)
    d1f8:	d8003615 	stw	zero,216(sp)
    d1fc:	d8003815 	stw	zero,224(sp)
    d200:	1811883a 	mov	r8,r3
    d204:	d8003915 	stw	zero,228(sp)
    d208:	d8003a15 	stw	zero,232(sp)
    d20c:	d8002f15 	stw	zero,188(sp)
    d210:	d9002815 	stw	r4,160(sp)
    d214:	a8800007 	ldb	r2,0(r21)
    d218:	10028b26 	beq	r2,zero,dc48 <___vfprintf_internal_r+0xb14>
    d21c:	00c00944 	movi	r3,37
    d220:	a823883a 	mov	r17,r21
    d224:	10c0021e 	bne	r2,r3,d230 <___vfprintf_internal_r+0xfc>
    d228:	00001406 	br	d27c <___vfprintf_internal_r+0x148>
    d22c:	10c00326 	beq	r2,r3,d23c <___vfprintf_internal_r+0x108>
    d230:	8c400044 	addi	r17,r17,1
    d234:	88800007 	ldb	r2,0(r17)
    d238:	103ffc1e 	bne	r2,zero,d22c <__alt_data_end+0xfc00d22c>
    d23c:	8d61c83a 	sub	r16,r17,r21
    d240:	80000e26 	beq	r16,zero,d27c <___vfprintf_internal_r+0x148>
    d244:	d8c02017 	ldw	r3,128(sp)
    d248:	d8801f17 	ldw	r2,124(sp)
    d24c:	45400015 	stw	r21,0(r8)
    d250:	1c07883a 	add	r3,r3,r16
    d254:	10800044 	addi	r2,r2,1
    d258:	d8c02015 	stw	r3,128(sp)
    d25c:	44000115 	stw	r16,4(r8)
    d260:	d8801f15 	stw	r2,124(sp)
    d264:	00c001c4 	movi	r3,7
    d268:	1880a916 	blt	r3,r2,d510 <___vfprintf_internal_r+0x3dc>
    d26c:	42000204 	addi	r8,r8,8
    d270:	d9402f17 	ldw	r5,188(sp)
    d274:	2c0b883a 	add	r5,r5,r16
    d278:	d9402f15 	stw	r5,188(sp)
    d27c:	88800007 	ldb	r2,0(r17)
    d280:	1000aa26 	beq	r2,zero,d52c <___vfprintf_internal_r+0x3f8>
    d284:	8d400044 	addi	r21,r17,1
    d288:	8c400047 	ldb	r17,1(r17)
    d28c:	0021883a 	mov	r16,zero
    d290:	00bfffc4 	movi	r2,-1
    d294:	0025883a 	mov	r18,zero
    d298:	dc002905 	stb	r16,164(sp)
    d29c:	d8002785 	stb	zero,158(sp)
    d2a0:	d8002b05 	stb	zero,172(sp)
    d2a4:	d8802a15 	stw	r2,168(sp)
    d2a8:	d8003115 	stw	zero,196(sp)
    d2ac:	04c01604 	movi	r19,88
    d2b0:	05800244 	movi	r22,9
    d2b4:	9021883a 	mov	r16,r18
    d2b8:	4039883a 	mov	fp,r8
    d2bc:	ad400044 	addi	r21,r21,1
    d2c0:	88bff804 	addi	r2,r17,-32
    d2c4:	98833236 	bltu	r19,r2,df90 <___vfprintf_internal_r+0xe5c>
    d2c8:	100490ba 	slli	r2,r2,2
    d2cc:	00c00074 	movhi	r3,1
    d2d0:	18f4b804 	addi	r3,r3,-11552
    d2d4:	10c5883a 	add	r2,r2,r3
    d2d8:	10800017 	ldw	r2,0(r2)
    d2dc:	1000683a 	jmp	r2
    d2e0:	0000de88 	cmpgei	zero,zero,890
    d2e4:	0000df90 	cmplti	zero,zero,894
    d2e8:	0000df90 	cmplti	zero,zero,894
    d2ec:	0000dea8 	cmpgeui	zero,zero,890
    d2f0:	0000df90 	cmplti	zero,zero,894
    d2f4:	0000df90 	cmplti	zero,zero,894
    d2f8:	0000df90 	cmplti	zero,zero,894
    d2fc:	0000df90 	cmplti	zero,zero,894
    d300:	0000df90 	cmplti	zero,zero,894
    d304:	0000df90 	cmplti	zero,zero,894
    d308:	0000d590 	cmplti	zero,zero,854
    d30c:	0000dd98 	cmpnei	zero,zero,886
    d310:	0000df90 	cmplti	zero,zero,894
    d314:	0000d454 	movui	zero,849
    d318:	0000d5b4 	movhi	zero,854
    d31c:	0000df90 	cmplti	zero,zero,894
    d320:	0000d604 	movi	zero,856
    d324:	0000d610 	cmplti	zero,zero,856
    d328:	0000d610 	cmplti	zero,zero,856
    d32c:	0000d610 	cmplti	zero,zero,856
    d330:	0000d610 	cmplti	zero,zero,856
    d334:	0000d610 	cmplti	zero,zero,856
    d338:	0000d610 	cmplti	zero,zero,856
    d33c:	0000d610 	cmplti	zero,zero,856
    d340:	0000d610 	cmplti	zero,zero,856
    d344:	0000d610 	cmplti	zero,zero,856
    d348:	0000df90 	cmplti	zero,zero,894
    d34c:	0000df90 	cmplti	zero,zero,894
    d350:	0000df90 	cmplti	zero,zero,894
    d354:	0000df90 	cmplti	zero,zero,894
    d358:	0000df90 	cmplti	zero,zero,894
    d35c:	0000df90 	cmplti	zero,zero,894
    d360:	0000df90 	cmplti	zero,zero,894
    d364:	0000df90 	cmplti	zero,zero,894
    d368:	0000df90 	cmplti	zero,zero,894
    d36c:	0000df90 	cmplti	zero,zero,894
    d370:	0000d64c 	andi	zero,zero,857
    d374:	0000d714 	movui	zero,860
    d378:	0000df90 	cmplti	zero,zero,894
    d37c:	0000d714 	movui	zero,860
    d380:	0000df90 	cmplti	zero,zero,894
    d384:	0000df90 	cmplti	zero,zero,894
    d388:	0000df90 	cmplti	zero,zero,894
    d38c:	0000df90 	cmplti	zero,zero,894
    d390:	0000d7c0 	call	d7c <drawBackground+0x304>
    d394:	0000df90 	cmplti	zero,zero,894
    d398:	0000df90 	cmplti	zero,zero,894
    d39c:	0000d7cc 	andi	zero,zero,863
    d3a0:	0000df90 	cmplti	zero,zero,894
    d3a4:	0000df90 	cmplti	zero,zero,894
    d3a8:	0000df90 	cmplti	zero,zero,894
    d3ac:	0000df90 	cmplti	zero,zero,894
    d3b0:	0000df90 	cmplti	zero,zero,894
    d3b4:	0000dc50 	cmplti	zero,zero,881
    d3b8:	0000df90 	cmplti	zero,zero,894
    d3bc:	0000df90 	cmplti	zero,zero,894
    d3c0:	0000dcbc 	xorhi	zero,zero,882
    d3c4:	0000df90 	cmplti	zero,zero,894
    d3c8:	0000df90 	cmplti	zero,zero,894
    d3cc:	0000df90 	cmplti	zero,zero,894
    d3d0:	0000df90 	cmplti	zero,zero,894
    d3d4:	0000df90 	cmplti	zero,zero,894
    d3d8:	0000df90 	cmplti	zero,zero,894
    d3dc:	0000df90 	cmplti	zero,zero,894
    d3e0:	0000df90 	cmplti	zero,zero,894
    d3e4:	0000df90 	cmplti	zero,zero,894
    d3e8:	0000df90 	cmplti	zero,zero,894
    d3ec:	0000df34 	movhi	zero,892
    d3f0:	0000deb4 	movhi	zero,890
    d3f4:	0000d714 	movui	zero,860
    d3f8:	0000d714 	movui	zero,860
    d3fc:	0000d714 	movui	zero,860
    d400:	0000ded4 	movui	zero,891
    d404:	0000deb4 	movhi	zero,890
    d408:	0000df90 	cmplti	zero,zero,894
    d40c:	0000df90 	cmplti	zero,zero,894
    d410:	0000dee0 	cmpeqi	zero,zero,891
    d414:	0000df90 	cmplti	zero,zero,894
    d418:	0000def4 	movhi	zero,891
    d41c:	0000dd78 	rdprs	zero,zero,885
    d420:	0000d460 	cmpeqi	zero,zero,849
    d424:	0000ddb0 	cmpltui	zero,zero,886
    d428:	0000df90 	cmplti	zero,zero,894
    d42c:	0000ddbc 	xorhi	zero,zero,886
    d430:	0000df90 	cmplti	zero,zero,894
    d434:	0000de20 	cmpeqi	zero,zero,888
    d438:	0000df90 	cmplti	zero,zero,894
    d43c:	0000df90 	cmplti	zero,zero,894
    d440:	0000de40 	call	de4 <drawBackground+0x36c>
    d444:	d8c03117 	ldw	r3,196(sp)
    d448:	d8802e15 	stw	r2,184(sp)
    d44c:	00c7c83a 	sub	r3,zero,r3
    d450:	d8c03115 	stw	r3,196(sp)
    d454:	84000114 	ori	r16,r16,4
    d458:	ac400007 	ldb	r17,0(r21)
    d45c:	003f9706 	br	d2bc <__alt_data_end+0xfc00d2bc>
    d460:	00800c04 	movi	r2,48
    d464:	d8802705 	stb	r2,156(sp)
    d468:	00801e04 	movi	r2,120
    d46c:	d8802745 	stb	r2,157(sp)
    d470:	d9002a17 	ldw	r4,168(sp)
    d474:	d8802e17 	ldw	r2,184(sp)
    d478:	d8002785 	stb	zero,158(sp)
    d47c:	e011883a 	mov	r8,fp
    d480:	10c00104 	addi	r3,r2,4
    d484:	14c00017 	ldw	r19,0(r2)
    d488:	002d883a 	mov	r22,zero
    d48c:	80800094 	ori	r2,r16,2
    d490:	2002ca16 	blt	r4,zero,dfbc <___vfprintf_internal_r+0xe88>
    d494:	00bfdfc4 	movi	r2,-129
    d498:	80a4703a 	and	r18,r16,r2
    d49c:	d8c02e15 	stw	r3,184(sp)
    d4a0:	94800094 	ori	r18,r18,2
    d4a4:	9802b41e 	bne	r19,zero,df78 <___vfprintf_internal_r+0xe44>
    d4a8:	014000b4 	movhi	r5,2
    d4ac:	2970fe04 	addi	r5,r5,-15368
    d4b0:	d9403915 	stw	r5,228(sp)
    d4b4:	04401e04 	movi	r17,120
    d4b8:	d8802a17 	ldw	r2,168(sp)
    d4bc:	0039883a 	mov	fp,zero
    d4c0:	1001fa26 	beq	r2,zero,dcac <___vfprintf_internal_r+0xb78>
    d4c4:	0027883a 	mov	r19,zero
    d4c8:	002d883a 	mov	r22,zero
    d4cc:	00021906 	br	dd34 <___vfprintf_internal_r+0xc00>
    d4d0:	d9002d17 	ldw	r4,180(sp)
    d4d4:	b80b883a 	mov	r5,r23
    d4d8:	000f4e80 	call	f4e8 <__swsetup_r>
    d4dc:	1005dc1e 	bne	r2,zero,ec50 <___vfprintf_internal_r+0x1b1c>
    d4e0:	b880030b 	ldhu	r2,12(r23)
    d4e4:	00c00284 	movi	r3,10
    d4e8:	1080068c 	andi	r2,r2,26
    d4ec:	10ff3a1e 	bne	r2,r3,d1d8 <__alt_data_end+0xfc00d1d8>
    d4f0:	b880038f 	ldh	r2,14(r23)
    d4f4:	103f3816 	blt	r2,zero,d1d8 <__alt_data_end+0xfc00d1d8>
    d4f8:	d9c02e17 	ldw	r7,184(sp)
    d4fc:	d9002d17 	ldw	r4,180(sp)
    d500:	a80d883a 	mov	r6,r21
    d504:	b80b883a 	mov	r5,r23
    d508:	000f42c0 	call	f42c <__sbprintf>
    d50c:	00001106 	br	d554 <___vfprintf_internal_r+0x420>
    d510:	d9002d17 	ldw	r4,180(sp)
    d514:	d9801e04 	addi	r6,sp,120
    d518:	b80b883a 	mov	r5,r23
    d51c:	0014a940 	call	14a94 <__sprint_r>
    d520:	1000081e 	bne	r2,zero,d544 <___vfprintf_internal_r+0x410>
    d524:	da000404 	addi	r8,sp,16
    d528:	003f5106 	br	d270 <__alt_data_end+0xfc00d270>
    d52c:	d8802017 	ldw	r2,128(sp)
    d530:	10000426 	beq	r2,zero,d544 <___vfprintf_internal_r+0x410>
    d534:	d9002d17 	ldw	r4,180(sp)
    d538:	d9801e04 	addi	r6,sp,120
    d53c:	b80b883a 	mov	r5,r23
    d540:	0014a940 	call	14a94 <__sprint_r>
    d544:	b880030b 	ldhu	r2,12(r23)
    d548:	1080100c 	andi	r2,r2,64
    d54c:	1005c01e 	bne	r2,zero,ec50 <___vfprintf_internal_r+0x1b1c>
    d550:	d8802f17 	ldw	r2,188(sp)
    d554:	dfc04717 	ldw	ra,284(sp)
    d558:	df004617 	ldw	fp,280(sp)
    d55c:	ddc04517 	ldw	r23,276(sp)
    d560:	dd804417 	ldw	r22,272(sp)
    d564:	dd404317 	ldw	r21,268(sp)
    d568:	dd004217 	ldw	r20,264(sp)
    d56c:	dcc04117 	ldw	r19,260(sp)
    d570:	dc804017 	ldw	r18,256(sp)
    d574:	dc403f17 	ldw	r17,252(sp)
    d578:	dc003e17 	ldw	r16,248(sp)
    d57c:	dec04804 	addi	sp,sp,288
    d580:	f800283a 	ret
    d584:	d9002d17 	ldw	r4,180(sp)
    d588:	00116740 	call	11674 <__sinit>
    d58c:	003f0206 	br	d198 <__alt_data_end+0xfc00d198>
    d590:	d9002e17 	ldw	r4,184(sp)
    d594:	d9402e17 	ldw	r5,184(sp)
    d598:	21000017 	ldw	r4,0(r4)
    d59c:	28800104 	addi	r2,r5,4
    d5a0:	d9003115 	stw	r4,196(sp)
    d5a4:	203fa716 	blt	r4,zero,d444 <__alt_data_end+0xfc00d444>
    d5a8:	d8802e15 	stw	r2,184(sp)
    d5ac:	ac400007 	ldb	r17,0(r21)
    d5b0:	003f4206 	br	d2bc <__alt_data_end+0xfc00d2bc>
    d5b4:	ac400007 	ldb	r17,0(r21)
    d5b8:	01000a84 	movi	r4,42
    d5bc:	a8c00044 	addi	r3,r21,1
    d5c0:	89075826 	beq	r17,r4,f324 <___vfprintf_internal_r+0x21f0>
    d5c4:	8cbff404 	addi	r18,r17,-48
    d5c8:	b486ae36 	bltu	r22,r18,f084 <___vfprintf_internal_r+0x1f50>
    d5cc:	0009883a 	mov	r4,zero
    d5d0:	1823883a 	mov	r17,r3
    d5d4:	01400284 	movi	r5,10
    d5d8:	000cefc0 	call	cefc <__mulsi3>
    d5dc:	88c00007 	ldb	r3,0(r17)
    d5e0:	1489883a 	add	r4,r2,r18
    d5e4:	8d400044 	addi	r21,r17,1
    d5e8:	1cbff404 	addi	r18,r3,-48
    d5ec:	a823883a 	mov	r17,r21
    d5f0:	b4bff82e 	bgeu	r22,r18,d5d4 <__alt_data_end+0xfc00d5d4>
    d5f4:	1823883a 	mov	r17,r3
    d5f8:	2005f616 	blt	r4,zero,edd4 <___vfprintf_internal_r+0x1ca0>
    d5fc:	d9002a15 	stw	r4,168(sp)
    d600:	003f2f06 	br	d2c0 <__alt_data_end+0xfc00d2c0>
    d604:	84002014 	ori	r16,r16,128
    d608:	ac400007 	ldb	r17,0(r21)
    d60c:	003f2b06 	br	d2bc <__alt_data_end+0xfc00d2bc>
    d610:	8cbff404 	addi	r18,r17,-48
    d614:	d8003115 	stw	zero,196(sp)
    d618:	0009883a 	mov	r4,zero
    d61c:	a823883a 	mov	r17,r21
    d620:	01400284 	movi	r5,10
    d624:	000cefc0 	call	cefc <__mulsi3>
    d628:	88c00007 	ldb	r3,0(r17)
    d62c:	9089883a 	add	r4,r18,r2
    d630:	ad400044 	addi	r21,r21,1
    d634:	1cbff404 	addi	r18,r3,-48
    d638:	a823883a 	mov	r17,r21
    d63c:	b4bff82e 	bgeu	r22,r18,d620 <__alt_data_end+0xfc00d620>
    d640:	1823883a 	mov	r17,r3
    d644:	d9003115 	stw	r4,196(sp)
    d648:	003f1d06 	br	d2c0 <__alt_data_end+0xfc00d2c0>
    d64c:	8025883a 	mov	r18,r16
    d650:	dc002903 	ldbu	r16,164(sp)
    d654:	e011883a 	mov	r8,fp
    d658:	84003fcc 	andi	r16,r16,255
    d65c:	8007531e 	bne	r16,zero,f3ac <___vfprintf_internal_r+0x2278>
    d660:	94800414 	ori	r18,r18,16
    d664:	9080080c 	andi	r2,r18,32
    d668:	1003a326 	beq	r2,zero,e4f8 <___vfprintf_internal_r+0x13c4>
    d66c:	d9002e17 	ldw	r4,184(sp)
    d670:	20800117 	ldw	r2,4(r4)
    d674:	24c00017 	ldw	r19,0(r4)
    d678:	21000204 	addi	r4,r4,8
    d67c:	d9002e15 	stw	r4,184(sp)
    d680:	102d883a 	mov	r22,r2
    d684:	10047316 	blt	r2,zero,e854 <___vfprintf_internal_r+0x1720>
    d688:	d9002a17 	ldw	r4,168(sp)
    d68c:	df002783 	ldbu	fp,158(sp)
    d690:	2003e416 	blt	r4,zero,e624 <___vfprintf_internal_r+0x14f0>
    d694:	00ffdfc4 	movi	r3,-129
    d698:	9d84b03a 	or	r2,r19,r22
    d69c:	90e4703a 	and	r18,r18,r3
    d6a0:	10018026 	beq	r2,zero,dca4 <___vfprintf_internal_r+0xb70>
    d6a4:	b003ab26 	beq	r22,zero,e554 <___vfprintf_internal_r+0x1420>
    d6a8:	dc402915 	stw	r17,164(sp)
    d6ac:	dc001e04 	addi	r16,sp,120
    d6b0:	b023883a 	mov	r17,r22
    d6b4:	402d883a 	mov	r22,r8
    d6b8:	9809883a 	mov	r4,r19
    d6bc:	880b883a 	mov	r5,r17
    d6c0:	01800284 	movi	r6,10
    d6c4:	000f883a 	mov	r7,zero
    d6c8:	0016fd80 	call	16fd8 <__umoddi3>
    d6cc:	10800c04 	addi	r2,r2,48
    d6d0:	843fffc4 	addi	r16,r16,-1
    d6d4:	9809883a 	mov	r4,r19
    d6d8:	880b883a 	mov	r5,r17
    d6dc:	80800005 	stb	r2,0(r16)
    d6e0:	01800284 	movi	r6,10
    d6e4:	000f883a 	mov	r7,zero
    d6e8:	00169dc0 	call	169dc <__udivdi3>
    d6ec:	1027883a 	mov	r19,r2
    d6f0:	10c4b03a 	or	r2,r2,r3
    d6f4:	1823883a 	mov	r17,r3
    d6f8:	103fef1e 	bne	r2,zero,d6b8 <__alt_data_end+0xfc00d6b8>
    d6fc:	d8c02817 	ldw	r3,160(sp)
    d700:	dc402917 	ldw	r17,164(sp)
    d704:	b011883a 	mov	r8,r22
    d708:	1c07c83a 	sub	r3,r3,r16
    d70c:	d8c02b15 	stw	r3,172(sp)
    d710:	00005f06 	br	d890 <___vfprintf_internal_r+0x75c>
    d714:	8025883a 	mov	r18,r16
    d718:	dc002903 	ldbu	r16,164(sp)
    d71c:	e011883a 	mov	r8,fp
    d720:	84003fcc 	andi	r16,r16,255
    d724:	80071e1e 	bne	r16,zero,f3a0 <___vfprintf_internal_r+0x226c>
    d728:	9080020c 	andi	r2,r18,8
    d72c:	1004af26 	beq	r2,zero,e9ec <___vfprintf_internal_r+0x18b8>
    d730:	d9002e17 	ldw	r4,184(sp)
    d734:	d9402e17 	ldw	r5,184(sp)
    d738:	d8802e17 	ldw	r2,184(sp)
    d73c:	21000017 	ldw	r4,0(r4)
    d740:	29400117 	ldw	r5,4(r5)
    d744:	10800204 	addi	r2,r2,8
    d748:	d9003615 	stw	r4,216(sp)
    d74c:	d9403815 	stw	r5,224(sp)
    d750:	d8802e15 	stw	r2,184(sp)
    d754:	d9003617 	ldw	r4,216(sp)
    d758:	d9403817 	ldw	r5,224(sp)
    d75c:	da003d15 	stw	r8,244(sp)
    d760:	04000044 	movi	r16,1
    d764:	00146b80 	call	146b8 <__fpclassifyd>
    d768:	da003d17 	ldw	r8,244(sp)
    d76c:	1404441e 	bne	r2,r16,e880 <___vfprintf_internal_r+0x174c>
    d770:	d9003617 	ldw	r4,216(sp)
    d774:	d9403817 	ldw	r5,224(sp)
    d778:	000d883a 	mov	r6,zero
    d77c:	000f883a 	mov	r7,zero
    d780:	001897c0 	call	1897c <__ledf2>
    d784:	da003d17 	ldw	r8,244(sp)
    d788:	1005e316 	blt	r2,zero,ef18 <___vfprintf_internal_r+0x1de4>
    d78c:	df002783 	ldbu	fp,158(sp)
    d790:	008011c4 	movi	r2,71
    d794:	1445580e 	bge	r2,r17,ecf8 <___vfprintf_internal_r+0x1bc4>
    d798:	040000b4 	movhi	r16,2
    d79c:	8430f604 	addi	r16,r16,-15400
    d7a0:	00c000c4 	movi	r3,3
    d7a4:	00bfdfc4 	movi	r2,-129
    d7a8:	d8c02915 	stw	r3,164(sp)
    d7ac:	90a4703a 	and	r18,r18,r2
    d7b0:	d8c02b15 	stw	r3,172(sp)
    d7b4:	d8002a15 	stw	zero,168(sp)
    d7b8:	d8003215 	stw	zero,200(sp)
    d7bc:	00003a06 	br	d8a8 <___vfprintf_internal_r+0x774>
    d7c0:	84000214 	ori	r16,r16,8
    d7c4:	ac400007 	ldb	r17,0(r21)
    d7c8:	003ebc06 	br	d2bc <__alt_data_end+0xfc00d2bc>
    d7cc:	8025883a 	mov	r18,r16
    d7d0:	dc002903 	ldbu	r16,164(sp)
    d7d4:	e011883a 	mov	r8,fp
    d7d8:	84003fcc 	andi	r16,r16,255
    d7dc:	8007001e 	bne	r16,zero,f3e0 <___vfprintf_internal_r+0x22ac>
    d7e0:	94800414 	ori	r18,r18,16
    d7e4:	9080080c 	andi	r2,r18,32
    d7e8:	1002fa26 	beq	r2,zero,e3d4 <___vfprintf_internal_r+0x12a0>
    d7ec:	d9002e17 	ldw	r4,184(sp)
    d7f0:	d9402a17 	ldw	r5,168(sp)
    d7f4:	d8002785 	stb	zero,158(sp)
    d7f8:	20800204 	addi	r2,r4,8
    d7fc:	24c00017 	ldw	r19,0(r4)
    d800:	25800117 	ldw	r22,4(r4)
    d804:	2804b116 	blt	r5,zero,eacc <___vfprintf_internal_r+0x1998>
    d808:	013fdfc4 	movi	r4,-129
    d80c:	9d86b03a 	or	r3,r19,r22
    d810:	d8802e15 	stw	r2,184(sp)
    d814:	9124703a 	and	r18,r18,r4
    d818:	1802fb1e 	bne	r3,zero,e408 <___vfprintf_internal_r+0x12d4>
    d81c:	d8c02a17 	ldw	r3,168(sp)
    d820:	0039883a 	mov	fp,zero
    d824:	1805e526 	beq	r3,zero,efbc <___vfprintf_internal_r+0x1e88>
    d828:	0027883a 	mov	r19,zero
    d82c:	002d883a 	mov	r22,zero
    d830:	dc001e04 	addi	r16,sp,120
    d834:	9806d0fa 	srli	r3,r19,3
    d838:	b008977a 	slli	r4,r22,29
    d83c:	b02cd0fa 	srli	r22,r22,3
    d840:	9cc001cc 	andi	r19,r19,7
    d844:	98800c04 	addi	r2,r19,48
    d848:	843fffc4 	addi	r16,r16,-1
    d84c:	20e6b03a 	or	r19,r4,r3
    d850:	80800005 	stb	r2,0(r16)
    d854:	9d86b03a 	or	r3,r19,r22
    d858:	183ff61e 	bne	r3,zero,d834 <__alt_data_end+0xfc00d834>
    d85c:	90c0004c 	andi	r3,r18,1
    d860:	18014126 	beq	r3,zero,dd68 <___vfprintf_internal_r+0xc34>
    d864:	10803fcc 	andi	r2,r2,255
    d868:	1080201c 	xori	r2,r2,128
    d86c:	10bfe004 	addi	r2,r2,-128
    d870:	00c00c04 	movi	r3,48
    d874:	10c13c26 	beq	r2,r3,dd68 <___vfprintf_internal_r+0xc34>
    d878:	80ffffc5 	stb	r3,-1(r16)
    d87c:	d8c02817 	ldw	r3,160(sp)
    d880:	80bfffc4 	addi	r2,r16,-1
    d884:	1021883a 	mov	r16,r2
    d888:	1887c83a 	sub	r3,r3,r2
    d88c:	d8c02b15 	stw	r3,172(sp)
    d890:	d8802b17 	ldw	r2,172(sp)
    d894:	d9002a17 	ldw	r4,168(sp)
    d898:	1100010e 	bge	r2,r4,d8a0 <___vfprintf_internal_r+0x76c>
    d89c:	2005883a 	mov	r2,r4
    d8a0:	d8802915 	stw	r2,164(sp)
    d8a4:	d8003215 	stw	zero,200(sp)
    d8a8:	e7003fcc 	andi	fp,fp,255
    d8ac:	e700201c 	xori	fp,fp,128
    d8b0:	e73fe004 	addi	fp,fp,-128
    d8b4:	e0000326 	beq	fp,zero,d8c4 <___vfprintf_internal_r+0x790>
    d8b8:	d8c02917 	ldw	r3,164(sp)
    d8bc:	18c00044 	addi	r3,r3,1
    d8c0:	d8c02915 	stw	r3,164(sp)
    d8c4:	90c0008c 	andi	r3,r18,2
    d8c8:	d8c02c15 	stw	r3,176(sp)
    d8cc:	18000326 	beq	r3,zero,d8dc <___vfprintf_internal_r+0x7a8>
    d8d0:	d8c02917 	ldw	r3,164(sp)
    d8d4:	18c00084 	addi	r3,r3,2
    d8d8:	d8c02915 	stw	r3,164(sp)
    d8dc:	90c0210c 	andi	r3,r18,132
    d8e0:	d8c03015 	stw	r3,192(sp)
    d8e4:	1801c51e 	bne	r3,zero,dffc <___vfprintf_internal_r+0xec8>
    d8e8:	d9003117 	ldw	r4,196(sp)
    d8ec:	d8c02917 	ldw	r3,164(sp)
    d8f0:	20e7c83a 	sub	r19,r4,r3
    d8f4:	04c1c10e 	bge	zero,r19,dffc <___vfprintf_internal_r+0xec8>
    d8f8:	02400404 	movi	r9,16
    d8fc:	d8c02017 	ldw	r3,128(sp)
    d900:	d8801f17 	ldw	r2,124(sp)
    d904:	4cc52f0e 	bge	r9,r19,edc4 <___vfprintf_internal_r+0x1c90>
    d908:	014000b4 	movhi	r5,2
    d90c:	29710984 	addi	r5,r5,-15322
    d910:	dc403b15 	stw	r17,236(sp)
    d914:	d9403515 	stw	r5,212(sp)
    d918:	9823883a 	mov	r17,r19
    d91c:	482d883a 	mov	r22,r9
    d920:	9027883a 	mov	r19,r18
    d924:	070001c4 	movi	fp,7
    d928:	8025883a 	mov	r18,r16
    d92c:	dc002d17 	ldw	r16,180(sp)
    d930:	00000306 	br	d940 <___vfprintf_internal_r+0x80c>
    d934:	8c7ffc04 	addi	r17,r17,-16
    d938:	42000204 	addi	r8,r8,8
    d93c:	b440130e 	bge	r22,r17,d98c <___vfprintf_internal_r+0x858>
    d940:	010000b4 	movhi	r4,2
    d944:	18c00404 	addi	r3,r3,16
    d948:	10800044 	addi	r2,r2,1
    d94c:	21310984 	addi	r4,r4,-15322
    d950:	41000015 	stw	r4,0(r8)
    d954:	45800115 	stw	r22,4(r8)
    d958:	d8c02015 	stw	r3,128(sp)
    d95c:	d8801f15 	stw	r2,124(sp)
    d960:	e0bff40e 	bge	fp,r2,d934 <__alt_data_end+0xfc00d934>
    d964:	d9801e04 	addi	r6,sp,120
    d968:	b80b883a 	mov	r5,r23
    d96c:	8009883a 	mov	r4,r16
    d970:	0014a940 	call	14a94 <__sprint_r>
    d974:	103ef31e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    d978:	8c7ffc04 	addi	r17,r17,-16
    d97c:	d8c02017 	ldw	r3,128(sp)
    d980:	d8801f17 	ldw	r2,124(sp)
    d984:	da000404 	addi	r8,sp,16
    d988:	b47fed16 	blt	r22,r17,d940 <__alt_data_end+0xfc00d940>
    d98c:	9021883a 	mov	r16,r18
    d990:	9825883a 	mov	r18,r19
    d994:	8827883a 	mov	r19,r17
    d998:	dc403b17 	ldw	r17,236(sp)
    d99c:	d9403517 	ldw	r5,212(sp)
    d9a0:	98c7883a 	add	r3,r19,r3
    d9a4:	10800044 	addi	r2,r2,1
    d9a8:	41400015 	stw	r5,0(r8)
    d9ac:	44c00115 	stw	r19,4(r8)
    d9b0:	d8c02015 	stw	r3,128(sp)
    d9b4:	d8801f15 	stw	r2,124(sp)
    d9b8:	010001c4 	movi	r4,7
    d9bc:	2082c516 	blt	r4,r2,e4d4 <___vfprintf_internal_r+0x13a0>
    d9c0:	df002787 	ldb	fp,158(sp)
    d9c4:	42000204 	addi	r8,r8,8
    d9c8:	e0000c26 	beq	fp,zero,d9fc <___vfprintf_internal_r+0x8c8>
    d9cc:	d8801f17 	ldw	r2,124(sp)
    d9d0:	d9002784 	addi	r4,sp,158
    d9d4:	18c00044 	addi	r3,r3,1
    d9d8:	10800044 	addi	r2,r2,1
    d9dc:	41000015 	stw	r4,0(r8)
    d9e0:	01000044 	movi	r4,1
    d9e4:	41000115 	stw	r4,4(r8)
    d9e8:	d8c02015 	stw	r3,128(sp)
    d9ec:	d8801f15 	stw	r2,124(sp)
    d9f0:	010001c4 	movi	r4,7
    d9f4:	20825e16 	blt	r4,r2,e370 <___vfprintf_internal_r+0x123c>
    d9f8:	42000204 	addi	r8,r8,8
    d9fc:	d8802c17 	ldw	r2,176(sp)
    da00:	10000c26 	beq	r2,zero,da34 <___vfprintf_internal_r+0x900>
    da04:	d8801f17 	ldw	r2,124(sp)
    da08:	d9002704 	addi	r4,sp,156
    da0c:	18c00084 	addi	r3,r3,2
    da10:	10800044 	addi	r2,r2,1
    da14:	41000015 	stw	r4,0(r8)
    da18:	01000084 	movi	r4,2
    da1c:	41000115 	stw	r4,4(r8)
    da20:	d8c02015 	stw	r3,128(sp)
    da24:	d8801f15 	stw	r2,124(sp)
    da28:	010001c4 	movi	r4,7
    da2c:	20825816 	blt	r4,r2,e390 <___vfprintf_internal_r+0x125c>
    da30:	42000204 	addi	r8,r8,8
    da34:	d9003017 	ldw	r4,192(sp)
    da38:	00802004 	movi	r2,128
    da3c:	2081bb26 	beq	r4,r2,e12c <___vfprintf_internal_r+0xff8>
    da40:	d9402a17 	ldw	r5,168(sp)
    da44:	d8802b17 	ldw	r2,172(sp)
    da48:	28adc83a 	sub	r22,r5,r2
    da4c:	0580310e 	bge	zero,r22,db14 <___vfprintf_internal_r+0x9e0>
    da50:	07000404 	movi	fp,16
    da54:	d8801f17 	ldw	r2,124(sp)
    da58:	e584360e 	bge	fp,r22,eb34 <___vfprintf_internal_r+0x1a00>
    da5c:	014000b4 	movhi	r5,2
    da60:	29710584 	addi	r5,r5,-15338
    da64:	dc402a15 	stw	r17,168(sp)
    da68:	d9402c15 	stw	r5,176(sp)
    da6c:	b023883a 	mov	r17,r22
    da70:	04c001c4 	movi	r19,7
    da74:	a82d883a 	mov	r22,r21
    da78:	902b883a 	mov	r21,r18
    da7c:	8025883a 	mov	r18,r16
    da80:	dc002d17 	ldw	r16,180(sp)
    da84:	00000306 	br	da94 <___vfprintf_internal_r+0x960>
    da88:	8c7ffc04 	addi	r17,r17,-16
    da8c:	42000204 	addi	r8,r8,8
    da90:	e440110e 	bge	fp,r17,dad8 <___vfprintf_internal_r+0x9a4>
    da94:	18c00404 	addi	r3,r3,16
    da98:	10800044 	addi	r2,r2,1
    da9c:	45000015 	stw	r20,0(r8)
    daa0:	47000115 	stw	fp,4(r8)
    daa4:	d8c02015 	stw	r3,128(sp)
    daa8:	d8801f15 	stw	r2,124(sp)
    daac:	98bff60e 	bge	r19,r2,da88 <__alt_data_end+0xfc00da88>
    dab0:	d9801e04 	addi	r6,sp,120
    dab4:	b80b883a 	mov	r5,r23
    dab8:	8009883a 	mov	r4,r16
    dabc:	0014a940 	call	14a94 <__sprint_r>
    dac0:	103ea01e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    dac4:	8c7ffc04 	addi	r17,r17,-16
    dac8:	d8c02017 	ldw	r3,128(sp)
    dacc:	d8801f17 	ldw	r2,124(sp)
    dad0:	da000404 	addi	r8,sp,16
    dad4:	e47fef16 	blt	fp,r17,da94 <__alt_data_end+0xfc00da94>
    dad8:	9021883a 	mov	r16,r18
    dadc:	a825883a 	mov	r18,r21
    dae0:	b02b883a 	mov	r21,r22
    dae4:	882d883a 	mov	r22,r17
    dae8:	dc402a17 	ldw	r17,168(sp)
    daec:	d9002c17 	ldw	r4,176(sp)
    daf0:	1d87883a 	add	r3,r3,r22
    daf4:	10800044 	addi	r2,r2,1
    daf8:	41000015 	stw	r4,0(r8)
    dafc:	45800115 	stw	r22,4(r8)
    db00:	d8c02015 	stw	r3,128(sp)
    db04:	d8801f15 	stw	r2,124(sp)
    db08:	010001c4 	movi	r4,7
    db0c:	20821016 	blt	r4,r2,e350 <___vfprintf_internal_r+0x121c>
    db10:	42000204 	addi	r8,r8,8
    db14:	9080400c 	andi	r2,r18,256
    db18:	10013a1e 	bne	r2,zero,e004 <___vfprintf_internal_r+0xed0>
    db1c:	d9402b17 	ldw	r5,172(sp)
    db20:	d8801f17 	ldw	r2,124(sp)
    db24:	44000015 	stw	r16,0(r8)
    db28:	1947883a 	add	r3,r3,r5
    db2c:	10800044 	addi	r2,r2,1
    db30:	41400115 	stw	r5,4(r8)
    db34:	d8c02015 	stw	r3,128(sp)
    db38:	d8801f15 	stw	r2,124(sp)
    db3c:	010001c4 	movi	r4,7
    db40:	2081f516 	blt	r4,r2,e318 <___vfprintf_internal_r+0x11e4>
    db44:	42000204 	addi	r8,r8,8
    db48:	9480010c 	andi	r18,r18,4
    db4c:	90003226 	beq	r18,zero,dc18 <___vfprintf_internal_r+0xae4>
    db50:	d9403117 	ldw	r5,196(sp)
    db54:	d8802917 	ldw	r2,164(sp)
    db58:	28a1c83a 	sub	r16,r5,r2
    db5c:	04002e0e 	bge	zero,r16,dc18 <___vfprintf_internal_r+0xae4>
    db60:	04400404 	movi	r17,16
    db64:	d8801f17 	ldw	r2,124(sp)
    db68:	8c04c40e 	bge	r17,r16,ee7c <___vfprintf_internal_r+0x1d48>
    db6c:	014000b4 	movhi	r5,2
    db70:	29710984 	addi	r5,r5,-15322
    db74:	d9403515 	stw	r5,212(sp)
    db78:	048001c4 	movi	r18,7
    db7c:	dcc02d17 	ldw	r19,180(sp)
    db80:	00000306 	br	db90 <___vfprintf_internal_r+0xa5c>
    db84:	843ffc04 	addi	r16,r16,-16
    db88:	42000204 	addi	r8,r8,8
    db8c:	8c00130e 	bge	r17,r16,dbdc <___vfprintf_internal_r+0xaa8>
    db90:	010000b4 	movhi	r4,2
    db94:	18c00404 	addi	r3,r3,16
    db98:	10800044 	addi	r2,r2,1
    db9c:	21310984 	addi	r4,r4,-15322
    dba0:	41000015 	stw	r4,0(r8)
    dba4:	44400115 	stw	r17,4(r8)
    dba8:	d8c02015 	stw	r3,128(sp)
    dbac:	d8801f15 	stw	r2,124(sp)
    dbb0:	90bff40e 	bge	r18,r2,db84 <__alt_data_end+0xfc00db84>
    dbb4:	d9801e04 	addi	r6,sp,120
    dbb8:	b80b883a 	mov	r5,r23
    dbbc:	9809883a 	mov	r4,r19
    dbc0:	0014a940 	call	14a94 <__sprint_r>
    dbc4:	103e5f1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    dbc8:	843ffc04 	addi	r16,r16,-16
    dbcc:	d8c02017 	ldw	r3,128(sp)
    dbd0:	d8801f17 	ldw	r2,124(sp)
    dbd4:	da000404 	addi	r8,sp,16
    dbd8:	8c3fed16 	blt	r17,r16,db90 <__alt_data_end+0xfc00db90>
    dbdc:	d9403517 	ldw	r5,212(sp)
    dbe0:	1c07883a 	add	r3,r3,r16
    dbe4:	10800044 	addi	r2,r2,1
    dbe8:	41400015 	stw	r5,0(r8)
    dbec:	44000115 	stw	r16,4(r8)
    dbf0:	d8c02015 	stw	r3,128(sp)
    dbf4:	d8801f15 	stw	r2,124(sp)
    dbf8:	010001c4 	movi	r4,7
    dbfc:	2080060e 	bge	r4,r2,dc18 <___vfprintf_internal_r+0xae4>
    dc00:	d9002d17 	ldw	r4,180(sp)
    dc04:	d9801e04 	addi	r6,sp,120
    dc08:	b80b883a 	mov	r5,r23
    dc0c:	0014a940 	call	14a94 <__sprint_r>
    dc10:	103e4c1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    dc14:	d8c02017 	ldw	r3,128(sp)
    dc18:	d8803117 	ldw	r2,196(sp)
    dc1c:	d9002917 	ldw	r4,164(sp)
    dc20:	1100010e 	bge	r2,r4,dc28 <___vfprintf_internal_r+0xaf4>
    dc24:	2005883a 	mov	r2,r4
    dc28:	d9402f17 	ldw	r5,188(sp)
    dc2c:	288b883a 	add	r5,r5,r2
    dc30:	d9402f15 	stw	r5,188(sp)
    dc34:	1801c01e 	bne	r3,zero,e338 <___vfprintf_internal_r+0x1204>
    dc38:	a8800007 	ldb	r2,0(r21)
    dc3c:	d8001f15 	stw	zero,124(sp)
    dc40:	da000404 	addi	r8,sp,16
    dc44:	103d751e 	bne	r2,zero,d21c <__alt_data_end+0xfc00d21c>
    dc48:	a823883a 	mov	r17,r21
    dc4c:	003d8b06 	br	d27c <__alt_data_end+0xfc00d27c>
    dc50:	8025883a 	mov	r18,r16
    dc54:	dc002903 	ldbu	r16,164(sp)
    dc58:	e011883a 	mov	r8,fp
    dc5c:	84003fcc 	andi	r16,r16,255
    dc60:	8005e51e 	bne	r16,zero,f3f8 <___vfprintf_internal_r+0x22c4>
    dc64:	94800414 	ori	r18,r18,16
    dc68:	9080080c 	andi	r2,r18,32
    dc6c:	10022b26 	beq	r2,zero,e51c <___vfprintf_internal_r+0x13e8>
    dc70:	d9002e17 	ldw	r4,184(sp)
    dc74:	d9402a17 	ldw	r5,168(sp)
    dc78:	d8002785 	stb	zero,158(sp)
    dc7c:	20c00204 	addi	r3,r4,8
    dc80:	24c00017 	ldw	r19,0(r4)
    dc84:	25800117 	ldw	r22,4(r4)
    dc88:	28042e16 	blt	r5,zero,ed44 <___vfprintf_internal_r+0x1c10>
    dc8c:	013fdfc4 	movi	r4,-129
    dc90:	9d84b03a 	or	r2,r19,r22
    dc94:	d8c02e15 	stw	r3,184(sp)
    dc98:	9124703a 	and	r18,r18,r4
    dc9c:	0039883a 	mov	fp,zero
    dca0:	103e801e 	bne	r2,zero,d6a4 <__alt_data_end+0xfc00d6a4>
    dca4:	d9002a17 	ldw	r4,168(sp)
    dca8:	2002e01e 	bne	r4,zero,e82c <___vfprintf_internal_r+0x16f8>
    dcac:	d8002a15 	stw	zero,168(sp)
    dcb0:	d8002b15 	stw	zero,172(sp)
    dcb4:	dc001e04 	addi	r16,sp,120
    dcb8:	003ef506 	br	d890 <__alt_data_end+0xfc00d890>
    dcbc:	8025883a 	mov	r18,r16
    dcc0:	dc002903 	ldbu	r16,164(sp)
    dcc4:	e011883a 	mov	r8,fp
    dcc8:	84003fcc 	andi	r16,r16,255
    dccc:	8005ba1e 	bne	r16,zero,f3b8 <___vfprintf_internal_r+0x2284>
    dcd0:	010000b4 	movhi	r4,2
    dcd4:	2130f904 	addi	r4,r4,-15388
    dcd8:	d9003915 	stw	r4,228(sp)
    dcdc:	9080080c 	andi	r2,r18,32
    dce0:	10006126 	beq	r2,zero,de68 <___vfprintf_internal_r+0xd34>
    dce4:	d9402e17 	ldw	r5,184(sp)
    dce8:	2cc00017 	ldw	r19,0(r5)
    dcec:	2d800117 	ldw	r22,4(r5)
    dcf0:	29400204 	addi	r5,r5,8
    dcf4:	d9402e15 	stw	r5,184(sp)
    dcf8:	9080004c 	andi	r2,r18,1
    dcfc:	1001ac26 	beq	r2,zero,e3b0 <___vfprintf_internal_r+0x127c>
    dd00:	9d84b03a 	or	r2,r19,r22
    dd04:	10038526 	beq	r2,zero,eb1c <___vfprintf_internal_r+0x19e8>
    dd08:	d8c02a17 	ldw	r3,168(sp)
    dd0c:	00800c04 	movi	r2,48
    dd10:	d8802705 	stb	r2,156(sp)
    dd14:	dc402745 	stb	r17,157(sp)
    dd18:	d8002785 	stb	zero,158(sp)
    dd1c:	90800094 	ori	r2,r18,2
    dd20:	18047916 	blt	r3,zero,ef08 <___vfprintf_internal_r+0x1dd4>
    dd24:	00bfdfc4 	movi	r2,-129
    dd28:	90a4703a 	and	r18,r18,r2
    dd2c:	94800094 	ori	r18,r18,2
    dd30:	0039883a 	mov	fp,zero
    dd34:	d9003917 	ldw	r4,228(sp)
    dd38:	dc001e04 	addi	r16,sp,120
    dd3c:	988003cc 	andi	r2,r19,15
    dd40:	b006973a 	slli	r3,r22,28
    dd44:	2085883a 	add	r2,r4,r2
    dd48:	9826d13a 	srli	r19,r19,4
    dd4c:	10800003 	ldbu	r2,0(r2)
    dd50:	b02cd13a 	srli	r22,r22,4
    dd54:	843fffc4 	addi	r16,r16,-1
    dd58:	1ce6b03a 	or	r19,r3,r19
    dd5c:	80800005 	stb	r2,0(r16)
    dd60:	9d84b03a 	or	r2,r19,r22
    dd64:	103ff51e 	bne	r2,zero,dd3c <__alt_data_end+0xfc00dd3c>
    dd68:	d8c02817 	ldw	r3,160(sp)
    dd6c:	1c07c83a 	sub	r3,r3,r16
    dd70:	d8c02b15 	stw	r3,172(sp)
    dd74:	003ec606 	br	d890 <__alt_data_end+0xfc00d890>
    dd78:	8025883a 	mov	r18,r16
    dd7c:	dc002903 	ldbu	r16,164(sp)
    dd80:	e011883a 	mov	r8,fp
    dd84:	84003fcc 	andi	r16,r16,255
    dd88:	803e9626 	beq	r16,zero,d7e4 <__alt_data_end+0xfc00d7e4>
    dd8c:	d8c02b03 	ldbu	r3,172(sp)
    dd90:	d8c02785 	stb	r3,158(sp)
    dd94:	003e9306 	br	d7e4 <__alt_data_end+0xfc00d7e4>
    dd98:	00c00044 	movi	r3,1
    dd9c:	d8c02905 	stb	r3,164(sp)
    dda0:	00c00ac4 	movi	r3,43
    dda4:	d8c02b05 	stb	r3,172(sp)
    dda8:	ac400007 	ldb	r17,0(r21)
    ddac:	003d4306 	br	d2bc <__alt_data_end+0xfc00d2bc>
    ddb0:	84000814 	ori	r16,r16,32
    ddb4:	ac400007 	ldb	r17,0(r21)
    ddb8:	003d4006 	br	d2bc <__alt_data_end+0xfc00d2bc>
    ddbc:	d8802e17 	ldw	r2,184(sp)
    ddc0:	8025883a 	mov	r18,r16
    ddc4:	d8002785 	stb	zero,158(sp)
    ddc8:	14000017 	ldw	r16,0(r2)
    ddcc:	e011883a 	mov	r8,fp
    ddd0:	14c00104 	addi	r19,r2,4
    ddd4:	80042d26 	beq	r16,zero,ee8c <___vfprintf_internal_r+0x1d58>
    ddd8:	d8c02a17 	ldw	r3,168(sp)
    dddc:	1803e416 	blt	r3,zero,ed70 <___vfprintf_internal_r+0x1c3c>
    dde0:	180d883a 	mov	r6,r3
    dde4:	000b883a 	mov	r5,zero
    dde8:	8009883a 	mov	r4,r16
    ddec:	df003d15 	stw	fp,244(sp)
    ddf0:	0012bec0 	call	12bec <memchr>
    ddf4:	da003d17 	ldw	r8,244(sp)
    ddf8:	10046826 	beq	r2,zero,ef9c <___vfprintf_internal_r+0x1e68>
    ddfc:	1405c83a 	sub	r2,r2,r16
    de00:	d8802b15 	stw	r2,172(sp)
    de04:	1003e016 	blt	r2,zero,ed88 <___vfprintf_internal_r+0x1c54>
    de08:	df002783 	ldbu	fp,158(sp)
    de0c:	d8802915 	stw	r2,164(sp)
    de10:	dcc02e15 	stw	r19,184(sp)
    de14:	d8002a15 	stw	zero,168(sp)
    de18:	d8003215 	stw	zero,200(sp)
    de1c:	003ea206 	br	d8a8 <__alt_data_end+0xfc00d8a8>
    de20:	8025883a 	mov	r18,r16
    de24:	dc002903 	ldbu	r16,164(sp)
    de28:	e011883a 	mov	r8,fp
    de2c:	84003fcc 	andi	r16,r16,255
    de30:	803f8d26 	beq	r16,zero,dc68 <__alt_data_end+0xfc00dc68>
    de34:	d8c02b03 	ldbu	r3,172(sp)
    de38:	d8c02785 	stb	r3,158(sp)
    de3c:	003f8a06 	br	dc68 <__alt_data_end+0xfc00dc68>
    de40:	8025883a 	mov	r18,r16
    de44:	dc002903 	ldbu	r16,164(sp)
    de48:	e011883a 	mov	r8,fp
    de4c:	84003fcc 	andi	r16,r16,255
    de50:	8005661e 	bne	r16,zero,f3ec <___vfprintf_internal_r+0x22b8>
    de54:	010000b4 	movhi	r4,2
    de58:	2130fe04 	addi	r4,r4,-15368
    de5c:	d9003915 	stw	r4,228(sp)
    de60:	9080080c 	andi	r2,r18,32
    de64:	103f9f1e 	bne	r2,zero,dce4 <__alt_data_end+0xfc00dce4>
    de68:	9080040c 	andi	r2,r18,16
    de6c:	1002eb26 	beq	r2,zero,ea1c <___vfprintf_internal_r+0x18e8>
    de70:	d8802e17 	ldw	r2,184(sp)
    de74:	002d883a 	mov	r22,zero
    de78:	14c00017 	ldw	r19,0(r2)
    de7c:	10800104 	addi	r2,r2,4
    de80:	d8802e15 	stw	r2,184(sp)
    de84:	003f9c06 	br	dcf8 <__alt_data_end+0xfc00dcf8>
    de88:	d8802b07 	ldb	r2,172(sp)
    de8c:	1002e11e 	bne	r2,zero,ea14 <___vfprintf_internal_r+0x18e0>
    de90:	00c00044 	movi	r3,1
    de94:	d8c02905 	stb	r3,164(sp)
    de98:	00c00804 	movi	r3,32
    de9c:	d8c02b05 	stb	r3,172(sp)
    dea0:	ac400007 	ldb	r17,0(r21)
    dea4:	003d0506 	br	d2bc <__alt_data_end+0xfc00d2bc>
    dea8:	84000054 	ori	r16,r16,1
    deac:	ac400007 	ldb	r17,0(r21)
    deb0:	003d0206 	br	d2bc <__alt_data_end+0xfc00d2bc>
    deb4:	8025883a 	mov	r18,r16
    deb8:	dc002903 	ldbu	r16,164(sp)
    debc:	e011883a 	mov	r8,fp
    dec0:	84003fcc 	andi	r16,r16,255
    dec4:	803de726 	beq	r16,zero,d664 <__alt_data_end+0xfc00d664>
    dec8:	d8c02b03 	ldbu	r3,172(sp)
    decc:	d8c02785 	stb	r3,158(sp)
    ded0:	003de406 	br	d664 <__alt_data_end+0xfc00d664>
    ded4:	84001014 	ori	r16,r16,64
    ded8:	ac400007 	ldb	r17,0(r21)
    dedc:	003cf706 	br	d2bc <__alt_data_end+0xfc00d2bc>
    dee0:	ac400007 	ldb	r17,0(r21)
    dee4:	00801b04 	movi	r2,108
    dee8:	88838f26 	beq	r17,r2,ed28 <___vfprintf_internal_r+0x1bf4>
    deec:	84000414 	ori	r16,r16,16
    def0:	003cf206 	br	d2bc <__alt_data_end+0xfc00d2bc>
    def4:	8025883a 	mov	r18,r16
    def8:	dc002903 	ldbu	r16,164(sp)
    defc:	e011883a 	mov	r8,fp
    df00:	84003fcc 	andi	r16,r16,255
    df04:	80053f1e 	bne	r16,zero,f404 <___vfprintf_internal_r+0x22d0>
    df08:	9080080c 	andi	r2,r18,32
    df0c:	1002d226 	beq	r2,zero,ea58 <___vfprintf_internal_r+0x1924>
    df10:	d9002e17 	ldw	r4,184(sp)
    df14:	d9402f17 	ldw	r5,188(sp)
    df18:	20800017 	ldw	r2,0(r4)
    df1c:	2807d7fa 	srai	r3,r5,31
    df20:	21000104 	addi	r4,r4,4
    df24:	d9002e15 	stw	r4,184(sp)
    df28:	11400015 	stw	r5,0(r2)
    df2c:	10c00115 	stw	r3,4(r2)
    df30:	003cb806 	br	d214 <__alt_data_end+0xfc00d214>
    df34:	d8c02e17 	ldw	r3,184(sp)
    df38:	d9002e17 	ldw	r4,184(sp)
    df3c:	8025883a 	mov	r18,r16
    df40:	18800017 	ldw	r2,0(r3)
    df44:	21000104 	addi	r4,r4,4
    df48:	00c00044 	movi	r3,1
    df4c:	e011883a 	mov	r8,fp
    df50:	d8c02915 	stw	r3,164(sp)
    df54:	d8002785 	stb	zero,158(sp)
    df58:	d8801405 	stb	r2,80(sp)
    df5c:	d9002e15 	stw	r4,184(sp)
    df60:	d8c02b15 	stw	r3,172(sp)
    df64:	d8002a15 	stw	zero,168(sp)
    df68:	d8003215 	stw	zero,200(sp)
    df6c:	dc001404 	addi	r16,sp,80
    df70:	0039883a 	mov	fp,zero
    df74:	003e5306 	br	d8c4 <__alt_data_end+0xfc00d8c4>
    df78:	010000b4 	movhi	r4,2
    df7c:	2130fe04 	addi	r4,r4,-15368
    df80:	0039883a 	mov	fp,zero
    df84:	d9003915 	stw	r4,228(sp)
    df88:	04401e04 	movi	r17,120
    df8c:	003f6906 	br	dd34 <__alt_data_end+0xfc00dd34>
    df90:	8025883a 	mov	r18,r16
    df94:	dc002903 	ldbu	r16,164(sp)
    df98:	e011883a 	mov	r8,fp
    df9c:	84003fcc 	andi	r16,r16,255
    dfa0:	8005081e 	bne	r16,zero,f3c4 <___vfprintf_internal_r+0x2290>
    dfa4:	883d6126 	beq	r17,zero,d52c <__alt_data_end+0xfc00d52c>
    dfa8:	00c00044 	movi	r3,1
    dfac:	d8c02915 	stw	r3,164(sp)
    dfb0:	dc401405 	stb	r17,80(sp)
    dfb4:	d8002785 	stb	zero,158(sp)
    dfb8:	003fe906 	br	df60 <__alt_data_end+0xfc00df60>
    dfbc:	014000b4 	movhi	r5,2
    dfc0:	2970fe04 	addi	r5,r5,-15368
    dfc4:	d9403915 	stw	r5,228(sp)
    dfc8:	d8c02e15 	stw	r3,184(sp)
    dfcc:	1025883a 	mov	r18,r2
    dfd0:	04401e04 	movi	r17,120
    dfd4:	9d84b03a 	or	r2,r19,r22
    dfd8:	1000fc1e 	bne	r2,zero,e3cc <___vfprintf_internal_r+0x1298>
    dfdc:	0039883a 	mov	fp,zero
    dfe0:	00800084 	movi	r2,2
    dfe4:	10803fcc 	andi	r2,r2,255
    dfe8:	00c00044 	movi	r3,1
    dfec:	10c20f26 	beq	r2,r3,e82c <___vfprintf_internal_r+0x16f8>
    dff0:	00c00084 	movi	r3,2
    dff4:	10fd3326 	beq	r2,r3,d4c4 <__alt_data_end+0xfc00d4c4>
    dff8:	003e0b06 	br	d828 <__alt_data_end+0xfc00d828>
    dffc:	d8c02017 	ldw	r3,128(sp)
    e000:	003e7106 	br	d9c8 <__alt_data_end+0xfc00d9c8>
    e004:	00801944 	movi	r2,101
    e008:	14407e0e 	bge	r2,r17,e204 <___vfprintf_internal_r+0x10d0>
    e00c:	d9003617 	ldw	r4,216(sp)
    e010:	d9403817 	ldw	r5,224(sp)
    e014:	000d883a 	mov	r6,zero
    e018:	000f883a 	mov	r7,zero
    e01c:	d8c03c15 	stw	r3,240(sp)
    e020:	da003d15 	stw	r8,244(sp)
    e024:	00188180 	call	18818 <__eqdf2>
    e028:	d8c03c17 	ldw	r3,240(sp)
    e02c:	da003d17 	ldw	r8,244(sp)
    e030:	1000f71e 	bne	r2,zero,e410 <___vfprintf_internal_r+0x12dc>
    e034:	d8801f17 	ldw	r2,124(sp)
    e038:	010000b4 	movhi	r4,2
    e03c:	21310504 	addi	r4,r4,-15340
    e040:	18c00044 	addi	r3,r3,1
    e044:	10800044 	addi	r2,r2,1
    e048:	41000015 	stw	r4,0(r8)
    e04c:	01000044 	movi	r4,1
    e050:	41000115 	stw	r4,4(r8)
    e054:	d8c02015 	stw	r3,128(sp)
    e058:	d8801f15 	stw	r2,124(sp)
    e05c:	010001c4 	movi	r4,7
    e060:	2082b816 	blt	r4,r2,eb44 <___vfprintf_internal_r+0x1a10>
    e064:	42000204 	addi	r8,r8,8
    e068:	d8802617 	ldw	r2,152(sp)
    e06c:	d9403317 	ldw	r5,204(sp)
    e070:	11400216 	blt	r2,r5,e07c <___vfprintf_internal_r+0xf48>
    e074:	9080004c 	andi	r2,r18,1
    e078:	103eb326 	beq	r2,zero,db48 <__alt_data_end+0xfc00db48>
    e07c:	d8803717 	ldw	r2,220(sp)
    e080:	d9003417 	ldw	r4,208(sp)
    e084:	d9403717 	ldw	r5,220(sp)
    e088:	1887883a 	add	r3,r3,r2
    e08c:	d8801f17 	ldw	r2,124(sp)
    e090:	41000015 	stw	r4,0(r8)
    e094:	41400115 	stw	r5,4(r8)
    e098:	10800044 	addi	r2,r2,1
    e09c:	d8c02015 	stw	r3,128(sp)
    e0a0:	d8801f15 	stw	r2,124(sp)
    e0a4:	010001c4 	movi	r4,7
    e0a8:	20832916 	blt	r4,r2,ed50 <___vfprintf_internal_r+0x1c1c>
    e0ac:	42000204 	addi	r8,r8,8
    e0b0:	d8803317 	ldw	r2,204(sp)
    e0b4:	143fffc4 	addi	r16,r2,-1
    e0b8:	043ea30e 	bge	zero,r16,db48 <__alt_data_end+0xfc00db48>
    e0bc:	04400404 	movi	r17,16
    e0c0:	d8801f17 	ldw	r2,124(sp)
    e0c4:	8c00880e 	bge	r17,r16,e2e8 <___vfprintf_internal_r+0x11b4>
    e0c8:	014000b4 	movhi	r5,2
    e0cc:	29710584 	addi	r5,r5,-15338
    e0d0:	d9402c15 	stw	r5,176(sp)
    e0d4:	058001c4 	movi	r22,7
    e0d8:	dcc02d17 	ldw	r19,180(sp)
    e0dc:	00000306 	br	e0ec <___vfprintf_internal_r+0xfb8>
    e0e0:	42000204 	addi	r8,r8,8
    e0e4:	843ffc04 	addi	r16,r16,-16
    e0e8:	8c00820e 	bge	r17,r16,e2f4 <___vfprintf_internal_r+0x11c0>
    e0ec:	18c00404 	addi	r3,r3,16
    e0f0:	10800044 	addi	r2,r2,1
    e0f4:	45000015 	stw	r20,0(r8)
    e0f8:	44400115 	stw	r17,4(r8)
    e0fc:	d8c02015 	stw	r3,128(sp)
    e100:	d8801f15 	stw	r2,124(sp)
    e104:	b0bff60e 	bge	r22,r2,e0e0 <__alt_data_end+0xfc00e0e0>
    e108:	d9801e04 	addi	r6,sp,120
    e10c:	b80b883a 	mov	r5,r23
    e110:	9809883a 	mov	r4,r19
    e114:	0014a940 	call	14a94 <__sprint_r>
    e118:	103d0a1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e11c:	d8c02017 	ldw	r3,128(sp)
    e120:	d8801f17 	ldw	r2,124(sp)
    e124:	da000404 	addi	r8,sp,16
    e128:	003fee06 	br	e0e4 <__alt_data_end+0xfc00e0e4>
    e12c:	d9403117 	ldw	r5,196(sp)
    e130:	d8802917 	ldw	r2,164(sp)
    e134:	28adc83a 	sub	r22,r5,r2
    e138:	05be410e 	bge	zero,r22,da40 <__alt_data_end+0xfc00da40>
    e13c:	07000404 	movi	fp,16
    e140:	d8801f17 	ldw	r2,124(sp)
    e144:	e5838f0e 	bge	fp,r22,ef84 <___vfprintf_internal_r+0x1e50>
    e148:	014000b4 	movhi	r5,2
    e14c:	29710584 	addi	r5,r5,-15338
    e150:	dc403015 	stw	r17,192(sp)
    e154:	d9402c15 	stw	r5,176(sp)
    e158:	b023883a 	mov	r17,r22
    e15c:	04c001c4 	movi	r19,7
    e160:	a82d883a 	mov	r22,r21
    e164:	902b883a 	mov	r21,r18
    e168:	8025883a 	mov	r18,r16
    e16c:	dc002d17 	ldw	r16,180(sp)
    e170:	00000306 	br	e180 <___vfprintf_internal_r+0x104c>
    e174:	8c7ffc04 	addi	r17,r17,-16
    e178:	42000204 	addi	r8,r8,8
    e17c:	e440110e 	bge	fp,r17,e1c4 <___vfprintf_internal_r+0x1090>
    e180:	18c00404 	addi	r3,r3,16
    e184:	10800044 	addi	r2,r2,1
    e188:	45000015 	stw	r20,0(r8)
    e18c:	47000115 	stw	fp,4(r8)
    e190:	d8c02015 	stw	r3,128(sp)
    e194:	d8801f15 	stw	r2,124(sp)
    e198:	98bff60e 	bge	r19,r2,e174 <__alt_data_end+0xfc00e174>
    e19c:	d9801e04 	addi	r6,sp,120
    e1a0:	b80b883a 	mov	r5,r23
    e1a4:	8009883a 	mov	r4,r16
    e1a8:	0014a940 	call	14a94 <__sprint_r>
    e1ac:	103ce51e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e1b0:	8c7ffc04 	addi	r17,r17,-16
    e1b4:	d8c02017 	ldw	r3,128(sp)
    e1b8:	d8801f17 	ldw	r2,124(sp)
    e1bc:	da000404 	addi	r8,sp,16
    e1c0:	e47fef16 	blt	fp,r17,e180 <__alt_data_end+0xfc00e180>
    e1c4:	9021883a 	mov	r16,r18
    e1c8:	a825883a 	mov	r18,r21
    e1cc:	b02b883a 	mov	r21,r22
    e1d0:	882d883a 	mov	r22,r17
    e1d4:	dc403017 	ldw	r17,192(sp)
    e1d8:	d9002c17 	ldw	r4,176(sp)
    e1dc:	1d87883a 	add	r3,r3,r22
    e1e0:	10800044 	addi	r2,r2,1
    e1e4:	41000015 	stw	r4,0(r8)
    e1e8:	45800115 	stw	r22,4(r8)
    e1ec:	d8c02015 	stw	r3,128(sp)
    e1f0:	d8801f15 	stw	r2,124(sp)
    e1f4:	010001c4 	movi	r4,7
    e1f8:	20818e16 	blt	r4,r2,e834 <___vfprintf_internal_r+0x1700>
    e1fc:	42000204 	addi	r8,r8,8
    e200:	003e0f06 	br	da40 <__alt_data_end+0xfc00da40>
    e204:	d9403317 	ldw	r5,204(sp)
    e208:	00800044 	movi	r2,1
    e20c:	18c00044 	addi	r3,r3,1
    e210:	1141530e 	bge	r2,r5,e760 <___vfprintf_internal_r+0x162c>
    e214:	dc401f17 	ldw	r17,124(sp)
    e218:	00800044 	movi	r2,1
    e21c:	40800115 	stw	r2,4(r8)
    e220:	8c400044 	addi	r17,r17,1
    e224:	44000015 	stw	r16,0(r8)
    e228:	d8c02015 	stw	r3,128(sp)
    e22c:	dc401f15 	stw	r17,124(sp)
    e230:	008001c4 	movi	r2,7
    e234:	14416b16 	blt	r2,r17,e7e4 <___vfprintf_internal_r+0x16b0>
    e238:	42000204 	addi	r8,r8,8
    e23c:	d8803717 	ldw	r2,220(sp)
    e240:	d9003417 	ldw	r4,208(sp)
    e244:	8c400044 	addi	r17,r17,1
    e248:	10c7883a 	add	r3,r2,r3
    e24c:	40800115 	stw	r2,4(r8)
    e250:	41000015 	stw	r4,0(r8)
    e254:	d8c02015 	stw	r3,128(sp)
    e258:	dc401f15 	stw	r17,124(sp)
    e25c:	008001c4 	movi	r2,7
    e260:	14416916 	blt	r2,r17,e808 <___vfprintf_internal_r+0x16d4>
    e264:	45800204 	addi	r22,r8,8
    e268:	d9003617 	ldw	r4,216(sp)
    e26c:	d9403817 	ldw	r5,224(sp)
    e270:	000d883a 	mov	r6,zero
    e274:	000f883a 	mov	r7,zero
    e278:	d8c03c15 	stw	r3,240(sp)
    e27c:	00188180 	call	18818 <__eqdf2>
    e280:	d8c03c17 	ldw	r3,240(sp)
    e284:	1000bc26 	beq	r2,zero,e578 <___vfprintf_internal_r+0x1444>
    e288:	d9403317 	ldw	r5,204(sp)
    e28c:	84000044 	addi	r16,r16,1
    e290:	8c400044 	addi	r17,r17,1
    e294:	28bfffc4 	addi	r2,r5,-1
    e298:	1887883a 	add	r3,r3,r2
    e29c:	b0800115 	stw	r2,4(r22)
    e2a0:	b4000015 	stw	r16,0(r22)
    e2a4:	d8c02015 	stw	r3,128(sp)
    e2a8:	dc401f15 	stw	r17,124(sp)
    e2ac:	008001c4 	movi	r2,7
    e2b0:	14414316 	blt	r2,r17,e7c0 <___vfprintf_internal_r+0x168c>
    e2b4:	b5800204 	addi	r22,r22,8
    e2b8:	d9003a17 	ldw	r4,232(sp)
    e2bc:	df0022c4 	addi	fp,sp,139
    e2c0:	8c400044 	addi	r17,r17,1
    e2c4:	20c7883a 	add	r3,r4,r3
    e2c8:	b7000015 	stw	fp,0(r22)
    e2cc:	b1000115 	stw	r4,4(r22)
    e2d0:	d8c02015 	stw	r3,128(sp)
    e2d4:	dc401f15 	stw	r17,124(sp)
    e2d8:	008001c4 	movi	r2,7
    e2dc:	14400e16 	blt	r2,r17,e318 <___vfprintf_internal_r+0x11e4>
    e2e0:	b2000204 	addi	r8,r22,8
    e2e4:	003e1806 	br	db48 <__alt_data_end+0xfc00db48>
    e2e8:	010000b4 	movhi	r4,2
    e2ec:	21310584 	addi	r4,r4,-15338
    e2f0:	d9002c15 	stw	r4,176(sp)
    e2f4:	d9002c17 	ldw	r4,176(sp)
    e2f8:	1c07883a 	add	r3,r3,r16
    e2fc:	44000115 	stw	r16,4(r8)
    e300:	41000015 	stw	r4,0(r8)
    e304:	10800044 	addi	r2,r2,1
    e308:	d8c02015 	stw	r3,128(sp)
    e30c:	d8801f15 	stw	r2,124(sp)
    e310:	010001c4 	movi	r4,7
    e314:	20be0b0e 	bge	r4,r2,db44 <__alt_data_end+0xfc00db44>
    e318:	d9002d17 	ldw	r4,180(sp)
    e31c:	d9801e04 	addi	r6,sp,120
    e320:	b80b883a 	mov	r5,r23
    e324:	0014a940 	call	14a94 <__sprint_r>
    e328:	103c861e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e32c:	d8c02017 	ldw	r3,128(sp)
    e330:	da000404 	addi	r8,sp,16
    e334:	003e0406 	br	db48 <__alt_data_end+0xfc00db48>
    e338:	d9002d17 	ldw	r4,180(sp)
    e33c:	d9801e04 	addi	r6,sp,120
    e340:	b80b883a 	mov	r5,r23
    e344:	0014a940 	call	14a94 <__sprint_r>
    e348:	103e3b26 	beq	r2,zero,dc38 <__alt_data_end+0xfc00dc38>
    e34c:	003c7d06 	br	d544 <__alt_data_end+0xfc00d544>
    e350:	d9002d17 	ldw	r4,180(sp)
    e354:	d9801e04 	addi	r6,sp,120
    e358:	b80b883a 	mov	r5,r23
    e35c:	0014a940 	call	14a94 <__sprint_r>
    e360:	103c781e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e364:	d8c02017 	ldw	r3,128(sp)
    e368:	da000404 	addi	r8,sp,16
    e36c:	003de906 	br	db14 <__alt_data_end+0xfc00db14>
    e370:	d9002d17 	ldw	r4,180(sp)
    e374:	d9801e04 	addi	r6,sp,120
    e378:	b80b883a 	mov	r5,r23
    e37c:	0014a940 	call	14a94 <__sprint_r>
    e380:	103c701e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e384:	d8c02017 	ldw	r3,128(sp)
    e388:	da000404 	addi	r8,sp,16
    e38c:	003d9b06 	br	d9fc <__alt_data_end+0xfc00d9fc>
    e390:	d9002d17 	ldw	r4,180(sp)
    e394:	d9801e04 	addi	r6,sp,120
    e398:	b80b883a 	mov	r5,r23
    e39c:	0014a940 	call	14a94 <__sprint_r>
    e3a0:	103c681e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e3a4:	d8c02017 	ldw	r3,128(sp)
    e3a8:	da000404 	addi	r8,sp,16
    e3ac:	003da106 	br	da34 <__alt_data_end+0xfc00da34>
    e3b0:	d9402a17 	ldw	r5,168(sp)
    e3b4:	d8002785 	stb	zero,158(sp)
    e3b8:	283f0616 	blt	r5,zero,dfd4 <__alt_data_end+0xfc00dfd4>
    e3bc:	00ffdfc4 	movi	r3,-129
    e3c0:	9d84b03a 	or	r2,r19,r22
    e3c4:	90e4703a 	and	r18,r18,r3
    e3c8:	103c3b26 	beq	r2,zero,d4b8 <__alt_data_end+0xfc00d4b8>
    e3cc:	0039883a 	mov	fp,zero
    e3d0:	003e5806 	br	dd34 <__alt_data_end+0xfc00dd34>
    e3d4:	9080040c 	andi	r2,r18,16
    e3d8:	1001b326 	beq	r2,zero,eaa8 <___vfprintf_internal_r+0x1974>
    e3dc:	d8c02e17 	ldw	r3,184(sp)
    e3e0:	d9002a17 	ldw	r4,168(sp)
    e3e4:	d8002785 	stb	zero,158(sp)
    e3e8:	18800104 	addi	r2,r3,4
    e3ec:	1cc00017 	ldw	r19,0(r3)
    e3f0:	002d883a 	mov	r22,zero
    e3f4:	2001b516 	blt	r4,zero,eacc <___vfprintf_internal_r+0x1998>
    e3f8:	00ffdfc4 	movi	r3,-129
    e3fc:	d8802e15 	stw	r2,184(sp)
    e400:	90e4703a 	and	r18,r18,r3
    e404:	983d0526 	beq	r19,zero,d81c <__alt_data_end+0xfc00d81c>
    e408:	0039883a 	mov	fp,zero
    e40c:	003d0806 	br	d830 <__alt_data_end+0xfc00d830>
    e410:	dc402617 	ldw	r17,152(sp)
    e414:	0441d30e 	bge	zero,r17,eb64 <___vfprintf_internal_r+0x1a30>
    e418:	dc403217 	ldw	r17,200(sp)
    e41c:	d8803317 	ldw	r2,204(sp)
    e420:	1440010e 	bge	r2,r17,e428 <___vfprintf_internal_r+0x12f4>
    e424:	1023883a 	mov	r17,r2
    e428:	04400a0e 	bge	zero,r17,e454 <___vfprintf_internal_r+0x1320>
    e42c:	d8801f17 	ldw	r2,124(sp)
    e430:	1c47883a 	add	r3,r3,r17
    e434:	44000015 	stw	r16,0(r8)
    e438:	10800044 	addi	r2,r2,1
    e43c:	44400115 	stw	r17,4(r8)
    e440:	d8c02015 	stw	r3,128(sp)
    e444:	d8801f15 	stw	r2,124(sp)
    e448:	010001c4 	movi	r4,7
    e44c:	20826516 	blt	r4,r2,ede4 <___vfprintf_internal_r+0x1cb0>
    e450:	42000204 	addi	r8,r8,8
    e454:	88026116 	blt	r17,zero,eddc <___vfprintf_internal_r+0x1ca8>
    e458:	d9003217 	ldw	r4,200(sp)
    e45c:	2463c83a 	sub	r17,r4,r17
    e460:	04407b0e 	bge	zero,r17,e650 <___vfprintf_internal_r+0x151c>
    e464:	05800404 	movi	r22,16
    e468:	d8801f17 	ldw	r2,124(sp)
    e46c:	b4419d0e 	bge	r22,r17,eae4 <___vfprintf_internal_r+0x19b0>
    e470:	010000b4 	movhi	r4,2
    e474:	21310584 	addi	r4,r4,-15338
    e478:	d9002c15 	stw	r4,176(sp)
    e47c:	070001c4 	movi	fp,7
    e480:	dcc02d17 	ldw	r19,180(sp)
    e484:	00000306 	br	e494 <___vfprintf_internal_r+0x1360>
    e488:	42000204 	addi	r8,r8,8
    e48c:	8c7ffc04 	addi	r17,r17,-16
    e490:	b441970e 	bge	r22,r17,eaf0 <___vfprintf_internal_r+0x19bc>
    e494:	18c00404 	addi	r3,r3,16
    e498:	10800044 	addi	r2,r2,1
    e49c:	45000015 	stw	r20,0(r8)
    e4a0:	45800115 	stw	r22,4(r8)
    e4a4:	d8c02015 	stw	r3,128(sp)
    e4a8:	d8801f15 	stw	r2,124(sp)
    e4ac:	e0bff60e 	bge	fp,r2,e488 <__alt_data_end+0xfc00e488>
    e4b0:	d9801e04 	addi	r6,sp,120
    e4b4:	b80b883a 	mov	r5,r23
    e4b8:	9809883a 	mov	r4,r19
    e4bc:	0014a940 	call	14a94 <__sprint_r>
    e4c0:	103c201e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e4c4:	d8c02017 	ldw	r3,128(sp)
    e4c8:	d8801f17 	ldw	r2,124(sp)
    e4cc:	da000404 	addi	r8,sp,16
    e4d0:	003fee06 	br	e48c <__alt_data_end+0xfc00e48c>
    e4d4:	d9002d17 	ldw	r4,180(sp)
    e4d8:	d9801e04 	addi	r6,sp,120
    e4dc:	b80b883a 	mov	r5,r23
    e4e0:	0014a940 	call	14a94 <__sprint_r>
    e4e4:	103c171e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e4e8:	d8c02017 	ldw	r3,128(sp)
    e4ec:	df002787 	ldb	fp,158(sp)
    e4f0:	da000404 	addi	r8,sp,16
    e4f4:	003d3406 	br	d9c8 <__alt_data_end+0xfc00d9c8>
    e4f8:	9080040c 	andi	r2,r18,16
    e4fc:	10016126 	beq	r2,zero,ea84 <___vfprintf_internal_r+0x1950>
    e500:	d9402e17 	ldw	r5,184(sp)
    e504:	2cc00017 	ldw	r19,0(r5)
    e508:	29400104 	addi	r5,r5,4
    e50c:	d9402e15 	stw	r5,184(sp)
    e510:	982dd7fa 	srai	r22,r19,31
    e514:	b005883a 	mov	r2,r22
    e518:	003c5a06 	br	d684 <__alt_data_end+0xfc00d684>
    e51c:	9080040c 	andi	r2,r18,16
    e520:	10003526 	beq	r2,zero,e5f8 <___vfprintf_internal_r+0x14c4>
    e524:	d8c02e17 	ldw	r3,184(sp)
    e528:	d9002a17 	ldw	r4,168(sp)
    e52c:	d8002785 	stb	zero,158(sp)
    e530:	18800104 	addi	r2,r3,4
    e534:	1cc00017 	ldw	r19,0(r3)
    e538:	002d883a 	mov	r22,zero
    e53c:	20003716 	blt	r4,zero,e61c <___vfprintf_internal_r+0x14e8>
    e540:	00ffdfc4 	movi	r3,-129
    e544:	d8802e15 	stw	r2,184(sp)
    e548:	90e4703a 	and	r18,r18,r3
    e54c:	0039883a 	mov	fp,zero
    e550:	983dd426 	beq	r19,zero,dca4 <__alt_data_end+0xfc00dca4>
    e554:	00800244 	movi	r2,9
    e558:	14fc5336 	bltu	r2,r19,d6a8 <__alt_data_end+0xfc00d6a8>
    e55c:	d8c02817 	ldw	r3,160(sp)
    e560:	dc001dc4 	addi	r16,sp,119
    e564:	9cc00c04 	addi	r19,r19,48
    e568:	1c07c83a 	sub	r3,r3,r16
    e56c:	dcc01dc5 	stb	r19,119(sp)
    e570:	d8c02b15 	stw	r3,172(sp)
    e574:	003cc606 	br	d890 <__alt_data_end+0xfc00d890>
    e578:	d8803317 	ldw	r2,204(sp)
    e57c:	143fffc4 	addi	r16,r2,-1
    e580:	043f4d0e 	bge	zero,r16,e2b8 <__alt_data_end+0xfc00e2b8>
    e584:	07000404 	movi	fp,16
    e588:	e400810e 	bge	fp,r16,e790 <___vfprintf_internal_r+0x165c>
    e58c:	014000b4 	movhi	r5,2
    e590:	29710584 	addi	r5,r5,-15338
    e594:	d9402c15 	stw	r5,176(sp)
    e598:	01c001c4 	movi	r7,7
    e59c:	dcc02d17 	ldw	r19,180(sp)
    e5a0:	00000306 	br	e5b0 <___vfprintf_internal_r+0x147c>
    e5a4:	b5800204 	addi	r22,r22,8
    e5a8:	843ffc04 	addi	r16,r16,-16
    e5ac:	e4007b0e 	bge	fp,r16,e79c <___vfprintf_internal_r+0x1668>
    e5b0:	18c00404 	addi	r3,r3,16
    e5b4:	8c400044 	addi	r17,r17,1
    e5b8:	b5000015 	stw	r20,0(r22)
    e5bc:	b7000115 	stw	fp,4(r22)
    e5c0:	d8c02015 	stw	r3,128(sp)
    e5c4:	dc401f15 	stw	r17,124(sp)
    e5c8:	3c7ff60e 	bge	r7,r17,e5a4 <__alt_data_end+0xfc00e5a4>
    e5cc:	d9801e04 	addi	r6,sp,120
    e5d0:	b80b883a 	mov	r5,r23
    e5d4:	9809883a 	mov	r4,r19
    e5d8:	d9c03c15 	stw	r7,240(sp)
    e5dc:	0014a940 	call	14a94 <__sprint_r>
    e5e0:	d9c03c17 	ldw	r7,240(sp)
    e5e4:	103bd71e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e5e8:	d8c02017 	ldw	r3,128(sp)
    e5ec:	dc401f17 	ldw	r17,124(sp)
    e5f0:	dd800404 	addi	r22,sp,16
    e5f4:	003fec06 	br	e5a8 <__alt_data_end+0xfc00e5a8>
    e5f8:	9080100c 	andi	r2,r18,64
    e5fc:	d8002785 	stb	zero,158(sp)
    e600:	10010e26 	beq	r2,zero,ea3c <___vfprintf_internal_r+0x1908>
    e604:	d9402e17 	ldw	r5,184(sp)
    e608:	d8c02a17 	ldw	r3,168(sp)
    e60c:	002d883a 	mov	r22,zero
    e610:	28800104 	addi	r2,r5,4
    e614:	2cc0000b 	ldhu	r19,0(r5)
    e618:	183fc90e 	bge	r3,zero,e540 <__alt_data_end+0xfc00e540>
    e61c:	d8802e15 	stw	r2,184(sp)
    e620:	0039883a 	mov	fp,zero
    e624:	9d84b03a 	or	r2,r19,r22
    e628:	103c1e1e 	bne	r2,zero,d6a4 <__alt_data_end+0xfc00d6a4>
    e62c:	00800044 	movi	r2,1
    e630:	003e6c06 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e634:	d9002d17 	ldw	r4,180(sp)
    e638:	d9801e04 	addi	r6,sp,120
    e63c:	b80b883a 	mov	r5,r23
    e640:	0014a940 	call	14a94 <__sprint_r>
    e644:	103bbf1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e648:	d8c02017 	ldw	r3,128(sp)
    e64c:	da000404 	addi	r8,sp,16
    e650:	d9003217 	ldw	r4,200(sp)
    e654:	d8802617 	ldw	r2,152(sp)
    e658:	d9403317 	ldw	r5,204(sp)
    e65c:	8123883a 	add	r17,r16,r4
    e660:	11400216 	blt	r2,r5,e66c <___vfprintf_internal_r+0x1538>
    e664:	9100004c 	andi	r4,r18,1
    e668:	20000d26 	beq	r4,zero,e6a0 <___vfprintf_internal_r+0x156c>
    e66c:	d9003717 	ldw	r4,220(sp)
    e670:	d9403417 	ldw	r5,208(sp)
    e674:	1907883a 	add	r3,r3,r4
    e678:	d9001f17 	ldw	r4,124(sp)
    e67c:	41400015 	stw	r5,0(r8)
    e680:	d9403717 	ldw	r5,220(sp)
    e684:	21000044 	addi	r4,r4,1
    e688:	d8c02015 	stw	r3,128(sp)
    e68c:	41400115 	stw	r5,4(r8)
    e690:	d9001f15 	stw	r4,124(sp)
    e694:	014001c4 	movi	r5,7
    e698:	2901e816 	blt	r5,r4,ee3c <___vfprintf_internal_r+0x1d08>
    e69c:	42000204 	addi	r8,r8,8
    e6a0:	d9003317 	ldw	r4,204(sp)
    e6a4:	8121883a 	add	r16,r16,r4
    e6a8:	2085c83a 	sub	r2,r4,r2
    e6ac:	8461c83a 	sub	r16,r16,r17
    e6b0:	1400010e 	bge	r2,r16,e6b8 <___vfprintf_internal_r+0x1584>
    e6b4:	1021883a 	mov	r16,r2
    e6b8:	04000a0e 	bge	zero,r16,e6e4 <___vfprintf_internal_r+0x15b0>
    e6bc:	d9001f17 	ldw	r4,124(sp)
    e6c0:	1c07883a 	add	r3,r3,r16
    e6c4:	44400015 	stw	r17,0(r8)
    e6c8:	21000044 	addi	r4,r4,1
    e6cc:	44000115 	stw	r16,4(r8)
    e6d0:	d8c02015 	stw	r3,128(sp)
    e6d4:	d9001f15 	stw	r4,124(sp)
    e6d8:	014001c4 	movi	r5,7
    e6dc:	2901fb16 	blt	r5,r4,eecc <___vfprintf_internal_r+0x1d98>
    e6e0:	42000204 	addi	r8,r8,8
    e6e4:	8001f716 	blt	r16,zero,eec4 <___vfprintf_internal_r+0x1d90>
    e6e8:	1421c83a 	sub	r16,r2,r16
    e6ec:	043d160e 	bge	zero,r16,db48 <__alt_data_end+0xfc00db48>
    e6f0:	04400404 	movi	r17,16
    e6f4:	d8801f17 	ldw	r2,124(sp)
    e6f8:	8c3efb0e 	bge	r17,r16,e2e8 <__alt_data_end+0xfc00e2e8>
    e6fc:	014000b4 	movhi	r5,2
    e700:	29710584 	addi	r5,r5,-15338
    e704:	d9402c15 	stw	r5,176(sp)
    e708:	058001c4 	movi	r22,7
    e70c:	dcc02d17 	ldw	r19,180(sp)
    e710:	00000306 	br	e720 <___vfprintf_internal_r+0x15ec>
    e714:	42000204 	addi	r8,r8,8
    e718:	843ffc04 	addi	r16,r16,-16
    e71c:	8c3ef50e 	bge	r17,r16,e2f4 <__alt_data_end+0xfc00e2f4>
    e720:	18c00404 	addi	r3,r3,16
    e724:	10800044 	addi	r2,r2,1
    e728:	45000015 	stw	r20,0(r8)
    e72c:	44400115 	stw	r17,4(r8)
    e730:	d8c02015 	stw	r3,128(sp)
    e734:	d8801f15 	stw	r2,124(sp)
    e738:	b0bff60e 	bge	r22,r2,e714 <__alt_data_end+0xfc00e714>
    e73c:	d9801e04 	addi	r6,sp,120
    e740:	b80b883a 	mov	r5,r23
    e744:	9809883a 	mov	r4,r19
    e748:	0014a940 	call	14a94 <__sprint_r>
    e74c:	103b7d1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e750:	d8c02017 	ldw	r3,128(sp)
    e754:	d8801f17 	ldw	r2,124(sp)
    e758:	da000404 	addi	r8,sp,16
    e75c:	003fee06 	br	e718 <__alt_data_end+0xfc00e718>
    e760:	9088703a 	and	r4,r18,r2
    e764:	203eab1e 	bne	r4,zero,e214 <__alt_data_end+0xfc00e214>
    e768:	dc401f17 	ldw	r17,124(sp)
    e76c:	40800115 	stw	r2,4(r8)
    e770:	44000015 	stw	r16,0(r8)
    e774:	8c400044 	addi	r17,r17,1
    e778:	d8c02015 	stw	r3,128(sp)
    e77c:	dc401f15 	stw	r17,124(sp)
    e780:	008001c4 	movi	r2,7
    e784:	14400e16 	blt	r2,r17,e7c0 <___vfprintf_internal_r+0x168c>
    e788:	45800204 	addi	r22,r8,8
    e78c:	003eca06 	br	e2b8 <__alt_data_end+0xfc00e2b8>
    e790:	010000b4 	movhi	r4,2
    e794:	21310584 	addi	r4,r4,-15338
    e798:	d9002c15 	stw	r4,176(sp)
    e79c:	d8802c17 	ldw	r2,176(sp)
    e7a0:	1c07883a 	add	r3,r3,r16
    e7a4:	8c400044 	addi	r17,r17,1
    e7a8:	b0800015 	stw	r2,0(r22)
    e7ac:	b4000115 	stw	r16,4(r22)
    e7b0:	d8c02015 	stw	r3,128(sp)
    e7b4:	dc401f15 	stw	r17,124(sp)
    e7b8:	008001c4 	movi	r2,7
    e7bc:	147ebd0e 	bge	r2,r17,e2b4 <__alt_data_end+0xfc00e2b4>
    e7c0:	d9002d17 	ldw	r4,180(sp)
    e7c4:	d9801e04 	addi	r6,sp,120
    e7c8:	b80b883a 	mov	r5,r23
    e7cc:	0014a940 	call	14a94 <__sprint_r>
    e7d0:	103b5c1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e7d4:	d8c02017 	ldw	r3,128(sp)
    e7d8:	dc401f17 	ldw	r17,124(sp)
    e7dc:	dd800404 	addi	r22,sp,16
    e7e0:	003eb506 	br	e2b8 <__alt_data_end+0xfc00e2b8>
    e7e4:	d9002d17 	ldw	r4,180(sp)
    e7e8:	d9801e04 	addi	r6,sp,120
    e7ec:	b80b883a 	mov	r5,r23
    e7f0:	0014a940 	call	14a94 <__sprint_r>
    e7f4:	103b531e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e7f8:	d8c02017 	ldw	r3,128(sp)
    e7fc:	dc401f17 	ldw	r17,124(sp)
    e800:	da000404 	addi	r8,sp,16
    e804:	003e8d06 	br	e23c <__alt_data_end+0xfc00e23c>
    e808:	d9002d17 	ldw	r4,180(sp)
    e80c:	d9801e04 	addi	r6,sp,120
    e810:	b80b883a 	mov	r5,r23
    e814:	0014a940 	call	14a94 <__sprint_r>
    e818:	103b4a1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e81c:	d8c02017 	ldw	r3,128(sp)
    e820:	dc401f17 	ldw	r17,124(sp)
    e824:	dd800404 	addi	r22,sp,16
    e828:	003e8f06 	br	e268 <__alt_data_end+0xfc00e268>
    e82c:	0027883a 	mov	r19,zero
    e830:	003f4a06 	br	e55c <__alt_data_end+0xfc00e55c>
    e834:	d9002d17 	ldw	r4,180(sp)
    e838:	d9801e04 	addi	r6,sp,120
    e83c:	b80b883a 	mov	r5,r23
    e840:	0014a940 	call	14a94 <__sprint_r>
    e844:	103b3f1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    e848:	d8c02017 	ldw	r3,128(sp)
    e84c:	da000404 	addi	r8,sp,16
    e850:	003c7b06 	br	da40 <__alt_data_end+0xfc00da40>
    e854:	d9402a17 	ldw	r5,168(sp)
    e858:	04e7c83a 	sub	r19,zero,r19
    e85c:	07000b44 	movi	fp,45
    e860:	9804c03a 	cmpne	r2,r19,zero
    e864:	05adc83a 	sub	r22,zero,r22
    e868:	df002785 	stb	fp,158(sp)
    e86c:	b0adc83a 	sub	r22,r22,r2
    e870:	28017b16 	blt	r5,zero,ee60 <___vfprintf_internal_r+0x1d2c>
    e874:	00bfdfc4 	movi	r2,-129
    e878:	90a4703a 	and	r18,r18,r2
    e87c:	003b8906 	br	d6a4 <__alt_data_end+0xfc00d6a4>
    e880:	d9003617 	ldw	r4,216(sp)
    e884:	d9403817 	ldw	r5,224(sp)
    e888:	da003d15 	stw	r8,244(sp)
    e88c:	00146b80 	call	146b8 <__fpclassifyd>
    e890:	da003d17 	ldw	r8,244(sp)
    e894:	1000f026 	beq	r2,zero,ec58 <___vfprintf_internal_r+0x1b24>
    e898:	d9002a17 	ldw	r4,168(sp)
    e89c:	05bff7c4 	movi	r22,-33
    e8a0:	00bfffc4 	movi	r2,-1
    e8a4:	8dac703a 	and	r22,r17,r22
    e8a8:	20820026 	beq	r4,r2,f0ac <___vfprintf_internal_r+0x1f78>
    e8ac:	008011c4 	movi	r2,71
    e8b0:	b081f726 	beq	r22,r2,f090 <___vfprintf_internal_r+0x1f5c>
    e8b4:	d9003817 	ldw	r4,224(sp)
    e8b8:	90c04014 	ori	r3,r18,256
    e8bc:	d8c02c15 	stw	r3,176(sp)
    e8c0:	20021516 	blt	r4,zero,f118 <___vfprintf_internal_r+0x1fe4>
    e8c4:	dcc03817 	ldw	r19,224(sp)
    e8c8:	d8002905 	stb	zero,164(sp)
    e8cc:	00801984 	movi	r2,102
    e8d0:	8881f926 	beq	r17,r2,f0b8 <___vfprintf_internal_r+0x1f84>
    e8d4:	00801184 	movi	r2,70
    e8d8:	88821c26 	beq	r17,r2,f14c <___vfprintf_internal_r+0x2018>
    e8dc:	00801144 	movi	r2,69
    e8e0:	b081ef26 	beq	r22,r2,f0a0 <___vfprintf_internal_r+0x1f6c>
    e8e4:	d8c02a17 	ldw	r3,168(sp)
    e8e8:	d8802104 	addi	r2,sp,132
    e8ec:	d8800315 	stw	r2,12(sp)
    e8f0:	d9403617 	ldw	r5,216(sp)
    e8f4:	d8802504 	addi	r2,sp,148
    e8f8:	d9002d17 	ldw	r4,180(sp)
    e8fc:	d8800215 	stw	r2,8(sp)
    e900:	d8802604 	addi	r2,sp,152
    e904:	d8c00015 	stw	r3,0(sp)
    e908:	d8800115 	stw	r2,4(sp)
    e90c:	01c00084 	movi	r7,2
    e910:	980d883a 	mov	r6,r19
    e914:	d8c03c15 	stw	r3,240(sp)
    e918:	da003d15 	stw	r8,244(sp)
    e91c:	000f9e40 	call	f9e4 <_dtoa_r>
    e920:	1021883a 	mov	r16,r2
    e924:	008019c4 	movi	r2,103
    e928:	d8c03c17 	ldw	r3,240(sp)
    e92c:	da003d17 	ldw	r8,244(sp)
    e930:	88817126 	beq	r17,r2,eef8 <___vfprintf_internal_r+0x1dc4>
    e934:	008011c4 	movi	r2,71
    e938:	88829126 	beq	r17,r2,f380 <___vfprintf_internal_r+0x224c>
    e93c:	80f9883a 	add	fp,r16,r3
    e940:	d9003617 	ldw	r4,216(sp)
    e944:	000d883a 	mov	r6,zero
    e948:	000f883a 	mov	r7,zero
    e94c:	980b883a 	mov	r5,r19
    e950:	da003d15 	stw	r8,244(sp)
    e954:	00188180 	call	18818 <__eqdf2>
    e958:	da003d17 	ldw	r8,244(sp)
    e95c:	10018d26 	beq	r2,zero,ef94 <___vfprintf_internal_r+0x1e60>
    e960:	d8802117 	ldw	r2,132(sp)
    e964:	1700062e 	bgeu	r2,fp,e980 <___vfprintf_internal_r+0x184c>
    e968:	01000c04 	movi	r4,48
    e96c:	10c00044 	addi	r3,r2,1
    e970:	d8c02115 	stw	r3,132(sp)
    e974:	11000005 	stb	r4,0(r2)
    e978:	d8802117 	ldw	r2,132(sp)
    e97c:	173ffb36 	bltu	r2,fp,e96c <__alt_data_end+0xfc00e96c>
    e980:	1405c83a 	sub	r2,r2,r16
    e984:	d8803315 	stw	r2,204(sp)
    e988:	008011c4 	movi	r2,71
    e98c:	b0817626 	beq	r22,r2,ef68 <___vfprintf_internal_r+0x1e34>
    e990:	00801944 	movi	r2,101
    e994:	1442800e 	bge	r2,r17,f398 <___vfprintf_internal_r+0x2264>
    e998:	d8c02617 	ldw	r3,152(sp)
    e99c:	00801984 	movi	r2,102
    e9a0:	d8c03215 	stw	r3,200(sp)
    e9a4:	8881fe26 	beq	r17,r2,f1a0 <___vfprintf_internal_r+0x206c>
    e9a8:	d8c03217 	ldw	r3,200(sp)
    e9ac:	d9003317 	ldw	r4,204(sp)
    e9b0:	1901dd16 	blt	r3,r4,f128 <___vfprintf_internal_r+0x1ff4>
    e9b4:	9480004c 	andi	r18,r18,1
    e9b8:	90022b1e 	bne	r18,zero,f268 <___vfprintf_internal_r+0x2134>
    e9bc:	1805883a 	mov	r2,r3
    e9c0:	18028316 	blt	r3,zero,f3d0 <___vfprintf_internal_r+0x229c>
    e9c4:	d8c03217 	ldw	r3,200(sp)
    e9c8:	044019c4 	movi	r17,103
    e9cc:	d8c02b15 	stw	r3,172(sp)
    e9d0:	df002907 	ldb	fp,164(sp)
    e9d4:	e001531e 	bne	fp,zero,ef24 <___vfprintf_internal_r+0x1df0>
    e9d8:	df002783 	ldbu	fp,158(sp)
    e9dc:	d8802915 	stw	r2,164(sp)
    e9e0:	dc802c17 	ldw	r18,176(sp)
    e9e4:	d8002a15 	stw	zero,168(sp)
    e9e8:	003baf06 	br	d8a8 <__alt_data_end+0xfc00d8a8>
    e9ec:	d8c02e17 	ldw	r3,184(sp)
    e9f0:	d9002e17 	ldw	r4,184(sp)
    e9f4:	d9402e17 	ldw	r5,184(sp)
    e9f8:	18c00017 	ldw	r3,0(r3)
    e9fc:	21000117 	ldw	r4,4(r4)
    ea00:	29400204 	addi	r5,r5,8
    ea04:	d8c03615 	stw	r3,216(sp)
    ea08:	d9003815 	stw	r4,224(sp)
    ea0c:	d9402e15 	stw	r5,184(sp)
    ea10:	003b5006 	br	d754 <__alt_data_end+0xfc00d754>
    ea14:	ac400007 	ldb	r17,0(r21)
    ea18:	003a2806 	br	d2bc <__alt_data_end+0xfc00d2bc>
    ea1c:	9080100c 	andi	r2,r18,64
    ea20:	1000a826 	beq	r2,zero,ecc4 <___vfprintf_internal_r+0x1b90>
    ea24:	d8c02e17 	ldw	r3,184(sp)
    ea28:	002d883a 	mov	r22,zero
    ea2c:	1cc0000b 	ldhu	r19,0(r3)
    ea30:	18c00104 	addi	r3,r3,4
    ea34:	d8c02e15 	stw	r3,184(sp)
    ea38:	003caf06 	br	dcf8 <__alt_data_end+0xfc00dcf8>
    ea3c:	d9002e17 	ldw	r4,184(sp)
    ea40:	d9402a17 	ldw	r5,168(sp)
    ea44:	002d883a 	mov	r22,zero
    ea48:	20800104 	addi	r2,r4,4
    ea4c:	24c00017 	ldw	r19,0(r4)
    ea50:	283ebb0e 	bge	r5,zero,e540 <__alt_data_end+0xfc00e540>
    ea54:	003ef106 	br	e61c <__alt_data_end+0xfc00e61c>
    ea58:	9080040c 	andi	r2,r18,16
    ea5c:	1000921e 	bne	r2,zero,eca8 <___vfprintf_internal_r+0x1b74>
    ea60:	9480100c 	andi	r18,r18,64
    ea64:	90013926 	beq	r18,zero,ef4c <___vfprintf_internal_r+0x1e18>
    ea68:	d9402e17 	ldw	r5,184(sp)
    ea6c:	d8c02f17 	ldw	r3,188(sp)
    ea70:	28800017 	ldw	r2,0(r5)
    ea74:	29400104 	addi	r5,r5,4
    ea78:	d9402e15 	stw	r5,184(sp)
    ea7c:	10c0000d 	sth	r3,0(r2)
    ea80:	0039e406 	br	d214 <__alt_data_end+0xfc00d214>
    ea84:	9080100c 	andi	r2,r18,64
    ea88:	10008026 	beq	r2,zero,ec8c <___vfprintf_internal_r+0x1b58>
    ea8c:	d8802e17 	ldw	r2,184(sp)
    ea90:	14c0000f 	ldh	r19,0(r2)
    ea94:	10800104 	addi	r2,r2,4
    ea98:	d8802e15 	stw	r2,184(sp)
    ea9c:	982dd7fa 	srai	r22,r19,31
    eaa0:	b005883a 	mov	r2,r22
    eaa4:	003af706 	br	d684 <__alt_data_end+0xfc00d684>
    eaa8:	9080100c 	andi	r2,r18,64
    eaac:	d8002785 	stb	zero,158(sp)
    eab0:	10008a1e 	bne	r2,zero,ecdc <___vfprintf_internal_r+0x1ba8>
    eab4:	d9002e17 	ldw	r4,184(sp)
    eab8:	d9402a17 	ldw	r5,168(sp)
    eabc:	002d883a 	mov	r22,zero
    eac0:	20800104 	addi	r2,r4,4
    eac4:	24c00017 	ldw	r19,0(r4)
    eac8:	283e4b0e 	bge	r5,zero,e3f8 <__alt_data_end+0xfc00e3f8>
    eacc:	9d86b03a 	or	r3,r19,r22
    ead0:	d8802e15 	stw	r2,184(sp)
    ead4:	183e4c1e 	bne	r3,zero,e408 <__alt_data_end+0xfc00e408>
    ead8:	0039883a 	mov	fp,zero
    eadc:	0005883a 	mov	r2,zero
    eae0:	003d4006 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    eae4:	014000b4 	movhi	r5,2
    eae8:	29710584 	addi	r5,r5,-15338
    eaec:	d9402c15 	stw	r5,176(sp)
    eaf0:	d9402c17 	ldw	r5,176(sp)
    eaf4:	1c47883a 	add	r3,r3,r17
    eaf8:	10800044 	addi	r2,r2,1
    eafc:	41400015 	stw	r5,0(r8)
    eb00:	44400115 	stw	r17,4(r8)
    eb04:	d8c02015 	stw	r3,128(sp)
    eb08:	d8801f15 	stw	r2,124(sp)
    eb0c:	010001c4 	movi	r4,7
    eb10:	20bec816 	blt	r4,r2,e634 <__alt_data_end+0xfc00e634>
    eb14:	42000204 	addi	r8,r8,8
    eb18:	003ecd06 	br	e650 <__alt_data_end+0xfc00e650>
    eb1c:	d9002a17 	ldw	r4,168(sp)
    eb20:	d8002785 	stb	zero,158(sp)
    eb24:	203d2d16 	blt	r4,zero,dfdc <__alt_data_end+0xfc00dfdc>
    eb28:	00bfdfc4 	movi	r2,-129
    eb2c:	90a4703a 	and	r18,r18,r2
    eb30:	003a6106 	br	d4b8 <__alt_data_end+0xfc00d4b8>
    eb34:	010000b4 	movhi	r4,2
    eb38:	21310584 	addi	r4,r4,-15338
    eb3c:	d9002c15 	stw	r4,176(sp)
    eb40:	003bea06 	br	daec <__alt_data_end+0xfc00daec>
    eb44:	d9002d17 	ldw	r4,180(sp)
    eb48:	d9801e04 	addi	r6,sp,120
    eb4c:	b80b883a 	mov	r5,r23
    eb50:	0014a940 	call	14a94 <__sprint_r>
    eb54:	103a7b1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    eb58:	d8c02017 	ldw	r3,128(sp)
    eb5c:	da000404 	addi	r8,sp,16
    eb60:	003d4106 	br	e068 <__alt_data_end+0xfc00e068>
    eb64:	d8801f17 	ldw	r2,124(sp)
    eb68:	014000b4 	movhi	r5,2
    eb6c:	01000044 	movi	r4,1
    eb70:	18c00044 	addi	r3,r3,1
    eb74:	10800044 	addi	r2,r2,1
    eb78:	29710504 	addi	r5,r5,-15340
    eb7c:	41000115 	stw	r4,4(r8)
    eb80:	41400015 	stw	r5,0(r8)
    eb84:	d8c02015 	stw	r3,128(sp)
    eb88:	d8801f15 	stw	r2,124(sp)
    eb8c:	010001c4 	movi	r4,7
    eb90:	20805c16 	blt	r4,r2,ed04 <___vfprintf_internal_r+0x1bd0>
    eb94:	42000204 	addi	r8,r8,8
    eb98:	8800041e 	bne	r17,zero,ebac <___vfprintf_internal_r+0x1a78>
    eb9c:	d8803317 	ldw	r2,204(sp)
    eba0:	1000021e 	bne	r2,zero,ebac <___vfprintf_internal_r+0x1a78>
    eba4:	9080004c 	andi	r2,r18,1
    eba8:	103be726 	beq	r2,zero,db48 <__alt_data_end+0xfc00db48>
    ebac:	d9003717 	ldw	r4,220(sp)
    ebb0:	d8801f17 	ldw	r2,124(sp)
    ebb4:	d9403417 	ldw	r5,208(sp)
    ebb8:	20c7883a 	add	r3,r4,r3
    ebbc:	10800044 	addi	r2,r2,1
    ebc0:	41000115 	stw	r4,4(r8)
    ebc4:	41400015 	stw	r5,0(r8)
    ebc8:	d8c02015 	stw	r3,128(sp)
    ebcc:	d8801f15 	stw	r2,124(sp)
    ebd0:	010001c4 	movi	r4,7
    ebd4:	20812116 	blt	r4,r2,f05c <___vfprintf_internal_r+0x1f28>
    ebd8:	42000204 	addi	r8,r8,8
    ebdc:	0463c83a 	sub	r17,zero,r17
    ebe0:	0440730e 	bge	zero,r17,edb0 <___vfprintf_internal_r+0x1c7c>
    ebe4:	05800404 	movi	r22,16
    ebe8:	b440860e 	bge	r22,r17,ee04 <___vfprintf_internal_r+0x1cd0>
    ebec:	014000b4 	movhi	r5,2
    ebf0:	29710584 	addi	r5,r5,-15338
    ebf4:	d9402c15 	stw	r5,176(sp)
    ebf8:	070001c4 	movi	fp,7
    ebfc:	dcc02d17 	ldw	r19,180(sp)
    ec00:	00000306 	br	ec10 <___vfprintf_internal_r+0x1adc>
    ec04:	42000204 	addi	r8,r8,8
    ec08:	8c7ffc04 	addi	r17,r17,-16
    ec0c:	b440800e 	bge	r22,r17,ee10 <___vfprintf_internal_r+0x1cdc>
    ec10:	18c00404 	addi	r3,r3,16
    ec14:	10800044 	addi	r2,r2,1
    ec18:	45000015 	stw	r20,0(r8)
    ec1c:	45800115 	stw	r22,4(r8)
    ec20:	d8c02015 	stw	r3,128(sp)
    ec24:	d8801f15 	stw	r2,124(sp)
    ec28:	e0bff60e 	bge	fp,r2,ec04 <__alt_data_end+0xfc00ec04>
    ec2c:	d9801e04 	addi	r6,sp,120
    ec30:	b80b883a 	mov	r5,r23
    ec34:	9809883a 	mov	r4,r19
    ec38:	0014a940 	call	14a94 <__sprint_r>
    ec3c:	103a411e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    ec40:	d8c02017 	ldw	r3,128(sp)
    ec44:	d8801f17 	ldw	r2,124(sp)
    ec48:	da000404 	addi	r8,sp,16
    ec4c:	003fee06 	br	ec08 <__alt_data_end+0xfc00ec08>
    ec50:	00bfffc4 	movi	r2,-1
    ec54:	003a3f06 	br	d554 <__alt_data_end+0xfc00d554>
    ec58:	008011c4 	movi	r2,71
    ec5c:	1440b816 	blt	r2,r17,ef40 <___vfprintf_internal_r+0x1e0c>
    ec60:	040000b4 	movhi	r16,2
    ec64:	8430f704 	addi	r16,r16,-15396
    ec68:	00c000c4 	movi	r3,3
    ec6c:	00bfdfc4 	movi	r2,-129
    ec70:	d8c02915 	stw	r3,164(sp)
    ec74:	90a4703a 	and	r18,r18,r2
    ec78:	df002783 	ldbu	fp,158(sp)
    ec7c:	d8c02b15 	stw	r3,172(sp)
    ec80:	d8002a15 	stw	zero,168(sp)
    ec84:	d8003215 	stw	zero,200(sp)
    ec88:	003b0706 	br	d8a8 <__alt_data_end+0xfc00d8a8>
    ec8c:	d8c02e17 	ldw	r3,184(sp)
    ec90:	1cc00017 	ldw	r19,0(r3)
    ec94:	18c00104 	addi	r3,r3,4
    ec98:	d8c02e15 	stw	r3,184(sp)
    ec9c:	982dd7fa 	srai	r22,r19,31
    eca0:	b005883a 	mov	r2,r22
    eca4:	003a7706 	br	d684 <__alt_data_end+0xfc00d684>
    eca8:	d8c02e17 	ldw	r3,184(sp)
    ecac:	d9002f17 	ldw	r4,188(sp)
    ecb0:	18800017 	ldw	r2,0(r3)
    ecb4:	18c00104 	addi	r3,r3,4
    ecb8:	d8c02e15 	stw	r3,184(sp)
    ecbc:	11000015 	stw	r4,0(r2)
    ecc0:	00395406 	br	d214 <__alt_data_end+0xfc00d214>
    ecc4:	d9002e17 	ldw	r4,184(sp)
    ecc8:	002d883a 	mov	r22,zero
    eccc:	24c00017 	ldw	r19,0(r4)
    ecd0:	21000104 	addi	r4,r4,4
    ecd4:	d9002e15 	stw	r4,184(sp)
    ecd8:	003c0706 	br	dcf8 <__alt_data_end+0xfc00dcf8>
    ecdc:	d9402e17 	ldw	r5,184(sp)
    ece0:	d8c02a17 	ldw	r3,168(sp)
    ece4:	002d883a 	mov	r22,zero
    ece8:	28800104 	addi	r2,r5,4
    ecec:	2cc0000b 	ldhu	r19,0(r5)
    ecf0:	183dc10e 	bge	r3,zero,e3f8 <__alt_data_end+0xfc00e3f8>
    ecf4:	003f7506 	br	eacc <__alt_data_end+0xfc00eacc>
    ecf8:	040000b4 	movhi	r16,2
    ecfc:	8430f504 	addi	r16,r16,-15404
    ed00:	003aa706 	br	d7a0 <__alt_data_end+0xfc00d7a0>
    ed04:	d9002d17 	ldw	r4,180(sp)
    ed08:	d9801e04 	addi	r6,sp,120
    ed0c:	b80b883a 	mov	r5,r23
    ed10:	0014a940 	call	14a94 <__sprint_r>
    ed14:	103a0b1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    ed18:	dc402617 	ldw	r17,152(sp)
    ed1c:	d8c02017 	ldw	r3,128(sp)
    ed20:	da000404 	addi	r8,sp,16
    ed24:	003f9c06 	br	eb98 <__alt_data_end+0xfc00eb98>
    ed28:	ac400043 	ldbu	r17,1(r21)
    ed2c:	84000814 	ori	r16,r16,32
    ed30:	ad400044 	addi	r21,r21,1
    ed34:	8c403fcc 	andi	r17,r17,255
    ed38:	8c40201c 	xori	r17,r17,128
    ed3c:	8c7fe004 	addi	r17,r17,-128
    ed40:	00395e06 	br	d2bc <__alt_data_end+0xfc00d2bc>
    ed44:	d8c02e15 	stw	r3,184(sp)
    ed48:	0039883a 	mov	fp,zero
    ed4c:	003e3506 	br	e624 <__alt_data_end+0xfc00e624>
    ed50:	d9002d17 	ldw	r4,180(sp)
    ed54:	d9801e04 	addi	r6,sp,120
    ed58:	b80b883a 	mov	r5,r23
    ed5c:	0014a940 	call	14a94 <__sprint_r>
    ed60:	1039f81e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    ed64:	d8c02017 	ldw	r3,128(sp)
    ed68:	da000404 	addi	r8,sp,16
    ed6c:	003cd006 	br	e0b0 <__alt_data_end+0xfc00e0b0>
    ed70:	8009883a 	mov	r4,r16
    ed74:	df003d15 	stw	fp,244(sp)
    ed78:	000d09c0 	call	d09c <strlen>
    ed7c:	d8802b15 	stw	r2,172(sp)
    ed80:	da003d17 	ldw	r8,244(sp)
    ed84:	103c200e 	bge	r2,zero,de08 <__alt_data_end+0xfc00de08>
    ed88:	0005883a 	mov	r2,zero
    ed8c:	003c1e06 	br	de08 <__alt_data_end+0xfc00de08>
    ed90:	d9002d17 	ldw	r4,180(sp)
    ed94:	d9801e04 	addi	r6,sp,120
    ed98:	b80b883a 	mov	r5,r23
    ed9c:	0014a940 	call	14a94 <__sprint_r>
    eda0:	1039e81e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    eda4:	d8c02017 	ldw	r3,128(sp)
    eda8:	d8801f17 	ldw	r2,124(sp)
    edac:	da000404 	addi	r8,sp,16
    edb0:	d9403317 	ldw	r5,204(sp)
    edb4:	10800044 	addi	r2,r2,1
    edb8:	44000015 	stw	r16,0(r8)
    edbc:	28c7883a 	add	r3,r5,r3
    edc0:	003b5b06 	br	db30 <__alt_data_end+0xfc00db30>
    edc4:	010000b4 	movhi	r4,2
    edc8:	21310984 	addi	r4,r4,-15322
    edcc:	d9003515 	stw	r4,212(sp)
    edd0:	003af206 	br	d99c <__alt_data_end+0xfc00d99c>
    edd4:	013fffc4 	movi	r4,-1
    edd8:	003a0806 	br	d5fc <__alt_data_end+0xfc00d5fc>
    eddc:	0023883a 	mov	r17,zero
    ede0:	003d9d06 	br	e458 <__alt_data_end+0xfc00e458>
    ede4:	d9002d17 	ldw	r4,180(sp)
    ede8:	d9801e04 	addi	r6,sp,120
    edec:	b80b883a 	mov	r5,r23
    edf0:	0014a940 	call	14a94 <__sprint_r>
    edf4:	1039d31e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    edf8:	d8c02017 	ldw	r3,128(sp)
    edfc:	da000404 	addi	r8,sp,16
    ee00:	003d9406 	br	e454 <__alt_data_end+0xfc00e454>
    ee04:	010000b4 	movhi	r4,2
    ee08:	21310584 	addi	r4,r4,-15338
    ee0c:	d9002c15 	stw	r4,176(sp)
    ee10:	d9002c17 	ldw	r4,176(sp)
    ee14:	1c47883a 	add	r3,r3,r17
    ee18:	10800044 	addi	r2,r2,1
    ee1c:	41000015 	stw	r4,0(r8)
    ee20:	44400115 	stw	r17,4(r8)
    ee24:	d8c02015 	stw	r3,128(sp)
    ee28:	d8801f15 	stw	r2,124(sp)
    ee2c:	010001c4 	movi	r4,7
    ee30:	20bfd716 	blt	r4,r2,ed90 <__alt_data_end+0xfc00ed90>
    ee34:	42000204 	addi	r8,r8,8
    ee38:	003fdd06 	br	edb0 <__alt_data_end+0xfc00edb0>
    ee3c:	d9002d17 	ldw	r4,180(sp)
    ee40:	d9801e04 	addi	r6,sp,120
    ee44:	b80b883a 	mov	r5,r23
    ee48:	0014a940 	call	14a94 <__sprint_r>
    ee4c:	1039bd1e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    ee50:	d8802617 	ldw	r2,152(sp)
    ee54:	d8c02017 	ldw	r3,128(sp)
    ee58:	da000404 	addi	r8,sp,16
    ee5c:	003e1006 	br	e6a0 <__alt_data_end+0xfc00e6a0>
    ee60:	00800044 	movi	r2,1
    ee64:	10803fcc 	andi	r2,r2,255
    ee68:	00c00044 	movi	r3,1
    ee6c:	10fa0d26 	beq	r2,r3,d6a4 <__alt_data_end+0xfc00d6a4>
    ee70:	00c00084 	movi	r3,2
    ee74:	10fbaf26 	beq	r2,r3,dd34 <__alt_data_end+0xfc00dd34>
    ee78:	003a6d06 	br	d830 <__alt_data_end+0xfc00d830>
    ee7c:	010000b4 	movhi	r4,2
    ee80:	21310984 	addi	r4,r4,-15322
    ee84:	d9003515 	stw	r4,212(sp)
    ee88:	003b5406 	br	dbdc <__alt_data_end+0xfc00dbdc>
    ee8c:	d8802a17 	ldw	r2,168(sp)
    ee90:	00c00184 	movi	r3,6
    ee94:	1880012e 	bgeu	r3,r2,ee9c <___vfprintf_internal_r+0x1d68>
    ee98:	1805883a 	mov	r2,r3
    ee9c:	d8802b15 	stw	r2,172(sp)
    eea0:	1000ef16 	blt	r2,zero,f260 <___vfprintf_internal_r+0x212c>
    eea4:	040000b4 	movhi	r16,2
    eea8:	d8802915 	stw	r2,164(sp)
    eeac:	dcc02e15 	stw	r19,184(sp)
    eeb0:	d8002a15 	stw	zero,168(sp)
    eeb4:	d8003215 	stw	zero,200(sp)
    eeb8:	84310304 	addi	r16,r16,-15348
    eebc:	0039883a 	mov	fp,zero
    eec0:	003a8006 	br	d8c4 <__alt_data_end+0xfc00d8c4>
    eec4:	0021883a 	mov	r16,zero
    eec8:	003e0706 	br	e6e8 <__alt_data_end+0xfc00e6e8>
    eecc:	d9002d17 	ldw	r4,180(sp)
    eed0:	d9801e04 	addi	r6,sp,120
    eed4:	b80b883a 	mov	r5,r23
    eed8:	0014a940 	call	14a94 <__sprint_r>
    eedc:	1039991e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    eee0:	d8802617 	ldw	r2,152(sp)
    eee4:	d9403317 	ldw	r5,204(sp)
    eee8:	d8c02017 	ldw	r3,128(sp)
    eeec:	da000404 	addi	r8,sp,16
    eef0:	2885c83a 	sub	r2,r5,r2
    eef4:	003dfb06 	br	e6e4 <__alt_data_end+0xfc00e6e4>
    eef8:	9080004c 	andi	r2,r18,1
    eefc:	103e8f1e 	bne	r2,zero,e93c <__alt_data_end+0xfc00e93c>
    ef00:	d8802117 	ldw	r2,132(sp)
    ef04:	003e9e06 	br	e980 <__alt_data_end+0xfc00e980>
    ef08:	1025883a 	mov	r18,r2
    ef0c:	0039883a 	mov	fp,zero
    ef10:	00800084 	movi	r2,2
    ef14:	003fd306 	br	ee64 <__alt_data_end+0xfc00ee64>
    ef18:	07000b44 	movi	fp,45
    ef1c:	df002785 	stb	fp,158(sp)
    ef20:	003a1b06 	br	d790 <__alt_data_end+0xfc00d790>
    ef24:	00c00b44 	movi	r3,45
    ef28:	d8c02785 	stb	r3,158(sp)
    ef2c:	d8802915 	stw	r2,164(sp)
    ef30:	dc802c17 	ldw	r18,176(sp)
    ef34:	d8002a15 	stw	zero,168(sp)
    ef38:	07000b44 	movi	fp,45
    ef3c:	003a5e06 	br	d8b8 <__alt_data_end+0xfc00d8b8>
    ef40:	040000b4 	movhi	r16,2
    ef44:	8430f804 	addi	r16,r16,-15392
    ef48:	003f4706 	br	ec68 <__alt_data_end+0xfc00ec68>
    ef4c:	d9002e17 	ldw	r4,184(sp)
    ef50:	d9402f17 	ldw	r5,188(sp)
    ef54:	20800017 	ldw	r2,0(r4)
    ef58:	21000104 	addi	r4,r4,4
    ef5c:	d9002e15 	stw	r4,184(sp)
    ef60:	11400015 	stw	r5,0(r2)
    ef64:	0038ab06 	br	d214 <__alt_data_end+0xfc00d214>
    ef68:	dd802617 	ldw	r22,152(sp)
    ef6c:	00bfff44 	movi	r2,-3
    ef70:	b0801c16 	blt	r22,r2,efe4 <___vfprintf_internal_r+0x1eb0>
    ef74:	d9402a17 	ldw	r5,168(sp)
    ef78:	2d801a16 	blt	r5,r22,efe4 <___vfprintf_internal_r+0x1eb0>
    ef7c:	dd803215 	stw	r22,200(sp)
    ef80:	003e8906 	br	e9a8 <__alt_data_end+0xfc00e9a8>
    ef84:	010000b4 	movhi	r4,2
    ef88:	21310584 	addi	r4,r4,-15338
    ef8c:	d9002c15 	stw	r4,176(sp)
    ef90:	003c9106 	br	e1d8 <__alt_data_end+0xfc00e1d8>
    ef94:	e005883a 	mov	r2,fp
    ef98:	003e7906 	br	e980 <__alt_data_end+0xfc00e980>
    ef9c:	d9002a17 	ldw	r4,168(sp)
    efa0:	df002783 	ldbu	fp,158(sp)
    efa4:	dcc02e15 	stw	r19,184(sp)
    efa8:	d9002915 	stw	r4,164(sp)
    efac:	d9002b15 	stw	r4,172(sp)
    efb0:	d8002a15 	stw	zero,168(sp)
    efb4:	d8003215 	stw	zero,200(sp)
    efb8:	003a3b06 	br	d8a8 <__alt_data_end+0xfc00d8a8>
    efbc:	9080004c 	andi	r2,r18,1
    efc0:	0039883a 	mov	fp,zero
    efc4:	10000426 	beq	r2,zero,efd8 <___vfprintf_internal_r+0x1ea4>
    efc8:	00800c04 	movi	r2,48
    efcc:	dc001dc4 	addi	r16,sp,119
    efd0:	d8801dc5 	stb	r2,119(sp)
    efd4:	003b6406 	br	dd68 <__alt_data_end+0xfc00dd68>
    efd8:	d8002b15 	stw	zero,172(sp)
    efdc:	dc001e04 	addi	r16,sp,120
    efe0:	003a2b06 	br	d890 <__alt_data_end+0xfc00d890>
    efe4:	8c7fff84 	addi	r17,r17,-2
    efe8:	b5bfffc4 	addi	r22,r22,-1
    efec:	dd802615 	stw	r22,152(sp)
    eff0:	dc4022c5 	stb	r17,139(sp)
    eff4:	b000bf16 	blt	r22,zero,f2f4 <___vfprintf_internal_r+0x21c0>
    eff8:	00800ac4 	movi	r2,43
    effc:	d8802305 	stb	r2,140(sp)
    f000:	00800244 	movi	r2,9
    f004:	15807016 	blt	r2,r22,f1c8 <___vfprintf_internal_r+0x2094>
    f008:	00800c04 	movi	r2,48
    f00c:	b5800c04 	addi	r22,r22,48
    f010:	d8802345 	stb	r2,141(sp)
    f014:	dd802385 	stb	r22,142(sp)
    f018:	d88023c4 	addi	r2,sp,143
    f01c:	df0022c4 	addi	fp,sp,139
    f020:	d8c03317 	ldw	r3,204(sp)
    f024:	1739c83a 	sub	fp,r2,fp
    f028:	d9003317 	ldw	r4,204(sp)
    f02c:	e0c7883a 	add	r3,fp,r3
    f030:	df003a15 	stw	fp,232(sp)
    f034:	d8c02b15 	stw	r3,172(sp)
    f038:	00800044 	movi	r2,1
    f03c:	1100b30e 	bge	r2,r4,f30c <___vfprintf_internal_r+0x21d8>
    f040:	d8c02b17 	ldw	r3,172(sp)
    f044:	18c00044 	addi	r3,r3,1
    f048:	d8c02b15 	stw	r3,172(sp)
    f04c:	1805883a 	mov	r2,r3
    f050:	1800ac16 	blt	r3,zero,f304 <___vfprintf_internal_r+0x21d0>
    f054:	d8003215 	stw	zero,200(sp)
    f058:	003e5d06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    f05c:	d9002d17 	ldw	r4,180(sp)
    f060:	d9801e04 	addi	r6,sp,120
    f064:	b80b883a 	mov	r5,r23
    f068:	0014a940 	call	14a94 <__sprint_r>
    f06c:	1039351e 	bne	r2,zero,d544 <__alt_data_end+0xfc00d544>
    f070:	dc402617 	ldw	r17,152(sp)
    f074:	d8c02017 	ldw	r3,128(sp)
    f078:	d8801f17 	ldw	r2,124(sp)
    f07c:	da000404 	addi	r8,sp,16
    f080:	003ed606 	br	ebdc <__alt_data_end+0xfc00ebdc>
    f084:	182b883a 	mov	r21,r3
    f088:	d8002a15 	stw	zero,168(sp)
    f08c:	00388c06 	br	d2c0 <__alt_data_end+0xfc00d2c0>
    f090:	d8802a17 	ldw	r2,168(sp)
    f094:	103e071e 	bne	r2,zero,e8b4 <__alt_data_end+0xfc00e8b4>
    f098:	dc002a15 	stw	r16,168(sp)
    f09c:	003e0506 	br	e8b4 <__alt_data_end+0xfc00e8b4>
    f0a0:	d9002a17 	ldw	r4,168(sp)
    f0a4:	20c00044 	addi	r3,r4,1
    f0a8:	003e0f06 	br	e8e8 <__alt_data_end+0xfc00e8e8>
    f0ac:	01400184 	movi	r5,6
    f0b0:	d9402a15 	stw	r5,168(sp)
    f0b4:	003dff06 	br	e8b4 <__alt_data_end+0xfc00e8b4>
    f0b8:	d8802104 	addi	r2,sp,132
    f0bc:	d8800315 	stw	r2,12(sp)
    f0c0:	d8802504 	addi	r2,sp,148
    f0c4:	d8800215 	stw	r2,8(sp)
    f0c8:	d8802604 	addi	r2,sp,152
    f0cc:	d8800115 	stw	r2,4(sp)
    f0d0:	d8802a17 	ldw	r2,168(sp)
    f0d4:	d9403617 	ldw	r5,216(sp)
    f0d8:	d9002d17 	ldw	r4,180(sp)
    f0dc:	d8800015 	stw	r2,0(sp)
    f0e0:	01c000c4 	movi	r7,3
    f0e4:	980d883a 	mov	r6,r19
    f0e8:	da003d15 	stw	r8,244(sp)
    f0ec:	000f9e40 	call	f9e4 <_dtoa_r>
    f0f0:	d8c02a17 	ldw	r3,168(sp)
    f0f4:	da003d17 	ldw	r8,244(sp)
    f0f8:	1021883a 	mov	r16,r2
    f0fc:	10f9883a 	add	fp,r2,r3
    f100:	81000007 	ldb	r4,0(r16)
    f104:	00800c04 	movi	r2,48
    f108:	20805e26 	beq	r4,r2,f284 <___vfprintf_internal_r+0x2150>
    f10c:	d8c02617 	ldw	r3,152(sp)
    f110:	e0f9883a 	add	fp,fp,r3
    f114:	003e0a06 	br	e940 <__alt_data_end+0xfc00e940>
    f118:	00c00b44 	movi	r3,45
    f11c:	24e0003c 	xorhi	r19,r4,32768
    f120:	d8c02905 	stb	r3,164(sp)
    f124:	003de906 	br	e8cc <__alt_data_end+0xfc00e8cc>
    f128:	d8c03217 	ldw	r3,200(sp)
    f12c:	00c07a0e 	bge	zero,r3,f318 <___vfprintf_internal_r+0x21e4>
    f130:	00800044 	movi	r2,1
    f134:	d9003317 	ldw	r4,204(sp)
    f138:	1105883a 	add	r2,r2,r4
    f13c:	d8802b15 	stw	r2,172(sp)
    f140:	10004e16 	blt	r2,zero,f27c <___vfprintf_internal_r+0x2148>
    f144:	044019c4 	movi	r17,103
    f148:	003e2106 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    f14c:	d9002a17 	ldw	r4,168(sp)
    f150:	d8802104 	addi	r2,sp,132
    f154:	d8800315 	stw	r2,12(sp)
    f158:	d9000015 	stw	r4,0(sp)
    f15c:	d8802504 	addi	r2,sp,148
    f160:	d9403617 	ldw	r5,216(sp)
    f164:	d9002d17 	ldw	r4,180(sp)
    f168:	d8800215 	stw	r2,8(sp)
    f16c:	d8802604 	addi	r2,sp,152
    f170:	d8800115 	stw	r2,4(sp)
    f174:	01c000c4 	movi	r7,3
    f178:	980d883a 	mov	r6,r19
    f17c:	da003d15 	stw	r8,244(sp)
    f180:	000f9e40 	call	f9e4 <_dtoa_r>
    f184:	d8c02a17 	ldw	r3,168(sp)
    f188:	da003d17 	ldw	r8,244(sp)
    f18c:	1021883a 	mov	r16,r2
    f190:	00801184 	movi	r2,70
    f194:	80f9883a 	add	fp,r16,r3
    f198:	88bfd926 	beq	r17,r2,f100 <__alt_data_end+0xfc00f100>
    f19c:	003de806 	br	e940 <__alt_data_end+0xfc00e940>
    f1a0:	d9002a17 	ldw	r4,168(sp)
    f1a4:	00c04d0e 	bge	zero,r3,f2dc <___vfprintf_internal_r+0x21a8>
    f1a8:	2000441e 	bne	r4,zero,f2bc <___vfprintf_internal_r+0x2188>
    f1ac:	9480004c 	andi	r18,r18,1
    f1b0:	9000421e 	bne	r18,zero,f2bc <___vfprintf_internal_r+0x2188>
    f1b4:	1805883a 	mov	r2,r3
    f1b8:	18006f16 	blt	r3,zero,f378 <___vfprintf_internal_r+0x2244>
    f1bc:	d8c03217 	ldw	r3,200(sp)
    f1c0:	d8c02b15 	stw	r3,172(sp)
    f1c4:	003e0206 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    f1c8:	df0022c4 	addi	fp,sp,139
    f1cc:	dc002a15 	stw	r16,168(sp)
    f1d0:	4027883a 	mov	r19,r8
    f1d4:	e021883a 	mov	r16,fp
    f1d8:	b009883a 	mov	r4,r22
    f1dc:	01400284 	movi	r5,10
    f1e0:	000cdcc0 	call	cdcc <__modsi3>
    f1e4:	10800c04 	addi	r2,r2,48
    f1e8:	843fffc4 	addi	r16,r16,-1
    f1ec:	b009883a 	mov	r4,r22
    f1f0:	01400284 	movi	r5,10
    f1f4:	80800005 	stb	r2,0(r16)
    f1f8:	000cd480 	call	cd48 <__divsi3>
    f1fc:	102d883a 	mov	r22,r2
    f200:	00800244 	movi	r2,9
    f204:	15bff416 	blt	r2,r22,f1d8 <__alt_data_end+0xfc00f1d8>
    f208:	9811883a 	mov	r8,r19
    f20c:	b0800c04 	addi	r2,r22,48
    f210:	8027883a 	mov	r19,r16
    f214:	997fffc4 	addi	r5,r19,-1
    f218:	98bfffc5 	stb	r2,-1(r19)
    f21c:	dc002a17 	ldw	r16,168(sp)
    f220:	2f006d2e 	bgeu	r5,fp,f3d8 <___vfprintf_internal_r+0x22a4>
    f224:	d9c02384 	addi	r7,sp,142
    f228:	3ccfc83a 	sub	r7,r7,r19
    f22c:	d9002344 	addi	r4,sp,141
    f230:	e1cf883a 	add	r7,fp,r7
    f234:	00000106 	br	f23c <___vfprintf_internal_r+0x2108>
    f238:	28800003 	ldbu	r2,0(r5)
    f23c:	20800005 	stb	r2,0(r4)
    f240:	21000044 	addi	r4,r4,1
    f244:	29400044 	addi	r5,r5,1
    f248:	393ffb1e 	bne	r7,r4,f238 <__alt_data_end+0xfc00f238>
    f24c:	d8802304 	addi	r2,sp,140
    f250:	14c5c83a 	sub	r2,r2,r19
    f254:	d8c02344 	addi	r3,sp,141
    f258:	1885883a 	add	r2,r3,r2
    f25c:	003f7006 	br	f020 <__alt_data_end+0xfc00f020>
    f260:	0005883a 	mov	r2,zero
    f264:	003f0f06 	br	eea4 <__alt_data_end+0xfc00eea4>
    f268:	d8c03217 	ldw	r3,200(sp)
    f26c:	18c00044 	addi	r3,r3,1
    f270:	d8c02b15 	stw	r3,172(sp)
    f274:	1805883a 	mov	r2,r3
    f278:	183fb20e 	bge	r3,zero,f144 <__alt_data_end+0xfc00f144>
    f27c:	0005883a 	mov	r2,zero
    f280:	003fb006 	br	f144 <__alt_data_end+0xfc00f144>
    f284:	d9003617 	ldw	r4,216(sp)
    f288:	000d883a 	mov	r6,zero
    f28c:	000f883a 	mov	r7,zero
    f290:	980b883a 	mov	r5,r19
    f294:	d8c03c15 	stw	r3,240(sp)
    f298:	da003d15 	stw	r8,244(sp)
    f29c:	00188180 	call	18818 <__eqdf2>
    f2a0:	d8c03c17 	ldw	r3,240(sp)
    f2a4:	da003d17 	ldw	r8,244(sp)
    f2a8:	103f9826 	beq	r2,zero,f10c <__alt_data_end+0xfc00f10c>
    f2ac:	00800044 	movi	r2,1
    f2b0:	10c7c83a 	sub	r3,r2,r3
    f2b4:	d8c02615 	stw	r3,152(sp)
    f2b8:	003f9506 	br	f110 <__alt_data_end+0xfc00f110>
    f2bc:	d9002a17 	ldw	r4,168(sp)
    f2c0:	d8c03217 	ldw	r3,200(sp)
    f2c4:	20800044 	addi	r2,r4,1
    f2c8:	1885883a 	add	r2,r3,r2
    f2cc:	d8802b15 	stw	r2,172(sp)
    f2d0:	103dbf0e 	bge	r2,zero,e9d0 <__alt_data_end+0xfc00e9d0>
    f2d4:	0005883a 	mov	r2,zero
    f2d8:	003dbd06 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    f2dc:	2000201e 	bne	r4,zero,f360 <___vfprintf_internal_r+0x222c>
    f2e0:	9480004c 	andi	r18,r18,1
    f2e4:	90001e1e 	bne	r18,zero,f360 <___vfprintf_internal_r+0x222c>
    f2e8:	00800044 	movi	r2,1
    f2ec:	d8802b15 	stw	r2,172(sp)
    f2f0:	003db706 	br	e9d0 <__alt_data_end+0xfc00e9d0>
    f2f4:	00800b44 	movi	r2,45
    f2f8:	05adc83a 	sub	r22,zero,r22
    f2fc:	d8802305 	stb	r2,140(sp)
    f300:	003f3f06 	br	f000 <__alt_data_end+0xfc00f000>
    f304:	0005883a 	mov	r2,zero
    f308:	003f5206 	br	f054 <__alt_data_end+0xfc00f054>
    f30c:	90a4703a 	and	r18,r18,r2
    f310:	903f4e26 	beq	r18,zero,f04c <__alt_data_end+0xfc00f04c>
    f314:	003f4a06 	br	f040 <__alt_data_end+0xfc00f040>
    f318:	00800084 	movi	r2,2
    f31c:	10c5c83a 	sub	r2,r2,r3
    f320:	003f8406 	br	f134 <__alt_data_end+0xfc00f134>
    f324:	d9402e17 	ldw	r5,184(sp)
    f328:	d9002e17 	ldw	r4,184(sp)
    f32c:	ac400043 	ldbu	r17,1(r21)
    f330:	29400017 	ldw	r5,0(r5)
    f334:	20800104 	addi	r2,r4,4
    f338:	d8802e15 	stw	r2,184(sp)
    f33c:	d9402a15 	stw	r5,168(sp)
    f340:	182b883a 	mov	r21,r3
    f344:	283e7b0e 	bge	r5,zero,ed34 <__alt_data_end+0xfc00ed34>
    f348:	8c403fcc 	andi	r17,r17,255
    f34c:	017fffc4 	movi	r5,-1
    f350:	8c40201c 	xori	r17,r17,128
    f354:	d9402a15 	stw	r5,168(sp)
    f358:	8c7fe004 	addi	r17,r17,-128
    f35c:	0037d706 	br	d2bc <__alt_data_end+0xfc00d2bc>
    f360:	d8c02a17 	ldw	r3,168(sp)
    f364:	18c00084 	addi	r3,r3,2
    f368:	d8c02b15 	stw	r3,172(sp)
    f36c:	1805883a 	mov	r2,r3
    f370:	183d970e 	bge	r3,zero,e9d0 <__alt_data_end+0xfc00e9d0>
    f374:	003fd706 	br	f2d4 <__alt_data_end+0xfc00f2d4>
    f378:	0005883a 	mov	r2,zero
    f37c:	003f8f06 	br	f1bc <__alt_data_end+0xfc00f1bc>
    f380:	9080004c 	andi	r2,r18,1
    f384:	103f821e 	bne	r2,zero,f190 <__alt_data_end+0xfc00f190>
    f388:	d8802117 	ldw	r2,132(sp)
    f38c:	1405c83a 	sub	r2,r2,r16
    f390:	d8803315 	stw	r2,204(sp)
    f394:	b47ef426 	beq	r22,r17,ef68 <__alt_data_end+0xfc00ef68>
    f398:	dd802617 	ldw	r22,152(sp)
    f39c:	003f1206 	br	efe8 <__alt_data_end+0xfc00efe8>
    f3a0:	d8c02b03 	ldbu	r3,172(sp)
    f3a4:	d8c02785 	stb	r3,158(sp)
    f3a8:	0038df06 	br	d728 <__alt_data_end+0xfc00d728>
    f3ac:	d8c02b03 	ldbu	r3,172(sp)
    f3b0:	d8c02785 	stb	r3,158(sp)
    f3b4:	0038aa06 	br	d660 <__alt_data_end+0xfc00d660>
    f3b8:	d8c02b03 	ldbu	r3,172(sp)
    f3bc:	d8c02785 	stb	r3,158(sp)
    f3c0:	003a4306 	br	dcd0 <__alt_data_end+0xfc00dcd0>
    f3c4:	d8c02b03 	ldbu	r3,172(sp)
    f3c8:	d8c02785 	stb	r3,158(sp)
    f3cc:	003af506 	br	dfa4 <__alt_data_end+0xfc00dfa4>
    f3d0:	0005883a 	mov	r2,zero
    f3d4:	003d7b06 	br	e9c4 <__alt_data_end+0xfc00e9c4>
    f3d8:	d8802344 	addi	r2,sp,141
    f3dc:	003f1006 	br	f020 <__alt_data_end+0xfc00f020>
    f3e0:	d8c02b03 	ldbu	r3,172(sp)
    f3e4:	d8c02785 	stb	r3,158(sp)
    f3e8:	0038fd06 	br	d7e0 <__alt_data_end+0xfc00d7e0>
    f3ec:	d8c02b03 	ldbu	r3,172(sp)
    f3f0:	d8c02785 	stb	r3,158(sp)
    f3f4:	003a9706 	br	de54 <__alt_data_end+0xfc00de54>
    f3f8:	d8c02b03 	ldbu	r3,172(sp)
    f3fc:	d8c02785 	stb	r3,158(sp)
    f400:	003a1806 	br	dc64 <__alt_data_end+0xfc00dc64>
    f404:	d8c02b03 	ldbu	r3,172(sp)
    f408:	d8c02785 	stb	r3,158(sp)
    f40c:	003abe06 	br	df08 <__alt_data_end+0xfc00df08>

0000f410 <__vfprintf_internal>:
    f410:	008000b4 	movhi	r2,2
    f414:	10b86304 	addi	r2,r2,-7796
    f418:	300f883a 	mov	r7,r6
    f41c:	280d883a 	mov	r6,r5
    f420:	200b883a 	mov	r5,r4
    f424:	11000017 	ldw	r4,0(r2)
    f428:	000d1341 	jmpi	d134 <___vfprintf_internal_r>

0000f42c <__sbprintf>:
    f42c:	2880030b 	ldhu	r2,12(r5)
    f430:	2ac01917 	ldw	r11,100(r5)
    f434:	2a80038b 	ldhu	r10,14(r5)
    f438:	2a400717 	ldw	r9,28(r5)
    f43c:	2a000917 	ldw	r8,36(r5)
    f440:	defee204 	addi	sp,sp,-1144
    f444:	00c10004 	movi	r3,1024
    f448:	dc011a15 	stw	r16,1128(sp)
    f44c:	10bfff4c 	andi	r2,r2,65533
    f450:	2821883a 	mov	r16,r5
    f454:	d8cb883a 	add	r5,sp,r3
    f458:	dc811c15 	stw	r18,1136(sp)
    f45c:	dc411b15 	stw	r17,1132(sp)
    f460:	dfc11d15 	stw	ra,1140(sp)
    f464:	2025883a 	mov	r18,r4
    f468:	d881030d 	sth	r2,1036(sp)
    f46c:	dac11915 	stw	r11,1124(sp)
    f470:	da81038d 	sth	r10,1038(sp)
    f474:	da410715 	stw	r9,1052(sp)
    f478:	da010915 	stw	r8,1060(sp)
    f47c:	dec10015 	stw	sp,1024(sp)
    f480:	dec10415 	stw	sp,1040(sp)
    f484:	d8c10215 	stw	r3,1032(sp)
    f488:	d8c10515 	stw	r3,1044(sp)
    f48c:	d8010615 	stw	zero,1048(sp)
    f490:	000d1340 	call	d134 <___vfprintf_internal_r>
    f494:	1023883a 	mov	r17,r2
    f498:	10000416 	blt	r2,zero,f4ac <__sbprintf+0x80>
    f49c:	d9410004 	addi	r5,sp,1024
    f4a0:	9009883a 	mov	r4,r18
    f4a4:	00112880 	call	11288 <_fflush_r>
    f4a8:	10000d1e 	bne	r2,zero,f4e0 <__sbprintf+0xb4>
    f4ac:	d881030b 	ldhu	r2,1036(sp)
    f4b0:	1080100c 	andi	r2,r2,64
    f4b4:	10000326 	beq	r2,zero,f4c4 <__sbprintf+0x98>
    f4b8:	8080030b 	ldhu	r2,12(r16)
    f4bc:	10801014 	ori	r2,r2,64
    f4c0:	8080030d 	sth	r2,12(r16)
    f4c4:	8805883a 	mov	r2,r17
    f4c8:	dfc11d17 	ldw	ra,1140(sp)
    f4cc:	dc811c17 	ldw	r18,1136(sp)
    f4d0:	dc411b17 	ldw	r17,1132(sp)
    f4d4:	dc011a17 	ldw	r16,1128(sp)
    f4d8:	dec11e04 	addi	sp,sp,1144
    f4dc:	f800283a 	ret
    f4e0:	047fffc4 	movi	r17,-1
    f4e4:	003ff106 	br	f4ac <__alt_data_end+0xfc00f4ac>

0000f4e8 <__swsetup_r>:
    f4e8:	008000b4 	movhi	r2,2
    f4ec:	defffd04 	addi	sp,sp,-12
    f4f0:	10b86304 	addi	r2,r2,-7796
    f4f4:	dc400115 	stw	r17,4(sp)
    f4f8:	2023883a 	mov	r17,r4
    f4fc:	11000017 	ldw	r4,0(r2)
    f500:	dc000015 	stw	r16,0(sp)
    f504:	dfc00215 	stw	ra,8(sp)
    f508:	2821883a 	mov	r16,r5
    f50c:	20000226 	beq	r4,zero,f518 <__swsetup_r+0x30>
    f510:	20800e17 	ldw	r2,56(r4)
    f514:	10003126 	beq	r2,zero,f5dc <__swsetup_r+0xf4>
    f518:	8080030b 	ldhu	r2,12(r16)
    f51c:	10c0020c 	andi	r3,r2,8
    f520:	1009883a 	mov	r4,r2
    f524:	18000f26 	beq	r3,zero,f564 <__swsetup_r+0x7c>
    f528:	80c00417 	ldw	r3,16(r16)
    f52c:	18001526 	beq	r3,zero,f584 <__swsetup_r+0x9c>
    f530:	1100004c 	andi	r4,r2,1
    f534:	20001c1e 	bne	r4,zero,f5a8 <__swsetup_r+0xc0>
    f538:	1080008c 	andi	r2,r2,2
    f53c:	1000291e 	bne	r2,zero,f5e4 <__swsetup_r+0xfc>
    f540:	80800517 	ldw	r2,20(r16)
    f544:	80800215 	stw	r2,8(r16)
    f548:	18001c26 	beq	r3,zero,f5bc <__swsetup_r+0xd4>
    f54c:	0005883a 	mov	r2,zero
    f550:	dfc00217 	ldw	ra,8(sp)
    f554:	dc400117 	ldw	r17,4(sp)
    f558:	dc000017 	ldw	r16,0(sp)
    f55c:	dec00304 	addi	sp,sp,12
    f560:	f800283a 	ret
    f564:	2080040c 	andi	r2,r4,16
    f568:	10002e26 	beq	r2,zero,f624 <__swsetup_r+0x13c>
    f56c:	2080010c 	andi	r2,r4,4
    f570:	10001e1e 	bne	r2,zero,f5ec <__swsetup_r+0x104>
    f574:	80c00417 	ldw	r3,16(r16)
    f578:	20800214 	ori	r2,r4,8
    f57c:	8080030d 	sth	r2,12(r16)
    f580:	183feb1e 	bne	r3,zero,f530 <__alt_data_end+0xfc00f530>
    f584:	1100a00c 	andi	r4,r2,640
    f588:	01408004 	movi	r5,512
    f58c:	217fe826 	beq	r4,r5,f530 <__alt_data_end+0xfc00f530>
    f590:	800b883a 	mov	r5,r16
    f594:	8809883a 	mov	r4,r17
    f598:	00122240 	call	12224 <__smakebuf_r>
    f59c:	8080030b 	ldhu	r2,12(r16)
    f5a0:	80c00417 	ldw	r3,16(r16)
    f5a4:	003fe206 	br	f530 <__alt_data_end+0xfc00f530>
    f5a8:	80800517 	ldw	r2,20(r16)
    f5ac:	80000215 	stw	zero,8(r16)
    f5b0:	0085c83a 	sub	r2,zero,r2
    f5b4:	80800615 	stw	r2,24(r16)
    f5b8:	183fe41e 	bne	r3,zero,f54c <__alt_data_end+0xfc00f54c>
    f5bc:	80c0030b 	ldhu	r3,12(r16)
    f5c0:	0005883a 	mov	r2,zero
    f5c4:	1900200c 	andi	r4,r3,128
    f5c8:	203fe126 	beq	r4,zero,f550 <__alt_data_end+0xfc00f550>
    f5cc:	18c01014 	ori	r3,r3,64
    f5d0:	80c0030d 	sth	r3,12(r16)
    f5d4:	00bfffc4 	movi	r2,-1
    f5d8:	003fdd06 	br	f550 <__alt_data_end+0xfc00f550>
    f5dc:	00116740 	call	11674 <__sinit>
    f5e0:	003fcd06 	br	f518 <__alt_data_end+0xfc00f518>
    f5e4:	0005883a 	mov	r2,zero
    f5e8:	003fd606 	br	f544 <__alt_data_end+0xfc00f544>
    f5ec:	81400c17 	ldw	r5,48(r16)
    f5f0:	28000626 	beq	r5,zero,f60c <__swsetup_r+0x124>
    f5f4:	80801004 	addi	r2,r16,64
    f5f8:	28800326 	beq	r5,r2,f608 <__swsetup_r+0x120>
    f5fc:	8809883a 	mov	r4,r17
    f600:	00117e80 	call	117e8 <_free_r>
    f604:	8100030b 	ldhu	r4,12(r16)
    f608:	80000c15 	stw	zero,48(r16)
    f60c:	80c00417 	ldw	r3,16(r16)
    f610:	00bff6c4 	movi	r2,-37
    f614:	1108703a 	and	r4,r2,r4
    f618:	80000115 	stw	zero,4(r16)
    f61c:	80c00015 	stw	r3,0(r16)
    f620:	003fd506 	br	f578 <__alt_data_end+0xfc00f578>
    f624:	00800244 	movi	r2,9
    f628:	88800015 	stw	r2,0(r17)
    f62c:	20801014 	ori	r2,r4,64
    f630:	8080030d 	sth	r2,12(r16)
    f634:	00bfffc4 	movi	r2,-1
    f638:	003fc506 	br	f550 <__alt_data_end+0xfc00f550>

0000f63c <__call_exitprocs>:
    f63c:	defff504 	addi	sp,sp,-44
    f640:	df000915 	stw	fp,36(sp)
    f644:	dd400615 	stw	r21,24(sp)
    f648:	dc800315 	stw	r18,12(sp)
    f64c:	dfc00a15 	stw	ra,40(sp)
    f650:	ddc00815 	stw	r23,32(sp)
    f654:	dd800715 	stw	r22,28(sp)
    f658:	dd000515 	stw	r20,20(sp)
    f65c:	dcc00415 	stw	r19,16(sp)
    f660:	dc400215 	stw	r17,8(sp)
    f664:	dc000115 	stw	r16,4(sp)
    f668:	d9000015 	stw	r4,0(sp)
    f66c:	2839883a 	mov	fp,r5
    f670:	04800044 	movi	r18,1
    f674:	057fffc4 	movi	r21,-1
    f678:	008000b4 	movhi	r2,2
    f67c:	10b86204 	addi	r2,r2,-7800
    f680:	12000017 	ldw	r8,0(r2)
    f684:	45005217 	ldw	r20,328(r8)
    f688:	44c05204 	addi	r19,r8,328
    f68c:	a0001c26 	beq	r20,zero,f700 <__call_exitprocs+0xc4>
    f690:	a0800117 	ldw	r2,4(r20)
    f694:	15ffffc4 	addi	r23,r2,-1
    f698:	b8000d16 	blt	r23,zero,f6d0 <__call_exitprocs+0x94>
    f69c:	14000044 	addi	r16,r2,1
    f6a0:	8421883a 	add	r16,r16,r16
    f6a4:	8421883a 	add	r16,r16,r16
    f6a8:	84402004 	addi	r17,r16,128
    f6ac:	a463883a 	add	r17,r20,r17
    f6b0:	a421883a 	add	r16,r20,r16
    f6b4:	e0001e26 	beq	fp,zero,f730 <__call_exitprocs+0xf4>
    f6b8:	80804017 	ldw	r2,256(r16)
    f6bc:	e0801c26 	beq	fp,r2,f730 <__call_exitprocs+0xf4>
    f6c0:	bdffffc4 	addi	r23,r23,-1
    f6c4:	843fff04 	addi	r16,r16,-4
    f6c8:	8c7fff04 	addi	r17,r17,-4
    f6cc:	bd7ff91e 	bne	r23,r21,f6b4 <__alt_data_end+0xfc00f6b4>
    f6d0:	00800034 	movhi	r2,0
    f6d4:	10800004 	addi	r2,r2,0
    f6d8:	10000926 	beq	r2,zero,f700 <__call_exitprocs+0xc4>
    f6dc:	a0800117 	ldw	r2,4(r20)
    f6e0:	1000301e 	bne	r2,zero,f7a4 <__call_exitprocs+0x168>
    f6e4:	a0800017 	ldw	r2,0(r20)
    f6e8:	10003226 	beq	r2,zero,f7b4 <__call_exitprocs+0x178>
    f6ec:	a009883a 	mov	r4,r20
    f6f0:	98800015 	stw	r2,0(r19)
    f6f4:	00000000 	call	0 <__reset>
    f6f8:	9d000017 	ldw	r20,0(r19)
    f6fc:	a03fe41e 	bne	r20,zero,f690 <__alt_data_end+0xfc00f690>
    f700:	dfc00a17 	ldw	ra,40(sp)
    f704:	df000917 	ldw	fp,36(sp)
    f708:	ddc00817 	ldw	r23,32(sp)
    f70c:	dd800717 	ldw	r22,28(sp)
    f710:	dd400617 	ldw	r21,24(sp)
    f714:	dd000517 	ldw	r20,20(sp)
    f718:	dcc00417 	ldw	r19,16(sp)
    f71c:	dc800317 	ldw	r18,12(sp)
    f720:	dc400217 	ldw	r17,8(sp)
    f724:	dc000117 	ldw	r16,4(sp)
    f728:	dec00b04 	addi	sp,sp,44
    f72c:	f800283a 	ret
    f730:	a0800117 	ldw	r2,4(r20)
    f734:	80c00017 	ldw	r3,0(r16)
    f738:	10bfffc4 	addi	r2,r2,-1
    f73c:	15c01426 	beq	r2,r23,f790 <__call_exitprocs+0x154>
    f740:	80000015 	stw	zero,0(r16)
    f744:	183fde26 	beq	r3,zero,f6c0 <__alt_data_end+0xfc00f6c0>
    f748:	95c8983a 	sll	r4,r18,r23
    f74c:	a0806217 	ldw	r2,392(r20)
    f750:	a5800117 	ldw	r22,4(r20)
    f754:	2084703a 	and	r2,r4,r2
    f758:	10000b26 	beq	r2,zero,f788 <__call_exitprocs+0x14c>
    f75c:	a0806317 	ldw	r2,396(r20)
    f760:	2088703a 	and	r4,r4,r2
    f764:	20000c1e 	bne	r4,zero,f798 <__call_exitprocs+0x15c>
    f768:	89400017 	ldw	r5,0(r17)
    f76c:	d9000017 	ldw	r4,0(sp)
    f770:	183ee83a 	callr	r3
    f774:	a0800117 	ldw	r2,4(r20)
    f778:	15bfbf1e 	bne	r2,r22,f678 <__alt_data_end+0xfc00f678>
    f77c:	98800017 	ldw	r2,0(r19)
    f780:	153fcf26 	beq	r2,r20,f6c0 <__alt_data_end+0xfc00f6c0>
    f784:	003fbc06 	br	f678 <__alt_data_end+0xfc00f678>
    f788:	183ee83a 	callr	r3
    f78c:	003ff906 	br	f774 <__alt_data_end+0xfc00f774>
    f790:	a5c00115 	stw	r23,4(r20)
    f794:	003feb06 	br	f744 <__alt_data_end+0xfc00f744>
    f798:	89000017 	ldw	r4,0(r17)
    f79c:	183ee83a 	callr	r3
    f7a0:	003ff406 	br	f774 <__alt_data_end+0xfc00f774>
    f7a4:	a0800017 	ldw	r2,0(r20)
    f7a8:	a027883a 	mov	r19,r20
    f7ac:	1029883a 	mov	r20,r2
    f7b0:	003fb606 	br	f68c <__alt_data_end+0xfc00f68c>
    f7b4:	0005883a 	mov	r2,zero
    f7b8:	003ffb06 	br	f7a8 <__alt_data_end+0xfc00f7a8>

0000f7bc <quorem>:
    f7bc:	defff204 	addi	sp,sp,-56
    f7c0:	ddc00b15 	stw	r23,44(sp)
    f7c4:	20800417 	ldw	r2,16(r4)
    f7c8:	2dc00417 	ldw	r23,16(r5)
    f7cc:	dfc00d15 	stw	ra,52(sp)
    f7d0:	df000c15 	stw	fp,48(sp)
    f7d4:	dd800a15 	stw	r22,40(sp)
    f7d8:	dd400915 	stw	r21,36(sp)
    f7dc:	dd000815 	stw	r20,32(sp)
    f7e0:	dcc00715 	stw	r19,28(sp)
    f7e4:	dc800615 	stw	r18,24(sp)
    f7e8:	dc400515 	stw	r17,20(sp)
    f7ec:	dc000415 	stw	r16,16(sp)
    f7f0:	15c07a16 	blt	r2,r23,f9dc <quorem+0x220>
    f7f4:	bdffffc4 	addi	r23,r23,-1
    f7f8:	bde9883a 	add	r20,r23,r23
    f7fc:	28c00504 	addi	r3,r5,20
    f800:	a529883a 	add	r20,r20,r20
    f804:	1d39883a 	add	fp,r3,r20
    f808:	24c00504 	addi	r19,r4,20
    f80c:	d9400215 	stw	r5,8(sp)
    f810:	9d29883a 	add	r20,r19,r20
    f814:	e1400017 	ldw	r5,0(fp)
    f818:	d9000015 	stw	r4,0(sp)
    f81c:	a1000017 	ldw	r4,0(r20)
    f820:	29400044 	addi	r5,r5,1
    f824:	d8c00115 	stw	r3,4(sp)
    f828:	dd000315 	stw	r20,12(sp)
    f82c:	000ce400 	call	ce40 <__udivsi3>
    f830:	1025883a 	mov	r18,r2
    f834:	10003026 	beq	r2,zero,f8f8 <quorem+0x13c>
    f838:	dc400117 	ldw	r17,4(sp)
    f83c:	9829883a 	mov	r20,r19
    f840:	002d883a 	mov	r22,zero
    f844:	0021883a 	mov	r16,zero
    f848:	8d400017 	ldw	r21,0(r17)
    f84c:	900b883a 	mov	r5,r18
    f850:	8c400104 	addi	r17,r17,4
    f854:	a93fffcc 	andi	r4,r21,65535
    f858:	000cefc0 	call	cefc <__mulsi3>
    f85c:	a808d43a 	srli	r4,r21,16
    f860:	900b883a 	mov	r5,r18
    f864:	15ad883a 	add	r22,r2,r22
    f868:	000cefc0 	call	cefc <__mulsi3>
    f86c:	a1000017 	ldw	r4,0(r20)
    f870:	b00cd43a 	srli	r6,r22,16
    f874:	b0ffffcc 	andi	r3,r22,65535
    f878:	217fffcc 	andi	r5,r4,65535
    f87c:	2c21883a 	add	r16,r5,r16
    f880:	80c7c83a 	sub	r3,r16,r3
    f884:	2008d43a 	srli	r4,r4,16
    f888:	1185883a 	add	r2,r2,r6
    f88c:	1821d43a 	srai	r16,r3,16
    f890:	117fffcc 	andi	r5,r2,65535
    f894:	2149c83a 	sub	r4,r4,r5
    f898:	2421883a 	add	r16,r4,r16
    f89c:	8008943a 	slli	r4,r16,16
    f8a0:	18ffffcc 	andi	r3,r3,65535
    f8a4:	102cd43a 	srli	r22,r2,16
    f8a8:	20c8b03a 	or	r4,r4,r3
    f8ac:	a1000015 	stw	r4,0(r20)
    f8b0:	8021d43a 	srai	r16,r16,16
    f8b4:	a5000104 	addi	r20,r20,4
    f8b8:	e47fe32e 	bgeu	fp,r17,f848 <__alt_data_end+0xfc00f848>
    f8bc:	d8c00317 	ldw	r3,12(sp)
    f8c0:	18800017 	ldw	r2,0(r3)
    f8c4:	10000c1e 	bne	r2,zero,f8f8 <quorem+0x13c>
    f8c8:	18bfff04 	addi	r2,r3,-4
    f8cc:	9880082e 	bgeu	r19,r2,f8f0 <quorem+0x134>
    f8d0:	18ffff17 	ldw	r3,-4(r3)
    f8d4:	18000326 	beq	r3,zero,f8e4 <quorem+0x128>
    f8d8:	00000506 	br	f8f0 <quorem+0x134>
    f8dc:	10c00017 	ldw	r3,0(r2)
    f8e0:	1800031e 	bne	r3,zero,f8f0 <quorem+0x134>
    f8e4:	10bfff04 	addi	r2,r2,-4
    f8e8:	bdffffc4 	addi	r23,r23,-1
    f8ec:	98bffb36 	bltu	r19,r2,f8dc <__alt_data_end+0xfc00f8dc>
    f8f0:	d8c00017 	ldw	r3,0(sp)
    f8f4:	1dc00415 	stw	r23,16(r3)
    f8f8:	d9400217 	ldw	r5,8(sp)
    f8fc:	d9000017 	ldw	r4,0(sp)
    f900:	0013a200 	call	13a20 <__mcmp>
    f904:	10002816 	blt	r2,zero,f9a8 <quorem+0x1ec>
    f908:	dc400117 	ldw	r17,4(sp)
    f90c:	94800044 	addi	r18,r18,1
    f910:	980d883a 	mov	r6,r19
    f914:	0007883a 	mov	r3,zero
    f918:	31000017 	ldw	r4,0(r6)
    f91c:	89400017 	ldw	r5,0(r17)
    f920:	31800104 	addi	r6,r6,4
    f924:	20bfffcc 	andi	r2,r4,65535
    f928:	10c7883a 	add	r3,r2,r3
    f92c:	28bfffcc 	andi	r2,r5,65535
    f930:	1885c83a 	sub	r2,r3,r2
    f934:	280ad43a 	srli	r5,r5,16
    f938:	2008d43a 	srli	r4,r4,16
    f93c:	1007d43a 	srai	r3,r2,16
    f940:	10bfffcc 	andi	r2,r2,65535
    f944:	2149c83a 	sub	r4,r4,r5
    f948:	20c9883a 	add	r4,r4,r3
    f94c:	200a943a 	slli	r5,r4,16
    f950:	8c400104 	addi	r17,r17,4
    f954:	2007d43a 	srai	r3,r4,16
    f958:	2884b03a 	or	r2,r5,r2
    f95c:	30bfff15 	stw	r2,-4(r6)
    f960:	e47fed2e 	bgeu	fp,r17,f918 <__alt_data_end+0xfc00f918>
    f964:	bdc5883a 	add	r2,r23,r23
    f968:	1085883a 	add	r2,r2,r2
    f96c:	9887883a 	add	r3,r19,r2
    f970:	18800017 	ldw	r2,0(r3)
    f974:	10000c1e 	bne	r2,zero,f9a8 <quorem+0x1ec>
    f978:	18bfff04 	addi	r2,r3,-4
    f97c:	9880082e 	bgeu	r19,r2,f9a0 <quorem+0x1e4>
    f980:	18ffff17 	ldw	r3,-4(r3)
    f984:	18000326 	beq	r3,zero,f994 <quorem+0x1d8>
    f988:	00000506 	br	f9a0 <quorem+0x1e4>
    f98c:	10c00017 	ldw	r3,0(r2)
    f990:	1800031e 	bne	r3,zero,f9a0 <quorem+0x1e4>
    f994:	10bfff04 	addi	r2,r2,-4
    f998:	bdffffc4 	addi	r23,r23,-1
    f99c:	98bffb36 	bltu	r19,r2,f98c <__alt_data_end+0xfc00f98c>
    f9a0:	d8c00017 	ldw	r3,0(sp)
    f9a4:	1dc00415 	stw	r23,16(r3)
    f9a8:	9005883a 	mov	r2,r18
    f9ac:	dfc00d17 	ldw	ra,52(sp)
    f9b0:	df000c17 	ldw	fp,48(sp)
    f9b4:	ddc00b17 	ldw	r23,44(sp)
    f9b8:	dd800a17 	ldw	r22,40(sp)
    f9bc:	dd400917 	ldw	r21,36(sp)
    f9c0:	dd000817 	ldw	r20,32(sp)
    f9c4:	dcc00717 	ldw	r19,28(sp)
    f9c8:	dc800617 	ldw	r18,24(sp)
    f9cc:	dc400517 	ldw	r17,20(sp)
    f9d0:	dc000417 	ldw	r16,16(sp)
    f9d4:	dec00e04 	addi	sp,sp,56
    f9d8:	f800283a 	ret
    f9dc:	0005883a 	mov	r2,zero
    f9e0:	003ff206 	br	f9ac <__alt_data_end+0xfc00f9ac>

0000f9e4 <_dtoa_r>:
    f9e4:	20801017 	ldw	r2,64(r4)
    f9e8:	deffde04 	addi	sp,sp,-136
    f9ec:	df002015 	stw	fp,128(sp)
    f9f0:	dcc01b15 	stw	r19,108(sp)
    f9f4:	dc801a15 	stw	r18,104(sp)
    f9f8:	dc401915 	stw	r17,100(sp)
    f9fc:	dc001815 	stw	r16,96(sp)
    fa00:	dfc02115 	stw	ra,132(sp)
    fa04:	ddc01f15 	stw	r23,124(sp)
    fa08:	dd801e15 	stw	r22,120(sp)
    fa0c:	dd401d15 	stw	r21,116(sp)
    fa10:	dd001c15 	stw	r20,112(sp)
    fa14:	d9c00315 	stw	r7,12(sp)
    fa18:	2039883a 	mov	fp,r4
    fa1c:	3023883a 	mov	r17,r6
    fa20:	2825883a 	mov	r18,r5
    fa24:	dc002417 	ldw	r16,144(sp)
    fa28:	3027883a 	mov	r19,r6
    fa2c:	10000826 	beq	r2,zero,fa50 <_dtoa_r+0x6c>
    fa30:	21801117 	ldw	r6,68(r4)
    fa34:	00c00044 	movi	r3,1
    fa38:	100b883a 	mov	r5,r2
    fa3c:	1986983a 	sll	r3,r3,r6
    fa40:	11800115 	stw	r6,4(r2)
    fa44:	10c00215 	stw	r3,8(r2)
    fa48:	00131440 	call	13144 <_Bfree>
    fa4c:	e0001015 	stw	zero,64(fp)
    fa50:	88002e16 	blt	r17,zero,fb0c <_dtoa_r+0x128>
    fa54:	80000015 	stw	zero,0(r16)
    fa58:	889ffc2c 	andhi	r2,r17,32752
    fa5c:	00dffc34 	movhi	r3,32752
    fa60:	10c01c26 	beq	r2,r3,fad4 <_dtoa_r+0xf0>
    fa64:	000d883a 	mov	r6,zero
    fa68:	000f883a 	mov	r7,zero
    fa6c:	9009883a 	mov	r4,r18
    fa70:	980b883a 	mov	r5,r19
    fa74:	00188180 	call	18818 <__eqdf2>
    fa78:	10002b1e 	bne	r2,zero,fb28 <_dtoa_r+0x144>
    fa7c:	d9c02317 	ldw	r7,140(sp)
    fa80:	00800044 	movi	r2,1
    fa84:	38800015 	stw	r2,0(r7)
    fa88:	d8802517 	ldw	r2,148(sp)
    fa8c:	10019e26 	beq	r2,zero,10108 <_dtoa_r+0x724>
    fa90:	d8c02517 	ldw	r3,148(sp)
    fa94:	008000b4 	movhi	r2,2
    fa98:	10b10544 	addi	r2,r2,-15339
    fa9c:	18800015 	stw	r2,0(r3)
    faa0:	10bfffc4 	addi	r2,r2,-1
    faa4:	dfc02117 	ldw	ra,132(sp)
    faa8:	df002017 	ldw	fp,128(sp)
    faac:	ddc01f17 	ldw	r23,124(sp)
    fab0:	dd801e17 	ldw	r22,120(sp)
    fab4:	dd401d17 	ldw	r21,116(sp)
    fab8:	dd001c17 	ldw	r20,112(sp)
    fabc:	dcc01b17 	ldw	r19,108(sp)
    fac0:	dc801a17 	ldw	r18,104(sp)
    fac4:	dc401917 	ldw	r17,100(sp)
    fac8:	dc001817 	ldw	r16,96(sp)
    facc:	dec02204 	addi	sp,sp,136
    fad0:	f800283a 	ret
    fad4:	d8c02317 	ldw	r3,140(sp)
    fad8:	0089c3c4 	movi	r2,9999
    fadc:	18800015 	stw	r2,0(r3)
    fae0:	90017726 	beq	r18,zero,100c0 <_dtoa_r+0x6dc>
    fae4:	008000b4 	movhi	r2,2
    fae8:	10b11104 	addi	r2,r2,-15292
    faec:	d9002517 	ldw	r4,148(sp)
    faf0:	203fec26 	beq	r4,zero,faa4 <__alt_data_end+0xfc00faa4>
    faf4:	10c000c7 	ldb	r3,3(r2)
    faf8:	1801781e 	bne	r3,zero,100dc <_dtoa_r+0x6f8>
    fafc:	10c000c4 	addi	r3,r2,3
    fb00:	d9802517 	ldw	r6,148(sp)
    fb04:	30c00015 	stw	r3,0(r6)
    fb08:	003fe606 	br	faa4 <__alt_data_end+0xfc00faa4>
    fb0c:	04e00034 	movhi	r19,32768
    fb10:	9cffffc4 	addi	r19,r19,-1
    fb14:	00800044 	movi	r2,1
    fb18:	8ce6703a 	and	r19,r17,r19
    fb1c:	80800015 	stw	r2,0(r16)
    fb20:	9823883a 	mov	r17,r19
    fb24:	003fcc06 	br	fa58 <__alt_data_end+0xfc00fa58>
    fb28:	d8800204 	addi	r2,sp,8
    fb2c:	d8800015 	stw	r2,0(sp)
    fb30:	d9c00104 	addi	r7,sp,4
    fb34:	900b883a 	mov	r5,r18
    fb38:	980d883a 	mov	r6,r19
    fb3c:	e009883a 	mov	r4,fp
    fb40:	8820d53a 	srli	r16,r17,20
    fb44:	0013dec0 	call	13dec <__d2b>
    fb48:	d8800915 	stw	r2,36(sp)
    fb4c:	8001651e 	bne	r16,zero,100e4 <_dtoa_r+0x700>
    fb50:	dd800217 	ldw	r22,8(sp)
    fb54:	dc000117 	ldw	r16,4(sp)
    fb58:	00800804 	movi	r2,32
    fb5c:	b421883a 	add	r16,r22,r16
    fb60:	80c10c84 	addi	r3,r16,1074
    fb64:	10c2d10e 	bge	r2,r3,106ac <_dtoa_r+0xcc8>
    fb68:	00801004 	movi	r2,64
    fb6c:	81010484 	addi	r4,r16,1042
    fb70:	10c7c83a 	sub	r3,r2,r3
    fb74:	9108d83a 	srl	r4,r18,r4
    fb78:	88e2983a 	sll	r17,r17,r3
    fb7c:	2448b03a 	or	r4,r4,r17
    fb80:	0019d340 	call	19d34 <__floatunsidf>
    fb84:	017f8434 	movhi	r5,65040
    fb88:	01800044 	movi	r6,1
    fb8c:	1009883a 	mov	r4,r2
    fb90:	194b883a 	add	r5,r3,r5
    fb94:	843fffc4 	addi	r16,r16,-1
    fb98:	d9801115 	stw	r6,68(sp)
    fb9c:	000d883a 	mov	r6,zero
    fba0:	01cffe34 	movhi	r7,16376
    fba4:	00192dc0 	call	192dc <__subdf3>
    fba8:	0198dbf4 	movhi	r6,25455
    fbac:	01cff4f4 	movhi	r7,16339
    fbb0:	3190d844 	addi	r6,r6,17249
    fbb4:	39e1e9c4 	addi	r7,r7,-30809
    fbb8:	1009883a 	mov	r4,r2
    fbbc:	180b883a 	mov	r5,r3
    fbc0:	0018a700 	call	18a70 <__muldf3>
    fbc4:	01a2d874 	movhi	r6,35681
    fbc8:	01cff1f4 	movhi	r7,16327
    fbcc:	31b22cc4 	addi	r6,r6,-14157
    fbd0:	39e28a04 	addi	r7,r7,-30168
    fbd4:	180b883a 	mov	r5,r3
    fbd8:	1009883a 	mov	r4,r2
    fbdc:	001759c0 	call	1759c <__adddf3>
    fbe0:	8009883a 	mov	r4,r16
    fbe4:	1029883a 	mov	r20,r2
    fbe8:	1823883a 	mov	r17,r3
    fbec:	0019c580 	call	19c58 <__floatsidf>
    fbf0:	019427f4 	movhi	r6,20639
    fbf4:	01cff4f4 	movhi	r7,16339
    fbf8:	319e7ec4 	addi	r6,r6,31227
    fbfc:	39d104c4 	addi	r7,r7,17427
    fc00:	1009883a 	mov	r4,r2
    fc04:	180b883a 	mov	r5,r3
    fc08:	0018a700 	call	18a70 <__muldf3>
    fc0c:	100d883a 	mov	r6,r2
    fc10:	180f883a 	mov	r7,r3
    fc14:	a009883a 	mov	r4,r20
    fc18:	880b883a 	mov	r5,r17
    fc1c:	001759c0 	call	1759c <__adddf3>
    fc20:	1009883a 	mov	r4,r2
    fc24:	180b883a 	mov	r5,r3
    fc28:	1029883a 	mov	r20,r2
    fc2c:	1823883a 	mov	r17,r3
    fc30:	0019bd80 	call	19bd8 <__fixdfsi>
    fc34:	000d883a 	mov	r6,zero
    fc38:	000f883a 	mov	r7,zero
    fc3c:	a009883a 	mov	r4,r20
    fc40:	880b883a 	mov	r5,r17
    fc44:	d8800515 	stw	r2,20(sp)
    fc48:	001897c0 	call	1897c <__ledf2>
    fc4c:	10028716 	blt	r2,zero,1066c <_dtoa_r+0xc88>
    fc50:	d8c00517 	ldw	r3,20(sp)
    fc54:	00800584 	movi	r2,22
    fc58:	10c27536 	bltu	r2,r3,10630 <_dtoa_r+0xc4c>
    fc5c:	180490fa 	slli	r2,r3,3
    fc60:	00c000b4 	movhi	r3,2
    fc64:	18f12c04 	addi	r3,r3,-15184
    fc68:	1885883a 	add	r2,r3,r2
    fc6c:	11000017 	ldw	r4,0(r2)
    fc70:	11400117 	ldw	r5,4(r2)
    fc74:	900d883a 	mov	r6,r18
    fc78:	980f883a 	mov	r7,r19
    fc7c:	00188a00 	call	188a0 <__gedf2>
    fc80:	00828d0e 	bge	zero,r2,106b8 <_dtoa_r+0xcd4>
    fc84:	d9000517 	ldw	r4,20(sp)
    fc88:	d8000e15 	stw	zero,56(sp)
    fc8c:	213fffc4 	addi	r4,r4,-1
    fc90:	d9000515 	stw	r4,20(sp)
    fc94:	b42dc83a 	sub	r22,r22,r16
    fc98:	b5bfffc4 	addi	r22,r22,-1
    fc9c:	b0026f16 	blt	r22,zero,1065c <_dtoa_r+0xc78>
    fca0:	d8000815 	stw	zero,32(sp)
    fca4:	d9c00517 	ldw	r7,20(sp)
    fca8:	38026416 	blt	r7,zero,1063c <_dtoa_r+0xc58>
    fcac:	b1ed883a 	add	r22,r22,r7
    fcb0:	d9c00d15 	stw	r7,52(sp)
    fcb4:	d8000a15 	stw	zero,40(sp)
    fcb8:	d9800317 	ldw	r6,12(sp)
    fcbc:	00800244 	movi	r2,9
    fcc0:	11811436 	bltu	r2,r6,10114 <_dtoa_r+0x730>
    fcc4:	00800144 	movi	r2,5
    fcc8:	1184e10e 	bge	r2,r6,11050 <_dtoa_r+0x166c>
    fccc:	31bfff04 	addi	r6,r6,-4
    fcd0:	d9800315 	stw	r6,12(sp)
    fcd4:	0023883a 	mov	r17,zero
    fcd8:	d9800317 	ldw	r6,12(sp)
    fcdc:	008000c4 	movi	r2,3
    fce0:	30836726 	beq	r6,r2,10a80 <_dtoa_r+0x109c>
    fce4:	1183410e 	bge	r2,r6,109ec <_dtoa_r+0x1008>
    fce8:	d9c00317 	ldw	r7,12(sp)
    fcec:	00800104 	movi	r2,4
    fcf0:	38827c26 	beq	r7,r2,106e4 <_dtoa_r+0xd00>
    fcf4:	00800144 	movi	r2,5
    fcf8:	3884c41e 	bne	r7,r2,1100c <_dtoa_r+0x1628>
    fcfc:	00800044 	movi	r2,1
    fd00:	d8800b15 	stw	r2,44(sp)
    fd04:	d8c00517 	ldw	r3,20(sp)
    fd08:	d9002217 	ldw	r4,136(sp)
    fd0c:	1907883a 	add	r3,r3,r4
    fd10:	19800044 	addi	r6,r3,1
    fd14:	d8c00c15 	stw	r3,48(sp)
    fd18:	d9800615 	stw	r6,24(sp)
    fd1c:	0183a40e 	bge	zero,r6,10bb0 <_dtoa_r+0x11cc>
    fd20:	d9800617 	ldw	r6,24(sp)
    fd24:	3021883a 	mov	r16,r6
    fd28:	e0001115 	stw	zero,68(fp)
    fd2c:	008005c4 	movi	r2,23
    fd30:	1184c92e 	bgeu	r2,r6,11058 <_dtoa_r+0x1674>
    fd34:	00c00044 	movi	r3,1
    fd38:	00800104 	movi	r2,4
    fd3c:	1085883a 	add	r2,r2,r2
    fd40:	11000504 	addi	r4,r2,20
    fd44:	180b883a 	mov	r5,r3
    fd48:	18c00044 	addi	r3,r3,1
    fd4c:	313ffb2e 	bgeu	r6,r4,fd3c <__alt_data_end+0xfc00fd3c>
    fd50:	e1401115 	stw	r5,68(fp)
    fd54:	e009883a 	mov	r4,fp
    fd58:	001309c0 	call	1309c <_Balloc>
    fd5c:	d8800715 	stw	r2,28(sp)
    fd60:	e0801015 	stw	r2,64(fp)
    fd64:	00800384 	movi	r2,14
    fd68:	1400f736 	bltu	r2,r16,10148 <_dtoa_r+0x764>
    fd6c:	8800f626 	beq	r17,zero,10148 <_dtoa_r+0x764>
    fd70:	d9c00517 	ldw	r7,20(sp)
    fd74:	01c39a0e 	bge	zero,r7,10be0 <_dtoa_r+0x11fc>
    fd78:	388003cc 	andi	r2,r7,15
    fd7c:	100490fa 	slli	r2,r2,3
    fd80:	382bd13a 	srai	r21,r7,4
    fd84:	00c000b4 	movhi	r3,2
    fd88:	18f12c04 	addi	r3,r3,-15184
    fd8c:	1885883a 	add	r2,r3,r2
    fd90:	a8c0040c 	andi	r3,r21,16
    fd94:	12400017 	ldw	r9,0(r2)
    fd98:	12000117 	ldw	r8,4(r2)
    fd9c:	18037926 	beq	r3,zero,10b84 <_dtoa_r+0x11a0>
    fda0:	008000b4 	movhi	r2,2
    fda4:	10b12204 	addi	r2,r2,-15224
    fda8:	11800817 	ldw	r6,32(r2)
    fdac:	11c00917 	ldw	r7,36(r2)
    fdb0:	9009883a 	mov	r4,r18
    fdb4:	980b883a 	mov	r5,r19
    fdb8:	da001715 	stw	r8,92(sp)
    fdbc:	da401615 	stw	r9,88(sp)
    fdc0:	0017e480 	call	17e48 <__divdf3>
    fdc4:	da001717 	ldw	r8,92(sp)
    fdc8:	da401617 	ldw	r9,88(sp)
    fdcc:	ad4003cc 	andi	r21,r21,15
    fdd0:	040000c4 	movi	r16,3
    fdd4:	1023883a 	mov	r17,r2
    fdd8:	1829883a 	mov	r20,r3
    fddc:	a8001126 	beq	r21,zero,fe24 <_dtoa_r+0x440>
    fde0:	05c000b4 	movhi	r23,2
    fde4:	bdf12204 	addi	r23,r23,-15224
    fde8:	4805883a 	mov	r2,r9
    fdec:	4007883a 	mov	r3,r8
    fdf0:	a980004c 	andi	r6,r21,1
    fdf4:	1009883a 	mov	r4,r2
    fdf8:	a82bd07a 	srai	r21,r21,1
    fdfc:	180b883a 	mov	r5,r3
    fe00:	30000426 	beq	r6,zero,fe14 <_dtoa_r+0x430>
    fe04:	b9800017 	ldw	r6,0(r23)
    fe08:	b9c00117 	ldw	r7,4(r23)
    fe0c:	84000044 	addi	r16,r16,1
    fe10:	0018a700 	call	18a70 <__muldf3>
    fe14:	bdc00204 	addi	r23,r23,8
    fe18:	a83ff51e 	bne	r21,zero,fdf0 <__alt_data_end+0xfc00fdf0>
    fe1c:	1013883a 	mov	r9,r2
    fe20:	1811883a 	mov	r8,r3
    fe24:	480d883a 	mov	r6,r9
    fe28:	400f883a 	mov	r7,r8
    fe2c:	8809883a 	mov	r4,r17
    fe30:	a00b883a 	mov	r5,r20
    fe34:	0017e480 	call	17e48 <__divdf3>
    fe38:	d8800f15 	stw	r2,60(sp)
    fe3c:	d8c01015 	stw	r3,64(sp)
    fe40:	d8c00e17 	ldw	r3,56(sp)
    fe44:	18000626 	beq	r3,zero,fe60 <_dtoa_r+0x47c>
    fe48:	d9000f17 	ldw	r4,60(sp)
    fe4c:	d9401017 	ldw	r5,64(sp)
    fe50:	000d883a 	mov	r6,zero
    fe54:	01cffc34 	movhi	r7,16368
    fe58:	001897c0 	call	1897c <__ledf2>
    fe5c:	10040b16 	blt	r2,zero,10e8c <_dtoa_r+0x14a8>
    fe60:	8009883a 	mov	r4,r16
    fe64:	0019c580 	call	19c58 <__floatsidf>
    fe68:	d9800f17 	ldw	r6,60(sp)
    fe6c:	d9c01017 	ldw	r7,64(sp)
    fe70:	1009883a 	mov	r4,r2
    fe74:	180b883a 	mov	r5,r3
    fe78:	0018a700 	call	18a70 <__muldf3>
    fe7c:	000d883a 	mov	r6,zero
    fe80:	01d00734 	movhi	r7,16412
    fe84:	1009883a 	mov	r4,r2
    fe88:	180b883a 	mov	r5,r3
    fe8c:	001759c0 	call	1759c <__adddf3>
    fe90:	1021883a 	mov	r16,r2
    fe94:	d8800617 	ldw	r2,24(sp)
    fe98:	047f3034 	movhi	r17,64704
    fe9c:	1c63883a 	add	r17,r3,r17
    fea0:	10031826 	beq	r2,zero,10b04 <_dtoa_r+0x1120>
    fea4:	d8c00517 	ldw	r3,20(sp)
    fea8:	db000617 	ldw	r12,24(sp)
    feac:	d8c01315 	stw	r3,76(sp)
    feb0:	d9000b17 	ldw	r4,44(sp)
    feb4:	20038f26 	beq	r4,zero,10cf4 <_dtoa_r+0x1310>
    feb8:	60bfffc4 	addi	r2,r12,-1
    febc:	100490fa 	slli	r2,r2,3
    fec0:	00c000b4 	movhi	r3,2
    fec4:	18f12c04 	addi	r3,r3,-15184
    fec8:	1885883a 	add	r2,r3,r2
    fecc:	11800017 	ldw	r6,0(r2)
    fed0:	11c00117 	ldw	r7,4(r2)
    fed4:	d8800717 	ldw	r2,28(sp)
    fed8:	0009883a 	mov	r4,zero
    fedc:	014ff834 	movhi	r5,16352
    fee0:	db001615 	stw	r12,88(sp)
    fee4:	15c00044 	addi	r23,r2,1
    fee8:	0017e480 	call	17e48 <__divdf3>
    feec:	800d883a 	mov	r6,r16
    fef0:	880f883a 	mov	r7,r17
    fef4:	1009883a 	mov	r4,r2
    fef8:	180b883a 	mov	r5,r3
    fefc:	00192dc0 	call	192dc <__subdf3>
    ff00:	d9401017 	ldw	r5,64(sp)
    ff04:	d9000f17 	ldw	r4,60(sp)
    ff08:	102b883a 	mov	r21,r2
    ff0c:	d8c01215 	stw	r3,72(sp)
    ff10:	0019bd80 	call	19bd8 <__fixdfsi>
    ff14:	1009883a 	mov	r4,r2
    ff18:	1029883a 	mov	r20,r2
    ff1c:	0019c580 	call	19c58 <__floatsidf>
    ff20:	d9000f17 	ldw	r4,60(sp)
    ff24:	d9401017 	ldw	r5,64(sp)
    ff28:	100d883a 	mov	r6,r2
    ff2c:	180f883a 	mov	r7,r3
    ff30:	00192dc0 	call	192dc <__subdf3>
    ff34:	1823883a 	mov	r17,r3
    ff38:	d8c00717 	ldw	r3,28(sp)
    ff3c:	d9401217 	ldw	r5,72(sp)
    ff40:	a2000c04 	addi	r8,r20,48
    ff44:	1021883a 	mov	r16,r2
    ff48:	1a000005 	stb	r8,0(r3)
    ff4c:	800d883a 	mov	r6,r16
    ff50:	880f883a 	mov	r7,r17
    ff54:	a809883a 	mov	r4,r21
    ff58:	4029883a 	mov	r20,r8
    ff5c:	00188a00 	call	188a0 <__gedf2>
    ff60:	00841d16 	blt	zero,r2,10fd8 <_dtoa_r+0x15f4>
    ff64:	800d883a 	mov	r6,r16
    ff68:	880f883a 	mov	r7,r17
    ff6c:	0009883a 	mov	r4,zero
    ff70:	014ffc34 	movhi	r5,16368
    ff74:	00192dc0 	call	192dc <__subdf3>
    ff78:	d9401217 	ldw	r5,72(sp)
    ff7c:	100d883a 	mov	r6,r2
    ff80:	180f883a 	mov	r7,r3
    ff84:	a809883a 	mov	r4,r21
    ff88:	00188a00 	call	188a0 <__gedf2>
    ff8c:	db001617 	ldw	r12,88(sp)
    ff90:	00840e16 	blt	zero,r2,10fcc <_dtoa_r+0x15e8>
    ff94:	00800044 	movi	r2,1
    ff98:	13006b0e 	bge	r2,r12,10148 <_dtoa_r+0x764>
    ff9c:	d9000717 	ldw	r4,28(sp)
    ffa0:	dd800f15 	stw	r22,60(sp)
    ffa4:	dcc01015 	stw	r19,64(sp)
    ffa8:	2319883a 	add	r12,r4,r12
    ffac:	dcc01217 	ldw	r19,72(sp)
    ffb0:	602d883a 	mov	r22,r12
    ffb4:	dc801215 	stw	r18,72(sp)
    ffb8:	b825883a 	mov	r18,r23
    ffbc:	00000906 	br	ffe4 <_dtoa_r+0x600>
    ffc0:	00192dc0 	call	192dc <__subdf3>
    ffc4:	a80d883a 	mov	r6,r21
    ffc8:	980f883a 	mov	r7,r19
    ffcc:	1009883a 	mov	r4,r2
    ffd0:	180b883a 	mov	r5,r3
    ffd4:	001897c0 	call	1897c <__ledf2>
    ffd8:	1003e816 	blt	r2,zero,10f7c <_dtoa_r+0x1598>
    ffdc:	b825883a 	mov	r18,r23
    ffe0:	bd83e926 	beq	r23,r22,10f88 <_dtoa_r+0x15a4>
    ffe4:	a809883a 	mov	r4,r21
    ffe8:	980b883a 	mov	r5,r19
    ffec:	000d883a 	mov	r6,zero
    fff0:	01d00934 	movhi	r7,16420
    fff4:	0018a700 	call	18a70 <__muldf3>
    fff8:	000d883a 	mov	r6,zero
    fffc:	01d00934 	movhi	r7,16420
   10000:	8009883a 	mov	r4,r16
   10004:	880b883a 	mov	r5,r17
   10008:	102b883a 	mov	r21,r2
   1000c:	1827883a 	mov	r19,r3
   10010:	0018a700 	call	18a70 <__muldf3>
   10014:	180b883a 	mov	r5,r3
   10018:	1009883a 	mov	r4,r2
   1001c:	1821883a 	mov	r16,r3
   10020:	1023883a 	mov	r17,r2
   10024:	0019bd80 	call	19bd8 <__fixdfsi>
   10028:	1009883a 	mov	r4,r2
   1002c:	1029883a 	mov	r20,r2
   10030:	0019c580 	call	19c58 <__floatsidf>
   10034:	8809883a 	mov	r4,r17
   10038:	800b883a 	mov	r5,r16
   1003c:	100d883a 	mov	r6,r2
   10040:	180f883a 	mov	r7,r3
   10044:	00192dc0 	call	192dc <__subdf3>
   10048:	a5000c04 	addi	r20,r20,48
   1004c:	a80d883a 	mov	r6,r21
   10050:	980f883a 	mov	r7,r19
   10054:	1009883a 	mov	r4,r2
   10058:	180b883a 	mov	r5,r3
   1005c:	95000005 	stb	r20,0(r18)
   10060:	1021883a 	mov	r16,r2
   10064:	1823883a 	mov	r17,r3
   10068:	001897c0 	call	1897c <__ledf2>
   1006c:	bdc00044 	addi	r23,r23,1
   10070:	800d883a 	mov	r6,r16
   10074:	880f883a 	mov	r7,r17
   10078:	0009883a 	mov	r4,zero
   1007c:	014ffc34 	movhi	r5,16368
   10080:	103fcf0e 	bge	r2,zero,ffc0 <__alt_data_end+0xfc00ffc0>
   10084:	d8c01317 	ldw	r3,76(sp)
   10088:	d8c00515 	stw	r3,20(sp)
   1008c:	d9400917 	ldw	r5,36(sp)
   10090:	e009883a 	mov	r4,fp
   10094:	00131440 	call	13144 <_Bfree>
   10098:	d9000517 	ldw	r4,20(sp)
   1009c:	d9802317 	ldw	r6,140(sp)
   100a0:	d9c02517 	ldw	r7,148(sp)
   100a4:	b8000005 	stb	zero,0(r23)
   100a8:	20800044 	addi	r2,r4,1
   100ac:	30800015 	stw	r2,0(r6)
   100b0:	3802aa26 	beq	r7,zero,10b5c <_dtoa_r+0x1178>
   100b4:	3dc00015 	stw	r23,0(r7)
   100b8:	d8800717 	ldw	r2,28(sp)
   100bc:	003e7906 	br	faa4 <__alt_data_end+0xfc00faa4>
   100c0:	00800434 	movhi	r2,16
   100c4:	10bfffc4 	addi	r2,r2,-1
   100c8:	88a2703a 	and	r17,r17,r2
   100cc:	883e851e 	bne	r17,zero,fae4 <__alt_data_end+0xfc00fae4>
   100d0:	008000b4 	movhi	r2,2
   100d4:	10b10e04 	addi	r2,r2,-15304
   100d8:	003e8406 	br	faec <__alt_data_end+0xfc00faec>
   100dc:	10c00204 	addi	r3,r2,8
   100e0:	003e8706 	br	fb00 <__alt_data_end+0xfc00fb00>
   100e4:	01400434 	movhi	r5,16
   100e8:	297fffc4 	addi	r5,r5,-1
   100ec:	994a703a 	and	r5,r19,r5
   100f0:	9009883a 	mov	r4,r18
   100f4:	843f0044 	addi	r16,r16,-1023
   100f8:	294ffc34 	orhi	r5,r5,16368
   100fc:	dd800217 	ldw	r22,8(sp)
   10100:	d8001115 	stw	zero,68(sp)
   10104:	003ea506 	br	fb9c <__alt_data_end+0xfc00fb9c>
   10108:	008000b4 	movhi	r2,2
   1010c:	10b10504 	addi	r2,r2,-15340
   10110:	003e6406 	br	faa4 <__alt_data_end+0xfc00faa4>
   10114:	e0001115 	stw	zero,68(fp)
   10118:	000b883a 	mov	r5,zero
   1011c:	e009883a 	mov	r4,fp
   10120:	001309c0 	call	1309c <_Balloc>
   10124:	01bfffc4 	movi	r6,-1
   10128:	01c00044 	movi	r7,1
   1012c:	d8800715 	stw	r2,28(sp)
   10130:	d9800c15 	stw	r6,48(sp)
   10134:	e0801015 	stw	r2,64(fp)
   10138:	d8000315 	stw	zero,12(sp)
   1013c:	d9c00b15 	stw	r7,44(sp)
   10140:	d9800615 	stw	r6,24(sp)
   10144:	d8002215 	stw	zero,136(sp)
   10148:	d8800117 	ldw	r2,4(sp)
   1014c:	10008916 	blt	r2,zero,10374 <_dtoa_r+0x990>
   10150:	d9000517 	ldw	r4,20(sp)
   10154:	00c00384 	movi	r3,14
   10158:	19008616 	blt	r3,r4,10374 <_dtoa_r+0x990>
   1015c:	200490fa 	slli	r2,r4,3
   10160:	00c000b4 	movhi	r3,2
   10164:	d9802217 	ldw	r6,136(sp)
   10168:	18f12c04 	addi	r3,r3,-15184
   1016c:	1885883a 	add	r2,r3,r2
   10170:	14000017 	ldw	r16,0(r2)
   10174:	14400117 	ldw	r17,4(r2)
   10178:	30016316 	blt	r6,zero,10708 <_dtoa_r+0xd24>
   1017c:	800d883a 	mov	r6,r16
   10180:	880f883a 	mov	r7,r17
   10184:	9009883a 	mov	r4,r18
   10188:	980b883a 	mov	r5,r19
   1018c:	0017e480 	call	17e48 <__divdf3>
   10190:	180b883a 	mov	r5,r3
   10194:	1009883a 	mov	r4,r2
   10198:	0019bd80 	call	19bd8 <__fixdfsi>
   1019c:	1009883a 	mov	r4,r2
   101a0:	102b883a 	mov	r21,r2
   101a4:	0019c580 	call	19c58 <__floatsidf>
   101a8:	800d883a 	mov	r6,r16
   101ac:	880f883a 	mov	r7,r17
   101b0:	1009883a 	mov	r4,r2
   101b4:	180b883a 	mov	r5,r3
   101b8:	0018a700 	call	18a70 <__muldf3>
   101bc:	100d883a 	mov	r6,r2
   101c0:	180f883a 	mov	r7,r3
   101c4:	9009883a 	mov	r4,r18
   101c8:	980b883a 	mov	r5,r19
   101cc:	00192dc0 	call	192dc <__subdf3>
   101d0:	d9c00717 	ldw	r7,28(sp)
   101d4:	1009883a 	mov	r4,r2
   101d8:	a8800c04 	addi	r2,r21,48
   101dc:	38800005 	stb	r2,0(r7)
   101e0:	3dc00044 	addi	r23,r7,1
   101e4:	d9c00617 	ldw	r7,24(sp)
   101e8:	01800044 	movi	r6,1
   101ec:	180b883a 	mov	r5,r3
   101f0:	2005883a 	mov	r2,r4
   101f4:	39803826 	beq	r7,r6,102d8 <_dtoa_r+0x8f4>
   101f8:	000d883a 	mov	r6,zero
   101fc:	01d00934 	movhi	r7,16420
   10200:	0018a700 	call	18a70 <__muldf3>
   10204:	000d883a 	mov	r6,zero
   10208:	000f883a 	mov	r7,zero
   1020c:	1009883a 	mov	r4,r2
   10210:	180b883a 	mov	r5,r3
   10214:	1025883a 	mov	r18,r2
   10218:	1827883a 	mov	r19,r3
   1021c:	00188180 	call	18818 <__eqdf2>
   10220:	103f9a26 	beq	r2,zero,1008c <__alt_data_end+0xfc01008c>
   10224:	d9c00617 	ldw	r7,24(sp)
   10228:	d8c00717 	ldw	r3,28(sp)
   1022c:	b829883a 	mov	r20,r23
   10230:	38bfffc4 	addi	r2,r7,-1
   10234:	18ad883a 	add	r22,r3,r2
   10238:	00000a06 	br	10264 <_dtoa_r+0x880>
   1023c:	0018a700 	call	18a70 <__muldf3>
   10240:	000d883a 	mov	r6,zero
   10244:	000f883a 	mov	r7,zero
   10248:	1009883a 	mov	r4,r2
   1024c:	180b883a 	mov	r5,r3
   10250:	1025883a 	mov	r18,r2
   10254:	1827883a 	mov	r19,r3
   10258:	b829883a 	mov	r20,r23
   1025c:	00188180 	call	18818 <__eqdf2>
   10260:	103f8a26 	beq	r2,zero,1008c <__alt_data_end+0xfc01008c>
   10264:	800d883a 	mov	r6,r16
   10268:	880f883a 	mov	r7,r17
   1026c:	9009883a 	mov	r4,r18
   10270:	980b883a 	mov	r5,r19
   10274:	0017e480 	call	17e48 <__divdf3>
   10278:	180b883a 	mov	r5,r3
   1027c:	1009883a 	mov	r4,r2
   10280:	0019bd80 	call	19bd8 <__fixdfsi>
   10284:	1009883a 	mov	r4,r2
   10288:	102b883a 	mov	r21,r2
   1028c:	0019c580 	call	19c58 <__floatsidf>
   10290:	800d883a 	mov	r6,r16
   10294:	880f883a 	mov	r7,r17
   10298:	1009883a 	mov	r4,r2
   1029c:	180b883a 	mov	r5,r3
   102a0:	0018a700 	call	18a70 <__muldf3>
   102a4:	100d883a 	mov	r6,r2
   102a8:	180f883a 	mov	r7,r3
   102ac:	9009883a 	mov	r4,r18
   102b0:	980b883a 	mov	r5,r19
   102b4:	00192dc0 	call	192dc <__subdf3>
   102b8:	aa000c04 	addi	r8,r21,48
   102bc:	a2000005 	stb	r8,0(r20)
   102c0:	000d883a 	mov	r6,zero
   102c4:	01d00934 	movhi	r7,16420
   102c8:	1009883a 	mov	r4,r2
   102cc:	180b883a 	mov	r5,r3
   102d0:	a5c00044 	addi	r23,r20,1
   102d4:	b53fd91e 	bne	r22,r20,1023c <__alt_data_end+0xfc01023c>
   102d8:	100d883a 	mov	r6,r2
   102dc:	180f883a 	mov	r7,r3
   102e0:	1009883a 	mov	r4,r2
   102e4:	180b883a 	mov	r5,r3
   102e8:	001759c0 	call	1759c <__adddf3>
   102ec:	100d883a 	mov	r6,r2
   102f0:	180f883a 	mov	r7,r3
   102f4:	8009883a 	mov	r4,r16
   102f8:	880b883a 	mov	r5,r17
   102fc:	1027883a 	mov	r19,r2
   10300:	1825883a 	mov	r18,r3
   10304:	001897c0 	call	1897c <__ledf2>
   10308:	10000816 	blt	r2,zero,1032c <_dtoa_r+0x948>
   1030c:	980d883a 	mov	r6,r19
   10310:	900f883a 	mov	r7,r18
   10314:	8009883a 	mov	r4,r16
   10318:	880b883a 	mov	r5,r17
   1031c:	00188180 	call	18818 <__eqdf2>
   10320:	103f5a1e 	bne	r2,zero,1008c <__alt_data_end+0xfc01008c>
   10324:	ad40004c 	andi	r21,r21,1
   10328:	a83f5826 	beq	r21,zero,1008c <__alt_data_end+0xfc01008c>
   1032c:	bd3fffc3 	ldbu	r20,-1(r23)
   10330:	b8bfffc4 	addi	r2,r23,-1
   10334:	1007883a 	mov	r3,r2
   10338:	01400e44 	movi	r5,57
   1033c:	d9800717 	ldw	r6,28(sp)
   10340:	00000506 	br	10358 <_dtoa_r+0x974>
   10344:	18ffffc4 	addi	r3,r3,-1
   10348:	11824726 	beq	r2,r6,10c68 <_dtoa_r+0x1284>
   1034c:	1d000003 	ldbu	r20,0(r3)
   10350:	102f883a 	mov	r23,r2
   10354:	10bfffc4 	addi	r2,r2,-1
   10358:	a1003fcc 	andi	r4,r20,255
   1035c:	2100201c 	xori	r4,r4,128
   10360:	213fe004 	addi	r4,r4,-128
   10364:	217ff726 	beq	r4,r5,10344 <__alt_data_end+0xfc010344>
   10368:	a2000044 	addi	r8,r20,1
   1036c:	12000005 	stb	r8,0(r2)
   10370:	003f4606 	br	1008c <__alt_data_end+0xfc01008c>
   10374:	d9000b17 	ldw	r4,44(sp)
   10378:	2000c826 	beq	r4,zero,1069c <_dtoa_r+0xcb8>
   1037c:	d9800317 	ldw	r6,12(sp)
   10380:	00c00044 	movi	r3,1
   10384:	1980f90e 	bge	r3,r6,1076c <_dtoa_r+0xd88>
   10388:	d8800617 	ldw	r2,24(sp)
   1038c:	d8c00a17 	ldw	r3,40(sp)
   10390:	157fffc4 	addi	r21,r2,-1
   10394:	1d41f316 	blt	r3,r21,10b64 <_dtoa_r+0x1180>
   10398:	1d6bc83a 	sub	r21,r3,r21
   1039c:	d9c00617 	ldw	r7,24(sp)
   103a0:	3802aa16 	blt	r7,zero,10e4c <_dtoa_r+0x1468>
   103a4:	dd000817 	ldw	r20,32(sp)
   103a8:	d8800617 	ldw	r2,24(sp)
   103ac:	d8c00817 	ldw	r3,32(sp)
   103b0:	01400044 	movi	r5,1
   103b4:	e009883a 	mov	r4,fp
   103b8:	1887883a 	add	r3,r3,r2
   103bc:	d8c00815 	stw	r3,32(sp)
   103c0:	b0ad883a 	add	r22,r22,r2
   103c4:	00134d00 	call	134d0 <__i2b>
   103c8:	1023883a 	mov	r17,r2
   103cc:	a0000826 	beq	r20,zero,103f0 <_dtoa_r+0xa0c>
   103d0:	0580070e 	bge	zero,r22,103f0 <_dtoa_r+0xa0c>
   103d4:	a005883a 	mov	r2,r20
   103d8:	b500b916 	blt	r22,r20,106c0 <_dtoa_r+0xcdc>
   103dc:	d9000817 	ldw	r4,32(sp)
   103e0:	a0a9c83a 	sub	r20,r20,r2
   103e4:	b0adc83a 	sub	r22,r22,r2
   103e8:	2089c83a 	sub	r4,r4,r2
   103ec:	d9000815 	stw	r4,32(sp)
   103f0:	d9800a17 	ldw	r6,40(sp)
   103f4:	0181810e 	bge	zero,r6,109fc <_dtoa_r+0x1018>
   103f8:	d9c00b17 	ldw	r7,44(sp)
   103fc:	3800b326 	beq	r7,zero,106cc <_dtoa_r+0xce8>
   10400:	a800b226 	beq	r21,zero,106cc <_dtoa_r+0xce8>
   10404:	880b883a 	mov	r5,r17
   10408:	a80d883a 	mov	r6,r21
   1040c:	e009883a 	mov	r4,fp
   10410:	00137980 	call	13798 <__pow5mult>
   10414:	d9800917 	ldw	r6,36(sp)
   10418:	100b883a 	mov	r5,r2
   1041c:	e009883a 	mov	r4,fp
   10420:	1023883a 	mov	r17,r2
   10424:	001350c0 	call	1350c <__multiply>
   10428:	1021883a 	mov	r16,r2
   1042c:	d8800a17 	ldw	r2,40(sp)
   10430:	d9400917 	ldw	r5,36(sp)
   10434:	e009883a 	mov	r4,fp
   10438:	1545c83a 	sub	r2,r2,r21
   1043c:	d8800a15 	stw	r2,40(sp)
   10440:	00131440 	call	13144 <_Bfree>
   10444:	d8c00a17 	ldw	r3,40(sp)
   10448:	18009f1e 	bne	r3,zero,106c8 <_dtoa_r+0xce4>
   1044c:	05c00044 	movi	r23,1
   10450:	e009883a 	mov	r4,fp
   10454:	b80b883a 	mov	r5,r23
   10458:	00134d00 	call	134d0 <__i2b>
   1045c:	d9000d17 	ldw	r4,52(sp)
   10460:	102b883a 	mov	r21,r2
   10464:	2000ce26 	beq	r4,zero,107a0 <_dtoa_r+0xdbc>
   10468:	200d883a 	mov	r6,r4
   1046c:	100b883a 	mov	r5,r2
   10470:	e009883a 	mov	r4,fp
   10474:	00137980 	call	13798 <__pow5mult>
   10478:	d9800317 	ldw	r6,12(sp)
   1047c:	102b883a 	mov	r21,r2
   10480:	b981810e 	bge	r23,r6,10a88 <_dtoa_r+0x10a4>
   10484:	0027883a 	mov	r19,zero
   10488:	a8800417 	ldw	r2,16(r21)
   1048c:	05c00804 	movi	r23,32
   10490:	10800104 	addi	r2,r2,4
   10494:	1085883a 	add	r2,r2,r2
   10498:	1085883a 	add	r2,r2,r2
   1049c:	a885883a 	add	r2,r21,r2
   104a0:	11000017 	ldw	r4,0(r2)
   104a4:	00133b80 	call	133b8 <__hi0bits>
   104a8:	b885c83a 	sub	r2,r23,r2
   104ac:	1585883a 	add	r2,r2,r22
   104b0:	108007cc 	andi	r2,r2,31
   104b4:	1000b326 	beq	r2,zero,10784 <_dtoa_r+0xda0>
   104b8:	00c00804 	movi	r3,32
   104bc:	1887c83a 	sub	r3,r3,r2
   104c0:	01000104 	movi	r4,4
   104c4:	20c2cd0e 	bge	r4,r3,10ffc <_dtoa_r+0x1618>
   104c8:	00c00704 	movi	r3,28
   104cc:	1885c83a 	sub	r2,r3,r2
   104d0:	d8c00817 	ldw	r3,32(sp)
   104d4:	a0a9883a 	add	r20,r20,r2
   104d8:	b0ad883a 	add	r22,r22,r2
   104dc:	1887883a 	add	r3,r3,r2
   104e0:	d8c00815 	stw	r3,32(sp)
   104e4:	d9800817 	ldw	r6,32(sp)
   104e8:	0180040e 	bge	zero,r6,104fc <_dtoa_r+0xb18>
   104ec:	800b883a 	mov	r5,r16
   104f0:	e009883a 	mov	r4,fp
   104f4:	00138d80 	call	138d8 <__lshift>
   104f8:	1021883a 	mov	r16,r2
   104fc:	0580050e 	bge	zero,r22,10514 <_dtoa_r+0xb30>
   10500:	a80b883a 	mov	r5,r21
   10504:	b00d883a 	mov	r6,r22
   10508:	e009883a 	mov	r4,fp
   1050c:	00138d80 	call	138d8 <__lshift>
   10510:	102b883a 	mov	r21,r2
   10514:	d9c00e17 	ldw	r7,56(sp)
   10518:	3801211e 	bne	r7,zero,109a0 <_dtoa_r+0xfbc>
   1051c:	d9800617 	ldw	r6,24(sp)
   10520:	0181380e 	bge	zero,r6,10a04 <_dtoa_r+0x1020>
   10524:	d8c00b17 	ldw	r3,44(sp)
   10528:	1800ab1e 	bne	r3,zero,107d8 <_dtoa_r+0xdf4>
   1052c:	dc800717 	ldw	r18,28(sp)
   10530:	dcc00617 	ldw	r19,24(sp)
   10534:	9029883a 	mov	r20,r18
   10538:	00000206 	br	10544 <_dtoa_r+0xb60>
   1053c:	001316c0 	call	1316c <__multadd>
   10540:	1021883a 	mov	r16,r2
   10544:	a80b883a 	mov	r5,r21
   10548:	8009883a 	mov	r4,r16
   1054c:	000f7bc0 	call	f7bc <quorem>
   10550:	10800c04 	addi	r2,r2,48
   10554:	90800005 	stb	r2,0(r18)
   10558:	94800044 	addi	r18,r18,1
   1055c:	9507c83a 	sub	r3,r18,r20
   10560:	000f883a 	mov	r7,zero
   10564:	01800284 	movi	r6,10
   10568:	800b883a 	mov	r5,r16
   1056c:	e009883a 	mov	r4,fp
   10570:	1cfff216 	blt	r3,r19,1053c <__alt_data_end+0xfc01053c>
   10574:	1011883a 	mov	r8,r2
   10578:	d8800617 	ldw	r2,24(sp)
   1057c:	0082370e 	bge	zero,r2,10e5c <_dtoa_r+0x1478>
   10580:	d9000717 	ldw	r4,28(sp)
   10584:	0025883a 	mov	r18,zero
   10588:	20af883a 	add	r23,r4,r2
   1058c:	01800044 	movi	r6,1
   10590:	800b883a 	mov	r5,r16
   10594:	e009883a 	mov	r4,fp
   10598:	da001715 	stw	r8,92(sp)
   1059c:	00138d80 	call	138d8 <__lshift>
   105a0:	a80b883a 	mov	r5,r21
   105a4:	1009883a 	mov	r4,r2
   105a8:	d8800915 	stw	r2,36(sp)
   105ac:	0013a200 	call	13a20 <__mcmp>
   105b0:	da001717 	ldw	r8,92(sp)
   105b4:	0081800e 	bge	zero,r2,10bb8 <_dtoa_r+0x11d4>
   105b8:	b93fffc3 	ldbu	r4,-1(r23)
   105bc:	b8bfffc4 	addi	r2,r23,-1
   105c0:	1007883a 	mov	r3,r2
   105c4:	01800e44 	movi	r6,57
   105c8:	d9c00717 	ldw	r7,28(sp)
   105cc:	00000506 	br	105e4 <_dtoa_r+0xc00>
   105d0:	18ffffc4 	addi	r3,r3,-1
   105d4:	11c12326 	beq	r2,r7,10a64 <_dtoa_r+0x1080>
   105d8:	19000003 	ldbu	r4,0(r3)
   105dc:	102f883a 	mov	r23,r2
   105e0:	10bfffc4 	addi	r2,r2,-1
   105e4:	21403fcc 	andi	r5,r4,255
   105e8:	2940201c 	xori	r5,r5,128
   105ec:	297fe004 	addi	r5,r5,-128
   105f0:	29bff726 	beq	r5,r6,105d0 <__alt_data_end+0xfc0105d0>
   105f4:	21000044 	addi	r4,r4,1
   105f8:	11000005 	stb	r4,0(r2)
   105fc:	a80b883a 	mov	r5,r21
   10600:	e009883a 	mov	r4,fp
   10604:	00131440 	call	13144 <_Bfree>
   10608:	883ea026 	beq	r17,zero,1008c <__alt_data_end+0xfc01008c>
   1060c:	90000426 	beq	r18,zero,10620 <_dtoa_r+0xc3c>
   10610:	94400326 	beq	r18,r17,10620 <_dtoa_r+0xc3c>
   10614:	900b883a 	mov	r5,r18
   10618:	e009883a 	mov	r4,fp
   1061c:	00131440 	call	13144 <_Bfree>
   10620:	880b883a 	mov	r5,r17
   10624:	e009883a 	mov	r4,fp
   10628:	00131440 	call	13144 <_Bfree>
   1062c:	003e9706 	br	1008c <__alt_data_end+0xfc01008c>
   10630:	01800044 	movi	r6,1
   10634:	d9800e15 	stw	r6,56(sp)
   10638:	003d9606 	br	fc94 <__alt_data_end+0xfc00fc94>
   1063c:	d8800817 	ldw	r2,32(sp)
   10640:	d8c00517 	ldw	r3,20(sp)
   10644:	d8000d15 	stw	zero,52(sp)
   10648:	10c5c83a 	sub	r2,r2,r3
   1064c:	00c9c83a 	sub	r4,zero,r3
   10650:	d8800815 	stw	r2,32(sp)
   10654:	d9000a15 	stw	r4,40(sp)
   10658:	003d9706 	br	fcb8 <__alt_data_end+0xfc00fcb8>
   1065c:	05adc83a 	sub	r22,zero,r22
   10660:	dd800815 	stw	r22,32(sp)
   10664:	002d883a 	mov	r22,zero
   10668:	003d8e06 	br	fca4 <__alt_data_end+0xfc00fca4>
   1066c:	d9000517 	ldw	r4,20(sp)
   10670:	0019c580 	call	19c58 <__floatsidf>
   10674:	100d883a 	mov	r6,r2
   10678:	180f883a 	mov	r7,r3
   1067c:	a009883a 	mov	r4,r20
   10680:	880b883a 	mov	r5,r17
   10684:	00188180 	call	18818 <__eqdf2>
   10688:	103d7126 	beq	r2,zero,fc50 <__alt_data_end+0xfc00fc50>
   1068c:	d9c00517 	ldw	r7,20(sp)
   10690:	39ffffc4 	addi	r7,r7,-1
   10694:	d9c00515 	stw	r7,20(sp)
   10698:	003d6d06 	br	fc50 <__alt_data_end+0xfc00fc50>
   1069c:	dd400a17 	ldw	r21,40(sp)
   106a0:	dd000817 	ldw	r20,32(sp)
   106a4:	0023883a 	mov	r17,zero
   106a8:	003f4806 	br	103cc <__alt_data_end+0xfc0103cc>
   106ac:	10e3c83a 	sub	r17,r2,r3
   106b0:	9448983a 	sll	r4,r18,r17
   106b4:	003d3206 	br	fb80 <__alt_data_end+0xfc00fb80>
   106b8:	d8000e15 	stw	zero,56(sp)
   106bc:	003d7506 	br	fc94 <__alt_data_end+0xfc00fc94>
   106c0:	b005883a 	mov	r2,r22
   106c4:	003f4506 	br	103dc <__alt_data_end+0xfc0103dc>
   106c8:	dc000915 	stw	r16,36(sp)
   106cc:	d9800a17 	ldw	r6,40(sp)
   106d0:	d9400917 	ldw	r5,36(sp)
   106d4:	e009883a 	mov	r4,fp
   106d8:	00137980 	call	13798 <__pow5mult>
   106dc:	1021883a 	mov	r16,r2
   106e0:	003f5a06 	br	1044c <__alt_data_end+0xfc01044c>
   106e4:	01c00044 	movi	r7,1
   106e8:	d9c00b15 	stw	r7,44(sp)
   106ec:	d8802217 	ldw	r2,136(sp)
   106f0:	0081280e 	bge	zero,r2,10b94 <_dtoa_r+0x11b0>
   106f4:	100d883a 	mov	r6,r2
   106f8:	1021883a 	mov	r16,r2
   106fc:	d8800c15 	stw	r2,48(sp)
   10700:	d8800615 	stw	r2,24(sp)
   10704:	003d8806 	br	fd28 <__alt_data_end+0xfc00fd28>
   10708:	d8800617 	ldw	r2,24(sp)
   1070c:	00be9b16 	blt	zero,r2,1017c <__alt_data_end+0xfc01017c>
   10710:	10010f1e 	bne	r2,zero,10b50 <_dtoa_r+0x116c>
   10714:	880b883a 	mov	r5,r17
   10718:	000d883a 	mov	r6,zero
   1071c:	01d00534 	movhi	r7,16404
   10720:	8009883a 	mov	r4,r16
   10724:	0018a700 	call	18a70 <__muldf3>
   10728:	900d883a 	mov	r6,r18
   1072c:	980f883a 	mov	r7,r19
   10730:	1009883a 	mov	r4,r2
   10734:	180b883a 	mov	r5,r3
   10738:	00188a00 	call	188a0 <__gedf2>
   1073c:	002b883a 	mov	r21,zero
   10740:	0023883a 	mov	r17,zero
   10744:	1000bf16 	blt	r2,zero,10a44 <_dtoa_r+0x1060>
   10748:	d9802217 	ldw	r6,136(sp)
   1074c:	ddc00717 	ldw	r23,28(sp)
   10750:	018c303a 	nor	r6,zero,r6
   10754:	d9800515 	stw	r6,20(sp)
   10758:	a80b883a 	mov	r5,r21
   1075c:	e009883a 	mov	r4,fp
   10760:	00131440 	call	13144 <_Bfree>
   10764:	883e4926 	beq	r17,zero,1008c <__alt_data_end+0xfc01008c>
   10768:	003fad06 	br	10620 <__alt_data_end+0xfc010620>
   1076c:	d9c01117 	ldw	r7,68(sp)
   10770:	3801bc26 	beq	r7,zero,10e64 <_dtoa_r+0x1480>
   10774:	10810cc4 	addi	r2,r2,1075
   10778:	dd400a17 	ldw	r21,40(sp)
   1077c:	dd000817 	ldw	r20,32(sp)
   10780:	003f0a06 	br	103ac <__alt_data_end+0xfc0103ac>
   10784:	00800704 	movi	r2,28
   10788:	d9000817 	ldw	r4,32(sp)
   1078c:	a0a9883a 	add	r20,r20,r2
   10790:	b0ad883a 	add	r22,r22,r2
   10794:	2089883a 	add	r4,r4,r2
   10798:	d9000815 	stw	r4,32(sp)
   1079c:	003f5106 	br	104e4 <__alt_data_end+0xfc0104e4>
   107a0:	d8c00317 	ldw	r3,12(sp)
   107a4:	b8c1fc0e 	bge	r23,r3,10f98 <_dtoa_r+0x15b4>
   107a8:	0027883a 	mov	r19,zero
   107ac:	b805883a 	mov	r2,r23
   107b0:	003f3e06 	br	104ac <__alt_data_end+0xfc0104ac>
   107b4:	880b883a 	mov	r5,r17
   107b8:	e009883a 	mov	r4,fp
   107bc:	000f883a 	mov	r7,zero
   107c0:	01800284 	movi	r6,10
   107c4:	001316c0 	call	1316c <__multadd>
   107c8:	d9000c17 	ldw	r4,48(sp)
   107cc:	1023883a 	mov	r17,r2
   107d0:	0102040e 	bge	zero,r4,10fe4 <_dtoa_r+0x1600>
   107d4:	d9000615 	stw	r4,24(sp)
   107d8:	0500050e 	bge	zero,r20,107f0 <_dtoa_r+0xe0c>
   107dc:	880b883a 	mov	r5,r17
   107e0:	a00d883a 	mov	r6,r20
   107e4:	e009883a 	mov	r4,fp
   107e8:	00138d80 	call	138d8 <__lshift>
   107ec:	1023883a 	mov	r17,r2
   107f0:	9801241e 	bne	r19,zero,10c84 <_dtoa_r+0x12a0>
   107f4:	8829883a 	mov	r20,r17
   107f8:	d9000617 	ldw	r4,24(sp)
   107fc:	dcc00717 	ldw	r19,28(sp)
   10800:	9480004c 	andi	r18,r18,1
   10804:	20bfffc4 	addi	r2,r4,-1
   10808:	9885883a 	add	r2,r19,r2
   1080c:	d8800415 	stw	r2,16(sp)
   10810:	dc800615 	stw	r18,24(sp)
   10814:	a80b883a 	mov	r5,r21
   10818:	8009883a 	mov	r4,r16
   1081c:	000f7bc0 	call	f7bc <quorem>
   10820:	880b883a 	mov	r5,r17
   10824:	8009883a 	mov	r4,r16
   10828:	102f883a 	mov	r23,r2
   1082c:	0013a200 	call	13a20 <__mcmp>
   10830:	a80b883a 	mov	r5,r21
   10834:	a00d883a 	mov	r6,r20
   10838:	e009883a 	mov	r4,fp
   1083c:	102d883a 	mov	r22,r2
   10840:	0013a800 	call	13a80 <__mdiff>
   10844:	1007883a 	mov	r3,r2
   10848:	10800317 	ldw	r2,12(r2)
   1084c:	bc800c04 	addi	r18,r23,48
   10850:	180b883a 	mov	r5,r3
   10854:	10004e1e 	bne	r2,zero,10990 <_dtoa_r+0xfac>
   10858:	8009883a 	mov	r4,r16
   1085c:	d8c01615 	stw	r3,88(sp)
   10860:	0013a200 	call	13a20 <__mcmp>
   10864:	d8c01617 	ldw	r3,88(sp)
   10868:	e009883a 	mov	r4,fp
   1086c:	d8801615 	stw	r2,88(sp)
   10870:	180b883a 	mov	r5,r3
   10874:	00131440 	call	13144 <_Bfree>
   10878:	d8801617 	ldw	r2,88(sp)
   1087c:	1000041e 	bne	r2,zero,10890 <_dtoa_r+0xeac>
   10880:	d9800317 	ldw	r6,12(sp)
   10884:	3000021e 	bne	r6,zero,10890 <_dtoa_r+0xeac>
   10888:	d8c00617 	ldw	r3,24(sp)
   1088c:	18003726 	beq	r3,zero,1096c <_dtoa_r+0xf88>
   10890:	b0002016 	blt	r22,zero,10914 <_dtoa_r+0xf30>
   10894:	b000041e 	bne	r22,zero,108a8 <_dtoa_r+0xec4>
   10898:	d9000317 	ldw	r4,12(sp)
   1089c:	2000021e 	bne	r4,zero,108a8 <_dtoa_r+0xec4>
   108a0:	d8c00617 	ldw	r3,24(sp)
   108a4:	18001b26 	beq	r3,zero,10914 <_dtoa_r+0xf30>
   108a8:	00810716 	blt	zero,r2,10cc8 <_dtoa_r+0x12e4>
   108ac:	d8c00417 	ldw	r3,16(sp)
   108b0:	9d800044 	addi	r22,r19,1
   108b4:	9c800005 	stb	r18,0(r19)
   108b8:	b02f883a 	mov	r23,r22
   108bc:	98c10626 	beq	r19,r3,10cd8 <_dtoa_r+0x12f4>
   108c0:	800b883a 	mov	r5,r16
   108c4:	000f883a 	mov	r7,zero
   108c8:	01800284 	movi	r6,10
   108cc:	e009883a 	mov	r4,fp
   108d0:	001316c0 	call	1316c <__multadd>
   108d4:	1021883a 	mov	r16,r2
   108d8:	000f883a 	mov	r7,zero
   108dc:	01800284 	movi	r6,10
   108e0:	880b883a 	mov	r5,r17
   108e4:	e009883a 	mov	r4,fp
   108e8:	8d002526 	beq	r17,r20,10980 <_dtoa_r+0xf9c>
   108ec:	001316c0 	call	1316c <__multadd>
   108f0:	a00b883a 	mov	r5,r20
   108f4:	000f883a 	mov	r7,zero
   108f8:	01800284 	movi	r6,10
   108fc:	e009883a 	mov	r4,fp
   10900:	1023883a 	mov	r17,r2
   10904:	001316c0 	call	1316c <__multadd>
   10908:	1029883a 	mov	r20,r2
   1090c:	b027883a 	mov	r19,r22
   10910:	003fc006 	br	10814 <__alt_data_end+0xfc010814>
   10914:	9011883a 	mov	r8,r18
   10918:	00800e0e 	bge	zero,r2,10954 <_dtoa_r+0xf70>
   1091c:	800b883a 	mov	r5,r16
   10920:	01800044 	movi	r6,1
   10924:	e009883a 	mov	r4,fp
   10928:	da001715 	stw	r8,92(sp)
   1092c:	00138d80 	call	138d8 <__lshift>
   10930:	a80b883a 	mov	r5,r21
   10934:	1009883a 	mov	r4,r2
   10938:	1021883a 	mov	r16,r2
   1093c:	0013a200 	call	13a20 <__mcmp>
   10940:	da001717 	ldw	r8,92(sp)
   10944:	0081960e 	bge	zero,r2,10fa0 <_dtoa_r+0x15bc>
   10948:	00800e44 	movi	r2,57
   1094c:	40817026 	beq	r8,r2,10f10 <_dtoa_r+0x152c>
   10950:	ba000c44 	addi	r8,r23,49
   10954:	8825883a 	mov	r18,r17
   10958:	9dc00044 	addi	r23,r19,1
   1095c:	9a000005 	stb	r8,0(r19)
   10960:	a023883a 	mov	r17,r20
   10964:	dc000915 	stw	r16,36(sp)
   10968:	003f2406 	br	105fc <__alt_data_end+0xfc0105fc>
   1096c:	00800e44 	movi	r2,57
   10970:	9011883a 	mov	r8,r18
   10974:	90816626 	beq	r18,r2,10f10 <_dtoa_r+0x152c>
   10978:	05bff516 	blt	zero,r22,10950 <__alt_data_end+0xfc010950>
   1097c:	003ff506 	br	10954 <__alt_data_end+0xfc010954>
   10980:	001316c0 	call	1316c <__multadd>
   10984:	1023883a 	mov	r17,r2
   10988:	1029883a 	mov	r20,r2
   1098c:	003fdf06 	br	1090c <__alt_data_end+0xfc01090c>
   10990:	e009883a 	mov	r4,fp
   10994:	00131440 	call	13144 <_Bfree>
   10998:	00800044 	movi	r2,1
   1099c:	003fbc06 	br	10890 <__alt_data_end+0xfc010890>
   109a0:	a80b883a 	mov	r5,r21
   109a4:	8009883a 	mov	r4,r16
   109a8:	0013a200 	call	13a20 <__mcmp>
   109ac:	103edb0e 	bge	r2,zero,1051c <__alt_data_end+0xfc01051c>
   109b0:	800b883a 	mov	r5,r16
   109b4:	000f883a 	mov	r7,zero
   109b8:	01800284 	movi	r6,10
   109bc:	e009883a 	mov	r4,fp
   109c0:	001316c0 	call	1316c <__multadd>
   109c4:	1021883a 	mov	r16,r2
   109c8:	d8800517 	ldw	r2,20(sp)
   109cc:	d8c00b17 	ldw	r3,44(sp)
   109d0:	10bfffc4 	addi	r2,r2,-1
   109d4:	d8800515 	stw	r2,20(sp)
   109d8:	183f761e 	bne	r3,zero,107b4 <__alt_data_end+0xfc0107b4>
   109dc:	d9000c17 	ldw	r4,48(sp)
   109e0:	0101730e 	bge	zero,r4,10fb0 <_dtoa_r+0x15cc>
   109e4:	d9000615 	stw	r4,24(sp)
   109e8:	003ed006 	br	1052c <__alt_data_end+0xfc01052c>
   109ec:	00800084 	movi	r2,2
   109f0:	3081861e 	bne	r6,r2,1100c <_dtoa_r+0x1628>
   109f4:	d8000b15 	stw	zero,44(sp)
   109f8:	003f3c06 	br	106ec <__alt_data_end+0xfc0106ec>
   109fc:	dc000917 	ldw	r16,36(sp)
   10a00:	003e9206 	br	1044c <__alt_data_end+0xfc01044c>
   10a04:	d9c00317 	ldw	r7,12(sp)
   10a08:	00800084 	movi	r2,2
   10a0c:	11fec50e 	bge	r2,r7,10524 <__alt_data_end+0xfc010524>
   10a10:	d9000617 	ldw	r4,24(sp)
   10a14:	20013c1e 	bne	r4,zero,10f08 <_dtoa_r+0x1524>
   10a18:	a80b883a 	mov	r5,r21
   10a1c:	000f883a 	mov	r7,zero
   10a20:	01800144 	movi	r6,5
   10a24:	e009883a 	mov	r4,fp
   10a28:	001316c0 	call	1316c <__multadd>
   10a2c:	100b883a 	mov	r5,r2
   10a30:	8009883a 	mov	r4,r16
   10a34:	102b883a 	mov	r21,r2
   10a38:	0013a200 	call	13a20 <__mcmp>
   10a3c:	dc000915 	stw	r16,36(sp)
   10a40:	00bf410e 	bge	zero,r2,10748 <__alt_data_end+0xfc010748>
   10a44:	d9c00717 	ldw	r7,28(sp)
   10a48:	00800c44 	movi	r2,49
   10a4c:	38800005 	stb	r2,0(r7)
   10a50:	d8800517 	ldw	r2,20(sp)
   10a54:	3dc00044 	addi	r23,r7,1
   10a58:	10800044 	addi	r2,r2,1
   10a5c:	d8800515 	stw	r2,20(sp)
   10a60:	003f3d06 	br	10758 <__alt_data_end+0xfc010758>
   10a64:	d9800517 	ldw	r6,20(sp)
   10a68:	d9c00717 	ldw	r7,28(sp)
   10a6c:	00800c44 	movi	r2,49
   10a70:	31800044 	addi	r6,r6,1
   10a74:	d9800515 	stw	r6,20(sp)
   10a78:	38800005 	stb	r2,0(r7)
   10a7c:	003edf06 	br	105fc <__alt_data_end+0xfc0105fc>
   10a80:	d8000b15 	stw	zero,44(sp)
   10a84:	003c9f06 	br	fd04 <__alt_data_end+0xfc00fd04>
   10a88:	903e7e1e 	bne	r18,zero,10484 <__alt_data_end+0xfc010484>
   10a8c:	00800434 	movhi	r2,16
   10a90:	10bfffc4 	addi	r2,r2,-1
   10a94:	9884703a 	and	r2,r19,r2
   10a98:	1000ea1e 	bne	r2,zero,10e44 <_dtoa_r+0x1460>
   10a9c:	9cdffc2c 	andhi	r19,r19,32752
   10aa0:	9800e826 	beq	r19,zero,10e44 <_dtoa_r+0x1460>
   10aa4:	d9c00817 	ldw	r7,32(sp)
   10aa8:	b5800044 	addi	r22,r22,1
   10aac:	04c00044 	movi	r19,1
   10ab0:	39c00044 	addi	r7,r7,1
   10ab4:	d9c00815 	stw	r7,32(sp)
   10ab8:	d8800d17 	ldw	r2,52(sp)
   10abc:	103e721e 	bne	r2,zero,10488 <__alt_data_end+0xfc010488>
   10ac0:	00800044 	movi	r2,1
   10ac4:	003e7906 	br	104ac <__alt_data_end+0xfc0104ac>
   10ac8:	8009883a 	mov	r4,r16
   10acc:	0019c580 	call	19c58 <__floatsidf>
   10ad0:	d9800f17 	ldw	r6,60(sp)
   10ad4:	d9c01017 	ldw	r7,64(sp)
   10ad8:	1009883a 	mov	r4,r2
   10adc:	180b883a 	mov	r5,r3
   10ae0:	0018a700 	call	18a70 <__muldf3>
   10ae4:	000d883a 	mov	r6,zero
   10ae8:	01d00734 	movhi	r7,16412
   10aec:	1009883a 	mov	r4,r2
   10af0:	180b883a 	mov	r5,r3
   10af4:	001759c0 	call	1759c <__adddf3>
   10af8:	047f3034 	movhi	r17,64704
   10afc:	1021883a 	mov	r16,r2
   10b00:	1c63883a 	add	r17,r3,r17
   10b04:	d9000f17 	ldw	r4,60(sp)
   10b08:	d9401017 	ldw	r5,64(sp)
   10b0c:	000d883a 	mov	r6,zero
   10b10:	01d00534 	movhi	r7,16404
   10b14:	00192dc0 	call	192dc <__subdf3>
   10b18:	800d883a 	mov	r6,r16
   10b1c:	880f883a 	mov	r7,r17
   10b20:	1009883a 	mov	r4,r2
   10b24:	180b883a 	mov	r5,r3
   10b28:	102b883a 	mov	r21,r2
   10b2c:	1829883a 	mov	r20,r3
   10b30:	00188a00 	call	188a0 <__gedf2>
   10b34:	00806c16 	blt	zero,r2,10ce8 <_dtoa_r+0x1304>
   10b38:	89e0003c 	xorhi	r7,r17,32768
   10b3c:	800d883a 	mov	r6,r16
   10b40:	a809883a 	mov	r4,r21
   10b44:	a00b883a 	mov	r5,r20
   10b48:	001897c0 	call	1897c <__ledf2>
   10b4c:	103d7e0e 	bge	r2,zero,10148 <__alt_data_end+0xfc010148>
   10b50:	002b883a 	mov	r21,zero
   10b54:	0023883a 	mov	r17,zero
   10b58:	003efb06 	br	10748 <__alt_data_end+0xfc010748>
   10b5c:	d8800717 	ldw	r2,28(sp)
   10b60:	003bd006 	br	faa4 <__alt_data_end+0xfc00faa4>
   10b64:	d9000a17 	ldw	r4,40(sp)
   10b68:	d9800d17 	ldw	r6,52(sp)
   10b6c:	dd400a15 	stw	r21,40(sp)
   10b70:	a905c83a 	sub	r2,r21,r4
   10b74:	308d883a 	add	r6,r6,r2
   10b78:	d9800d15 	stw	r6,52(sp)
   10b7c:	002b883a 	mov	r21,zero
   10b80:	003e0606 	br	1039c <__alt_data_end+0xfc01039c>
   10b84:	9023883a 	mov	r17,r18
   10b88:	9829883a 	mov	r20,r19
   10b8c:	04000084 	movi	r16,2
   10b90:	003c9206 	br	fddc <__alt_data_end+0xfc00fddc>
   10b94:	04000044 	movi	r16,1
   10b98:	dc000c15 	stw	r16,48(sp)
   10b9c:	dc000615 	stw	r16,24(sp)
   10ba0:	dc002215 	stw	r16,136(sp)
   10ba4:	e0001115 	stw	zero,68(fp)
   10ba8:	000b883a 	mov	r5,zero
   10bac:	003c6906 	br	fd54 <__alt_data_end+0xfc00fd54>
   10bb0:	3021883a 	mov	r16,r6
   10bb4:	003ffb06 	br	10ba4 <__alt_data_end+0xfc010ba4>
   10bb8:	1000021e 	bne	r2,zero,10bc4 <_dtoa_r+0x11e0>
   10bbc:	4200004c 	andi	r8,r8,1
   10bc0:	403e7d1e 	bne	r8,zero,105b8 <__alt_data_end+0xfc0105b8>
   10bc4:	01000c04 	movi	r4,48
   10bc8:	00000106 	br	10bd0 <_dtoa_r+0x11ec>
   10bcc:	102f883a 	mov	r23,r2
   10bd0:	b8bfffc4 	addi	r2,r23,-1
   10bd4:	10c00007 	ldb	r3,0(r2)
   10bd8:	193ffc26 	beq	r3,r4,10bcc <__alt_data_end+0xfc010bcc>
   10bdc:	003e8706 	br	105fc <__alt_data_end+0xfc0105fc>
   10be0:	d8800517 	ldw	r2,20(sp)
   10be4:	00a3c83a 	sub	r17,zero,r2
   10be8:	8800a426 	beq	r17,zero,10e7c <_dtoa_r+0x1498>
   10bec:	888003cc 	andi	r2,r17,15
   10bf0:	100490fa 	slli	r2,r2,3
   10bf4:	00c000b4 	movhi	r3,2
   10bf8:	18f12c04 	addi	r3,r3,-15184
   10bfc:	1885883a 	add	r2,r3,r2
   10c00:	11800017 	ldw	r6,0(r2)
   10c04:	11c00117 	ldw	r7,4(r2)
   10c08:	9009883a 	mov	r4,r18
   10c0c:	980b883a 	mov	r5,r19
   10c10:	8823d13a 	srai	r17,r17,4
   10c14:	0018a700 	call	18a70 <__muldf3>
   10c18:	d8800f15 	stw	r2,60(sp)
   10c1c:	d8c01015 	stw	r3,64(sp)
   10c20:	8800e826 	beq	r17,zero,10fc4 <_dtoa_r+0x15e0>
   10c24:	050000b4 	movhi	r20,2
   10c28:	a5312204 	addi	r20,r20,-15224
   10c2c:	04000084 	movi	r16,2
   10c30:	8980004c 	andi	r6,r17,1
   10c34:	1009883a 	mov	r4,r2
   10c38:	8823d07a 	srai	r17,r17,1
   10c3c:	180b883a 	mov	r5,r3
   10c40:	30000426 	beq	r6,zero,10c54 <_dtoa_r+0x1270>
   10c44:	a1800017 	ldw	r6,0(r20)
   10c48:	a1c00117 	ldw	r7,4(r20)
   10c4c:	84000044 	addi	r16,r16,1
   10c50:	0018a700 	call	18a70 <__muldf3>
   10c54:	a5000204 	addi	r20,r20,8
   10c58:	883ff51e 	bne	r17,zero,10c30 <__alt_data_end+0xfc010c30>
   10c5c:	d8800f15 	stw	r2,60(sp)
   10c60:	d8c01015 	stw	r3,64(sp)
   10c64:	003c7606 	br	fe40 <__alt_data_end+0xfc00fe40>
   10c68:	00c00c04 	movi	r3,48
   10c6c:	10c00005 	stb	r3,0(r2)
   10c70:	d8c00517 	ldw	r3,20(sp)
   10c74:	bd3fffc3 	ldbu	r20,-1(r23)
   10c78:	18c00044 	addi	r3,r3,1
   10c7c:	d8c00515 	stw	r3,20(sp)
   10c80:	003db906 	br	10368 <__alt_data_end+0xfc010368>
   10c84:	89400117 	ldw	r5,4(r17)
   10c88:	e009883a 	mov	r4,fp
   10c8c:	001309c0 	call	1309c <_Balloc>
   10c90:	89800417 	ldw	r6,16(r17)
   10c94:	89400304 	addi	r5,r17,12
   10c98:	11000304 	addi	r4,r2,12
   10c9c:	31800084 	addi	r6,r6,2
   10ca0:	318d883a 	add	r6,r6,r6
   10ca4:	318d883a 	add	r6,r6,r6
   10ca8:	1027883a 	mov	r19,r2
   10cac:	0012cd00 	call	12cd0 <memcpy>
   10cb0:	01800044 	movi	r6,1
   10cb4:	980b883a 	mov	r5,r19
   10cb8:	e009883a 	mov	r4,fp
   10cbc:	00138d80 	call	138d8 <__lshift>
   10cc0:	1029883a 	mov	r20,r2
   10cc4:	003ecc06 	br	107f8 <__alt_data_end+0xfc0107f8>
   10cc8:	00800e44 	movi	r2,57
   10ccc:	90809026 	beq	r18,r2,10f10 <_dtoa_r+0x152c>
   10cd0:	92000044 	addi	r8,r18,1
   10cd4:	003f1f06 	br	10954 <__alt_data_end+0xfc010954>
   10cd8:	9011883a 	mov	r8,r18
   10cdc:	8825883a 	mov	r18,r17
   10ce0:	a023883a 	mov	r17,r20
   10ce4:	003e2906 	br	1058c <__alt_data_end+0xfc01058c>
   10ce8:	002b883a 	mov	r21,zero
   10cec:	0023883a 	mov	r17,zero
   10cf0:	003f5406 	br	10a44 <__alt_data_end+0xfc010a44>
   10cf4:	61bfffc4 	addi	r6,r12,-1
   10cf8:	300490fa 	slli	r2,r6,3
   10cfc:	00c000b4 	movhi	r3,2
   10d00:	18f12c04 	addi	r3,r3,-15184
   10d04:	1885883a 	add	r2,r3,r2
   10d08:	11000017 	ldw	r4,0(r2)
   10d0c:	11400117 	ldw	r5,4(r2)
   10d10:	d8800717 	ldw	r2,28(sp)
   10d14:	880f883a 	mov	r7,r17
   10d18:	d9801215 	stw	r6,72(sp)
   10d1c:	800d883a 	mov	r6,r16
   10d20:	db001615 	stw	r12,88(sp)
   10d24:	15c00044 	addi	r23,r2,1
   10d28:	0018a700 	call	18a70 <__muldf3>
   10d2c:	d9401017 	ldw	r5,64(sp)
   10d30:	d9000f17 	ldw	r4,60(sp)
   10d34:	d8c01515 	stw	r3,84(sp)
   10d38:	d8801415 	stw	r2,80(sp)
   10d3c:	0019bd80 	call	19bd8 <__fixdfsi>
   10d40:	1009883a 	mov	r4,r2
   10d44:	1021883a 	mov	r16,r2
   10d48:	0019c580 	call	19c58 <__floatsidf>
   10d4c:	d9000f17 	ldw	r4,60(sp)
   10d50:	d9401017 	ldw	r5,64(sp)
   10d54:	100d883a 	mov	r6,r2
   10d58:	180f883a 	mov	r7,r3
   10d5c:	00192dc0 	call	192dc <__subdf3>
   10d60:	1829883a 	mov	r20,r3
   10d64:	d8c00717 	ldw	r3,28(sp)
   10d68:	84000c04 	addi	r16,r16,48
   10d6c:	1023883a 	mov	r17,r2
   10d70:	1c000005 	stb	r16,0(r3)
   10d74:	db001617 	ldw	r12,88(sp)
   10d78:	00800044 	movi	r2,1
   10d7c:	60802226 	beq	r12,r2,10e08 <_dtoa_r+0x1424>
   10d80:	d9c00717 	ldw	r7,28(sp)
   10d84:	8805883a 	mov	r2,r17
   10d88:	b82b883a 	mov	r21,r23
   10d8c:	3b19883a 	add	r12,r7,r12
   10d90:	6023883a 	mov	r17,r12
   10d94:	a007883a 	mov	r3,r20
   10d98:	dc800f15 	stw	r18,60(sp)
   10d9c:	000d883a 	mov	r6,zero
   10da0:	01d00934 	movhi	r7,16420
   10da4:	1009883a 	mov	r4,r2
   10da8:	180b883a 	mov	r5,r3
   10dac:	0018a700 	call	18a70 <__muldf3>
   10db0:	180b883a 	mov	r5,r3
   10db4:	1009883a 	mov	r4,r2
   10db8:	1829883a 	mov	r20,r3
   10dbc:	1025883a 	mov	r18,r2
   10dc0:	0019bd80 	call	19bd8 <__fixdfsi>
   10dc4:	1009883a 	mov	r4,r2
   10dc8:	1021883a 	mov	r16,r2
   10dcc:	0019c580 	call	19c58 <__floatsidf>
   10dd0:	100d883a 	mov	r6,r2
   10dd4:	180f883a 	mov	r7,r3
   10dd8:	9009883a 	mov	r4,r18
   10ddc:	a00b883a 	mov	r5,r20
   10de0:	84000c04 	addi	r16,r16,48
   10de4:	00192dc0 	call	192dc <__subdf3>
   10de8:	ad400044 	addi	r21,r21,1
   10dec:	ac3fffc5 	stb	r16,-1(r21)
   10df0:	ac7fea1e 	bne	r21,r17,10d9c <__alt_data_end+0xfc010d9c>
   10df4:	1023883a 	mov	r17,r2
   10df8:	d8801217 	ldw	r2,72(sp)
   10dfc:	dc800f17 	ldw	r18,60(sp)
   10e00:	1829883a 	mov	r20,r3
   10e04:	b8af883a 	add	r23,r23,r2
   10e08:	d9001417 	ldw	r4,80(sp)
   10e0c:	d9401517 	ldw	r5,84(sp)
   10e10:	000d883a 	mov	r6,zero
   10e14:	01cff834 	movhi	r7,16352
   10e18:	001759c0 	call	1759c <__adddf3>
   10e1c:	880d883a 	mov	r6,r17
   10e20:	a00f883a 	mov	r7,r20
   10e24:	1009883a 	mov	r4,r2
   10e28:	180b883a 	mov	r5,r3
   10e2c:	001897c0 	call	1897c <__ledf2>
   10e30:	10003e0e 	bge	r2,zero,10f2c <_dtoa_r+0x1548>
   10e34:	d9001317 	ldw	r4,76(sp)
   10e38:	bd3fffc3 	ldbu	r20,-1(r23)
   10e3c:	d9000515 	stw	r4,20(sp)
   10e40:	003d3b06 	br	10330 <__alt_data_end+0xfc010330>
   10e44:	0027883a 	mov	r19,zero
   10e48:	003f1b06 	br	10ab8 <__alt_data_end+0xfc010ab8>
   10e4c:	d8800817 	ldw	r2,32(sp)
   10e50:	11e9c83a 	sub	r20,r2,r7
   10e54:	0005883a 	mov	r2,zero
   10e58:	003d5406 	br	103ac <__alt_data_end+0xfc0103ac>
   10e5c:	00800044 	movi	r2,1
   10e60:	003dc706 	br	10580 <__alt_data_end+0xfc010580>
   10e64:	d8c00217 	ldw	r3,8(sp)
   10e68:	00800d84 	movi	r2,54
   10e6c:	dd400a17 	ldw	r21,40(sp)
   10e70:	10c5c83a 	sub	r2,r2,r3
   10e74:	dd000817 	ldw	r20,32(sp)
   10e78:	003d4c06 	br	103ac <__alt_data_end+0xfc0103ac>
   10e7c:	dc800f15 	stw	r18,60(sp)
   10e80:	dcc01015 	stw	r19,64(sp)
   10e84:	04000084 	movi	r16,2
   10e88:	003bed06 	br	fe40 <__alt_data_end+0xfc00fe40>
   10e8c:	d9000617 	ldw	r4,24(sp)
   10e90:	203f0d26 	beq	r4,zero,10ac8 <__alt_data_end+0xfc010ac8>
   10e94:	d9800c17 	ldw	r6,48(sp)
   10e98:	01bcab0e 	bge	zero,r6,10148 <__alt_data_end+0xfc010148>
   10e9c:	d9401017 	ldw	r5,64(sp)
   10ea0:	d9000f17 	ldw	r4,60(sp)
   10ea4:	000d883a 	mov	r6,zero
   10ea8:	01d00934 	movhi	r7,16420
   10eac:	0018a700 	call	18a70 <__muldf3>
   10eb0:	81000044 	addi	r4,r16,1
   10eb4:	d8800f15 	stw	r2,60(sp)
   10eb8:	d8c01015 	stw	r3,64(sp)
   10ebc:	0019c580 	call	19c58 <__floatsidf>
   10ec0:	d9800f17 	ldw	r6,60(sp)
   10ec4:	d9c01017 	ldw	r7,64(sp)
   10ec8:	1009883a 	mov	r4,r2
   10ecc:	180b883a 	mov	r5,r3
   10ed0:	0018a700 	call	18a70 <__muldf3>
   10ed4:	01d00734 	movhi	r7,16412
   10ed8:	000d883a 	mov	r6,zero
   10edc:	1009883a 	mov	r4,r2
   10ee0:	180b883a 	mov	r5,r3
   10ee4:	001759c0 	call	1759c <__adddf3>
   10ee8:	d9c00517 	ldw	r7,20(sp)
   10eec:	047f3034 	movhi	r17,64704
   10ef0:	1021883a 	mov	r16,r2
   10ef4:	39ffffc4 	addi	r7,r7,-1
   10ef8:	d9c01315 	stw	r7,76(sp)
   10efc:	1c63883a 	add	r17,r3,r17
   10f00:	db000c17 	ldw	r12,48(sp)
   10f04:	003bea06 	br	feb0 <__alt_data_end+0xfc00feb0>
   10f08:	dc000915 	stw	r16,36(sp)
   10f0c:	003e0e06 	br	10748 <__alt_data_end+0xfc010748>
   10f10:	01000e44 	movi	r4,57
   10f14:	8825883a 	mov	r18,r17
   10f18:	9dc00044 	addi	r23,r19,1
   10f1c:	99000005 	stb	r4,0(r19)
   10f20:	a023883a 	mov	r17,r20
   10f24:	dc000915 	stw	r16,36(sp)
   10f28:	003da406 	br	105bc <__alt_data_end+0xfc0105bc>
   10f2c:	d9801417 	ldw	r6,80(sp)
   10f30:	d9c01517 	ldw	r7,84(sp)
   10f34:	0009883a 	mov	r4,zero
   10f38:	014ff834 	movhi	r5,16352
   10f3c:	00192dc0 	call	192dc <__subdf3>
   10f40:	880d883a 	mov	r6,r17
   10f44:	a00f883a 	mov	r7,r20
   10f48:	1009883a 	mov	r4,r2
   10f4c:	180b883a 	mov	r5,r3
   10f50:	00188a00 	call	188a0 <__gedf2>
   10f54:	00bc7c0e 	bge	zero,r2,10148 <__alt_data_end+0xfc010148>
   10f58:	01000c04 	movi	r4,48
   10f5c:	00000106 	br	10f64 <_dtoa_r+0x1580>
   10f60:	102f883a 	mov	r23,r2
   10f64:	b8bfffc4 	addi	r2,r23,-1
   10f68:	10c00007 	ldb	r3,0(r2)
   10f6c:	193ffc26 	beq	r3,r4,10f60 <__alt_data_end+0xfc010f60>
   10f70:	d9801317 	ldw	r6,76(sp)
   10f74:	d9800515 	stw	r6,20(sp)
   10f78:	003c4406 	br	1008c <__alt_data_end+0xfc01008c>
   10f7c:	d9801317 	ldw	r6,76(sp)
   10f80:	d9800515 	stw	r6,20(sp)
   10f84:	003cea06 	br	10330 <__alt_data_end+0xfc010330>
   10f88:	dd800f17 	ldw	r22,60(sp)
   10f8c:	dcc01017 	ldw	r19,64(sp)
   10f90:	dc801217 	ldw	r18,72(sp)
   10f94:	003c6c06 	br	10148 <__alt_data_end+0xfc010148>
   10f98:	903e031e 	bne	r18,zero,107a8 <__alt_data_end+0xfc0107a8>
   10f9c:	003ebb06 	br	10a8c <__alt_data_end+0xfc010a8c>
   10fa0:	103e6c1e 	bne	r2,zero,10954 <__alt_data_end+0xfc010954>
   10fa4:	4080004c 	andi	r2,r8,1
   10fa8:	103e6a26 	beq	r2,zero,10954 <__alt_data_end+0xfc010954>
   10fac:	003e6606 	br	10948 <__alt_data_end+0xfc010948>
   10fb0:	d8c00317 	ldw	r3,12(sp)
   10fb4:	00800084 	movi	r2,2
   10fb8:	10c02916 	blt	r2,r3,11060 <_dtoa_r+0x167c>
   10fbc:	d9000c17 	ldw	r4,48(sp)
   10fc0:	003e8806 	br	109e4 <__alt_data_end+0xfc0109e4>
   10fc4:	04000084 	movi	r16,2
   10fc8:	003b9d06 	br	fe40 <__alt_data_end+0xfc00fe40>
   10fcc:	d9001317 	ldw	r4,76(sp)
   10fd0:	d9000515 	stw	r4,20(sp)
   10fd4:	003cd606 	br	10330 <__alt_data_end+0xfc010330>
   10fd8:	d8801317 	ldw	r2,76(sp)
   10fdc:	d8800515 	stw	r2,20(sp)
   10fe0:	003c2a06 	br	1008c <__alt_data_end+0xfc01008c>
   10fe4:	d9800317 	ldw	r6,12(sp)
   10fe8:	00800084 	movi	r2,2
   10fec:	11801516 	blt	r2,r6,11044 <_dtoa_r+0x1660>
   10ff0:	d9c00c17 	ldw	r7,48(sp)
   10ff4:	d9c00615 	stw	r7,24(sp)
   10ff8:	003df706 	br	107d8 <__alt_data_end+0xfc0107d8>
   10ffc:	193d3926 	beq	r3,r4,104e4 <__alt_data_end+0xfc0104e4>
   11000:	00c00f04 	movi	r3,60
   11004:	1885c83a 	sub	r2,r3,r2
   11008:	003ddf06 	br	10788 <__alt_data_end+0xfc010788>
   1100c:	e009883a 	mov	r4,fp
   11010:	e0001115 	stw	zero,68(fp)
   11014:	000b883a 	mov	r5,zero
   11018:	001309c0 	call	1309c <_Balloc>
   1101c:	d8800715 	stw	r2,28(sp)
   11020:	d8c00717 	ldw	r3,28(sp)
   11024:	00bfffc4 	movi	r2,-1
   11028:	01000044 	movi	r4,1
   1102c:	d8800c15 	stw	r2,48(sp)
   11030:	e0c01015 	stw	r3,64(fp)
   11034:	d9000b15 	stw	r4,44(sp)
   11038:	d8800615 	stw	r2,24(sp)
   1103c:	d8002215 	stw	zero,136(sp)
   11040:	003c4106 	br	10148 <__alt_data_end+0xfc010148>
   11044:	d8c00c17 	ldw	r3,48(sp)
   11048:	d8c00615 	stw	r3,24(sp)
   1104c:	003e7006 	br	10a10 <__alt_data_end+0xfc010a10>
   11050:	04400044 	movi	r17,1
   11054:	003b2006 	br	fcd8 <__alt_data_end+0xfc00fcd8>
   11058:	000b883a 	mov	r5,zero
   1105c:	003b3d06 	br	fd54 <__alt_data_end+0xfc00fd54>
   11060:	d8800c17 	ldw	r2,48(sp)
   11064:	d8800615 	stw	r2,24(sp)
   11068:	003e6906 	br	10a10 <__alt_data_end+0xfc010a10>

0001106c <__sflush_r>:
   1106c:	2880030b 	ldhu	r2,12(r5)
   11070:	defffb04 	addi	sp,sp,-20
   11074:	dcc00315 	stw	r19,12(sp)
   11078:	dc400115 	stw	r17,4(sp)
   1107c:	dfc00415 	stw	ra,16(sp)
   11080:	dc800215 	stw	r18,8(sp)
   11084:	dc000015 	stw	r16,0(sp)
   11088:	10c0020c 	andi	r3,r2,8
   1108c:	2823883a 	mov	r17,r5
   11090:	2027883a 	mov	r19,r4
   11094:	1800311e 	bne	r3,zero,1115c <__sflush_r+0xf0>
   11098:	28c00117 	ldw	r3,4(r5)
   1109c:	10820014 	ori	r2,r2,2048
   110a0:	2880030d 	sth	r2,12(r5)
   110a4:	00c04b0e 	bge	zero,r3,111d4 <__sflush_r+0x168>
   110a8:	8a000a17 	ldw	r8,40(r17)
   110ac:	40002326 	beq	r8,zero,1113c <__sflush_r+0xd0>
   110b0:	9c000017 	ldw	r16,0(r19)
   110b4:	10c4000c 	andi	r3,r2,4096
   110b8:	98000015 	stw	zero,0(r19)
   110bc:	18004826 	beq	r3,zero,111e0 <__sflush_r+0x174>
   110c0:	89801417 	ldw	r6,80(r17)
   110c4:	10c0010c 	andi	r3,r2,4
   110c8:	18000626 	beq	r3,zero,110e4 <__sflush_r+0x78>
   110cc:	88c00117 	ldw	r3,4(r17)
   110d0:	88800c17 	ldw	r2,48(r17)
   110d4:	30cdc83a 	sub	r6,r6,r3
   110d8:	10000226 	beq	r2,zero,110e4 <__sflush_r+0x78>
   110dc:	88800f17 	ldw	r2,60(r17)
   110e0:	308dc83a 	sub	r6,r6,r2
   110e4:	89400717 	ldw	r5,28(r17)
   110e8:	000f883a 	mov	r7,zero
   110ec:	9809883a 	mov	r4,r19
   110f0:	403ee83a 	callr	r8
   110f4:	00ffffc4 	movi	r3,-1
   110f8:	10c04426 	beq	r2,r3,1120c <__sflush_r+0x1a0>
   110fc:	88c0030b 	ldhu	r3,12(r17)
   11100:	89000417 	ldw	r4,16(r17)
   11104:	88000115 	stw	zero,4(r17)
   11108:	197dffcc 	andi	r5,r3,63487
   1110c:	8940030d 	sth	r5,12(r17)
   11110:	89000015 	stw	r4,0(r17)
   11114:	18c4000c 	andi	r3,r3,4096
   11118:	18002c1e 	bne	r3,zero,111cc <__sflush_r+0x160>
   1111c:	89400c17 	ldw	r5,48(r17)
   11120:	9c000015 	stw	r16,0(r19)
   11124:	28000526 	beq	r5,zero,1113c <__sflush_r+0xd0>
   11128:	88801004 	addi	r2,r17,64
   1112c:	28800226 	beq	r5,r2,11138 <__sflush_r+0xcc>
   11130:	9809883a 	mov	r4,r19
   11134:	00117e80 	call	117e8 <_free_r>
   11138:	88000c15 	stw	zero,48(r17)
   1113c:	0005883a 	mov	r2,zero
   11140:	dfc00417 	ldw	ra,16(sp)
   11144:	dcc00317 	ldw	r19,12(sp)
   11148:	dc800217 	ldw	r18,8(sp)
   1114c:	dc400117 	ldw	r17,4(sp)
   11150:	dc000017 	ldw	r16,0(sp)
   11154:	dec00504 	addi	sp,sp,20
   11158:	f800283a 	ret
   1115c:	2c800417 	ldw	r18,16(r5)
   11160:	903ff626 	beq	r18,zero,1113c <__alt_data_end+0xfc01113c>
   11164:	2c000017 	ldw	r16,0(r5)
   11168:	108000cc 	andi	r2,r2,3
   1116c:	2c800015 	stw	r18,0(r5)
   11170:	84a1c83a 	sub	r16,r16,r18
   11174:	1000131e 	bne	r2,zero,111c4 <__sflush_r+0x158>
   11178:	28800517 	ldw	r2,20(r5)
   1117c:	88800215 	stw	r2,8(r17)
   11180:	04000316 	blt	zero,r16,11190 <__sflush_r+0x124>
   11184:	003fed06 	br	1113c <__alt_data_end+0xfc01113c>
   11188:	90a5883a 	add	r18,r18,r2
   1118c:	043feb0e 	bge	zero,r16,1113c <__alt_data_end+0xfc01113c>
   11190:	88800917 	ldw	r2,36(r17)
   11194:	89400717 	ldw	r5,28(r17)
   11198:	800f883a 	mov	r7,r16
   1119c:	900d883a 	mov	r6,r18
   111a0:	9809883a 	mov	r4,r19
   111a4:	103ee83a 	callr	r2
   111a8:	80a1c83a 	sub	r16,r16,r2
   111ac:	00bff616 	blt	zero,r2,11188 <__alt_data_end+0xfc011188>
   111b0:	88c0030b 	ldhu	r3,12(r17)
   111b4:	00bfffc4 	movi	r2,-1
   111b8:	18c01014 	ori	r3,r3,64
   111bc:	88c0030d 	sth	r3,12(r17)
   111c0:	003fdf06 	br	11140 <__alt_data_end+0xfc011140>
   111c4:	0005883a 	mov	r2,zero
   111c8:	003fec06 	br	1117c <__alt_data_end+0xfc01117c>
   111cc:	88801415 	stw	r2,80(r17)
   111d0:	003fd206 	br	1111c <__alt_data_end+0xfc01111c>
   111d4:	28c00f17 	ldw	r3,60(r5)
   111d8:	00ffb316 	blt	zero,r3,110a8 <__alt_data_end+0xfc0110a8>
   111dc:	003fd706 	br	1113c <__alt_data_end+0xfc01113c>
   111e0:	89400717 	ldw	r5,28(r17)
   111e4:	000d883a 	mov	r6,zero
   111e8:	01c00044 	movi	r7,1
   111ec:	9809883a 	mov	r4,r19
   111f0:	403ee83a 	callr	r8
   111f4:	100d883a 	mov	r6,r2
   111f8:	00bfffc4 	movi	r2,-1
   111fc:	30801426 	beq	r6,r2,11250 <__sflush_r+0x1e4>
   11200:	8880030b 	ldhu	r2,12(r17)
   11204:	8a000a17 	ldw	r8,40(r17)
   11208:	003fae06 	br	110c4 <__alt_data_end+0xfc0110c4>
   1120c:	98c00017 	ldw	r3,0(r19)
   11210:	183fba26 	beq	r3,zero,110fc <__alt_data_end+0xfc0110fc>
   11214:	01000744 	movi	r4,29
   11218:	19000626 	beq	r3,r4,11234 <__sflush_r+0x1c8>
   1121c:	01000584 	movi	r4,22
   11220:	19000426 	beq	r3,r4,11234 <__sflush_r+0x1c8>
   11224:	88c0030b 	ldhu	r3,12(r17)
   11228:	18c01014 	ori	r3,r3,64
   1122c:	88c0030d 	sth	r3,12(r17)
   11230:	003fc306 	br	11140 <__alt_data_end+0xfc011140>
   11234:	8880030b 	ldhu	r2,12(r17)
   11238:	88c00417 	ldw	r3,16(r17)
   1123c:	88000115 	stw	zero,4(r17)
   11240:	10bdffcc 	andi	r2,r2,63487
   11244:	8880030d 	sth	r2,12(r17)
   11248:	88c00015 	stw	r3,0(r17)
   1124c:	003fb306 	br	1111c <__alt_data_end+0xfc01111c>
   11250:	98800017 	ldw	r2,0(r19)
   11254:	103fea26 	beq	r2,zero,11200 <__alt_data_end+0xfc011200>
   11258:	00c00744 	movi	r3,29
   1125c:	10c00226 	beq	r2,r3,11268 <__sflush_r+0x1fc>
   11260:	00c00584 	movi	r3,22
   11264:	10c0031e 	bne	r2,r3,11274 <__sflush_r+0x208>
   11268:	9c000015 	stw	r16,0(r19)
   1126c:	0005883a 	mov	r2,zero
   11270:	003fb306 	br	11140 <__alt_data_end+0xfc011140>
   11274:	88c0030b 	ldhu	r3,12(r17)
   11278:	3005883a 	mov	r2,r6
   1127c:	18c01014 	ori	r3,r3,64
   11280:	88c0030d 	sth	r3,12(r17)
   11284:	003fae06 	br	11140 <__alt_data_end+0xfc011140>

00011288 <_fflush_r>:
   11288:	defffd04 	addi	sp,sp,-12
   1128c:	dc000115 	stw	r16,4(sp)
   11290:	dfc00215 	stw	ra,8(sp)
   11294:	2021883a 	mov	r16,r4
   11298:	20000226 	beq	r4,zero,112a4 <_fflush_r+0x1c>
   1129c:	20800e17 	ldw	r2,56(r4)
   112a0:	10000c26 	beq	r2,zero,112d4 <_fflush_r+0x4c>
   112a4:	2880030f 	ldh	r2,12(r5)
   112a8:	1000051e 	bne	r2,zero,112c0 <_fflush_r+0x38>
   112ac:	0005883a 	mov	r2,zero
   112b0:	dfc00217 	ldw	ra,8(sp)
   112b4:	dc000117 	ldw	r16,4(sp)
   112b8:	dec00304 	addi	sp,sp,12
   112bc:	f800283a 	ret
   112c0:	8009883a 	mov	r4,r16
   112c4:	dfc00217 	ldw	ra,8(sp)
   112c8:	dc000117 	ldw	r16,4(sp)
   112cc:	dec00304 	addi	sp,sp,12
   112d0:	001106c1 	jmpi	1106c <__sflush_r>
   112d4:	d9400015 	stw	r5,0(sp)
   112d8:	00116740 	call	11674 <__sinit>
   112dc:	d9400017 	ldw	r5,0(sp)
   112e0:	003ff006 	br	112a4 <__alt_data_end+0xfc0112a4>

000112e4 <fflush>:
   112e4:	20000526 	beq	r4,zero,112fc <fflush+0x18>
   112e8:	008000b4 	movhi	r2,2
   112ec:	10b86304 	addi	r2,r2,-7796
   112f0:	200b883a 	mov	r5,r4
   112f4:	11000017 	ldw	r4,0(r2)
   112f8:	00112881 	jmpi	11288 <_fflush_r>
   112fc:	008000b4 	movhi	r2,2
   11300:	10b86204 	addi	r2,r2,-7800
   11304:	11000017 	ldw	r4,0(r2)
   11308:	01400074 	movhi	r5,1
   1130c:	2944a204 	addi	r5,r5,4744
   11310:	00120841 	jmpi	12084 <_fwalk_reent>

00011314 <__fp_unlock>:
   11314:	0005883a 	mov	r2,zero
   11318:	f800283a 	ret

0001131c <_cleanup_r>:
   1131c:	01400074 	movhi	r5,1
   11320:	29588804 	addi	r5,r5,25120
   11324:	00120841 	jmpi	12084 <_fwalk_reent>

00011328 <__sinit.part.1>:
   11328:	defff704 	addi	sp,sp,-36
   1132c:	00c00074 	movhi	r3,1
   11330:	dfc00815 	stw	ra,32(sp)
   11334:	ddc00715 	stw	r23,28(sp)
   11338:	dd800615 	stw	r22,24(sp)
   1133c:	dd400515 	stw	r21,20(sp)
   11340:	dd000415 	stw	r20,16(sp)
   11344:	dcc00315 	stw	r19,12(sp)
   11348:	dc800215 	stw	r18,8(sp)
   1134c:	dc400115 	stw	r17,4(sp)
   11350:	dc000015 	stw	r16,0(sp)
   11354:	18c4c704 	addi	r3,r3,4892
   11358:	24000117 	ldw	r16,4(r4)
   1135c:	20c00f15 	stw	r3,60(r4)
   11360:	2080bb04 	addi	r2,r4,748
   11364:	00c000c4 	movi	r3,3
   11368:	20c0b915 	stw	r3,740(r4)
   1136c:	2080ba15 	stw	r2,744(r4)
   11370:	2000b815 	stw	zero,736(r4)
   11374:	05c00204 	movi	r23,8
   11378:	00800104 	movi	r2,4
   1137c:	2025883a 	mov	r18,r4
   11380:	b80d883a 	mov	r6,r23
   11384:	81001704 	addi	r4,r16,92
   11388:	000b883a 	mov	r5,zero
   1138c:	80000015 	stw	zero,0(r16)
   11390:	80000115 	stw	zero,4(r16)
   11394:	80000215 	stw	zero,8(r16)
   11398:	8080030d 	sth	r2,12(r16)
   1139c:	80001915 	stw	zero,100(r16)
   113a0:	8000038d 	sth	zero,14(r16)
   113a4:	80000415 	stw	zero,16(r16)
   113a8:	80000515 	stw	zero,20(r16)
   113ac:	80000615 	stw	zero,24(r16)
   113b0:	0012f740 	call	12f74 <memset>
   113b4:	05800074 	movhi	r22,1
   113b8:	94400217 	ldw	r17,8(r18)
   113bc:	05400074 	movhi	r21,1
   113c0:	05000074 	movhi	r20,1
   113c4:	04c00074 	movhi	r19,1
   113c8:	b591e004 	addi	r22,r22,18304
   113cc:	ad51f704 	addi	r21,r21,18396
   113d0:	a5121604 	addi	r20,r20,18520
   113d4:	9cd22d04 	addi	r19,r19,18612
   113d8:	85800815 	stw	r22,32(r16)
   113dc:	85400915 	stw	r21,36(r16)
   113e0:	85000a15 	stw	r20,40(r16)
   113e4:	84c00b15 	stw	r19,44(r16)
   113e8:	84000715 	stw	r16,28(r16)
   113ec:	00800284 	movi	r2,10
   113f0:	8880030d 	sth	r2,12(r17)
   113f4:	00800044 	movi	r2,1
   113f8:	b80d883a 	mov	r6,r23
   113fc:	89001704 	addi	r4,r17,92
   11400:	000b883a 	mov	r5,zero
   11404:	88000015 	stw	zero,0(r17)
   11408:	88000115 	stw	zero,4(r17)
   1140c:	88000215 	stw	zero,8(r17)
   11410:	88001915 	stw	zero,100(r17)
   11414:	8880038d 	sth	r2,14(r17)
   11418:	88000415 	stw	zero,16(r17)
   1141c:	88000515 	stw	zero,20(r17)
   11420:	88000615 	stw	zero,24(r17)
   11424:	0012f740 	call	12f74 <memset>
   11428:	94000317 	ldw	r16,12(r18)
   1142c:	00800484 	movi	r2,18
   11430:	8c400715 	stw	r17,28(r17)
   11434:	8d800815 	stw	r22,32(r17)
   11438:	8d400915 	stw	r21,36(r17)
   1143c:	8d000a15 	stw	r20,40(r17)
   11440:	8cc00b15 	stw	r19,44(r17)
   11444:	8080030d 	sth	r2,12(r16)
   11448:	00800084 	movi	r2,2
   1144c:	80000015 	stw	zero,0(r16)
   11450:	80000115 	stw	zero,4(r16)
   11454:	80000215 	stw	zero,8(r16)
   11458:	80001915 	stw	zero,100(r16)
   1145c:	8080038d 	sth	r2,14(r16)
   11460:	80000415 	stw	zero,16(r16)
   11464:	80000515 	stw	zero,20(r16)
   11468:	80000615 	stw	zero,24(r16)
   1146c:	b80d883a 	mov	r6,r23
   11470:	000b883a 	mov	r5,zero
   11474:	81001704 	addi	r4,r16,92
   11478:	0012f740 	call	12f74 <memset>
   1147c:	00800044 	movi	r2,1
   11480:	84000715 	stw	r16,28(r16)
   11484:	85800815 	stw	r22,32(r16)
   11488:	85400915 	stw	r21,36(r16)
   1148c:	85000a15 	stw	r20,40(r16)
   11490:	84c00b15 	stw	r19,44(r16)
   11494:	90800e15 	stw	r2,56(r18)
   11498:	dfc00817 	ldw	ra,32(sp)
   1149c:	ddc00717 	ldw	r23,28(sp)
   114a0:	dd800617 	ldw	r22,24(sp)
   114a4:	dd400517 	ldw	r21,20(sp)
   114a8:	dd000417 	ldw	r20,16(sp)
   114ac:	dcc00317 	ldw	r19,12(sp)
   114b0:	dc800217 	ldw	r18,8(sp)
   114b4:	dc400117 	ldw	r17,4(sp)
   114b8:	dc000017 	ldw	r16,0(sp)
   114bc:	dec00904 	addi	sp,sp,36
   114c0:	f800283a 	ret

000114c4 <__fp_lock>:
   114c4:	0005883a 	mov	r2,zero
   114c8:	f800283a 	ret

000114cc <__sfmoreglue>:
   114cc:	defffc04 	addi	sp,sp,-16
   114d0:	dc800215 	stw	r18,8(sp)
   114d4:	2825883a 	mov	r18,r5
   114d8:	dc000015 	stw	r16,0(sp)
   114dc:	01401a04 	movi	r5,104
   114e0:	2021883a 	mov	r16,r4
   114e4:	913fffc4 	addi	r4,r18,-1
   114e8:	dfc00315 	stw	ra,12(sp)
   114ec:	dc400115 	stw	r17,4(sp)
   114f0:	000cefc0 	call	cefc <__mulsi3>
   114f4:	8009883a 	mov	r4,r16
   114f8:	11401d04 	addi	r5,r2,116
   114fc:	1023883a 	mov	r17,r2
   11500:	00123e00 	call	123e0 <_malloc_r>
   11504:	1021883a 	mov	r16,r2
   11508:	10000726 	beq	r2,zero,11528 <__sfmoreglue+0x5c>
   1150c:	11000304 	addi	r4,r2,12
   11510:	10000015 	stw	zero,0(r2)
   11514:	14800115 	stw	r18,4(r2)
   11518:	11000215 	stw	r4,8(r2)
   1151c:	89801a04 	addi	r6,r17,104
   11520:	000b883a 	mov	r5,zero
   11524:	0012f740 	call	12f74 <memset>
   11528:	8005883a 	mov	r2,r16
   1152c:	dfc00317 	ldw	ra,12(sp)
   11530:	dc800217 	ldw	r18,8(sp)
   11534:	dc400117 	ldw	r17,4(sp)
   11538:	dc000017 	ldw	r16,0(sp)
   1153c:	dec00404 	addi	sp,sp,16
   11540:	f800283a 	ret

00011544 <__sfp>:
   11544:	defffb04 	addi	sp,sp,-20
   11548:	dc000015 	stw	r16,0(sp)
   1154c:	040000b4 	movhi	r16,2
   11550:	84386204 	addi	r16,r16,-7800
   11554:	dcc00315 	stw	r19,12(sp)
   11558:	2027883a 	mov	r19,r4
   1155c:	81000017 	ldw	r4,0(r16)
   11560:	dfc00415 	stw	ra,16(sp)
   11564:	dc800215 	stw	r18,8(sp)
   11568:	20800e17 	ldw	r2,56(r4)
   1156c:	dc400115 	stw	r17,4(sp)
   11570:	1000021e 	bne	r2,zero,1157c <__sfp+0x38>
   11574:	00113280 	call	11328 <__sinit.part.1>
   11578:	81000017 	ldw	r4,0(r16)
   1157c:	2480b804 	addi	r18,r4,736
   11580:	047fffc4 	movi	r17,-1
   11584:	91000117 	ldw	r4,4(r18)
   11588:	94000217 	ldw	r16,8(r18)
   1158c:	213fffc4 	addi	r4,r4,-1
   11590:	20000a16 	blt	r4,zero,115bc <__sfp+0x78>
   11594:	8080030f 	ldh	r2,12(r16)
   11598:	10000c26 	beq	r2,zero,115cc <__sfp+0x88>
   1159c:	80c01d04 	addi	r3,r16,116
   115a0:	00000206 	br	115ac <__sfp+0x68>
   115a4:	18bfe60f 	ldh	r2,-104(r3)
   115a8:	10000826 	beq	r2,zero,115cc <__sfp+0x88>
   115ac:	213fffc4 	addi	r4,r4,-1
   115b0:	1c3ffd04 	addi	r16,r3,-12
   115b4:	18c01a04 	addi	r3,r3,104
   115b8:	247ffa1e 	bne	r4,r17,115a4 <__alt_data_end+0xfc0115a4>
   115bc:	90800017 	ldw	r2,0(r18)
   115c0:	10001d26 	beq	r2,zero,11638 <__sfp+0xf4>
   115c4:	1025883a 	mov	r18,r2
   115c8:	003fee06 	br	11584 <__alt_data_end+0xfc011584>
   115cc:	00bfffc4 	movi	r2,-1
   115d0:	8080038d 	sth	r2,14(r16)
   115d4:	00800044 	movi	r2,1
   115d8:	8080030d 	sth	r2,12(r16)
   115dc:	80001915 	stw	zero,100(r16)
   115e0:	80000015 	stw	zero,0(r16)
   115e4:	80000215 	stw	zero,8(r16)
   115e8:	80000115 	stw	zero,4(r16)
   115ec:	80000415 	stw	zero,16(r16)
   115f0:	80000515 	stw	zero,20(r16)
   115f4:	80000615 	stw	zero,24(r16)
   115f8:	01800204 	movi	r6,8
   115fc:	000b883a 	mov	r5,zero
   11600:	81001704 	addi	r4,r16,92
   11604:	0012f740 	call	12f74 <memset>
   11608:	8005883a 	mov	r2,r16
   1160c:	80000c15 	stw	zero,48(r16)
   11610:	80000d15 	stw	zero,52(r16)
   11614:	80001115 	stw	zero,68(r16)
   11618:	80001215 	stw	zero,72(r16)
   1161c:	dfc00417 	ldw	ra,16(sp)
   11620:	dcc00317 	ldw	r19,12(sp)
   11624:	dc800217 	ldw	r18,8(sp)
   11628:	dc400117 	ldw	r17,4(sp)
   1162c:	dc000017 	ldw	r16,0(sp)
   11630:	dec00504 	addi	sp,sp,20
   11634:	f800283a 	ret
   11638:	01400104 	movi	r5,4
   1163c:	9809883a 	mov	r4,r19
   11640:	00114cc0 	call	114cc <__sfmoreglue>
   11644:	90800015 	stw	r2,0(r18)
   11648:	103fde1e 	bne	r2,zero,115c4 <__alt_data_end+0xfc0115c4>
   1164c:	00800304 	movi	r2,12
   11650:	98800015 	stw	r2,0(r19)
   11654:	0005883a 	mov	r2,zero
   11658:	003ff006 	br	1161c <__alt_data_end+0xfc01161c>

0001165c <_cleanup>:
   1165c:	008000b4 	movhi	r2,2
   11660:	10b86204 	addi	r2,r2,-7800
   11664:	11000017 	ldw	r4,0(r2)
   11668:	01400074 	movhi	r5,1
   1166c:	29588804 	addi	r5,r5,25120
   11670:	00120841 	jmpi	12084 <_fwalk_reent>

00011674 <__sinit>:
   11674:	20800e17 	ldw	r2,56(r4)
   11678:	10000126 	beq	r2,zero,11680 <__sinit+0xc>
   1167c:	f800283a 	ret
   11680:	00113281 	jmpi	11328 <__sinit.part.1>

00011684 <__sfp_lock_acquire>:
   11684:	f800283a 	ret

00011688 <__sfp_lock_release>:
   11688:	f800283a 	ret

0001168c <__sinit_lock_acquire>:
   1168c:	f800283a 	ret

00011690 <__sinit_lock_release>:
   11690:	f800283a 	ret

00011694 <__fp_lock_all>:
   11694:	008000b4 	movhi	r2,2
   11698:	10b86304 	addi	r2,r2,-7796
   1169c:	11000017 	ldw	r4,0(r2)
   116a0:	01400074 	movhi	r5,1
   116a4:	29453104 	addi	r5,r5,5316
   116a8:	0011fc01 	jmpi	11fc0 <_fwalk>

000116ac <__fp_unlock_all>:
   116ac:	008000b4 	movhi	r2,2
   116b0:	10b86304 	addi	r2,r2,-7796
   116b4:	11000017 	ldw	r4,0(r2)
   116b8:	01400074 	movhi	r5,1
   116bc:	2944c504 	addi	r5,r5,4884
   116c0:	0011fc01 	jmpi	11fc0 <_fwalk>

000116c4 <_malloc_trim_r>:
   116c4:	defffb04 	addi	sp,sp,-20
   116c8:	dcc00315 	stw	r19,12(sp)
   116cc:	04c000b4 	movhi	r19,2
   116d0:	dc800215 	stw	r18,8(sp)
   116d4:	dc400115 	stw	r17,4(sp)
   116d8:	dc000015 	stw	r16,0(sp)
   116dc:	dfc00415 	stw	ra,16(sp)
   116e0:	2821883a 	mov	r16,r5
   116e4:	9cf2da04 	addi	r19,r19,-13464
   116e8:	2025883a 	mov	r18,r4
   116ec:	001a4100 	call	1a410 <__malloc_lock>
   116f0:	98800217 	ldw	r2,8(r19)
   116f4:	14400117 	ldw	r17,4(r2)
   116f8:	00bfff04 	movi	r2,-4
   116fc:	88a2703a 	and	r17,r17,r2
   11700:	8c21c83a 	sub	r16,r17,r16
   11704:	8403fbc4 	addi	r16,r16,4079
   11708:	8020d33a 	srli	r16,r16,12
   1170c:	0083ffc4 	movi	r2,4095
   11710:	843fffc4 	addi	r16,r16,-1
   11714:	8020933a 	slli	r16,r16,12
   11718:	1400060e 	bge	r2,r16,11734 <_malloc_trim_r+0x70>
   1171c:	000b883a 	mov	r5,zero
   11720:	9009883a 	mov	r4,r18
   11724:	001472c0 	call	1472c <_sbrk_r>
   11728:	98c00217 	ldw	r3,8(r19)
   1172c:	1c47883a 	add	r3,r3,r17
   11730:	10c00a26 	beq	r2,r3,1175c <_malloc_trim_r+0x98>
   11734:	9009883a 	mov	r4,r18
   11738:	001a4340 	call	1a434 <__malloc_unlock>
   1173c:	0005883a 	mov	r2,zero
   11740:	dfc00417 	ldw	ra,16(sp)
   11744:	dcc00317 	ldw	r19,12(sp)
   11748:	dc800217 	ldw	r18,8(sp)
   1174c:	dc400117 	ldw	r17,4(sp)
   11750:	dc000017 	ldw	r16,0(sp)
   11754:	dec00504 	addi	sp,sp,20
   11758:	f800283a 	ret
   1175c:	040bc83a 	sub	r5,zero,r16
   11760:	9009883a 	mov	r4,r18
   11764:	001472c0 	call	1472c <_sbrk_r>
   11768:	00ffffc4 	movi	r3,-1
   1176c:	10c00d26 	beq	r2,r3,117a4 <_malloc_trim_r+0xe0>
   11770:	00c000b4 	movhi	r3,2
   11774:	18ff4004 	addi	r3,r3,-768
   11778:	18800017 	ldw	r2,0(r3)
   1177c:	99000217 	ldw	r4,8(r19)
   11780:	8c23c83a 	sub	r17,r17,r16
   11784:	8c400054 	ori	r17,r17,1
   11788:	1421c83a 	sub	r16,r2,r16
   1178c:	24400115 	stw	r17,4(r4)
   11790:	9009883a 	mov	r4,r18
   11794:	1c000015 	stw	r16,0(r3)
   11798:	001a4340 	call	1a434 <__malloc_unlock>
   1179c:	00800044 	movi	r2,1
   117a0:	003fe706 	br	11740 <__alt_data_end+0xfc011740>
   117a4:	000b883a 	mov	r5,zero
   117a8:	9009883a 	mov	r4,r18
   117ac:	001472c0 	call	1472c <_sbrk_r>
   117b0:	99000217 	ldw	r4,8(r19)
   117b4:	014003c4 	movi	r5,15
   117b8:	1107c83a 	sub	r3,r2,r4
   117bc:	28ffdd0e 	bge	r5,r3,11734 <__alt_data_end+0xfc011734>
   117c0:	014000b4 	movhi	r5,2
   117c4:	29786504 	addi	r5,r5,-7788
   117c8:	29400017 	ldw	r5,0(r5)
   117cc:	18c00054 	ori	r3,r3,1
   117d0:	20c00115 	stw	r3,4(r4)
   117d4:	00c000b4 	movhi	r3,2
   117d8:	1145c83a 	sub	r2,r2,r5
   117dc:	18ff4004 	addi	r3,r3,-768
   117e0:	18800015 	stw	r2,0(r3)
   117e4:	003fd306 	br	11734 <__alt_data_end+0xfc011734>

000117e8 <_free_r>:
   117e8:	28004126 	beq	r5,zero,118f0 <_free_r+0x108>
   117ec:	defffd04 	addi	sp,sp,-12
   117f0:	dc400115 	stw	r17,4(sp)
   117f4:	dc000015 	stw	r16,0(sp)
   117f8:	2023883a 	mov	r17,r4
   117fc:	2821883a 	mov	r16,r5
   11800:	dfc00215 	stw	ra,8(sp)
   11804:	001a4100 	call	1a410 <__malloc_lock>
   11808:	81ffff17 	ldw	r7,-4(r16)
   1180c:	00bfff84 	movi	r2,-2
   11810:	010000b4 	movhi	r4,2
   11814:	81bffe04 	addi	r6,r16,-8
   11818:	3884703a 	and	r2,r7,r2
   1181c:	2132da04 	addi	r4,r4,-13464
   11820:	308b883a 	add	r5,r6,r2
   11824:	2a400117 	ldw	r9,4(r5)
   11828:	22000217 	ldw	r8,8(r4)
   1182c:	00ffff04 	movi	r3,-4
   11830:	48c6703a 	and	r3,r9,r3
   11834:	2a005726 	beq	r5,r8,11994 <_free_r+0x1ac>
   11838:	28c00115 	stw	r3,4(r5)
   1183c:	39c0004c 	andi	r7,r7,1
   11840:	3800091e 	bne	r7,zero,11868 <_free_r+0x80>
   11844:	823ffe17 	ldw	r8,-8(r16)
   11848:	22400204 	addi	r9,r4,8
   1184c:	320dc83a 	sub	r6,r6,r8
   11850:	31c00217 	ldw	r7,8(r6)
   11854:	1205883a 	add	r2,r2,r8
   11858:	3a406526 	beq	r7,r9,119f0 <_free_r+0x208>
   1185c:	32000317 	ldw	r8,12(r6)
   11860:	3a000315 	stw	r8,12(r7)
   11864:	41c00215 	stw	r7,8(r8)
   11868:	28cf883a 	add	r7,r5,r3
   1186c:	39c00117 	ldw	r7,4(r7)
   11870:	39c0004c 	andi	r7,r7,1
   11874:	38003a26 	beq	r7,zero,11960 <_free_r+0x178>
   11878:	10c00054 	ori	r3,r2,1
   1187c:	30c00115 	stw	r3,4(r6)
   11880:	3087883a 	add	r3,r6,r2
   11884:	18800015 	stw	r2,0(r3)
   11888:	00c07fc4 	movi	r3,511
   1188c:	18801936 	bltu	r3,r2,118f4 <_free_r+0x10c>
   11890:	1004d0fa 	srli	r2,r2,3
   11894:	01c00044 	movi	r7,1
   11898:	21400117 	ldw	r5,4(r4)
   1189c:	10c00044 	addi	r3,r2,1
   118a0:	18c7883a 	add	r3,r3,r3
   118a4:	1005d0ba 	srai	r2,r2,2
   118a8:	18c7883a 	add	r3,r3,r3
   118ac:	18c7883a 	add	r3,r3,r3
   118b0:	1907883a 	add	r3,r3,r4
   118b4:	3884983a 	sll	r2,r7,r2
   118b8:	19c00017 	ldw	r7,0(r3)
   118bc:	1a3ffe04 	addi	r8,r3,-8
   118c0:	1144b03a 	or	r2,r2,r5
   118c4:	32000315 	stw	r8,12(r6)
   118c8:	31c00215 	stw	r7,8(r6)
   118cc:	20800115 	stw	r2,4(r4)
   118d0:	19800015 	stw	r6,0(r3)
   118d4:	39800315 	stw	r6,12(r7)
   118d8:	8809883a 	mov	r4,r17
   118dc:	dfc00217 	ldw	ra,8(sp)
   118e0:	dc400117 	ldw	r17,4(sp)
   118e4:	dc000017 	ldw	r16,0(sp)
   118e8:	dec00304 	addi	sp,sp,12
   118ec:	001a4341 	jmpi	1a434 <__malloc_unlock>
   118f0:	f800283a 	ret
   118f4:	100ad27a 	srli	r5,r2,9
   118f8:	00c00104 	movi	r3,4
   118fc:	19404a36 	bltu	r3,r5,11a28 <_free_r+0x240>
   11900:	100ad1ba 	srli	r5,r2,6
   11904:	28c00e44 	addi	r3,r5,57
   11908:	18c7883a 	add	r3,r3,r3
   1190c:	29400e04 	addi	r5,r5,56
   11910:	18c7883a 	add	r3,r3,r3
   11914:	18c7883a 	add	r3,r3,r3
   11918:	1909883a 	add	r4,r3,r4
   1191c:	20c00017 	ldw	r3,0(r4)
   11920:	01c000b4 	movhi	r7,2
   11924:	213ffe04 	addi	r4,r4,-8
   11928:	39f2da04 	addi	r7,r7,-13464
   1192c:	20c04426 	beq	r4,r3,11a40 <_free_r+0x258>
   11930:	01ffff04 	movi	r7,-4
   11934:	19400117 	ldw	r5,4(r3)
   11938:	29ca703a 	and	r5,r5,r7
   1193c:	1140022e 	bgeu	r2,r5,11948 <_free_r+0x160>
   11940:	18c00217 	ldw	r3,8(r3)
   11944:	20fffb1e 	bne	r4,r3,11934 <__alt_data_end+0xfc011934>
   11948:	19000317 	ldw	r4,12(r3)
   1194c:	31000315 	stw	r4,12(r6)
   11950:	30c00215 	stw	r3,8(r6)
   11954:	21800215 	stw	r6,8(r4)
   11958:	19800315 	stw	r6,12(r3)
   1195c:	003fde06 	br	118d8 <__alt_data_end+0xfc0118d8>
   11960:	29c00217 	ldw	r7,8(r5)
   11964:	10c5883a 	add	r2,r2,r3
   11968:	00c000b4 	movhi	r3,2
   1196c:	18f2dc04 	addi	r3,r3,-13456
   11970:	38c03b26 	beq	r7,r3,11a60 <_free_r+0x278>
   11974:	2a000317 	ldw	r8,12(r5)
   11978:	11400054 	ori	r5,r2,1
   1197c:	3087883a 	add	r3,r6,r2
   11980:	3a000315 	stw	r8,12(r7)
   11984:	41c00215 	stw	r7,8(r8)
   11988:	31400115 	stw	r5,4(r6)
   1198c:	18800015 	stw	r2,0(r3)
   11990:	003fbd06 	br	11888 <__alt_data_end+0xfc011888>
   11994:	39c0004c 	andi	r7,r7,1
   11998:	10c5883a 	add	r2,r2,r3
   1199c:	3800071e 	bne	r7,zero,119bc <_free_r+0x1d4>
   119a0:	81fffe17 	ldw	r7,-8(r16)
   119a4:	31cdc83a 	sub	r6,r6,r7
   119a8:	30c00317 	ldw	r3,12(r6)
   119ac:	31400217 	ldw	r5,8(r6)
   119b0:	11c5883a 	add	r2,r2,r7
   119b4:	28c00315 	stw	r3,12(r5)
   119b8:	19400215 	stw	r5,8(r3)
   119bc:	10c00054 	ori	r3,r2,1
   119c0:	30c00115 	stw	r3,4(r6)
   119c4:	00c000b4 	movhi	r3,2
   119c8:	18f86604 	addi	r3,r3,-7784
   119cc:	18c00017 	ldw	r3,0(r3)
   119d0:	21800215 	stw	r6,8(r4)
   119d4:	10ffc036 	bltu	r2,r3,118d8 <__alt_data_end+0xfc0118d8>
   119d8:	008000b4 	movhi	r2,2
   119dc:	10bf3704 	addi	r2,r2,-804
   119e0:	11400017 	ldw	r5,0(r2)
   119e4:	8809883a 	mov	r4,r17
   119e8:	00116c40 	call	116c4 <_malloc_trim_r>
   119ec:	003fba06 	br	118d8 <__alt_data_end+0xfc0118d8>
   119f0:	28c9883a 	add	r4,r5,r3
   119f4:	21000117 	ldw	r4,4(r4)
   119f8:	2100004c 	andi	r4,r4,1
   119fc:	2000391e 	bne	r4,zero,11ae4 <_free_r+0x2fc>
   11a00:	29c00217 	ldw	r7,8(r5)
   11a04:	29000317 	ldw	r4,12(r5)
   11a08:	1885883a 	add	r2,r3,r2
   11a0c:	10c00054 	ori	r3,r2,1
   11a10:	39000315 	stw	r4,12(r7)
   11a14:	21c00215 	stw	r7,8(r4)
   11a18:	30c00115 	stw	r3,4(r6)
   11a1c:	308d883a 	add	r6,r6,r2
   11a20:	30800015 	stw	r2,0(r6)
   11a24:	003fac06 	br	118d8 <__alt_data_end+0xfc0118d8>
   11a28:	00c00504 	movi	r3,20
   11a2c:	19401536 	bltu	r3,r5,11a84 <_free_r+0x29c>
   11a30:	28c01704 	addi	r3,r5,92
   11a34:	18c7883a 	add	r3,r3,r3
   11a38:	294016c4 	addi	r5,r5,91
   11a3c:	003fb406 	br	11910 <__alt_data_end+0xfc011910>
   11a40:	280bd0ba 	srai	r5,r5,2
   11a44:	00c00044 	movi	r3,1
   11a48:	38800117 	ldw	r2,4(r7)
   11a4c:	194a983a 	sll	r5,r3,r5
   11a50:	2007883a 	mov	r3,r4
   11a54:	2884b03a 	or	r2,r5,r2
   11a58:	38800115 	stw	r2,4(r7)
   11a5c:	003fbb06 	br	1194c <__alt_data_end+0xfc01194c>
   11a60:	21800515 	stw	r6,20(r4)
   11a64:	21800415 	stw	r6,16(r4)
   11a68:	10c00054 	ori	r3,r2,1
   11a6c:	31c00315 	stw	r7,12(r6)
   11a70:	31c00215 	stw	r7,8(r6)
   11a74:	30c00115 	stw	r3,4(r6)
   11a78:	308d883a 	add	r6,r6,r2
   11a7c:	30800015 	stw	r2,0(r6)
   11a80:	003f9506 	br	118d8 <__alt_data_end+0xfc0118d8>
   11a84:	00c01504 	movi	r3,84
   11a88:	19400536 	bltu	r3,r5,11aa0 <_free_r+0x2b8>
   11a8c:	100ad33a 	srli	r5,r2,12
   11a90:	28c01bc4 	addi	r3,r5,111
   11a94:	18c7883a 	add	r3,r3,r3
   11a98:	29401b84 	addi	r5,r5,110
   11a9c:	003f9c06 	br	11910 <__alt_data_end+0xfc011910>
   11aa0:	00c05504 	movi	r3,340
   11aa4:	19400536 	bltu	r3,r5,11abc <_free_r+0x2d4>
   11aa8:	100ad3fa 	srli	r5,r2,15
   11aac:	28c01e04 	addi	r3,r5,120
   11ab0:	18c7883a 	add	r3,r3,r3
   11ab4:	29401dc4 	addi	r5,r5,119
   11ab8:	003f9506 	br	11910 <__alt_data_end+0xfc011910>
   11abc:	00c15504 	movi	r3,1364
   11ac0:	19400536 	bltu	r3,r5,11ad8 <_free_r+0x2f0>
   11ac4:	100ad4ba 	srli	r5,r2,18
   11ac8:	28c01f44 	addi	r3,r5,125
   11acc:	18c7883a 	add	r3,r3,r3
   11ad0:	29401f04 	addi	r5,r5,124
   11ad4:	003f8e06 	br	11910 <__alt_data_end+0xfc011910>
   11ad8:	00c03f84 	movi	r3,254
   11adc:	01401f84 	movi	r5,126
   11ae0:	003f8b06 	br	11910 <__alt_data_end+0xfc011910>
   11ae4:	10c00054 	ori	r3,r2,1
   11ae8:	30c00115 	stw	r3,4(r6)
   11aec:	308d883a 	add	r6,r6,r2
   11af0:	30800015 	stw	r2,0(r6)
   11af4:	003f7806 	br	118d8 <__alt_data_end+0xfc0118d8>

00011af8 <__sfvwrite_r>:
   11af8:	30800217 	ldw	r2,8(r6)
   11afc:	10006726 	beq	r2,zero,11c9c <__sfvwrite_r+0x1a4>
   11b00:	28c0030b 	ldhu	r3,12(r5)
   11b04:	defff404 	addi	sp,sp,-48
   11b08:	dd400715 	stw	r21,28(sp)
   11b0c:	dd000615 	stw	r20,24(sp)
   11b10:	dc000215 	stw	r16,8(sp)
   11b14:	dfc00b15 	stw	ra,44(sp)
   11b18:	df000a15 	stw	fp,40(sp)
   11b1c:	ddc00915 	stw	r23,36(sp)
   11b20:	dd800815 	stw	r22,32(sp)
   11b24:	dcc00515 	stw	r19,20(sp)
   11b28:	dc800415 	stw	r18,16(sp)
   11b2c:	dc400315 	stw	r17,12(sp)
   11b30:	1880020c 	andi	r2,r3,8
   11b34:	2821883a 	mov	r16,r5
   11b38:	202b883a 	mov	r21,r4
   11b3c:	3029883a 	mov	r20,r6
   11b40:	10002726 	beq	r2,zero,11be0 <__sfvwrite_r+0xe8>
   11b44:	28800417 	ldw	r2,16(r5)
   11b48:	10002526 	beq	r2,zero,11be0 <__sfvwrite_r+0xe8>
   11b4c:	1880008c 	andi	r2,r3,2
   11b50:	a4400017 	ldw	r17,0(r20)
   11b54:	10002a26 	beq	r2,zero,11c00 <__sfvwrite_r+0x108>
   11b58:	05a00034 	movhi	r22,32768
   11b5c:	0027883a 	mov	r19,zero
   11b60:	0025883a 	mov	r18,zero
   11b64:	b5bf0004 	addi	r22,r22,-1024
   11b68:	980d883a 	mov	r6,r19
   11b6c:	a809883a 	mov	r4,r21
   11b70:	90004626 	beq	r18,zero,11c8c <__sfvwrite_r+0x194>
   11b74:	900f883a 	mov	r7,r18
   11b78:	b480022e 	bgeu	r22,r18,11b84 <__sfvwrite_r+0x8c>
   11b7c:	01e00034 	movhi	r7,32768
   11b80:	39ff0004 	addi	r7,r7,-1024
   11b84:	80800917 	ldw	r2,36(r16)
   11b88:	81400717 	ldw	r5,28(r16)
   11b8c:	103ee83a 	callr	r2
   11b90:	00805a0e 	bge	zero,r2,11cfc <__sfvwrite_r+0x204>
   11b94:	a0c00217 	ldw	r3,8(r20)
   11b98:	98a7883a 	add	r19,r19,r2
   11b9c:	90a5c83a 	sub	r18,r18,r2
   11ba0:	1885c83a 	sub	r2,r3,r2
   11ba4:	a0800215 	stw	r2,8(r20)
   11ba8:	103fef1e 	bne	r2,zero,11b68 <__alt_data_end+0xfc011b68>
   11bac:	0005883a 	mov	r2,zero
   11bb0:	dfc00b17 	ldw	ra,44(sp)
   11bb4:	df000a17 	ldw	fp,40(sp)
   11bb8:	ddc00917 	ldw	r23,36(sp)
   11bbc:	dd800817 	ldw	r22,32(sp)
   11bc0:	dd400717 	ldw	r21,28(sp)
   11bc4:	dd000617 	ldw	r20,24(sp)
   11bc8:	dcc00517 	ldw	r19,20(sp)
   11bcc:	dc800417 	ldw	r18,16(sp)
   11bd0:	dc400317 	ldw	r17,12(sp)
   11bd4:	dc000217 	ldw	r16,8(sp)
   11bd8:	dec00c04 	addi	sp,sp,48
   11bdc:	f800283a 	ret
   11be0:	800b883a 	mov	r5,r16
   11be4:	a809883a 	mov	r4,r21
   11be8:	000f4e80 	call	f4e8 <__swsetup_r>
   11bec:	1000ee1e 	bne	r2,zero,11fa8 <__sfvwrite_r+0x4b0>
   11bf0:	80c0030b 	ldhu	r3,12(r16)
   11bf4:	a4400017 	ldw	r17,0(r20)
   11bf8:	1880008c 	andi	r2,r3,2
   11bfc:	103fd61e 	bne	r2,zero,11b58 <__alt_data_end+0xfc011b58>
   11c00:	1880004c 	andi	r2,r3,1
   11c04:	1000421e 	bne	r2,zero,11d10 <__sfvwrite_r+0x218>
   11c08:	0039883a 	mov	fp,zero
   11c0c:	0025883a 	mov	r18,zero
   11c10:	90001a26 	beq	r18,zero,11c7c <__sfvwrite_r+0x184>
   11c14:	1880800c 	andi	r2,r3,512
   11c18:	84c00217 	ldw	r19,8(r16)
   11c1c:	10002126 	beq	r2,zero,11ca4 <__sfvwrite_r+0x1ac>
   11c20:	982f883a 	mov	r23,r19
   11c24:	94c09636 	bltu	r18,r19,11e80 <__sfvwrite_r+0x388>
   11c28:	1881200c 	andi	r2,r3,1152
   11c2c:	1000a11e 	bne	r2,zero,11eb4 <__sfvwrite_r+0x3bc>
   11c30:	81000017 	ldw	r4,0(r16)
   11c34:	b80d883a 	mov	r6,r23
   11c38:	e00b883a 	mov	r5,fp
   11c3c:	0012e180 	call	12e18 <memmove>
   11c40:	80c00217 	ldw	r3,8(r16)
   11c44:	81000017 	ldw	r4,0(r16)
   11c48:	9005883a 	mov	r2,r18
   11c4c:	1ce7c83a 	sub	r19,r3,r19
   11c50:	25cf883a 	add	r7,r4,r23
   11c54:	84c00215 	stw	r19,8(r16)
   11c58:	81c00015 	stw	r7,0(r16)
   11c5c:	a0c00217 	ldw	r3,8(r20)
   11c60:	e0b9883a 	add	fp,fp,r2
   11c64:	90a5c83a 	sub	r18,r18,r2
   11c68:	18a7c83a 	sub	r19,r3,r2
   11c6c:	a4c00215 	stw	r19,8(r20)
   11c70:	983fce26 	beq	r19,zero,11bac <__alt_data_end+0xfc011bac>
   11c74:	80c0030b 	ldhu	r3,12(r16)
   11c78:	903fe61e 	bne	r18,zero,11c14 <__alt_data_end+0xfc011c14>
   11c7c:	8f000017 	ldw	fp,0(r17)
   11c80:	8c800117 	ldw	r18,4(r17)
   11c84:	8c400204 	addi	r17,r17,8
   11c88:	003fe106 	br	11c10 <__alt_data_end+0xfc011c10>
   11c8c:	8cc00017 	ldw	r19,0(r17)
   11c90:	8c800117 	ldw	r18,4(r17)
   11c94:	8c400204 	addi	r17,r17,8
   11c98:	003fb306 	br	11b68 <__alt_data_end+0xfc011b68>
   11c9c:	0005883a 	mov	r2,zero
   11ca0:	f800283a 	ret
   11ca4:	81000017 	ldw	r4,0(r16)
   11ca8:	80800417 	ldw	r2,16(r16)
   11cac:	11005a36 	bltu	r2,r4,11e18 <__sfvwrite_r+0x320>
   11cb0:	85c00517 	ldw	r23,20(r16)
   11cb4:	95c05836 	bltu	r18,r23,11e18 <__sfvwrite_r+0x320>
   11cb8:	00a00034 	movhi	r2,32768
   11cbc:	10bfffc4 	addi	r2,r2,-1
   11cc0:	9009883a 	mov	r4,r18
   11cc4:	1480012e 	bgeu	r2,r18,11ccc <__sfvwrite_r+0x1d4>
   11cc8:	1009883a 	mov	r4,r2
   11ccc:	b80b883a 	mov	r5,r23
   11cd0:	000cd480 	call	cd48 <__divsi3>
   11cd4:	b80b883a 	mov	r5,r23
   11cd8:	1009883a 	mov	r4,r2
   11cdc:	000cefc0 	call	cefc <__mulsi3>
   11ce0:	81400717 	ldw	r5,28(r16)
   11ce4:	80c00917 	ldw	r3,36(r16)
   11ce8:	100f883a 	mov	r7,r2
   11cec:	e00d883a 	mov	r6,fp
   11cf0:	a809883a 	mov	r4,r21
   11cf4:	183ee83a 	callr	r3
   11cf8:	00bfd816 	blt	zero,r2,11c5c <__alt_data_end+0xfc011c5c>
   11cfc:	8080030b 	ldhu	r2,12(r16)
   11d00:	10801014 	ori	r2,r2,64
   11d04:	8080030d 	sth	r2,12(r16)
   11d08:	00bfffc4 	movi	r2,-1
   11d0c:	003fa806 	br	11bb0 <__alt_data_end+0xfc011bb0>
   11d10:	0027883a 	mov	r19,zero
   11d14:	0011883a 	mov	r8,zero
   11d18:	0039883a 	mov	fp,zero
   11d1c:	0025883a 	mov	r18,zero
   11d20:	90001f26 	beq	r18,zero,11da0 <__sfvwrite_r+0x2a8>
   11d24:	40005a26 	beq	r8,zero,11e90 <__sfvwrite_r+0x398>
   11d28:	982d883a 	mov	r22,r19
   11d2c:	94c0012e 	bgeu	r18,r19,11d34 <__sfvwrite_r+0x23c>
   11d30:	902d883a 	mov	r22,r18
   11d34:	81000017 	ldw	r4,0(r16)
   11d38:	80800417 	ldw	r2,16(r16)
   11d3c:	b02f883a 	mov	r23,r22
   11d40:	81c00517 	ldw	r7,20(r16)
   11d44:	1100032e 	bgeu	r2,r4,11d54 <__sfvwrite_r+0x25c>
   11d48:	80c00217 	ldw	r3,8(r16)
   11d4c:	38c7883a 	add	r3,r7,r3
   11d50:	1d801816 	blt	r3,r22,11db4 <__sfvwrite_r+0x2bc>
   11d54:	b1c03e16 	blt	r22,r7,11e50 <__sfvwrite_r+0x358>
   11d58:	80800917 	ldw	r2,36(r16)
   11d5c:	81400717 	ldw	r5,28(r16)
   11d60:	e00d883a 	mov	r6,fp
   11d64:	da000115 	stw	r8,4(sp)
   11d68:	a809883a 	mov	r4,r21
   11d6c:	103ee83a 	callr	r2
   11d70:	102f883a 	mov	r23,r2
   11d74:	da000117 	ldw	r8,4(sp)
   11d78:	00bfe00e 	bge	zero,r2,11cfc <__alt_data_end+0xfc011cfc>
   11d7c:	9de7c83a 	sub	r19,r19,r23
   11d80:	98001f26 	beq	r19,zero,11e00 <__sfvwrite_r+0x308>
   11d84:	a0800217 	ldw	r2,8(r20)
   11d88:	e5f9883a 	add	fp,fp,r23
   11d8c:	95e5c83a 	sub	r18,r18,r23
   11d90:	15efc83a 	sub	r23,r2,r23
   11d94:	a5c00215 	stw	r23,8(r20)
   11d98:	b83f8426 	beq	r23,zero,11bac <__alt_data_end+0xfc011bac>
   11d9c:	903fe11e 	bne	r18,zero,11d24 <__alt_data_end+0xfc011d24>
   11da0:	8f000017 	ldw	fp,0(r17)
   11da4:	8c800117 	ldw	r18,4(r17)
   11da8:	0011883a 	mov	r8,zero
   11dac:	8c400204 	addi	r17,r17,8
   11db0:	003fdb06 	br	11d20 <__alt_data_end+0xfc011d20>
   11db4:	180d883a 	mov	r6,r3
   11db8:	e00b883a 	mov	r5,fp
   11dbc:	da000115 	stw	r8,4(sp)
   11dc0:	d8c00015 	stw	r3,0(sp)
   11dc4:	0012e180 	call	12e18 <memmove>
   11dc8:	d8c00017 	ldw	r3,0(sp)
   11dcc:	80800017 	ldw	r2,0(r16)
   11dd0:	800b883a 	mov	r5,r16
   11dd4:	a809883a 	mov	r4,r21
   11dd8:	10c5883a 	add	r2,r2,r3
   11ddc:	80800015 	stw	r2,0(r16)
   11de0:	d8c00015 	stw	r3,0(sp)
   11de4:	00112880 	call	11288 <_fflush_r>
   11de8:	d8c00017 	ldw	r3,0(sp)
   11dec:	da000117 	ldw	r8,4(sp)
   11df0:	103fc21e 	bne	r2,zero,11cfc <__alt_data_end+0xfc011cfc>
   11df4:	182f883a 	mov	r23,r3
   11df8:	9de7c83a 	sub	r19,r19,r23
   11dfc:	983fe11e 	bne	r19,zero,11d84 <__alt_data_end+0xfc011d84>
   11e00:	800b883a 	mov	r5,r16
   11e04:	a809883a 	mov	r4,r21
   11e08:	00112880 	call	11288 <_fflush_r>
   11e0c:	103fbb1e 	bne	r2,zero,11cfc <__alt_data_end+0xfc011cfc>
   11e10:	0011883a 	mov	r8,zero
   11e14:	003fdb06 	br	11d84 <__alt_data_end+0xfc011d84>
   11e18:	94c0012e 	bgeu	r18,r19,11e20 <__sfvwrite_r+0x328>
   11e1c:	9027883a 	mov	r19,r18
   11e20:	980d883a 	mov	r6,r19
   11e24:	e00b883a 	mov	r5,fp
   11e28:	0012e180 	call	12e18 <memmove>
   11e2c:	80800217 	ldw	r2,8(r16)
   11e30:	80c00017 	ldw	r3,0(r16)
   11e34:	14c5c83a 	sub	r2,r2,r19
   11e38:	1cc7883a 	add	r3,r3,r19
   11e3c:	80800215 	stw	r2,8(r16)
   11e40:	80c00015 	stw	r3,0(r16)
   11e44:	10004326 	beq	r2,zero,11f54 <__sfvwrite_r+0x45c>
   11e48:	9805883a 	mov	r2,r19
   11e4c:	003f8306 	br	11c5c <__alt_data_end+0xfc011c5c>
   11e50:	b00d883a 	mov	r6,r22
   11e54:	e00b883a 	mov	r5,fp
   11e58:	da000115 	stw	r8,4(sp)
   11e5c:	0012e180 	call	12e18 <memmove>
   11e60:	80800217 	ldw	r2,8(r16)
   11e64:	80c00017 	ldw	r3,0(r16)
   11e68:	da000117 	ldw	r8,4(sp)
   11e6c:	1585c83a 	sub	r2,r2,r22
   11e70:	1dad883a 	add	r22,r3,r22
   11e74:	80800215 	stw	r2,8(r16)
   11e78:	85800015 	stw	r22,0(r16)
   11e7c:	003fbf06 	br	11d7c <__alt_data_end+0xfc011d7c>
   11e80:	81000017 	ldw	r4,0(r16)
   11e84:	9027883a 	mov	r19,r18
   11e88:	902f883a 	mov	r23,r18
   11e8c:	003f6906 	br	11c34 <__alt_data_end+0xfc011c34>
   11e90:	900d883a 	mov	r6,r18
   11e94:	01400284 	movi	r5,10
   11e98:	e009883a 	mov	r4,fp
   11e9c:	0012bec0 	call	12bec <memchr>
   11ea0:	10003e26 	beq	r2,zero,11f9c <__sfvwrite_r+0x4a4>
   11ea4:	10800044 	addi	r2,r2,1
   11ea8:	1727c83a 	sub	r19,r2,fp
   11eac:	02000044 	movi	r8,1
   11eb0:	003f9d06 	br	11d28 <__alt_data_end+0xfc011d28>
   11eb4:	80800517 	ldw	r2,20(r16)
   11eb8:	81400417 	ldw	r5,16(r16)
   11ebc:	81c00017 	ldw	r7,0(r16)
   11ec0:	10a7883a 	add	r19,r2,r2
   11ec4:	9885883a 	add	r2,r19,r2
   11ec8:	1026d7fa 	srli	r19,r2,31
   11ecc:	396dc83a 	sub	r22,r7,r5
   11ed0:	b1000044 	addi	r4,r22,1
   11ed4:	9885883a 	add	r2,r19,r2
   11ed8:	1027d07a 	srai	r19,r2,1
   11edc:	2485883a 	add	r2,r4,r18
   11ee0:	980d883a 	mov	r6,r19
   11ee4:	9880022e 	bgeu	r19,r2,11ef0 <__sfvwrite_r+0x3f8>
   11ee8:	1027883a 	mov	r19,r2
   11eec:	100d883a 	mov	r6,r2
   11ef0:	18c1000c 	andi	r3,r3,1024
   11ef4:	18001c26 	beq	r3,zero,11f68 <__sfvwrite_r+0x470>
   11ef8:	300b883a 	mov	r5,r6
   11efc:	a809883a 	mov	r4,r21
   11f00:	00123e00 	call	123e0 <_malloc_r>
   11f04:	102f883a 	mov	r23,r2
   11f08:	10002926 	beq	r2,zero,11fb0 <__sfvwrite_r+0x4b8>
   11f0c:	81400417 	ldw	r5,16(r16)
   11f10:	b00d883a 	mov	r6,r22
   11f14:	1009883a 	mov	r4,r2
   11f18:	0012cd00 	call	12cd0 <memcpy>
   11f1c:	8080030b 	ldhu	r2,12(r16)
   11f20:	00fedfc4 	movi	r3,-1153
   11f24:	10c4703a 	and	r2,r2,r3
   11f28:	10802014 	ori	r2,r2,128
   11f2c:	8080030d 	sth	r2,12(r16)
   11f30:	bd89883a 	add	r4,r23,r22
   11f34:	9d8fc83a 	sub	r7,r19,r22
   11f38:	85c00415 	stw	r23,16(r16)
   11f3c:	84c00515 	stw	r19,20(r16)
   11f40:	81000015 	stw	r4,0(r16)
   11f44:	9027883a 	mov	r19,r18
   11f48:	81c00215 	stw	r7,8(r16)
   11f4c:	902f883a 	mov	r23,r18
   11f50:	003f3806 	br	11c34 <__alt_data_end+0xfc011c34>
   11f54:	800b883a 	mov	r5,r16
   11f58:	a809883a 	mov	r4,r21
   11f5c:	00112880 	call	11288 <_fflush_r>
   11f60:	103fb926 	beq	r2,zero,11e48 <__alt_data_end+0xfc011e48>
   11f64:	003f6506 	br	11cfc <__alt_data_end+0xfc011cfc>
   11f68:	a809883a 	mov	r4,r21
   11f6c:	00141540 	call	14154 <_realloc_r>
   11f70:	102f883a 	mov	r23,r2
   11f74:	103fee1e 	bne	r2,zero,11f30 <__alt_data_end+0xfc011f30>
   11f78:	81400417 	ldw	r5,16(r16)
   11f7c:	a809883a 	mov	r4,r21
   11f80:	00117e80 	call	117e8 <_free_r>
   11f84:	8080030b 	ldhu	r2,12(r16)
   11f88:	00ffdfc4 	movi	r3,-129
   11f8c:	1884703a 	and	r2,r3,r2
   11f90:	00c00304 	movi	r3,12
   11f94:	a8c00015 	stw	r3,0(r21)
   11f98:	003f5906 	br	11d00 <__alt_data_end+0xfc011d00>
   11f9c:	94c00044 	addi	r19,r18,1
   11fa0:	02000044 	movi	r8,1
   11fa4:	003f6006 	br	11d28 <__alt_data_end+0xfc011d28>
   11fa8:	00bfffc4 	movi	r2,-1
   11fac:	003f0006 	br	11bb0 <__alt_data_end+0xfc011bb0>
   11fb0:	00800304 	movi	r2,12
   11fb4:	a8800015 	stw	r2,0(r21)
   11fb8:	8080030b 	ldhu	r2,12(r16)
   11fbc:	003f5006 	br	11d00 <__alt_data_end+0xfc011d00>

00011fc0 <_fwalk>:
   11fc0:	defff704 	addi	sp,sp,-36
   11fc4:	dd000415 	stw	r20,16(sp)
   11fc8:	dfc00815 	stw	ra,32(sp)
   11fcc:	ddc00715 	stw	r23,28(sp)
   11fd0:	dd800615 	stw	r22,24(sp)
   11fd4:	dd400515 	stw	r21,20(sp)
   11fd8:	dcc00315 	stw	r19,12(sp)
   11fdc:	dc800215 	stw	r18,8(sp)
   11fe0:	dc400115 	stw	r17,4(sp)
   11fe4:	dc000015 	stw	r16,0(sp)
   11fe8:	2500b804 	addi	r20,r4,736
   11fec:	a0002326 	beq	r20,zero,1207c <_fwalk+0xbc>
   11ff0:	282b883a 	mov	r21,r5
   11ff4:	002f883a 	mov	r23,zero
   11ff8:	05800044 	movi	r22,1
   11ffc:	04ffffc4 	movi	r19,-1
   12000:	a4400117 	ldw	r17,4(r20)
   12004:	a4800217 	ldw	r18,8(r20)
   12008:	8c7fffc4 	addi	r17,r17,-1
   1200c:	88000d16 	blt	r17,zero,12044 <_fwalk+0x84>
   12010:	94000304 	addi	r16,r18,12
   12014:	94800384 	addi	r18,r18,14
   12018:	8080000b 	ldhu	r2,0(r16)
   1201c:	8c7fffc4 	addi	r17,r17,-1
   12020:	813ffd04 	addi	r4,r16,-12
   12024:	b080042e 	bgeu	r22,r2,12038 <_fwalk+0x78>
   12028:	9080000f 	ldh	r2,0(r18)
   1202c:	14c00226 	beq	r2,r19,12038 <_fwalk+0x78>
   12030:	a83ee83a 	callr	r21
   12034:	b8aeb03a 	or	r23,r23,r2
   12038:	84001a04 	addi	r16,r16,104
   1203c:	94801a04 	addi	r18,r18,104
   12040:	8cfff51e 	bne	r17,r19,12018 <__alt_data_end+0xfc012018>
   12044:	a5000017 	ldw	r20,0(r20)
   12048:	a03fed1e 	bne	r20,zero,12000 <__alt_data_end+0xfc012000>
   1204c:	b805883a 	mov	r2,r23
   12050:	dfc00817 	ldw	ra,32(sp)
   12054:	ddc00717 	ldw	r23,28(sp)
   12058:	dd800617 	ldw	r22,24(sp)
   1205c:	dd400517 	ldw	r21,20(sp)
   12060:	dd000417 	ldw	r20,16(sp)
   12064:	dcc00317 	ldw	r19,12(sp)
   12068:	dc800217 	ldw	r18,8(sp)
   1206c:	dc400117 	ldw	r17,4(sp)
   12070:	dc000017 	ldw	r16,0(sp)
   12074:	dec00904 	addi	sp,sp,36
   12078:	f800283a 	ret
   1207c:	002f883a 	mov	r23,zero
   12080:	003ff206 	br	1204c <__alt_data_end+0xfc01204c>

00012084 <_fwalk_reent>:
   12084:	defff704 	addi	sp,sp,-36
   12088:	dd000415 	stw	r20,16(sp)
   1208c:	dfc00815 	stw	ra,32(sp)
   12090:	ddc00715 	stw	r23,28(sp)
   12094:	dd800615 	stw	r22,24(sp)
   12098:	dd400515 	stw	r21,20(sp)
   1209c:	dcc00315 	stw	r19,12(sp)
   120a0:	dc800215 	stw	r18,8(sp)
   120a4:	dc400115 	stw	r17,4(sp)
   120a8:	dc000015 	stw	r16,0(sp)
   120ac:	2500b804 	addi	r20,r4,736
   120b0:	a0002326 	beq	r20,zero,12140 <_fwalk_reent+0xbc>
   120b4:	282b883a 	mov	r21,r5
   120b8:	2027883a 	mov	r19,r4
   120bc:	002f883a 	mov	r23,zero
   120c0:	05800044 	movi	r22,1
   120c4:	04bfffc4 	movi	r18,-1
   120c8:	a4400117 	ldw	r17,4(r20)
   120cc:	a4000217 	ldw	r16,8(r20)
   120d0:	8c7fffc4 	addi	r17,r17,-1
   120d4:	88000c16 	blt	r17,zero,12108 <_fwalk_reent+0x84>
   120d8:	84000304 	addi	r16,r16,12
   120dc:	8080000b 	ldhu	r2,0(r16)
   120e0:	8c7fffc4 	addi	r17,r17,-1
   120e4:	817ffd04 	addi	r5,r16,-12
   120e8:	b080052e 	bgeu	r22,r2,12100 <_fwalk_reent+0x7c>
   120ec:	8080008f 	ldh	r2,2(r16)
   120f0:	9809883a 	mov	r4,r19
   120f4:	14800226 	beq	r2,r18,12100 <_fwalk_reent+0x7c>
   120f8:	a83ee83a 	callr	r21
   120fc:	b8aeb03a 	or	r23,r23,r2
   12100:	84001a04 	addi	r16,r16,104
   12104:	8cbff51e 	bne	r17,r18,120dc <__alt_data_end+0xfc0120dc>
   12108:	a5000017 	ldw	r20,0(r20)
   1210c:	a03fee1e 	bne	r20,zero,120c8 <__alt_data_end+0xfc0120c8>
   12110:	b805883a 	mov	r2,r23
   12114:	dfc00817 	ldw	ra,32(sp)
   12118:	ddc00717 	ldw	r23,28(sp)
   1211c:	dd800617 	ldw	r22,24(sp)
   12120:	dd400517 	ldw	r21,20(sp)
   12124:	dd000417 	ldw	r20,16(sp)
   12128:	dcc00317 	ldw	r19,12(sp)
   1212c:	dc800217 	ldw	r18,8(sp)
   12130:	dc400117 	ldw	r17,4(sp)
   12134:	dc000017 	ldw	r16,0(sp)
   12138:	dec00904 	addi	sp,sp,36
   1213c:	f800283a 	ret
   12140:	002f883a 	mov	r23,zero
   12144:	003ff206 	br	12110 <__alt_data_end+0xfc012110>

00012148 <_setlocale_r>:
   12148:	30001b26 	beq	r6,zero,121b8 <_setlocale_r+0x70>
   1214c:	014000b4 	movhi	r5,2
   12150:	defffe04 	addi	sp,sp,-8
   12154:	29711204 	addi	r5,r5,-15288
   12158:	3009883a 	mov	r4,r6
   1215c:	dc000015 	stw	r16,0(sp)
   12160:	dfc00115 	stw	ra,4(sp)
   12164:	3021883a 	mov	r16,r6
   12168:	00148bc0 	call	148bc <strcmp>
   1216c:	1000061e 	bne	r2,zero,12188 <_setlocale_r+0x40>
   12170:	008000b4 	movhi	r2,2
   12174:	10b0f304 	addi	r2,r2,-15412
   12178:	dfc00117 	ldw	ra,4(sp)
   1217c:	dc000017 	ldw	r16,0(sp)
   12180:	dec00204 	addi	sp,sp,8
   12184:	f800283a 	ret
   12188:	014000b4 	movhi	r5,2
   1218c:	2970f304 	addi	r5,r5,-15412
   12190:	8009883a 	mov	r4,r16
   12194:	00148bc0 	call	148bc <strcmp>
   12198:	103ff526 	beq	r2,zero,12170 <__alt_data_end+0xfc012170>
   1219c:	014000b4 	movhi	r5,2
   121a0:	2970fd04 	addi	r5,r5,-15372
   121a4:	8009883a 	mov	r4,r16
   121a8:	00148bc0 	call	148bc <strcmp>
   121ac:	103ff026 	beq	r2,zero,12170 <__alt_data_end+0xfc012170>
   121b0:	0005883a 	mov	r2,zero
   121b4:	003ff006 	br	12178 <__alt_data_end+0xfc012178>
   121b8:	008000b4 	movhi	r2,2
   121bc:	10b0f304 	addi	r2,r2,-15412
   121c0:	f800283a 	ret

000121c4 <__locale_charset>:
   121c4:	008000b4 	movhi	r2,2
   121c8:	10b2c404 	addi	r2,r2,-13552
   121cc:	f800283a 	ret

000121d0 <__locale_mb_cur_max>:
   121d0:	008000b4 	movhi	r2,2
   121d4:	10b86404 	addi	r2,r2,-7792
   121d8:	10800017 	ldw	r2,0(r2)
   121dc:	f800283a 	ret

000121e0 <__locale_msgcharset>:
   121e0:	008000b4 	movhi	r2,2
   121e4:	10b2bc04 	addi	r2,r2,-13584
   121e8:	f800283a 	ret

000121ec <__locale_cjk_lang>:
   121ec:	0005883a 	mov	r2,zero
   121f0:	f800283a 	ret

000121f4 <_localeconv_r>:
   121f4:	008000b4 	movhi	r2,2
   121f8:	10b2cc04 	addi	r2,r2,-13520
   121fc:	f800283a 	ret

00012200 <setlocale>:
   12200:	008000b4 	movhi	r2,2
   12204:	10b86304 	addi	r2,r2,-7796
   12208:	280d883a 	mov	r6,r5
   1220c:	200b883a 	mov	r5,r4
   12210:	11000017 	ldw	r4,0(r2)
   12214:	00121481 	jmpi	12148 <_setlocale_r>

00012218 <localeconv>:
   12218:	008000b4 	movhi	r2,2
   1221c:	10b2cc04 	addi	r2,r2,-13520
   12220:	f800283a 	ret

00012224 <__smakebuf_r>:
   12224:	2880030b 	ldhu	r2,12(r5)
   12228:	10c0008c 	andi	r3,r2,2
   1222c:	1800411e 	bne	r3,zero,12334 <__smakebuf_r+0x110>
   12230:	deffec04 	addi	sp,sp,-80
   12234:	dc000f15 	stw	r16,60(sp)
   12238:	2821883a 	mov	r16,r5
   1223c:	2940038f 	ldh	r5,14(r5)
   12240:	dc401015 	stw	r17,64(sp)
   12244:	dfc01315 	stw	ra,76(sp)
   12248:	dcc01215 	stw	r19,72(sp)
   1224c:	dc801115 	stw	r18,68(sp)
   12250:	2023883a 	mov	r17,r4
   12254:	28001c16 	blt	r5,zero,122c8 <__smakebuf_r+0xa4>
   12258:	d80d883a 	mov	r6,sp
   1225c:	001652c0 	call	1652c <_fstat_r>
   12260:	10001816 	blt	r2,zero,122c4 <__smakebuf_r+0xa0>
   12264:	d8800117 	ldw	r2,4(sp)
   12268:	00e00014 	movui	r3,32768
   1226c:	10bc000c 	andi	r2,r2,61440
   12270:	14c80020 	cmpeqi	r19,r2,8192
   12274:	10c03726 	beq	r2,r3,12354 <__smakebuf_r+0x130>
   12278:	80c0030b 	ldhu	r3,12(r16)
   1227c:	18c20014 	ori	r3,r3,2048
   12280:	80c0030d 	sth	r3,12(r16)
   12284:	00c80004 	movi	r3,8192
   12288:	10c0521e 	bne	r2,r3,123d4 <__smakebuf_r+0x1b0>
   1228c:	8140038f 	ldh	r5,14(r16)
   12290:	8809883a 	mov	r4,r17
   12294:	00165880 	call	16588 <_isatty_r>
   12298:	10004c26 	beq	r2,zero,123cc <__smakebuf_r+0x1a8>
   1229c:	8080030b 	ldhu	r2,12(r16)
   122a0:	80c010c4 	addi	r3,r16,67
   122a4:	80c00015 	stw	r3,0(r16)
   122a8:	10800054 	ori	r2,r2,1
   122ac:	8080030d 	sth	r2,12(r16)
   122b0:	00800044 	movi	r2,1
   122b4:	80c00415 	stw	r3,16(r16)
   122b8:	80800515 	stw	r2,20(r16)
   122bc:	04810004 	movi	r18,1024
   122c0:	00000706 	br	122e0 <__smakebuf_r+0xbc>
   122c4:	8080030b 	ldhu	r2,12(r16)
   122c8:	10c0200c 	andi	r3,r2,128
   122cc:	18001f1e 	bne	r3,zero,1234c <__smakebuf_r+0x128>
   122d0:	04810004 	movi	r18,1024
   122d4:	10820014 	ori	r2,r2,2048
   122d8:	8080030d 	sth	r2,12(r16)
   122dc:	0027883a 	mov	r19,zero
   122e0:	900b883a 	mov	r5,r18
   122e4:	8809883a 	mov	r4,r17
   122e8:	00123e00 	call	123e0 <_malloc_r>
   122ec:	10002c26 	beq	r2,zero,123a0 <__smakebuf_r+0x17c>
   122f0:	80c0030b 	ldhu	r3,12(r16)
   122f4:	01000074 	movhi	r4,1
   122f8:	2104c704 	addi	r4,r4,4892
   122fc:	89000f15 	stw	r4,60(r17)
   12300:	18c02014 	ori	r3,r3,128
   12304:	80c0030d 	sth	r3,12(r16)
   12308:	80800015 	stw	r2,0(r16)
   1230c:	80800415 	stw	r2,16(r16)
   12310:	84800515 	stw	r18,20(r16)
   12314:	98001a1e 	bne	r19,zero,12380 <__smakebuf_r+0x15c>
   12318:	dfc01317 	ldw	ra,76(sp)
   1231c:	dcc01217 	ldw	r19,72(sp)
   12320:	dc801117 	ldw	r18,68(sp)
   12324:	dc401017 	ldw	r17,64(sp)
   12328:	dc000f17 	ldw	r16,60(sp)
   1232c:	dec01404 	addi	sp,sp,80
   12330:	f800283a 	ret
   12334:	288010c4 	addi	r2,r5,67
   12338:	28800015 	stw	r2,0(r5)
   1233c:	28800415 	stw	r2,16(r5)
   12340:	00800044 	movi	r2,1
   12344:	28800515 	stw	r2,20(r5)
   12348:	f800283a 	ret
   1234c:	04801004 	movi	r18,64
   12350:	003fe006 	br	122d4 <__alt_data_end+0xfc0122d4>
   12354:	81000a17 	ldw	r4,40(r16)
   12358:	00c00074 	movhi	r3,1
   1235c:	18d21604 	addi	r3,r3,18520
   12360:	20ffc51e 	bne	r4,r3,12278 <__alt_data_end+0xfc012278>
   12364:	8080030b 	ldhu	r2,12(r16)
   12368:	04810004 	movi	r18,1024
   1236c:	84801315 	stw	r18,76(r16)
   12370:	1484b03a 	or	r2,r2,r18
   12374:	8080030d 	sth	r2,12(r16)
   12378:	0027883a 	mov	r19,zero
   1237c:	003fd806 	br	122e0 <__alt_data_end+0xfc0122e0>
   12380:	8140038f 	ldh	r5,14(r16)
   12384:	8809883a 	mov	r4,r17
   12388:	00165880 	call	16588 <_isatty_r>
   1238c:	103fe226 	beq	r2,zero,12318 <__alt_data_end+0xfc012318>
   12390:	8080030b 	ldhu	r2,12(r16)
   12394:	10800054 	ori	r2,r2,1
   12398:	8080030d 	sth	r2,12(r16)
   1239c:	003fde06 	br	12318 <__alt_data_end+0xfc012318>
   123a0:	8080030b 	ldhu	r2,12(r16)
   123a4:	10c0800c 	andi	r3,r2,512
   123a8:	183fdb1e 	bne	r3,zero,12318 <__alt_data_end+0xfc012318>
   123ac:	10800094 	ori	r2,r2,2
   123b0:	80c010c4 	addi	r3,r16,67
   123b4:	8080030d 	sth	r2,12(r16)
   123b8:	00800044 	movi	r2,1
   123bc:	80c00015 	stw	r3,0(r16)
   123c0:	80c00415 	stw	r3,16(r16)
   123c4:	80800515 	stw	r2,20(r16)
   123c8:	003fd306 	br	12318 <__alt_data_end+0xfc012318>
   123cc:	04810004 	movi	r18,1024
   123d0:	003fc306 	br	122e0 <__alt_data_end+0xfc0122e0>
   123d4:	0027883a 	mov	r19,zero
   123d8:	04810004 	movi	r18,1024
   123dc:	003fc006 	br	122e0 <__alt_data_end+0xfc0122e0>

000123e0 <_malloc_r>:
   123e0:	defff504 	addi	sp,sp,-44
   123e4:	dc800315 	stw	r18,12(sp)
   123e8:	dfc00a15 	stw	ra,40(sp)
   123ec:	df000915 	stw	fp,36(sp)
   123f0:	ddc00815 	stw	r23,32(sp)
   123f4:	dd800715 	stw	r22,28(sp)
   123f8:	dd400615 	stw	r21,24(sp)
   123fc:	dd000515 	stw	r20,20(sp)
   12400:	dcc00415 	stw	r19,16(sp)
   12404:	dc400215 	stw	r17,8(sp)
   12408:	dc000115 	stw	r16,4(sp)
   1240c:	288002c4 	addi	r2,r5,11
   12410:	00c00584 	movi	r3,22
   12414:	2025883a 	mov	r18,r4
   12418:	18807f2e 	bgeu	r3,r2,12618 <_malloc_r+0x238>
   1241c:	047ffe04 	movi	r17,-8
   12420:	1462703a 	and	r17,r2,r17
   12424:	8800a316 	blt	r17,zero,126b4 <_malloc_r+0x2d4>
   12428:	8940a236 	bltu	r17,r5,126b4 <_malloc_r+0x2d4>
   1242c:	001a4100 	call	1a410 <__malloc_lock>
   12430:	00807dc4 	movi	r2,503
   12434:	1441e92e 	bgeu	r2,r17,12bdc <_malloc_r+0x7fc>
   12438:	8804d27a 	srli	r2,r17,9
   1243c:	1000a126 	beq	r2,zero,126c4 <_malloc_r+0x2e4>
   12440:	00c00104 	movi	r3,4
   12444:	18811e36 	bltu	r3,r2,128c0 <_malloc_r+0x4e0>
   12448:	8804d1ba 	srli	r2,r17,6
   1244c:	12000e44 	addi	r8,r2,57
   12450:	11c00e04 	addi	r7,r2,56
   12454:	4209883a 	add	r4,r8,r8
   12458:	04c000b4 	movhi	r19,2
   1245c:	2109883a 	add	r4,r4,r4
   12460:	9cf2da04 	addi	r19,r19,-13464
   12464:	2109883a 	add	r4,r4,r4
   12468:	9909883a 	add	r4,r19,r4
   1246c:	24000117 	ldw	r16,4(r4)
   12470:	213ffe04 	addi	r4,r4,-8
   12474:	24009726 	beq	r4,r16,126d4 <_malloc_r+0x2f4>
   12478:	80800117 	ldw	r2,4(r16)
   1247c:	01bfff04 	movi	r6,-4
   12480:	014003c4 	movi	r5,15
   12484:	1184703a 	and	r2,r2,r6
   12488:	1447c83a 	sub	r3,r2,r17
   1248c:	28c00716 	blt	r5,r3,124ac <_malloc_r+0xcc>
   12490:	1800920e 	bge	r3,zero,126dc <_malloc_r+0x2fc>
   12494:	84000317 	ldw	r16,12(r16)
   12498:	24008e26 	beq	r4,r16,126d4 <_malloc_r+0x2f4>
   1249c:	80800117 	ldw	r2,4(r16)
   124a0:	1184703a 	and	r2,r2,r6
   124a4:	1447c83a 	sub	r3,r2,r17
   124a8:	28fff90e 	bge	r5,r3,12490 <__alt_data_end+0xfc012490>
   124ac:	3809883a 	mov	r4,r7
   124b0:	018000b4 	movhi	r6,2
   124b4:	9c000417 	ldw	r16,16(r19)
   124b8:	31b2da04 	addi	r6,r6,-13464
   124bc:	32000204 	addi	r8,r6,8
   124c0:	82013426 	beq	r16,r8,12994 <_malloc_r+0x5b4>
   124c4:	80c00117 	ldw	r3,4(r16)
   124c8:	00bfff04 	movi	r2,-4
   124cc:	188e703a 	and	r7,r3,r2
   124d0:	3c45c83a 	sub	r2,r7,r17
   124d4:	00c003c4 	movi	r3,15
   124d8:	18811f16 	blt	r3,r2,12958 <_malloc_r+0x578>
   124dc:	32000515 	stw	r8,20(r6)
   124e0:	32000415 	stw	r8,16(r6)
   124e4:	10007f0e 	bge	r2,zero,126e4 <_malloc_r+0x304>
   124e8:	00807fc4 	movi	r2,511
   124ec:	11c0fd36 	bltu	r2,r7,128e4 <_malloc_r+0x504>
   124f0:	3806d0fa 	srli	r3,r7,3
   124f4:	01c00044 	movi	r7,1
   124f8:	30800117 	ldw	r2,4(r6)
   124fc:	19400044 	addi	r5,r3,1
   12500:	294b883a 	add	r5,r5,r5
   12504:	1807d0ba 	srai	r3,r3,2
   12508:	294b883a 	add	r5,r5,r5
   1250c:	294b883a 	add	r5,r5,r5
   12510:	298b883a 	add	r5,r5,r6
   12514:	38c6983a 	sll	r3,r7,r3
   12518:	29c00017 	ldw	r7,0(r5)
   1251c:	2a7ffe04 	addi	r9,r5,-8
   12520:	1886b03a 	or	r3,r3,r2
   12524:	82400315 	stw	r9,12(r16)
   12528:	81c00215 	stw	r7,8(r16)
   1252c:	30c00115 	stw	r3,4(r6)
   12530:	2c000015 	stw	r16,0(r5)
   12534:	3c000315 	stw	r16,12(r7)
   12538:	2005d0ba 	srai	r2,r4,2
   1253c:	01400044 	movi	r5,1
   12540:	288a983a 	sll	r5,r5,r2
   12544:	19406f36 	bltu	r3,r5,12704 <_malloc_r+0x324>
   12548:	28c4703a 	and	r2,r5,r3
   1254c:	10000a1e 	bne	r2,zero,12578 <_malloc_r+0x198>
   12550:	00bfff04 	movi	r2,-4
   12554:	294b883a 	add	r5,r5,r5
   12558:	2088703a 	and	r4,r4,r2
   1255c:	28c4703a 	and	r2,r5,r3
   12560:	21000104 	addi	r4,r4,4
   12564:	1000041e 	bne	r2,zero,12578 <_malloc_r+0x198>
   12568:	294b883a 	add	r5,r5,r5
   1256c:	28c4703a 	and	r2,r5,r3
   12570:	21000104 	addi	r4,r4,4
   12574:	103ffc26 	beq	r2,zero,12568 <__alt_data_end+0xfc012568>
   12578:	02bfff04 	movi	r10,-4
   1257c:	024003c4 	movi	r9,15
   12580:	21800044 	addi	r6,r4,1
   12584:	318d883a 	add	r6,r6,r6
   12588:	318d883a 	add	r6,r6,r6
   1258c:	318d883a 	add	r6,r6,r6
   12590:	998d883a 	add	r6,r19,r6
   12594:	333ffe04 	addi	r12,r6,-8
   12598:	2017883a 	mov	r11,r4
   1259c:	31800104 	addi	r6,r6,4
   125a0:	34000017 	ldw	r16,0(r6)
   125a4:	31fffd04 	addi	r7,r6,-12
   125a8:	81c0041e 	bne	r16,r7,125bc <_malloc_r+0x1dc>
   125ac:	0000fb06 	br	1299c <_malloc_r+0x5bc>
   125b0:	1801030e 	bge	r3,zero,129c0 <_malloc_r+0x5e0>
   125b4:	84000317 	ldw	r16,12(r16)
   125b8:	81c0f826 	beq	r16,r7,1299c <_malloc_r+0x5bc>
   125bc:	80800117 	ldw	r2,4(r16)
   125c0:	1284703a 	and	r2,r2,r10
   125c4:	1447c83a 	sub	r3,r2,r17
   125c8:	48fff90e 	bge	r9,r3,125b0 <__alt_data_end+0xfc0125b0>
   125cc:	80800317 	ldw	r2,12(r16)
   125d0:	81000217 	ldw	r4,8(r16)
   125d4:	89400054 	ori	r5,r17,1
   125d8:	81400115 	stw	r5,4(r16)
   125dc:	20800315 	stw	r2,12(r4)
   125e0:	11000215 	stw	r4,8(r2)
   125e4:	8463883a 	add	r17,r16,r17
   125e8:	9c400515 	stw	r17,20(r19)
   125ec:	9c400415 	stw	r17,16(r19)
   125f0:	18800054 	ori	r2,r3,1
   125f4:	88800115 	stw	r2,4(r17)
   125f8:	8a000315 	stw	r8,12(r17)
   125fc:	8a000215 	stw	r8,8(r17)
   12600:	88e3883a 	add	r17,r17,r3
   12604:	88c00015 	stw	r3,0(r17)
   12608:	9009883a 	mov	r4,r18
   1260c:	001a4340 	call	1a434 <__malloc_unlock>
   12610:	80800204 	addi	r2,r16,8
   12614:	00001b06 	br	12684 <_malloc_r+0x2a4>
   12618:	04400404 	movi	r17,16
   1261c:	89402536 	bltu	r17,r5,126b4 <_malloc_r+0x2d4>
   12620:	001a4100 	call	1a410 <__malloc_lock>
   12624:	00800184 	movi	r2,6
   12628:	01000084 	movi	r4,2
   1262c:	04c000b4 	movhi	r19,2
   12630:	1085883a 	add	r2,r2,r2
   12634:	9cf2da04 	addi	r19,r19,-13464
   12638:	1085883a 	add	r2,r2,r2
   1263c:	9885883a 	add	r2,r19,r2
   12640:	14000117 	ldw	r16,4(r2)
   12644:	10fffe04 	addi	r3,r2,-8
   12648:	80c0d926 	beq	r16,r3,129b0 <_malloc_r+0x5d0>
   1264c:	80c00117 	ldw	r3,4(r16)
   12650:	81000317 	ldw	r4,12(r16)
   12654:	00bfff04 	movi	r2,-4
   12658:	1884703a 	and	r2,r3,r2
   1265c:	81400217 	ldw	r5,8(r16)
   12660:	8085883a 	add	r2,r16,r2
   12664:	10c00117 	ldw	r3,4(r2)
   12668:	29000315 	stw	r4,12(r5)
   1266c:	21400215 	stw	r5,8(r4)
   12670:	18c00054 	ori	r3,r3,1
   12674:	10c00115 	stw	r3,4(r2)
   12678:	9009883a 	mov	r4,r18
   1267c:	001a4340 	call	1a434 <__malloc_unlock>
   12680:	80800204 	addi	r2,r16,8
   12684:	dfc00a17 	ldw	ra,40(sp)
   12688:	df000917 	ldw	fp,36(sp)
   1268c:	ddc00817 	ldw	r23,32(sp)
   12690:	dd800717 	ldw	r22,28(sp)
   12694:	dd400617 	ldw	r21,24(sp)
   12698:	dd000517 	ldw	r20,20(sp)
   1269c:	dcc00417 	ldw	r19,16(sp)
   126a0:	dc800317 	ldw	r18,12(sp)
   126a4:	dc400217 	ldw	r17,8(sp)
   126a8:	dc000117 	ldw	r16,4(sp)
   126ac:	dec00b04 	addi	sp,sp,44
   126b0:	f800283a 	ret
   126b4:	00800304 	movi	r2,12
   126b8:	90800015 	stw	r2,0(r18)
   126bc:	0005883a 	mov	r2,zero
   126c0:	003ff006 	br	12684 <__alt_data_end+0xfc012684>
   126c4:	01002004 	movi	r4,128
   126c8:	02001004 	movi	r8,64
   126cc:	01c00fc4 	movi	r7,63
   126d0:	003f6106 	br	12458 <__alt_data_end+0xfc012458>
   126d4:	4009883a 	mov	r4,r8
   126d8:	003f7506 	br	124b0 <__alt_data_end+0xfc0124b0>
   126dc:	81000317 	ldw	r4,12(r16)
   126e0:	003fde06 	br	1265c <__alt_data_end+0xfc01265c>
   126e4:	81c5883a 	add	r2,r16,r7
   126e8:	11400117 	ldw	r5,4(r2)
   126ec:	9009883a 	mov	r4,r18
   126f0:	29400054 	ori	r5,r5,1
   126f4:	11400115 	stw	r5,4(r2)
   126f8:	001a4340 	call	1a434 <__malloc_unlock>
   126fc:	80800204 	addi	r2,r16,8
   12700:	003fe006 	br	12684 <__alt_data_end+0xfc012684>
   12704:	9c000217 	ldw	r16,8(r19)
   12708:	00bfff04 	movi	r2,-4
   1270c:	85800117 	ldw	r22,4(r16)
   12710:	b0ac703a 	and	r22,r22,r2
   12714:	b4400336 	bltu	r22,r17,12724 <_malloc_r+0x344>
   12718:	b445c83a 	sub	r2,r22,r17
   1271c:	00c003c4 	movi	r3,15
   12720:	18805d16 	blt	r3,r2,12898 <_malloc_r+0x4b8>
   12724:	05c000b4 	movhi	r23,2
   12728:	008000b4 	movhi	r2,2
   1272c:	10bf3704 	addi	r2,r2,-804
   12730:	bdf86504 	addi	r23,r23,-7788
   12734:	15400017 	ldw	r21,0(r2)
   12738:	b8c00017 	ldw	r3,0(r23)
   1273c:	00bfffc4 	movi	r2,-1
   12740:	858d883a 	add	r6,r16,r22
   12744:	8d6b883a 	add	r21,r17,r21
   12748:	1880ea26 	beq	r3,r2,12af4 <_malloc_r+0x714>
   1274c:	ad4403c4 	addi	r21,r21,4111
   12750:	00bc0004 	movi	r2,-4096
   12754:	a8aa703a 	and	r21,r21,r2
   12758:	a80b883a 	mov	r5,r21
   1275c:	9009883a 	mov	r4,r18
   12760:	d9800015 	stw	r6,0(sp)
   12764:	001472c0 	call	1472c <_sbrk_r>
   12768:	1029883a 	mov	r20,r2
   1276c:	00bfffc4 	movi	r2,-1
   12770:	d9800017 	ldw	r6,0(sp)
   12774:	a080e826 	beq	r20,r2,12b18 <_malloc_r+0x738>
   12778:	a180a636 	bltu	r20,r6,12a14 <_malloc_r+0x634>
   1277c:	070000b4 	movhi	fp,2
   12780:	e73f4004 	addi	fp,fp,-768
   12784:	e0800017 	ldw	r2,0(fp)
   12788:	a887883a 	add	r3,r21,r2
   1278c:	e0c00015 	stw	r3,0(fp)
   12790:	3500e626 	beq	r6,r20,12b2c <_malloc_r+0x74c>
   12794:	b9000017 	ldw	r4,0(r23)
   12798:	00bfffc4 	movi	r2,-1
   1279c:	2080ee26 	beq	r4,r2,12b58 <_malloc_r+0x778>
   127a0:	a185c83a 	sub	r2,r20,r6
   127a4:	10c5883a 	add	r2,r2,r3
   127a8:	e0800015 	stw	r2,0(fp)
   127ac:	a0c001cc 	andi	r3,r20,7
   127b0:	1800bc26 	beq	r3,zero,12aa4 <_malloc_r+0x6c4>
   127b4:	a0e9c83a 	sub	r20,r20,r3
   127b8:	00840204 	movi	r2,4104
   127bc:	a5000204 	addi	r20,r20,8
   127c0:	10c7c83a 	sub	r3,r2,r3
   127c4:	a545883a 	add	r2,r20,r21
   127c8:	1083ffcc 	andi	r2,r2,4095
   127cc:	18abc83a 	sub	r21,r3,r2
   127d0:	a80b883a 	mov	r5,r21
   127d4:	9009883a 	mov	r4,r18
   127d8:	001472c0 	call	1472c <_sbrk_r>
   127dc:	00ffffc4 	movi	r3,-1
   127e0:	10c0e126 	beq	r2,r3,12b68 <_malloc_r+0x788>
   127e4:	1505c83a 	sub	r2,r2,r20
   127e8:	1545883a 	add	r2,r2,r21
   127ec:	10800054 	ori	r2,r2,1
   127f0:	e0c00017 	ldw	r3,0(fp)
   127f4:	9d000215 	stw	r20,8(r19)
   127f8:	a0800115 	stw	r2,4(r20)
   127fc:	a8c7883a 	add	r3,r21,r3
   12800:	e0c00015 	stw	r3,0(fp)
   12804:	84c00e26 	beq	r16,r19,12840 <_malloc_r+0x460>
   12808:	018003c4 	movi	r6,15
   1280c:	3580a72e 	bgeu	r6,r22,12aac <_malloc_r+0x6cc>
   12810:	81400117 	ldw	r5,4(r16)
   12814:	013ffe04 	movi	r4,-8
   12818:	b0bffd04 	addi	r2,r22,-12
   1281c:	1104703a 	and	r2,r2,r4
   12820:	2900004c 	andi	r4,r5,1
   12824:	2088b03a 	or	r4,r4,r2
   12828:	81000115 	stw	r4,4(r16)
   1282c:	01400144 	movi	r5,5
   12830:	8089883a 	add	r4,r16,r2
   12834:	21400115 	stw	r5,4(r4)
   12838:	21400215 	stw	r5,8(r4)
   1283c:	3080cd36 	bltu	r6,r2,12b74 <_malloc_r+0x794>
   12840:	008000b4 	movhi	r2,2
   12844:	10bf3604 	addi	r2,r2,-808
   12848:	11000017 	ldw	r4,0(r2)
   1284c:	20c0012e 	bgeu	r4,r3,12854 <_malloc_r+0x474>
   12850:	10c00015 	stw	r3,0(r2)
   12854:	008000b4 	movhi	r2,2
   12858:	10bf3504 	addi	r2,r2,-812
   1285c:	11000017 	ldw	r4,0(r2)
   12860:	9c000217 	ldw	r16,8(r19)
   12864:	20c0012e 	bgeu	r4,r3,1286c <_malloc_r+0x48c>
   12868:	10c00015 	stw	r3,0(r2)
   1286c:	80c00117 	ldw	r3,4(r16)
   12870:	00bfff04 	movi	r2,-4
   12874:	1886703a 	and	r3,r3,r2
   12878:	1c45c83a 	sub	r2,r3,r17
   1287c:	1c400236 	bltu	r3,r17,12888 <_malloc_r+0x4a8>
   12880:	00c003c4 	movi	r3,15
   12884:	18800416 	blt	r3,r2,12898 <_malloc_r+0x4b8>
   12888:	9009883a 	mov	r4,r18
   1288c:	001a4340 	call	1a434 <__malloc_unlock>
   12890:	0005883a 	mov	r2,zero
   12894:	003f7b06 	br	12684 <__alt_data_end+0xfc012684>
   12898:	88c00054 	ori	r3,r17,1
   1289c:	80c00115 	stw	r3,4(r16)
   128a0:	8463883a 	add	r17,r16,r17
   128a4:	10800054 	ori	r2,r2,1
   128a8:	9c400215 	stw	r17,8(r19)
   128ac:	88800115 	stw	r2,4(r17)
   128b0:	9009883a 	mov	r4,r18
   128b4:	001a4340 	call	1a434 <__malloc_unlock>
   128b8:	80800204 	addi	r2,r16,8
   128bc:	003f7106 	br	12684 <__alt_data_end+0xfc012684>
   128c0:	00c00504 	movi	r3,20
   128c4:	18804a2e 	bgeu	r3,r2,129f0 <_malloc_r+0x610>
   128c8:	00c01504 	movi	r3,84
   128cc:	18806e36 	bltu	r3,r2,12a88 <_malloc_r+0x6a8>
   128d0:	8804d33a 	srli	r2,r17,12
   128d4:	12001bc4 	addi	r8,r2,111
   128d8:	11c01b84 	addi	r7,r2,110
   128dc:	4209883a 	add	r4,r8,r8
   128e0:	003edd06 	br	12458 <__alt_data_end+0xfc012458>
   128e4:	3804d27a 	srli	r2,r7,9
   128e8:	00c00104 	movi	r3,4
   128ec:	1880442e 	bgeu	r3,r2,12a00 <_malloc_r+0x620>
   128f0:	00c00504 	movi	r3,20
   128f4:	18808136 	bltu	r3,r2,12afc <_malloc_r+0x71c>
   128f8:	11401704 	addi	r5,r2,92
   128fc:	10c016c4 	addi	r3,r2,91
   12900:	294b883a 	add	r5,r5,r5
   12904:	294b883a 	add	r5,r5,r5
   12908:	294b883a 	add	r5,r5,r5
   1290c:	994b883a 	add	r5,r19,r5
   12910:	28800017 	ldw	r2,0(r5)
   12914:	018000b4 	movhi	r6,2
   12918:	297ffe04 	addi	r5,r5,-8
   1291c:	31b2da04 	addi	r6,r6,-13464
   12920:	28806526 	beq	r5,r2,12ab8 <_malloc_r+0x6d8>
   12924:	01bfff04 	movi	r6,-4
   12928:	10c00117 	ldw	r3,4(r2)
   1292c:	1986703a 	and	r3,r3,r6
   12930:	38c0022e 	bgeu	r7,r3,1293c <_malloc_r+0x55c>
   12934:	10800217 	ldw	r2,8(r2)
   12938:	28bffb1e 	bne	r5,r2,12928 <__alt_data_end+0xfc012928>
   1293c:	11400317 	ldw	r5,12(r2)
   12940:	98c00117 	ldw	r3,4(r19)
   12944:	81400315 	stw	r5,12(r16)
   12948:	80800215 	stw	r2,8(r16)
   1294c:	2c000215 	stw	r16,8(r5)
   12950:	14000315 	stw	r16,12(r2)
   12954:	003ef806 	br	12538 <__alt_data_end+0xfc012538>
   12958:	88c00054 	ori	r3,r17,1
   1295c:	80c00115 	stw	r3,4(r16)
   12960:	8463883a 	add	r17,r16,r17
   12964:	34400515 	stw	r17,20(r6)
   12968:	34400415 	stw	r17,16(r6)
   1296c:	10c00054 	ori	r3,r2,1
   12970:	8a000315 	stw	r8,12(r17)
   12974:	8a000215 	stw	r8,8(r17)
   12978:	88c00115 	stw	r3,4(r17)
   1297c:	88a3883a 	add	r17,r17,r2
   12980:	88800015 	stw	r2,0(r17)
   12984:	9009883a 	mov	r4,r18
   12988:	001a4340 	call	1a434 <__malloc_unlock>
   1298c:	80800204 	addi	r2,r16,8
   12990:	003f3c06 	br	12684 <__alt_data_end+0xfc012684>
   12994:	30c00117 	ldw	r3,4(r6)
   12998:	003ee706 	br	12538 <__alt_data_end+0xfc012538>
   1299c:	5ac00044 	addi	r11,r11,1
   129a0:	588000cc 	andi	r2,r11,3
   129a4:	31800204 	addi	r6,r6,8
   129a8:	103efd1e 	bne	r2,zero,125a0 <__alt_data_end+0xfc0125a0>
   129ac:	00002406 	br	12a40 <_malloc_r+0x660>
   129b0:	14000317 	ldw	r16,12(r2)
   129b4:	143f251e 	bne	r2,r16,1264c <__alt_data_end+0xfc01264c>
   129b8:	21000084 	addi	r4,r4,2
   129bc:	003ebc06 	br	124b0 <__alt_data_end+0xfc0124b0>
   129c0:	8085883a 	add	r2,r16,r2
   129c4:	10c00117 	ldw	r3,4(r2)
   129c8:	81000317 	ldw	r4,12(r16)
   129cc:	81400217 	ldw	r5,8(r16)
   129d0:	18c00054 	ori	r3,r3,1
   129d4:	10c00115 	stw	r3,4(r2)
   129d8:	29000315 	stw	r4,12(r5)
   129dc:	21400215 	stw	r5,8(r4)
   129e0:	9009883a 	mov	r4,r18
   129e4:	001a4340 	call	1a434 <__malloc_unlock>
   129e8:	80800204 	addi	r2,r16,8
   129ec:	003f2506 	br	12684 <__alt_data_end+0xfc012684>
   129f0:	12001704 	addi	r8,r2,92
   129f4:	11c016c4 	addi	r7,r2,91
   129f8:	4209883a 	add	r4,r8,r8
   129fc:	003e9606 	br	12458 <__alt_data_end+0xfc012458>
   12a00:	3804d1ba 	srli	r2,r7,6
   12a04:	11400e44 	addi	r5,r2,57
   12a08:	10c00e04 	addi	r3,r2,56
   12a0c:	294b883a 	add	r5,r5,r5
   12a10:	003fbc06 	br	12904 <__alt_data_end+0xfc012904>
   12a14:	84ff5926 	beq	r16,r19,1277c <__alt_data_end+0xfc01277c>
   12a18:	008000b4 	movhi	r2,2
   12a1c:	10b2da04 	addi	r2,r2,-13464
   12a20:	14000217 	ldw	r16,8(r2)
   12a24:	00bfff04 	movi	r2,-4
   12a28:	80c00117 	ldw	r3,4(r16)
   12a2c:	1886703a 	and	r3,r3,r2
   12a30:	003f9106 	br	12878 <__alt_data_end+0xfc012878>
   12a34:	60800217 	ldw	r2,8(r12)
   12a38:	213fffc4 	addi	r4,r4,-1
   12a3c:	1300651e 	bne	r2,r12,12bd4 <_malloc_r+0x7f4>
   12a40:	208000cc 	andi	r2,r4,3
   12a44:	633ffe04 	addi	r12,r12,-8
   12a48:	103ffa1e 	bne	r2,zero,12a34 <__alt_data_end+0xfc012a34>
   12a4c:	98800117 	ldw	r2,4(r19)
   12a50:	0146303a 	nor	r3,zero,r5
   12a54:	1884703a 	and	r2,r3,r2
   12a58:	98800115 	stw	r2,4(r19)
   12a5c:	294b883a 	add	r5,r5,r5
   12a60:	117f2836 	bltu	r2,r5,12704 <__alt_data_end+0xfc012704>
   12a64:	283f2726 	beq	r5,zero,12704 <__alt_data_end+0xfc012704>
   12a68:	2886703a 	and	r3,r5,r2
   12a6c:	5809883a 	mov	r4,r11
   12a70:	183ec31e 	bne	r3,zero,12580 <__alt_data_end+0xfc012580>
   12a74:	294b883a 	add	r5,r5,r5
   12a78:	2886703a 	and	r3,r5,r2
   12a7c:	21000104 	addi	r4,r4,4
   12a80:	183ffc26 	beq	r3,zero,12a74 <__alt_data_end+0xfc012a74>
   12a84:	003ebe06 	br	12580 <__alt_data_end+0xfc012580>
   12a88:	00c05504 	movi	r3,340
   12a8c:	18801236 	bltu	r3,r2,12ad8 <_malloc_r+0x6f8>
   12a90:	8804d3fa 	srli	r2,r17,15
   12a94:	12001e04 	addi	r8,r2,120
   12a98:	11c01dc4 	addi	r7,r2,119
   12a9c:	4209883a 	add	r4,r8,r8
   12aa0:	003e6d06 	br	12458 <__alt_data_end+0xfc012458>
   12aa4:	00c40004 	movi	r3,4096
   12aa8:	003f4606 	br	127c4 <__alt_data_end+0xfc0127c4>
   12aac:	00800044 	movi	r2,1
   12ab0:	a0800115 	stw	r2,4(r20)
   12ab4:	003f7406 	br	12888 <__alt_data_end+0xfc012888>
   12ab8:	1805d0ba 	srai	r2,r3,2
   12abc:	01c00044 	movi	r7,1
   12ac0:	30c00117 	ldw	r3,4(r6)
   12ac4:	388e983a 	sll	r7,r7,r2
   12ac8:	2805883a 	mov	r2,r5
   12acc:	38c6b03a 	or	r3,r7,r3
   12ad0:	30c00115 	stw	r3,4(r6)
   12ad4:	003f9b06 	br	12944 <__alt_data_end+0xfc012944>
   12ad8:	00c15504 	movi	r3,1364
   12adc:	18801a36 	bltu	r3,r2,12b48 <_malloc_r+0x768>
   12ae0:	8804d4ba 	srli	r2,r17,18
   12ae4:	12001f44 	addi	r8,r2,125
   12ae8:	11c01f04 	addi	r7,r2,124
   12aec:	4209883a 	add	r4,r8,r8
   12af0:	003e5906 	br	12458 <__alt_data_end+0xfc012458>
   12af4:	ad400404 	addi	r21,r21,16
   12af8:	003f1706 	br	12758 <__alt_data_end+0xfc012758>
   12afc:	00c01504 	movi	r3,84
   12b00:	18802336 	bltu	r3,r2,12b90 <_malloc_r+0x7b0>
   12b04:	3804d33a 	srli	r2,r7,12
   12b08:	11401bc4 	addi	r5,r2,111
   12b0c:	10c01b84 	addi	r3,r2,110
   12b10:	294b883a 	add	r5,r5,r5
   12b14:	003f7b06 	br	12904 <__alt_data_end+0xfc012904>
   12b18:	9c000217 	ldw	r16,8(r19)
   12b1c:	00bfff04 	movi	r2,-4
   12b20:	80c00117 	ldw	r3,4(r16)
   12b24:	1886703a 	and	r3,r3,r2
   12b28:	003f5306 	br	12878 <__alt_data_end+0xfc012878>
   12b2c:	3083ffcc 	andi	r2,r6,4095
   12b30:	103f181e 	bne	r2,zero,12794 <__alt_data_end+0xfc012794>
   12b34:	99000217 	ldw	r4,8(r19)
   12b38:	b545883a 	add	r2,r22,r21
   12b3c:	10800054 	ori	r2,r2,1
   12b40:	20800115 	stw	r2,4(r4)
   12b44:	003f3e06 	br	12840 <__alt_data_end+0xfc012840>
   12b48:	01003f84 	movi	r4,254
   12b4c:	02001fc4 	movi	r8,127
   12b50:	01c01f84 	movi	r7,126
   12b54:	003e4006 	br	12458 <__alt_data_end+0xfc012458>
   12b58:	008000b4 	movhi	r2,2
   12b5c:	10b86504 	addi	r2,r2,-7788
   12b60:	15000015 	stw	r20,0(r2)
   12b64:	003f1106 	br	127ac <__alt_data_end+0xfc0127ac>
   12b68:	00800044 	movi	r2,1
   12b6c:	002b883a 	mov	r21,zero
   12b70:	003f1f06 	br	127f0 <__alt_data_end+0xfc0127f0>
   12b74:	81400204 	addi	r5,r16,8
   12b78:	9009883a 	mov	r4,r18
   12b7c:	00117e80 	call	117e8 <_free_r>
   12b80:	008000b4 	movhi	r2,2
   12b84:	10bf4004 	addi	r2,r2,-768
   12b88:	10c00017 	ldw	r3,0(r2)
   12b8c:	003f2c06 	br	12840 <__alt_data_end+0xfc012840>
   12b90:	00c05504 	movi	r3,340
   12b94:	18800536 	bltu	r3,r2,12bac <_malloc_r+0x7cc>
   12b98:	3804d3fa 	srli	r2,r7,15
   12b9c:	11401e04 	addi	r5,r2,120
   12ba0:	10c01dc4 	addi	r3,r2,119
   12ba4:	294b883a 	add	r5,r5,r5
   12ba8:	003f5606 	br	12904 <__alt_data_end+0xfc012904>
   12bac:	00c15504 	movi	r3,1364
   12bb0:	18800536 	bltu	r3,r2,12bc8 <_malloc_r+0x7e8>
   12bb4:	3804d4ba 	srli	r2,r7,18
   12bb8:	11401f44 	addi	r5,r2,125
   12bbc:	10c01f04 	addi	r3,r2,124
   12bc0:	294b883a 	add	r5,r5,r5
   12bc4:	003f4f06 	br	12904 <__alt_data_end+0xfc012904>
   12bc8:	01403f84 	movi	r5,254
   12bcc:	00c01f84 	movi	r3,126
   12bd0:	003f4c06 	br	12904 <__alt_data_end+0xfc012904>
   12bd4:	98800117 	ldw	r2,4(r19)
   12bd8:	003fa006 	br	12a5c <__alt_data_end+0xfc012a5c>
   12bdc:	8808d0fa 	srli	r4,r17,3
   12be0:	20800044 	addi	r2,r4,1
   12be4:	1085883a 	add	r2,r2,r2
   12be8:	003e9006 	br	1262c <__alt_data_end+0xfc01262c>

00012bec <memchr>:
   12bec:	208000cc 	andi	r2,r4,3
   12bf0:	280f883a 	mov	r7,r5
   12bf4:	10003426 	beq	r2,zero,12cc8 <memchr+0xdc>
   12bf8:	30bfffc4 	addi	r2,r6,-1
   12bfc:	30001a26 	beq	r6,zero,12c68 <memchr+0x7c>
   12c00:	20c00003 	ldbu	r3,0(r4)
   12c04:	29803fcc 	andi	r6,r5,255
   12c08:	30c0051e 	bne	r6,r3,12c20 <memchr+0x34>
   12c0c:	00001806 	br	12c70 <memchr+0x84>
   12c10:	10001526 	beq	r2,zero,12c68 <memchr+0x7c>
   12c14:	20c00003 	ldbu	r3,0(r4)
   12c18:	10bfffc4 	addi	r2,r2,-1
   12c1c:	30c01426 	beq	r6,r3,12c70 <memchr+0x84>
   12c20:	21000044 	addi	r4,r4,1
   12c24:	20c000cc 	andi	r3,r4,3
   12c28:	183ff91e 	bne	r3,zero,12c10 <__alt_data_end+0xfc012c10>
   12c2c:	020000c4 	movi	r8,3
   12c30:	40801136 	bltu	r8,r2,12c78 <memchr+0x8c>
   12c34:	10000c26 	beq	r2,zero,12c68 <memchr+0x7c>
   12c38:	20c00003 	ldbu	r3,0(r4)
   12c3c:	29403fcc 	andi	r5,r5,255
   12c40:	28c00b26 	beq	r5,r3,12c70 <memchr+0x84>
   12c44:	20c00044 	addi	r3,r4,1
   12c48:	39803fcc 	andi	r6,r7,255
   12c4c:	2089883a 	add	r4,r4,r2
   12c50:	00000306 	br	12c60 <memchr+0x74>
   12c54:	18c00044 	addi	r3,r3,1
   12c58:	197fffc3 	ldbu	r5,-1(r3)
   12c5c:	31400526 	beq	r6,r5,12c74 <memchr+0x88>
   12c60:	1805883a 	mov	r2,r3
   12c64:	20fffb1e 	bne	r4,r3,12c54 <__alt_data_end+0xfc012c54>
   12c68:	0005883a 	mov	r2,zero
   12c6c:	f800283a 	ret
   12c70:	2005883a 	mov	r2,r4
   12c74:	f800283a 	ret
   12c78:	28c03fcc 	andi	r3,r5,255
   12c7c:	1812923a 	slli	r9,r3,8
   12c80:	02ffbff4 	movhi	r11,65279
   12c84:	02a02074 	movhi	r10,32897
   12c88:	48d2b03a 	or	r9,r9,r3
   12c8c:	4806943a 	slli	r3,r9,16
   12c90:	5affbfc4 	addi	r11,r11,-257
   12c94:	52a02004 	addi	r10,r10,-32640
   12c98:	48d2b03a 	or	r9,r9,r3
   12c9c:	20c00017 	ldw	r3,0(r4)
   12ca0:	48c6f03a 	xor	r3,r9,r3
   12ca4:	1acd883a 	add	r6,r3,r11
   12ca8:	00c6303a 	nor	r3,zero,r3
   12cac:	30c6703a 	and	r3,r6,r3
   12cb0:	1a86703a 	and	r3,r3,r10
   12cb4:	183fe01e 	bne	r3,zero,12c38 <__alt_data_end+0xfc012c38>
   12cb8:	10bfff04 	addi	r2,r2,-4
   12cbc:	21000104 	addi	r4,r4,4
   12cc0:	40bff636 	bltu	r8,r2,12c9c <__alt_data_end+0xfc012c9c>
   12cc4:	003fdb06 	br	12c34 <__alt_data_end+0xfc012c34>
   12cc8:	3005883a 	mov	r2,r6
   12ccc:	003fd706 	br	12c2c <__alt_data_end+0xfc012c2c>

00012cd0 <memcpy>:
   12cd0:	defffd04 	addi	sp,sp,-12
   12cd4:	dfc00215 	stw	ra,8(sp)
   12cd8:	dc400115 	stw	r17,4(sp)
   12cdc:	dc000015 	stw	r16,0(sp)
   12ce0:	00c003c4 	movi	r3,15
   12ce4:	2005883a 	mov	r2,r4
   12ce8:	1980452e 	bgeu	r3,r6,12e00 <memcpy+0x130>
   12cec:	2906b03a 	or	r3,r5,r4
   12cf0:	18c000cc 	andi	r3,r3,3
   12cf4:	1800441e 	bne	r3,zero,12e08 <memcpy+0x138>
   12cf8:	347ffc04 	addi	r17,r6,-16
   12cfc:	8822d13a 	srli	r17,r17,4
   12d00:	28c00104 	addi	r3,r5,4
   12d04:	23400104 	addi	r13,r4,4
   12d08:	8820913a 	slli	r16,r17,4
   12d0c:	2b000204 	addi	r12,r5,8
   12d10:	22c00204 	addi	r11,r4,8
   12d14:	84000504 	addi	r16,r16,20
   12d18:	2a800304 	addi	r10,r5,12
   12d1c:	22400304 	addi	r9,r4,12
   12d20:	2c21883a 	add	r16,r5,r16
   12d24:	2811883a 	mov	r8,r5
   12d28:	200f883a 	mov	r7,r4
   12d2c:	41000017 	ldw	r4,0(r8)
   12d30:	1fc00017 	ldw	ra,0(r3)
   12d34:	63c00017 	ldw	r15,0(r12)
   12d38:	39000015 	stw	r4,0(r7)
   12d3c:	53800017 	ldw	r14,0(r10)
   12d40:	6fc00015 	stw	ra,0(r13)
   12d44:	5bc00015 	stw	r15,0(r11)
   12d48:	4b800015 	stw	r14,0(r9)
   12d4c:	18c00404 	addi	r3,r3,16
   12d50:	39c00404 	addi	r7,r7,16
   12d54:	42000404 	addi	r8,r8,16
   12d58:	6b400404 	addi	r13,r13,16
   12d5c:	63000404 	addi	r12,r12,16
   12d60:	5ac00404 	addi	r11,r11,16
   12d64:	52800404 	addi	r10,r10,16
   12d68:	4a400404 	addi	r9,r9,16
   12d6c:	1c3fef1e 	bne	r3,r16,12d2c <__alt_data_end+0xfc012d2c>
   12d70:	89c00044 	addi	r7,r17,1
   12d74:	380e913a 	slli	r7,r7,4
   12d78:	310003cc 	andi	r4,r6,15
   12d7c:	02c000c4 	movi	r11,3
   12d80:	11c7883a 	add	r3,r2,r7
   12d84:	29cb883a 	add	r5,r5,r7
   12d88:	5900212e 	bgeu	r11,r4,12e10 <memcpy+0x140>
   12d8c:	1813883a 	mov	r9,r3
   12d90:	2811883a 	mov	r8,r5
   12d94:	200f883a 	mov	r7,r4
   12d98:	42800017 	ldw	r10,0(r8)
   12d9c:	4a400104 	addi	r9,r9,4
   12da0:	39ffff04 	addi	r7,r7,-4
   12da4:	4abfff15 	stw	r10,-4(r9)
   12da8:	42000104 	addi	r8,r8,4
   12dac:	59fffa36 	bltu	r11,r7,12d98 <__alt_data_end+0xfc012d98>
   12db0:	213fff04 	addi	r4,r4,-4
   12db4:	2008d0ba 	srli	r4,r4,2
   12db8:	318000cc 	andi	r6,r6,3
   12dbc:	21000044 	addi	r4,r4,1
   12dc0:	2109883a 	add	r4,r4,r4
   12dc4:	2109883a 	add	r4,r4,r4
   12dc8:	1907883a 	add	r3,r3,r4
   12dcc:	290b883a 	add	r5,r5,r4
   12dd0:	30000626 	beq	r6,zero,12dec <memcpy+0x11c>
   12dd4:	198d883a 	add	r6,r3,r6
   12dd8:	29c00003 	ldbu	r7,0(r5)
   12ddc:	18c00044 	addi	r3,r3,1
   12de0:	29400044 	addi	r5,r5,1
   12de4:	19ffffc5 	stb	r7,-1(r3)
   12de8:	19bffb1e 	bne	r3,r6,12dd8 <__alt_data_end+0xfc012dd8>
   12dec:	dfc00217 	ldw	ra,8(sp)
   12df0:	dc400117 	ldw	r17,4(sp)
   12df4:	dc000017 	ldw	r16,0(sp)
   12df8:	dec00304 	addi	sp,sp,12
   12dfc:	f800283a 	ret
   12e00:	2007883a 	mov	r3,r4
   12e04:	003ff206 	br	12dd0 <__alt_data_end+0xfc012dd0>
   12e08:	2007883a 	mov	r3,r4
   12e0c:	003ff106 	br	12dd4 <__alt_data_end+0xfc012dd4>
   12e10:	200d883a 	mov	r6,r4
   12e14:	003fee06 	br	12dd0 <__alt_data_end+0xfc012dd0>

00012e18 <memmove>:
   12e18:	2005883a 	mov	r2,r4
   12e1c:	29000b2e 	bgeu	r5,r4,12e4c <memmove+0x34>
   12e20:	298f883a 	add	r7,r5,r6
   12e24:	21c0092e 	bgeu	r4,r7,12e4c <memmove+0x34>
   12e28:	2187883a 	add	r3,r4,r6
   12e2c:	198bc83a 	sub	r5,r3,r6
   12e30:	30004826 	beq	r6,zero,12f54 <memmove+0x13c>
   12e34:	39ffffc4 	addi	r7,r7,-1
   12e38:	39000003 	ldbu	r4,0(r7)
   12e3c:	18ffffc4 	addi	r3,r3,-1
   12e40:	19000005 	stb	r4,0(r3)
   12e44:	28fffb1e 	bne	r5,r3,12e34 <__alt_data_end+0xfc012e34>
   12e48:	f800283a 	ret
   12e4c:	00c003c4 	movi	r3,15
   12e50:	1980412e 	bgeu	r3,r6,12f58 <memmove+0x140>
   12e54:	2886b03a 	or	r3,r5,r2
   12e58:	18c000cc 	andi	r3,r3,3
   12e5c:	1800401e 	bne	r3,zero,12f60 <memmove+0x148>
   12e60:	33fffc04 	addi	r15,r6,-16
   12e64:	781ed13a 	srli	r15,r15,4
   12e68:	28c00104 	addi	r3,r5,4
   12e6c:	13400104 	addi	r13,r2,4
   12e70:	781c913a 	slli	r14,r15,4
   12e74:	2b000204 	addi	r12,r5,8
   12e78:	12c00204 	addi	r11,r2,8
   12e7c:	73800504 	addi	r14,r14,20
   12e80:	2a800304 	addi	r10,r5,12
   12e84:	12400304 	addi	r9,r2,12
   12e88:	2b9d883a 	add	r14,r5,r14
   12e8c:	2811883a 	mov	r8,r5
   12e90:	100f883a 	mov	r7,r2
   12e94:	41000017 	ldw	r4,0(r8)
   12e98:	39c00404 	addi	r7,r7,16
   12e9c:	18c00404 	addi	r3,r3,16
   12ea0:	393ffc15 	stw	r4,-16(r7)
   12ea4:	193ffc17 	ldw	r4,-16(r3)
   12ea8:	6b400404 	addi	r13,r13,16
   12eac:	5ac00404 	addi	r11,r11,16
   12eb0:	693ffc15 	stw	r4,-16(r13)
   12eb4:	61000017 	ldw	r4,0(r12)
   12eb8:	4a400404 	addi	r9,r9,16
   12ebc:	42000404 	addi	r8,r8,16
   12ec0:	593ffc15 	stw	r4,-16(r11)
   12ec4:	51000017 	ldw	r4,0(r10)
   12ec8:	63000404 	addi	r12,r12,16
   12ecc:	52800404 	addi	r10,r10,16
   12ed0:	493ffc15 	stw	r4,-16(r9)
   12ed4:	1bbfef1e 	bne	r3,r14,12e94 <__alt_data_end+0xfc012e94>
   12ed8:	79000044 	addi	r4,r15,1
   12edc:	2008913a 	slli	r4,r4,4
   12ee0:	328003cc 	andi	r10,r6,15
   12ee4:	02c000c4 	movi	r11,3
   12ee8:	1107883a 	add	r3,r2,r4
   12eec:	290b883a 	add	r5,r5,r4
   12ef0:	5a801e2e 	bgeu	r11,r10,12f6c <memmove+0x154>
   12ef4:	1813883a 	mov	r9,r3
   12ef8:	2811883a 	mov	r8,r5
   12efc:	500f883a 	mov	r7,r10
   12f00:	41000017 	ldw	r4,0(r8)
   12f04:	4a400104 	addi	r9,r9,4
   12f08:	39ffff04 	addi	r7,r7,-4
   12f0c:	493fff15 	stw	r4,-4(r9)
   12f10:	42000104 	addi	r8,r8,4
   12f14:	59fffa36 	bltu	r11,r7,12f00 <__alt_data_end+0xfc012f00>
   12f18:	513fff04 	addi	r4,r10,-4
   12f1c:	2008d0ba 	srli	r4,r4,2
   12f20:	318000cc 	andi	r6,r6,3
   12f24:	21000044 	addi	r4,r4,1
   12f28:	2109883a 	add	r4,r4,r4
   12f2c:	2109883a 	add	r4,r4,r4
   12f30:	1907883a 	add	r3,r3,r4
   12f34:	290b883a 	add	r5,r5,r4
   12f38:	30000b26 	beq	r6,zero,12f68 <memmove+0x150>
   12f3c:	198d883a 	add	r6,r3,r6
   12f40:	29c00003 	ldbu	r7,0(r5)
   12f44:	18c00044 	addi	r3,r3,1
   12f48:	29400044 	addi	r5,r5,1
   12f4c:	19ffffc5 	stb	r7,-1(r3)
   12f50:	19bffb1e 	bne	r3,r6,12f40 <__alt_data_end+0xfc012f40>
   12f54:	f800283a 	ret
   12f58:	1007883a 	mov	r3,r2
   12f5c:	003ff606 	br	12f38 <__alt_data_end+0xfc012f38>
   12f60:	1007883a 	mov	r3,r2
   12f64:	003ff506 	br	12f3c <__alt_data_end+0xfc012f3c>
   12f68:	f800283a 	ret
   12f6c:	500d883a 	mov	r6,r10
   12f70:	003ff106 	br	12f38 <__alt_data_end+0xfc012f38>

00012f74 <memset>:
   12f74:	20c000cc 	andi	r3,r4,3
   12f78:	2005883a 	mov	r2,r4
   12f7c:	18004426 	beq	r3,zero,13090 <memset+0x11c>
   12f80:	31ffffc4 	addi	r7,r6,-1
   12f84:	30004026 	beq	r6,zero,13088 <memset+0x114>
   12f88:	2813883a 	mov	r9,r5
   12f8c:	200d883a 	mov	r6,r4
   12f90:	2007883a 	mov	r3,r4
   12f94:	00000406 	br	12fa8 <memset+0x34>
   12f98:	3a3fffc4 	addi	r8,r7,-1
   12f9c:	31800044 	addi	r6,r6,1
   12fa0:	38003926 	beq	r7,zero,13088 <memset+0x114>
   12fa4:	400f883a 	mov	r7,r8
   12fa8:	18c00044 	addi	r3,r3,1
   12fac:	32400005 	stb	r9,0(r6)
   12fb0:	1a0000cc 	andi	r8,r3,3
   12fb4:	403ff81e 	bne	r8,zero,12f98 <__alt_data_end+0xfc012f98>
   12fb8:	010000c4 	movi	r4,3
   12fbc:	21c02d2e 	bgeu	r4,r7,13074 <memset+0x100>
   12fc0:	29003fcc 	andi	r4,r5,255
   12fc4:	200c923a 	slli	r6,r4,8
   12fc8:	3108b03a 	or	r4,r6,r4
   12fcc:	200c943a 	slli	r6,r4,16
   12fd0:	218cb03a 	or	r6,r4,r6
   12fd4:	010003c4 	movi	r4,15
   12fd8:	21c0182e 	bgeu	r4,r7,1303c <memset+0xc8>
   12fdc:	3b3ffc04 	addi	r12,r7,-16
   12fe0:	6018d13a 	srli	r12,r12,4
   12fe4:	1a000104 	addi	r8,r3,4
   12fe8:	1ac00204 	addi	r11,r3,8
   12fec:	6008913a 	slli	r4,r12,4
   12ff0:	1a800304 	addi	r10,r3,12
   12ff4:	1813883a 	mov	r9,r3
   12ff8:	21000504 	addi	r4,r4,20
   12ffc:	1909883a 	add	r4,r3,r4
   13000:	49800015 	stw	r6,0(r9)
   13004:	41800015 	stw	r6,0(r8)
   13008:	59800015 	stw	r6,0(r11)
   1300c:	51800015 	stw	r6,0(r10)
   13010:	42000404 	addi	r8,r8,16
   13014:	4a400404 	addi	r9,r9,16
   13018:	5ac00404 	addi	r11,r11,16
   1301c:	52800404 	addi	r10,r10,16
   13020:	413ff71e 	bne	r8,r4,13000 <__alt_data_end+0xfc013000>
   13024:	63000044 	addi	r12,r12,1
   13028:	6018913a 	slli	r12,r12,4
   1302c:	39c003cc 	andi	r7,r7,15
   13030:	010000c4 	movi	r4,3
   13034:	1b07883a 	add	r3,r3,r12
   13038:	21c00e2e 	bgeu	r4,r7,13074 <memset+0x100>
   1303c:	1813883a 	mov	r9,r3
   13040:	3811883a 	mov	r8,r7
   13044:	010000c4 	movi	r4,3
   13048:	49800015 	stw	r6,0(r9)
   1304c:	423fff04 	addi	r8,r8,-4
   13050:	4a400104 	addi	r9,r9,4
   13054:	223ffc36 	bltu	r4,r8,13048 <__alt_data_end+0xfc013048>
   13058:	393fff04 	addi	r4,r7,-4
   1305c:	2008d0ba 	srli	r4,r4,2
   13060:	39c000cc 	andi	r7,r7,3
   13064:	21000044 	addi	r4,r4,1
   13068:	2109883a 	add	r4,r4,r4
   1306c:	2109883a 	add	r4,r4,r4
   13070:	1907883a 	add	r3,r3,r4
   13074:	38000526 	beq	r7,zero,1308c <memset+0x118>
   13078:	19cf883a 	add	r7,r3,r7
   1307c:	19400005 	stb	r5,0(r3)
   13080:	18c00044 	addi	r3,r3,1
   13084:	38fffd1e 	bne	r7,r3,1307c <__alt_data_end+0xfc01307c>
   13088:	f800283a 	ret
   1308c:	f800283a 	ret
   13090:	2007883a 	mov	r3,r4
   13094:	300f883a 	mov	r7,r6
   13098:	003fc706 	br	12fb8 <__alt_data_end+0xfc012fb8>

0001309c <_Balloc>:
   1309c:	20801317 	ldw	r2,76(r4)
   130a0:	defffc04 	addi	sp,sp,-16
   130a4:	dc400115 	stw	r17,4(sp)
   130a8:	dc000015 	stw	r16,0(sp)
   130ac:	dfc00315 	stw	ra,12(sp)
   130b0:	dc800215 	stw	r18,8(sp)
   130b4:	2023883a 	mov	r17,r4
   130b8:	2821883a 	mov	r16,r5
   130bc:	10000f26 	beq	r2,zero,130fc <_Balloc+0x60>
   130c0:	8407883a 	add	r3,r16,r16
   130c4:	18c7883a 	add	r3,r3,r3
   130c8:	10c7883a 	add	r3,r2,r3
   130cc:	18800017 	ldw	r2,0(r3)
   130d0:	10001126 	beq	r2,zero,13118 <_Balloc+0x7c>
   130d4:	11000017 	ldw	r4,0(r2)
   130d8:	19000015 	stw	r4,0(r3)
   130dc:	10000415 	stw	zero,16(r2)
   130e0:	10000315 	stw	zero,12(r2)
   130e4:	dfc00317 	ldw	ra,12(sp)
   130e8:	dc800217 	ldw	r18,8(sp)
   130ec:	dc400117 	ldw	r17,4(sp)
   130f0:	dc000017 	ldw	r16,0(sp)
   130f4:	dec00404 	addi	sp,sp,16
   130f8:	f800283a 	ret
   130fc:	01800844 	movi	r6,33
   13100:	01400104 	movi	r5,4
   13104:	00161440 	call	16144 <_calloc_r>
   13108:	88801315 	stw	r2,76(r17)
   1310c:	103fec1e 	bne	r2,zero,130c0 <__alt_data_end+0xfc0130c0>
   13110:	0005883a 	mov	r2,zero
   13114:	003ff306 	br	130e4 <__alt_data_end+0xfc0130e4>
   13118:	01400044 	movi	r5,1
   1311c:	2c24983a 	sll	r18,r5,r16
   13120:	8809883a 	mov	r4,r17
   13124:	91800144 	addi	r6,r18,5
   13128:	318d883a 	add	r6,r6,r6
   1312c:	318d883a 	add	r6,r6,r6
   13130:	00161440 	call	16144 <_calloc_r>
   13134:	103ff626 	beq	r2,zero,13110 <__alt_data_end+0xfc013110>
   13138:	14000115 	stw	r16,4(r2)
   1313c:	14800215 	stw	r18,8(r2)
   13140:	003fe606 	br	130dc <__alt_data_end+0xfc0130dc>

00013144 <_Bfree>:
   13144:	28000826 	beq	r5,zero,13168 <_Bfree+0x24>
   13148:	28c00117 	ldw	r3,4(r5)
   1314c:	20801317 	ldw	r2,76(r4)
   13150:	18c7883a 	add	r3,r3,r3
   13154:	18c7883a 	add	r3,r3,r3
   13158:	10c5883a 	add	r2,r2,r3
   1315c:	10c00017 	ldw	r3,0(r2)
   13160:	28c00015 	stw	r3,0(r5)
   13164:	11400015 	stw	r5,0(r2)
   13168:	f800283a 	ret

0001316c <__multadd>:
   1316c:	defff704 	addi	sp,sp,-36
   13170:	dc800215 	stw	r18,8(sp)
   13174:	2c800417 	ldw	r18,16(r5)
   13178:	dd800615 	stw	r22,24(sp)
   1317c:	dd400515 	stw	r21,20(sp)
   13180:	dd000415 	stw	r20,16(sp)
   13184:	dcc00315 	stw	r19,12(sp)
   13188:	dc400115 	stw	r17,4(sp)
   1318c:	dc000015 	stw	r16,0(sp)
   13190:	dfc00815 	stw	ra,32(sp)
   13194:	ddc00715 	stw	r23,28(sp)
   13198:	2827883a 	mov	r19,r5
   1319c:	2029883a 	mov	r20,r4
   131a0:	3023883a 	mov	r17,r6
   131a4:	3821883a 	mov	r16,r7
   131a8:	2d400504 	addi	r21,r5,20
   131ac:	002d883a 	mov	r22,zero
   131b0:	adc00017 	ldw	r23,0(r21)
   131b4:	880b883a 	mov	r5,r17
   131b8:	ad400104 	addi	r21,r21,4
   131bc:	b93fffcc 	andi	r4,r23,65535
   131c0:	000cefc0 	call	cefc <__mulsi3>
   131c4:	b808d43a 	srli	r4,r23,16
   131c8:	880b883a 	mov	r5,r17
   131cc:	1421883a 	add	r16,r2,r16
   131d0:	000cefc0 	call	cefc <__mulsi3>
   131d4:	800ed43a 	srli	r7,r16,16
   131d8:	80ffffcc 	andi	r3,r16,65535
   131dc:	b5800044 	addi	r22,r22,1
   131e0:	11c5883a 	add	r2,r2,r7
   131e4:	100e943a 	slli	r7,r2,16
   131e8:	1020d43a 	srli	r16,r2,16
   131ec:	38c7883a 	add	r3,r7,r3
   131f0:	a8ffff15 	stw	r3,-4(r21)
   131f4:	b4bfee16 	blt	r22,r18,131b0 <__alt_data_end+0xfc0131b0>
   131f8:	80000926 	beq	r16,zero,13220 <__multadd+0xb4>
   131fc:	98800217 	ldw	r2,8(r19)
   13200:	9080130e 	bge	r18,r2,13250 <__multadd+0xe4>
   13204:	90800144 	addi	r2,r18,5
   13208:	1085883a 	add	r2,r2,r2
   1320c:	1085883a 	add	r2,r2,r2
   13210:	9885883a 	add	r2,r19,r2
   13214:	14000015 	stw	r16,0(r2)
   13218:	94800044 	addi	r18,r18,1
   1321c:	9c800415 	stw	r18,16(r19)
   13220:	9805883a 	mov	r2,r19
   13224:	dfc00817 	ldw	ra,32(sp)
   13228:	ddc00717 	ldw	r23,28(sp)
   1322c:	dd800617 	ldw	r22,24(sp)
   13230:	dd400517 	ldw	r21,20(sp)
   13234:	dd000417 	ldw	r20,16(sp)
   13238:	dcc00317 	ldw	r19,12(sp)
   1323c:	dc800217 	ldw	r18,8(sp)
   13240:	dc400117 	ldw	r17,4(sp)
   13244:	dc000017 	ldw	r16,0(sp)
   13248:	dec00904 	addi	sp,sp,36
   1324c:	f800283a 	ret
   13250:	99400117 	ldw	r5,4(r19)
   13254:	a009883a 	mov	r4,r20
   13258:	29400044 	addi	r5,r5,1
   1325c:	001309c0 	call	1309c <_Balloc>
   13260:	99800417 	ldw	r6,16(r19)
   13264:	99400304 	addi	r5,r19,12
   13268:	11000304 	addi	r4,r2,12
   1326c:	31800084 	addi	r6,r6,2
   13270:	318d883a 	add	r6,r6,r6
   13274:	318d883a 	add	r6,r6,r6
   13278:	1023883a 	mov	r17,r2
   1327c:	0012cd00 	call	12cd0 <memcpy>
   13280:	98000a26 	beq	r19,zero,132ac <__multadd+0x140>
   13284:	98c00117 	ldw	r3,4(r19)
   13288:	a0801317 	ldw	r2,76(r20)
   1328c:	18c7883a 	add	r3,r3,r3
   13290:	18c7883a 	add	r3,r3,r3
   13294:	10c5883a 	add	r2,r2,r3
   13298:	10c00017 	ldw	r3,0(r2)
   1329c:	98c00015 	stw	r3,0(r19)
   132a0:	14c00015 	stw	r19,0(r2)
   132a4:	8827883a 	mov	r19,r17
   132a8:	003fd606 	br	13204 <__alt_data_end+0xfc013204>
   132ac:	8827883a 	mov	r19,r17
   132b0:	003fd406 	br	13204 <__alt_data_end+0xfc013204>

000132b4 <__s2b>:
   132b4:	defff904 	addi	sp,sp,-28
   132b8:	dc400115 	stw	r17,4(sp)
   132bc:	dc000015 	stw	r16,0(sp)
   132c0:	2023883a 	mov	r17,r4
   132c4:	2821883a 	mov	r16,r5
   132c8:	39000204 	addi	r4,r7,8
   132cc:	01400244 	movi	r5,9
   132d0:	dcc00315 	stw	r19,12(sp)
   132d4:	dc800215 	stw	r18,8(sp)
   132d8:	dfc00615 	stw	ra,24(sp)
   132dc:	dd400515 	stw	r21,20(sp)
   132e0:	dd000415 	stw	r20,16(sp)
   132e4:	3825883a 	mov	r18,r7
   132e8:	3027883a 	mov	r19,r6
   132ec:	000cd480 	call	cd48 <__divsi3>
   132f0:	00c00044 	movi	r3,1
   132f4:	000b883a 	mov	r5,zero
   132f8:	1880030e 	bge	r3,r2,13308 <__s2b+0x54>
   132fc:	18c7883a 	add	r3,r3,r3
   13300:	29400044 	addi	r5,r5,1
   13304:	18bffd16 	blt	r3,r2,132fc <__alt_data_end+0xfc0132fc>
   13308:	8809883a 	mov	r4,r17
   1330c:	001309c0 	call	1309c <_Balloc>
   13310:	d8c00717 	ldw	r3,28(sp)
   13314:	10c00515 	stw	r3,20(r2)
   13318:	00c00044 	movi	r3,1
   1331c:	10c00415 	stw	r3,16(r2)
   13320:	00c00244 	movi	r3,9
   13324:	1cc0210e 	bge	r3,r19,133ac <__s2b+0xf8>
   13328:	80eb883a 	add	r21,r16,r3
   1332c:	a829883a 	mov	r20,r21
   13330:	84e1883a 	add	r16,r16,r19
   13334:	a1c00007 	ldb	r7,0(r20)
   13338:	01800284 	movi	r6,10
   1333c:	a5000044 	addi	r20,r20,1
   13340:	100b883a 	mov	r5,r2
   13344:	39fff404 	addi	r7,r7,-48
   13348:	8809883a 	mov	r4,r17
   1334c:	001316c0 	call	1316c <__multadd>
   13350:	a43ff81e 	bne	r20,r16,13334 <__alt_data_end+0xfc013334>
   13354:	ace1883a 	add	r16,r21,r19
   13358:	843ffe04 	addi	r16,r16,-8
   1335c:	9c800a0e 	bge	r19,r18,13388 <__s2b+0xd4>
   13360:	94e5c83a 	sub	r18,r18,r19
   13364:	84a5883a 	add	r18,r16,r18
   13368:	81c00007 	ldb	r7,0(r16)
   1336c:	01800284 	movi	r6,10
   13370:	84000044 	addi	r16,r16,1
   13374:	100b883a 	mov	r5,r2
   13378:	39fff404 	addi	r7,r7,-48
   1337c:	8809883a 	mov	r4,r17
   13380:	001316c0 	call	1316c <__multadd>
   13384:	84bff81e 	bne	r16,r18,13368 <__alt_data_end+0xfc013368>
   13388:	dfc00617 	ldw	ra,24(sp)
   1338c:	dd400517 	ldw	r21,20(sp)
   13390:	dd000417 	ldw	r20,16(sp)
   13394:	dcc00317 	ldw	r19,12(sp)
   13398:	dc800217 	ldw	r18,8(sp)
   1339c:	dc400117 	ldw	r17,4(sp)
   133a0:	dc000017 	ldw	r16,0(sp)
   133a4:	dec00704 	addi	sp,sp,28
   133a8:	f800283a 	ret
   133ac:	84000284 	addi	r16,r16,10
   133b0:	1827883a 	mov	r19,r3
   133b4:	003fe906 	br	1335c <__alt_data_end+0xfc01335c>

000133b8 <__hi0bits>:
   133b8:	20bfffec 	andhi	r2,r4,65535
   133bc:	1000141e 	bne	r2,zero,13410 <__hi0bits+0x58>
   133c0:	2008943a 	slli	r4,r4,16
   133c4:	00800404 	movi	r2,16
   133c8:	20ffc02c 	andhi	r3,r4,65280
   133cc:	1800021e 	bne	r3,zero,133d8 <__hi0bits+0x20>
   133d0:	2008923a 	slli	r4,r4,8
   133d4:	10800204 	addi	r2,r2,8
   133d8:	20fc002c 	andhi	r3,r4,61440
   133dc:	1800021e 	bne	r3,zero,133e8 <__hi0bits+0x30>
   133e0:	2008913a 	slli	r4,r4,4
   133e4:	10800104 	addi	r2,r2,4
   133e8:	20f0002c 	andhi	r3,r4,49152
   133ec:	1800031e 	bne	r3,zero,133fc <__hi0bits+0x44>
   133f0:	2109883a 	add	r4,r4,r4
   133f4:	10800084 	addi	r2,r2,2
   133f8:	2109883a 	add	r4,r4,r4
   133fc:	20000316 	blt	r4,zero,1340c <__hi0bits+0x54>
   13400:	2110002c 	andhi	r4,r4,16384
   13404:	2000041e 	bne	r4,zero,13418 <__hi0bits+0x60>
   13408:	00800804 	movi	r2,32
   1340c:	f800283a 	ret
   13410:	0005883a 	mov	r2,zero
   13414:	003fec06 	br	133c8 <__alt_data_end+0xfc0133c8>
   13418:	10800044 	addi	r2,r2,1
   1341c:	f800283a 	ret

00013420 <__lo0bits>:
   13420:	20c00017 	ldw	r3,0(r4)
   13424:	188001cc 	andi	r2,r3,7
   13428:	10000826 	beq	r2,zero,1344c <__lo0bits+0x2c>
   1342c:	1880004c 	andi	r2,r3,1
   13430:	1000211e 	bne	r2,zero,134b8 <__lo0bits+0x98>
   13434:	1880008c 	andi	r2,r3,2
   13438:	1000211e 	bne	r2,zero,134c0 <__lo0bits+0xa0>
   1343c:	1806d0ba 	srli	r3,r3,2
   13440:	00800084 	movi	r2,2
   13444:	20c00015 	stw	r3,0(r4)
   13448:	f800283a 	ret
   1344c:	18bfffcc 	andi	r2,r3,65535
   13450:	10001326 	beq	r2,zero,134a0 <__lo0bits+0x80>
   13454:	0005883a 	mov	r2,zero
   13458:	19403fcc 	andi	r5,r3,255
   1345c:	2800021e 	bne	r5,zero,13468 <__lo0bits+0x48>
   13460:	1806d23a 	srli	r3,r3,8
   13464:	10800204 	addi	r2,r2,8
   13468:	194003cc 	andi	r5,r3,15
   1346c:	2800021e 	bne	r5,zero,13478 <__lo0bits+0x58>
   13470:	1806d13a 	srli	r3,r3,4
   13474:	10800104 	addi	r2,r2,4
   13478:	194000cc 	andi	r5,r3,3
   1347c:	2800021e 	bne	r5,zero,13488 <__lo0bits+0x68>
   13480:	1806d0ba 	srli	r3,r3,2
   13484:	10800084 	addi	r2,r2,2
   13488:	1940004c 	andi	r5,r3,1
   1348c:	2800081e 	bne	r5,zero,134b0 <__lo0bits+0x90>
   13490:	1806d07a 	srli	r3,r3,1
   13494:	1800051e 	bne	r3,zero,134ac <__lo0bits+0x8c>
   13498:	00800804 	movi	r2,32
   1349c:	f800283a 	ret
   134a0:	1806d43a 	srli	r3,r3,16
   134a4:	00800404 	movi	r2,16
   134a8:	003feb06 	br	13458 <__alt_data_end+0xfc013458>
   134ac:	10800044 	addi	r2,r2,1
   134b0:	20c00015 	stw	r3,0(r4)
   134b4:	f800283a 	ret
   134b8:	0005883a 	mov	r2,zero
   134bc:	f800283a 	ret
   134c0:	1806d07a 	srli	r3,r3,1
   134c4:	00800044 	movi	r2,1
   134c8:	20c00015 	stw	r3,0(r4)
   134cc:	f800283a 	ret

000134d0 <__i2b>:
   134d0:	defffd04 	addi	sp,sp,-12
   134d4:	dc000015 	stw	r16,0(sp)
   134d8:	04000044 	movi	r16,1
   134dc:	dc400115 	stw	r17,4(sp)
   134e0:	2823883a 	mov	r17,r5
   134e4:	800b883a 	mov	r5,r16
   134e8:	dfc00215 	stw	ra,8(sp)
   134ec:	001309c0 	call	1309c <_Balloc>
   134f0:	14400515 	stw	r17,20(r2)
   134f4:	14000415 	stw	r16,16(r2)
   134f8:	dfc00217 	ldw	ra,8(sp)
   134fc:	dc400117 	ldw	r17,4(sp)
   13500:	dc000017 	ldw	r16,0(sp)
   13504:	dec00304 	addi	sp,sp,12
   13508:	f800283a 	ret

0001350c <__multiply>:
   1350c:	deffef04 	addi	sp,sp,-68
   13510:	dc400815 	stw	r17,32(sp)
   13514:	dc000715 	stw	r16,28(sp)
   13518:	34400417 	ldw	r17,16(r6)
   1351c:	2c000417 	ldw	r16,16(r5)
   13520:	dd800d15 	stw	r22,52(sp)
   13524:	dc800915 	stw	r18,36(sp)
   13528:	dfc01015 	stw	ra,64(sp)
   1352c:	df000f15 	stw	fp,60(sp)
   13530:	ddc00e15 	stw	r23,56(sp)
   13534:	dd400c15 	stw	r21,48(sp)
   13538:	dd000b15 	stw	r20,44(sp)
   1353c:	dcc00a15 	stw	r19,40(sp)
   13540:	2825883a 	mov	r18,r5
   13544:	302d883a 	mov	r22,r6
   13548:	8440050e 	bge	r16,r17,13560 <__multiply+0x54>
   1354c:	8007883a 	mov	r3,r16
   13550:	3025883a 	mov	r18,r6
   13554:	8821883a 	mov	r16,r17
   13558:	282d883a 	mov	r22,r5
   1355c:	1823883a 	mov	r17,r3
   13560:	90800217 	ldw	r2,8(r18)
   13564:	8447883a 	add	r3,r16,r17
   13568:	d8c00215 	stw	r3,8(sp)
   1356c:	91400117 	ldw	r5,4(r18)
   13570:	10c0010e 	bge	r2,r3,13578 <__multiply+0x6c>
   13574:	29400044 	addi	r5,r5,1
   13578:	001309c0 	call	1309c <_Balloc>
   1357c:	d8c00217 	ldw	r3,8(sp)
   13580:	d8800615 	stw	r2,24(sp)
   13584:	18eb883a 	add	r21,r3,r3
   13588:	ad6b883a 	add	r21,r21,r21
   1358c:	10c00504 	addi	r3,r2,20
   13590:	1d6b883a 	add	r21,r3,r21
   13594:	d8c00115 	stw	r3,4(sp)
   13598:	dd400315 	stw	r21,12(sp)
   1359c:	1805883a 	mov	r2,r3
   135a0:	1d40042e 	bgeu	r3,r21,135b4 <__multiply+0xa8>
   135a4:	d8c00317 	ldw	r3,12(sp)
   135a8:	10000015 	stw	zero,0(r2)
   135ac:	10800104 	addi	r2,r2,4
   135b0:	10fffc36 	bltu	r2,r3,135a4 <__alt_data_end+0xfc0135a4>
   135b4:	8c63883a 	add	r17,r17,r17
   135b8:	b5800504 	addi	r22,r22,20
   135bc:	8c63883a 	add	r17,r17,r17
   135c0:	94800504 	addi	r18,r18,20
   135c4:	8421883a 	add	r16,r16,r16
   135c8:	b463883a 	add	r17,r22,r17
   135cc:	8421883a 	add	r16,r16,r16
   135d0:	dd800015 	stw	r22,0(sp)
   135d4:	dc800415 	stw	r18,16(sp)
   135d8:	dc400515 	stw	r17,20(sp)
   135dc:	9429883a 	add	r20,r18,r16
   135e0:	b4404f2e 	bgeu	r22,r17,13720 <__multiply+0x214>
   135e4:	d8c00017 	ldw	r3,0(sp)
   135e8:	1c800017 	ldw	r18,0(r3)
   135ec:	947fffcc 	andi	r17,r18,65535
   135f0:	88001e26 	beq	r17,zero,1366c <__multiply+0x160>
   135f4:	dd800117 	ldw	r22,4(sp)
   135f8:	dd400417 	ldw	r21,16(sp)
   135fc:	0027883a 	mov	r19,zero
   13600:	ac800017 	ldw	r18,0(r21)
   13604:	b4000017 	ldw	r16,0(r22)
   13608:	880b883a 	mov	r5,r17
   1360c:	913fffcc 	andi	r4,r18,65535
   13610:	000cefc0 	call	cefc <__mulsi3>
   13614:	9008d43a 	srli	r4,r18,16
   13618:	84bfffcc 	andi	r18,r16,65535
   1361c:	1485883a 	add	r2,r2,r18
   13620:	14e5883a 	add	r18,r2,r19
   13624:	8020d43a 	srli	r16,r16,16
   13628:	9026d43a 	srli	r19,r18,16
   1362c:	880b883a 	mov	r5,r17
   13630:	000cefc0 	call	cefc <__mulsi3>
   13634:	1405883a 	add	r2,r2,r16
   13638:	14e1883a 	add	r16,r2,r19
   1363c:	90ffffcc 	andi	r3,r18,65535
   13640:	8024943a 	slli	r18,r16,16
   13644:	ad400104 	addi	r21,r21,4
   13648:	b005883a 	mov	r2,r22
   1364c:	90c6b03a 	or	r3,r18,r3
   13650:	b0c00015 	stw	r3,0(r22)
   13654:	8026d43a 	srli	r19,r16,16
   13658:	b5800104 	addi	r22,r22,4
   1365c:	ad3fe836 	bltu	r21,r20,13600 <__alt_data_end+0xfc013600>
   13660:	d8c00017 	ldw	r3,0(sp)
   13664:	14c00115 	stw	r19,4(r2)
   13668:	1c800017 	ldw	r18,0(r3)
   1366c:	9024d43a 	srli	r18,r18,16
   13670:	90002226 	beq	r18,zero,136fc <__multiply+0x1f0>
   13674:	d8c00117 	ldw	r3,4(sp)
   13678:	dd800417 	ldw	r22,16(sp)
   1367c:	002f883a 	mov	r23,zero
   13680:	1f000017 	ldw	fp,0(r3)
   13684:	1823883a 	mov	r17,r3
   13688:	182b883a 	mov	r21,r3
   1368c:	e021883a 	mov	r16,fp
   13690:	00000106 	br	13698 <__multiply+0x18c>
   13694:	982b883a 	mov	r21,r19
   13698:	b100000b 	ldhu	r4,0(r22)
   1369c:	8020d43a 	srli	r16,r16,16
   136a0:	900b883a 	mov	r5,r18
   136a4:	000cefc0 	call	cefc <__mulsi3>
   136a8:	1405883a 	add	r2,r2,r16
   136ac:	15ef883a 	add	r23,r2,r23
   136b0:	b804943a 	slli	r2,r23,16
   136b4:	e0ffffcc 	andi	r3,fp,65535
   136b8:	8c400104 	addi	r17,r17,4
   136bc:	10c6b03a 	or	r3,r2,r3
   136c0:	88ffff15 	stw	r3,-4(r17)
   136c4:	b5800104 	addi	r22,r22,4
   136c8:	b13fff17 	ldw	r4,-4(r22)
   136cc:	acc00104 	addi	r19,r21,4
   136d0:	900b883a 	mov	r5,r18
   136d4:	2008d43a 	srli	r4,r4,16
   136d8:	9c000017 	ldw	r16,0(r19)
   136dc:	000cefc0 	call	cefc <__mulsi3>
   136e0:	b806d43a 	srli	r3,r23,16
   136e4:	813fffcc 	andi	r4,r16,65535
   136e8:	1105883a 	add	r2,r2,r4
   136ec:	10f9883a 	add	fp,r2,r3
   136f0:	e02ed43a 	srli	r23,fp,16
   136f4:	b53fe736 	bltu	r22,r20,13694 <__alt_data_end+0xfc013694>
   136f8:	af000115 	stw	fp,4(r21)
   136fc:	d8c00017 	ldw	r3,0(sp)
   13700:	d9000517 	ldw	r4,20(sp)
   13704:	18c00104 	addi	r3,r3,4
   13708:	d8c00015 	stw	r3,0(sp)
   1370c:	d8c00117 	ldw	r3,4(sp)
   13710:	18c00104 	addi	r3,r3,4
   13714:	d8c00115 	stw	r3,4(sp)
   13718:	d8c00017 	ldw	r3,0(sp)
   1371c:	193fb136 	bltu	r3,r4,135e4 <__alt_data_end+0xfc0135e4>
   13720:	d8c00217 	ldw	r3,8(sp)
   13724:	00c00c0e 	bge	zero,r3,13758 <__multiply+0x24c>
   13728:	d8c00317 	ldw	r3,12(sp)
   1372c:	18bfff17 	ldw	r2,-4(r3)
   13730:	1d7fff04 	addi	r21,r3,-4
   13734:	10000326 	beq	r2,zero,13744 <__multiply+0x238>
   13738:	00000706 	br	13758 <__multiply+0x24c>
   1373c:	a8800017 	ldw	r2,0(r21)
   13740:	1000051e 	bne	r2,zero,13758 <__multiply+0x24c>
   13744:	d8c00217 	ldw	r3,8(sp)
   13748:	ad7fff04 	addi	r21,r21,-4
   1374c:	18ffffc4 	addi	r3,r3,-1
   13750:	d8c00215 	stw	r3,8(sp)
   13754:	183ff91e 	bne	r3,zero,1373c <__alt_data_end+0xfc01373c>
   13758:	d8c00617 	ldw	r3,24(sp)
   1375c:	d9000217 	ldw	r4,8(sp)
   13760:	1805883a 	mov	r2,r3
   13764:	19000415 	stw	r4,16(r3)
   13768:	dfc01017 	ldw	ra,64(sp)
   1376c:	df000f17 	ldw	fp,60(sp)
   13770:	ddc00e17 	ldw	r23,56(sp)
   13774:	dd800d17 	ldw	r22,52(sp)
   13778:	dd400c17 	ldw	r21,48(sp)
   1377c:	dd000b17 	ldw	r20,44(sp)
   13780:	dcc00a17 	ldw	r19,40(sp)
   13784:	dc800917 	ldw	r18,36(sp)
   13788:	dc400817 	ldw	r17,32(sp)
   1378c:	dc000717 	ldw	r16,28(sp)
   13790:	dec01104 	addi	sp,sp,68
   13794:	f800283a 	ret

00013798 <__pow5mult>:
   13798:	defffa04 	addi	sp,sp,-24
   1379c:	dcc00315 	stw	r19,12(sp)
   137a0:	dc000015 	stw	r16,0(sp)
   137a4:	dfc00515 	stw	ra,20(sp)
   137a8:	dd000415 	stw	r20,16(sp)
   137ac:	dc800215 	stw	r18,8(sp)
   137b0:	dc400115 	stw	r17,4(sp)
   137b4:	308000cc 	andi	r2,r6,3
   137b8:	3021883a 	mov	r16,r6
   137bc:	2027883a 	mov	r19,r4
   137c0:	10002f1e 	bne	r2,zero,13880 <__pow5mult+0xe8>
   137c4:	2825883a 	mov	r18,r5
   137c8:	8021d0ba 	srai	r16,r16,2
   137cc:	80001a26 	beq	r16,zero,13838 <__pow5mult+0xa0>
   137d0:	9c401217 	ldw	r17,72(r19)
   137d4:	8800061e 	bne	r17,zero,137f0 <__pow5mult+0x58>
   137d8:	00003406 	br	138ac <__pow5mult+0x114>
   137dc:	8021d07a 	srai	r16,r16,1
   137e0:	80001526 	beq	r16,zero,13838 <__pow5mult+0xa0>
   137e4:	88800017 	ldw	r2,0(r17)
   137e8:	10001c26 	beq	r2,zero,1385c <__pow5mult+0xc4>
   137ec:	1023883a 	mov	r17,r2
   137f0:	8080004c 	andi	r2,r16,1
   137f4:	103ff926 	beq	r2,zero,137dc <__alt_data_end+0xfc0137dc>
   137f8:	880d883a 	mov	r6,r17
   137fc:	900b883a 	mov	r5,r18
   13800:	9809883a 	mov	r4,r19
   13804:	001350c0 	call	1350c <__multiply>
   13808:	90001b26 	beq	r18,zero,13878 <__pow5mult+0xe0>
   1380c:	91000117 	ldw	r4,4(r18)
   13810:	98c01317 	ldw	r3,76(r19)
   13814:	8021d07a 	srai	r16,r16,1
   13818:	2109883a 	add	r4,r4,r4
   1381c:	2109883a 	add	r4,r4,r4
   13820:	1907883a 	add	r3,r3,r4
   13824:	19000017 	ldw	r4,0(r3)
   13828:	91000015 	stw	r4,0(r18)
   1382c:	1c800015 	stw	r18,0(r3)
   13830:	1025883a 	mov	r18,r2
   13834:	803feb1e 	bne	r16,zero,137e4 <__alt_data_end+0xfc0137e4>
   13838:	9005883a 	mov	r2,r18
   1383c:	dfc00517 	ldw	ra,20(sp)
   13840:	dd000417 	ldw	r20,16(sp)
   13844:	dcc00317 	ldw	r19,12(sp)
   13848:	dc800217 	ldw	r18,8(sp)
   1384c:	dc400117 	ldw	r17,4(sp)
   13850:	dc000017 	ldw	r16,0(sp)
   13854:	dec00604 	addi	sp,sp,24
   13858:	f800283a 	ret
   1385c:	880d883a 	mov	r6,r17
   13860:	880b883a 	mov	r5,r17
   13864:	9809883a 	mov	r4,r19
   13868:	001350c0 	call	1350c <__multiply>
   1386c:	88800015 	stw	r2,0(r17)
   13870:	10000015 	stw	zero,0(r2)
   13874:	003fdd06 	br	137ec <__alt_data_end+0xfc0137ec>
   13878:	1025883a 	mov	r18,r2
   1387c:	003fd706 	br	137dc <__alt_data_end+0xfc0137dc>
   13880:	10bfffc4 	addi	r2,r2,-1
   13884:	1085883a 	add	r2,r2,r2
   13888:	00c000b4 	movhi	r3,2
   1388c:	18f11504 	addi	r3,r3,-15276
   13890:	1085883a 	add	r2,r2,r2
   13894:	1885883a 	add	r2,r3,r2
   13898:	11800017 	ldw	r6,0(r2)
   1389c:	000f883a 	mov	r7,zero
   138a0:	001316c0 	call	1316c <__multadd>
   138a4:	1025883a 	mov	r18,r2
   138a8:	003fc706 	br	137c8 <__alt_data_end+0xfc0137c8>
   138ac:	05000044 	movi	r20,1
   138b0:	a00b883a 	mov	r5,r20
   138b4:	9809883a 	mov	r4,r19
   138b8:	001309c0 	call	1309c <_Balloc>
   138bc:	1023883a 	mov	r17,r2
   138c0:	00809c44 	movi	r2,625
   138c4:	88800515 	stw	r2,20(r17)
   138c8:	8d000415 	stw	r20,16(r17)
   138cc:	9c401215 	stw	r17,72(r19)
   138d0:	88000015 	stw	zero,0(r17)
   138d4:	003fc606 	br	137f0 <__alt_data_end+0xfc0137f0>

000138d8 <__lshift>:
   138d8:	defff904 	addi	sp,sp,-28
   138dc:	dd400515 	stw	r21,20(sp)
   138e0:	dcc00315 	stw	r19,12(sp)
   138e4:	302bd17a 	srai	r21,r6,5
   138e8:	2cc00417 	ldw	r19,16(r5)
   138ec:	28800217 	ldw	r2,8(r5)
   138f0:	dd000415 	stw	r20,16(sp)
   138f4:	ace7883a 	add	r19,r21,r19
   138f8:	dc800215 	stw	r18,8(sp)
   138fc:	dc400115 	stw	r17,4(sp)
   13900:	dc000015 	stw	r16,0(sp)
   13904:	dfc00615 	stw	ra,24(sp)
   13908:	9c000044 	addi	r16,r19,1
   1390c:	2823883a 	mov	r17,r5
   13910:	3029883a 	mov	r20,r6
   13914:	2025883a 	mov	r18,r4
   13918:	29400117 	ldw	r5,4(r5)
   1391c:	1400030e 	bge	r2,r16,1392c <__lshift+0x54>
   13920:	1085883a 	add	r2,r2,r2
   13924:	29400044 	addi	r5,r5,1
   13928:	143ffd16 	blt	r2,r16,13920 <__alt_data_end+0xfc013920>
   1392c:	9009883a 	mov	r4,r18
   13930:	001309c0 	call	1309c <_Balloc>
   13934:	10c00504 	addi	r3,r2,20
   13938:	0540070e 	bge	zero,r21,13958 <__lshift+0x80>
   1393c:	ad6b883a 	add	r21,r21,r21
   13940:	ad6b883a 	add	r21,r21,r21
   13944:	1809883a 	mov	r4,r3
   13948:	1d47883a 	add	r3,r3,r21
   1394c:	20000015 	stw	zero,0(r4)
   13950:	21000104 	addi	r4,r4,4
   13954:	193ffd1e 	bne	r3,r4,1394c <__alt_data_end+0xfc01394c>
   13958:	8a000417 	ldw	r8,16(r17)
   1395c:	89000504 	addi	r4,r17,20
   13960:	a18007cc 	andi	r6,r20,31
   13964:	4211883a 	add	r8,r8,r8
   13968:	4211883a 	add	r8,r8,r8
   1396c:	2211883a 	add	r8,r4,r8
   13970:	30002326 	beq	r6,zero,13a00 <__lshift+0x128>
   13974:	02400804 	movi	r9,32
   13978:	4993c83a 	sub	r9,r9,r6
   1397c:	000b883a 	mov	r5,zero
   13980:	21c00017 	ldw	r7,0(r4)
   13984:	1815883a 	mov	r10,r3
   13988:	18c00104 	addi	r3,r3,4
   1398c:	398e983a 	sll	r7,r7,r6
   13990:	21000104 	addi	r4,r4,4
   13994:	394ab03a 	or	r5,r7,r5
   13998:	197fff15 	stw	r5,-4(r3)
   1399c:	217fff17 	ldw	r5,-4(r4)
   139a0:	2a4ad83a 	srl	r5,r5,r9
   139a4:	223ff636 	bltu	r4,r8,13980 <__alt_data_end+0xfc013980>
   139a8:	51400115 	stw	r5,4(r10)
   139ac:	28001a1e 	bne	r5,zero,13a18 <__lshift+0x140>
   139b0:	843fffc4 	addi	r16,r16,-1
   139b4:	14000415 	stw	r16,16(r2)
   139b8:	88000826 	beq	r17,zero,139dc <__lshift+0x104>
   139bc:	89000117 	ldw	r4,4(r17)
   139c0:	90c01317 	ldw	r3,76(r18)
   139c4:	2109883a 	add	r4,r4,r4
   139c8:	2109883a 	add	r4,r4,r4
   139cc:	1907883a 	add	r3,r3,r4
   139d0:	19000017 	ldw	r4,0(r3)
   139d4:	89000015 	stw	r4,0(r17)
   139d8:	1c400015 	stw	r17,0(r3)
   139dc:	dfc00617 	ldw	ra,24(sp)
   139e0:	dd400517 	ldw	r21,20(sp)
   139e4:	dd000417 	ldw	r20,16(sp)
   139e8:	dcc00317 	ldw	r19,12(sp)
   139ec:	dc800217 	ldw	r18,8(sp)
   139f0:	dc400117 	ldw	r17,4(sp)
   139f4:	dc000017 	ldw	r16,0(sp)
   139f8:	dec00704 	addi	sp,sp,28
   139fc:	f800283a 	ret
   13a00:	21400017 	ldw	r5,0(r4)
   13a04:	18c00104 	addi	r3,r3,4
   13a08:	21000104 	addi	r4,r4,4
   13a0c:	197fff15 	stw	r5,-4(r3)
   13a10:	223ffb36 	bltu	r4,r8,13a00 <__alt_data_end+0xfc013a00>
   13a14:	003fe606 	br	139b0 <__alt_data_end+0xfc0139b0>
   13a18:	9c000084 	addi	r16,r19,2
   13a1c:	003fe406 	br	139b0 <__alt_data_end+0xfc0139b0>

00013a20 <__mcmp>:
   13a20:	20800417 	ldw	r2,16(r4)
   13a24:	28c00417 	ldw	r3,16(r5)
   13a28:	10c5c83a 	sub	r2,r2,r3
   13a2c:	1000111e 	bne	r2,zero,13a74 <__mcmp+0x54>
   13a30:	18c7883a 	add	r3,r3,r3
   13a34:	18c7883a 	add	r3,r3,r3
   13a38:	21000504 	addi	r4,r4,20
   13a3c:	29400504 	addi	r5,r5,20
   13a40:	20c5883a 	add	r2,r4,r3
   13a44:	28cb883a 	add	r5,r5,r3
   13a48:	00000106 	br	13a50 <__mcmp+0x30>
   13a4c:	20800a2e 	bgeu	r4,r2,13a78 <__mcmp+0x58>
   13a50:	10bfff04 	addi	r2,r2,-4
   13a54:	297fff04 	addi	r5,r5,-4
   13a58:	11800017 	ldw	r6,0(r2)
   13a5c:	28c00017 	ldw	r3,0(r5)
   13a60:	30fffa26 	beq	r6,r3,13a4c <__alt_data_end+0xfc013a4c>
   13a64:	30c00236 	bltu	r6,r3,13a70 <__mcmp+0x50>
   13a68:	00800044 	movi	r2,1
   13a6c:	f800283a 	ret
   13a70:	00bfffc4 	movi	r2,-1
   13a74:	f800283a 	ret
   13a78:	0005883a 	mov	r2,zero
   13a7c:	f800283a 	ret

00013a80 <__mdiff>:
   13a80:	28c00417 	ldw	r3,16(r5)
   13a84:	30800417 	ldw	r2,16(r6)
   13a88:	defffa04 	addi	sp,sp,-24
   13a8c:	dcc00315 	stw	r19,12(sp)
   13a90:	dc800215 	stw	r18,8(sp)
   13a94:	dfc00515 	stw	ra,20(sp)
   13a98:	dd000415 	stw	r20,16(sp)
   13a9c:	dc400115 	stw	r17,4(sp)
   13aa0:	dc000015 	stw	r16,0(sp)
   13aa4:	1887c83a 	sub	r3,r3,r2
   13aa8:	2825883a 	mov	r18,r5
   13aac:	3027883a 	mov	r19,r6
   13ab0:	1800141e 	bne	r3,zero,13b04 <__mdiff+0x84>
   13ab4:	1085883a 	add	r2,r2,r2
   13ab8:	1085883a 	add	r2,r2,r2
   13abc:	2a000504 	addi	r8,r5,20
   13ac0:	34000504 	addi	r16,r6,20
   13ac4:	4087883a 	add	r3,r8,r2
   13ac8:	8085883a 	add	r2,r16,r2
   13acc:	00000106 	br	13ad4 <__mdiff+0x54>
   13ad0:	40c0592e 	bgeu	r8,r3,13c38 <__mdiff+0x1b8>
   13ad4:	18ffff04 	addi	r3,r3,-4
   13ad8:	10bfff04 	addi	r2,r2,-4
   13adc:	19c00017 	ldw	r7,0(r3)
   13ae0:	11400017 	ldw	r5,0(r2)
   13ae4:	397ffa26 	beq	r7,r5,13ad0 <__alt_data_end+0xfc013ad0>
   13ae8:	3940592e 	bgeu	r7,r5,13c50 <__mdiff+0x1d0>
   13aec:	9005883a 	mov	r2,r18
   13af0:	4023883a 	mov	r17,r8
   13af4:	9825883a 	mov	r18,r19
   13af8:	05000044 	movi	r20,1
   13afc:	1027883a 	mov	r19,r2
   13b00:	00000406 	br	13b14 <__mdiff+0x94>
   13b04:	18005616 	blt	r3,zero,13c60 <__mdiff+0x1e0>
   13b08:	34400504 	addi	r17,r6,20
   13b0c:	2c000504 	addi	r16,r5,20
   13b10:	0029883a 	mov	r20,zero
   13b14:	91400117 	ldw	r5,4(r18)
   13b18:	001309c0 	call	1309c <_Balloc>
   13b1c:	92400417 	ldw	r9,16(r18)
   13b20:	9b000417 	ldw	r12,16(r19)
   13b24:	12c00504 	addi	r11,r2,20
   13b28:	4a51883a 	add	r8,r9,r9
   13b2c:	6319883a 	add	r12,r12,r12
   13b30:	4211883a 	add	r8,r8,r8
   13b34:	6319883a 	add	r12,r12,r12
   13b38:	15000315 	stw	r20,12(r2)
   13b3c:	8211883a 	add	r8,r16,r8
   13b40:	8b19883a 	add	r12,r17,r12
   13b44:	0007883a 	mov	r3,zero
   13b48:	81400017 	ldw	r5,0(r16)
   13b4c:	89c00017 	ldw	r7,0(r17)
   13b50:	59800104 	addi	r6,r11,4
   13b54:	293fffcc 	andi	r4,r5,65535
   13b58:	20c7883a 	add	r3,r4,r3
   13b5c:	393fffcc 	andi	r4,r7,65535
   13b60:	1909c83a 	sub	r4,r3,r4
   13b64:	280ad43a 	srli	r5,r5,16
   13b68:	380ed43a 	srli	r7,r7,16
   13b6c:	2007d43a 	srai	r3,r4,16
   13b70:	213fffcc 	andi	r4,r4,65535
   13b74:	29cbc83a 	sub	r5,r5,r7
   13b78:	28c7883a 	add	r3,r5,r3
   13b7c:	180a943a 	slli	r5,r3,16
   13b80:	8c400104 	addi	r17,r17,4
   13b84:	84000104 	addi	r16,r16,4
   13b88:	2908b03a 	or	r4,r5,r4
   13b8c:	59000015 	stw	r4,0(r11)
   13b90:	1807d43a 	srai	r3,r3,16
   13b94:	3015883a 	mov	r10,r6
   13b98:	3017883a 	mov	r11,r6
   13b9c:	8b3fea36 	bltu	r17,r12,13b48 <__alt_data_end+0xfc013b48>
   13ba0:	8200162e 	bgeu	r16,r8,13bfc <__mdiff+0x17c>
   13ba4:	8017883a 	mov	r11,r16
   13ba8:	59400017 	ldw	r5,0(r11)
   13bac:	31800104 	addi	r6,r6,4
   13bb0:	5ac00104 	addi	r11,r11,4
   13bb4:	293fffcc 	andi	r4,r5,65535
   13bb8:	20c7883a 	add	r3,r4,r3
   13bbc:	280ed43a 	srli	r7,r5,16
   13bc0:	180bd43a 	srai	r5,r3,16
   13bc4:	193fffcc 	andi	r4,r3,65535
   13bc8:	3947883a 	add	r3,r7,r5
   13bcc:	180a943a 	slli	r5,r3,16
   13bd0:	1807d43a 	srai	r3,r3,16
   13bd4:	2908b03a 	or	r4,r5,r4
   13bd8:	313fff15 	stw	r4,-4(r6)
   13bdc:	5a3ff236 	bltu	r11,r8,13ba8 <__alt_data_end+0xfc013ba8>
   13be0:	0406303a 	nor	r3,zero,r16
   13be4:	1a07883a 	add	r3,r3,r8
   13be8:	1806d0ba 	srli	r3,r3,2
   13bec:	18c00044 	addi	r3,r3,1
   13bf0:	18c7883a 	add	r3,r3,r3
   13bf4:	18c7883a 	add	r3,r3,r3
   13bf8:	50d5883a 	add	r10,r10,r3
   13bfc:	50ffff04 	addi	r3,r10,-4
   13c00:	2000041e 	bne	r4,zero,13c14 <__mdiff+0x194>
   13c04:	18ffff04 	addi	r3,r3,-4
   13c08:	19000017 	ldw	r4,0(r3)
   13c0c:	4a7fffc4 	addi	r9,r9,-1
   13c10:	203ffc26 	beq	r4,zero,13c04 <__alt_data_end+0xfc013c04>
   13c14:	12400415 	stw	r9,16(r2)
   13c18:	dfc00517 	ldw	ra,20(sp)
   13c1c:	dd000417 	ldw	r20,16(sp)
   13c20:	dcc00317 	ldw	r19,12(sp)
   13c24:	dc800217 	ldw	r18,8(sp)
   13c28:	dc400117 	ldw	r17,4(sp)
   13c2c:	dc000017 	ldw	r16,0(sp)
   13c30:	dec00604 	addi	sp,sp,24
   13c34:	f800283a 	ret
   13c38:	000b883a 	mov	r5,zero
   13c3c:	001309c0 	call	1309c <_Balloc>
   13c40:	00c00044 	movi	r3,1
   13c44:	10c00415 	stw	r3,16(r2)
   13c48:	10000515 	stw	zero,20(r2)
   13c4c:	003ff206 	br	13c18 <__alt_data_end+0xfc013c18>
   13c50:	8023883a 	mov	r17,r16
   13c54:	0029883a 	mov	r20,zero
   13c58:	4021883a 	mov	r16,r8
   13c5c:	003fad06 	br	13b14 <__alt_data_end+0xfc013b14>
   13c60:	9005883a 	mov	r2,r18
   13c64:	94400504 	addi	r17,r18,20
   13c68:	9c000504 	addi	r16,r19,20
   13c6c:	9825883a 	mov	r18,r19
   13c70:	05000044 	movi	r20,1
   13c74:	1027883a 	mov	r19,r2
   13c78:	003fa606 	br	13b14 <__alt_data_end+0xfc013b14>

00013c7c <__ulp>:
   13c7c:	295ffc2c 	andhi	r5,r5,32752
   13c80:	00bf3034 	movhi	r2,64704
   13c84:	2887883a 	add	r3,r5,r2
   13c88:	00c0020e 	bge	zero,r3,13c94 <__ulp+0x18>
   13c8c:	0005883a 	mov	r2,zero
   13c90:	f800283a 	ret
   13c94:	00c7c83a 	sub	r3,zero,r3
   13c98:	1807d53a 	srai	r3,r3,20
   13c9c:	008004c4 	movi	r2,19
   13ca0:	10c00b0e 	bge	r2,r3,13cd0 <__ulp+0x54>
   13ca4:	18bffb04 	addi	r2,r3,-20
   13ca8:	01000784 	movi	r4,30
   13cac:	0007883a 	mov	r3,zero
   13cb0:	20800516 	blt	r4,r2,13cc8 <__ulp+0x4c>
   13cb4:	010007c4 	movi	r4,31
   13cb8:	2089c83a 	sub	r4,r4,r2
   13cbc:	00800044 	movi	r2,1
   13cc0:	1104983a 	sll	r2,r2,r4
   13cc4:	f800283a 	ret
   13cc8:	00800044 	movi	r2,1
   13ccc:	f800283a 	ret
   13cd0:	01400234 	movhi	r5,8
   13cd4:	28c7d83a 	sra	r3,r5,r3
   13cd8:	0005883a 	mov	r2,zero
   13cdc:	f800283a 	ret

00013ce0 <__b2d>:
   13ce0:	defffa04 	addi	sp,sp,-24
   13ce4:	dc000015 	stw	r16,0(sp)
   13ce8:	24000417 	ldw	r16,16(r4)
   13cec:	dc400115 	stw	r17,4(sp)
   13cf0:	24400504 	addi	r17,r4,20
   13cf4:	8421883a 	add	r16,r16,r16
   13cf8:	8421883a 	add	r16,r16,r16
   13cfc:	8c21883a 	add	r16,r17,r16
   13d00:	dc800215 	stw	r18,8(sp)
   13d04:	84bfff17 	ldw	r18,-4(r16)
   13d08:	dd000415 	stw	r20,16(sp)
   13d0c:	dcc00315 	stw	r19,12(sp)
   13d10:	9009883a 	mov	r4,r18
   13d14:	2829883a 	mov	r20,r5
   13d18:	dfc00515 	stw	ra,20(sp)
   13d1c:	00133b80 	call	133b8 <__hi0bits>
   13d20:	00c00804 	movi	r3,32
   13d24:	1889c83a 	sub	r4,r3,r2
   13d28:	a1000015 	stw	r4,0(r20)
   13d2c:	01000284 	movi	r4,10
   13d30:	84ffff04 	addi	r19,r16,-4
   13d34:	20801216 	blt	r4,r2,13d80 <__b2d+0xa0>
   13d38:	018002c4 	movi	r6,11
   13d3c:	308dc83a 	sub	r6,r6,r2
   13d40:	9186d83a 	srl	r3,r18,r6
   13d44:	18cffc34 	orhi	r3,r3,16368
   13d48:	8cc0212e 	bgeu	r17,r19,13dd0 <__b2d+0xf0>
   13d4c:	813ffe17 	ldw	r4,-8(r16)
   13d50:	218cd83a 	srl	r6,r4,r6
   13d54:	10800544 	addi	r2,r2,21
   13d58:	9084983a 	sll	r2,r18,r2
   13d5c:	1184b03a 	or	r2,r2,r6
   13d60:	dfc00517 	ldw	ra,20(sp)
   13d64:	dd000417 	ldw	r20,16(sp)
   13d68:	dcc00317 	ldw	r19,12(sp)
   13d6c:	dc800217 	ldw	r18,8(sp)
   13d70:	dc400117 	ldw	r17,4(sp)
   13d74:	dc000017 	ldw	r16,0(sp)
   13d78:	dec00604 	addi	sp,sp,24
   13d7c:	f800283a 	ret
   13d80:	8cc00f2e 	bgeu	r17,r19,13dc0 <__b2d+0xe0>
   13d84:	117ffd44 	addi	r5,r2,-11
   13d88:	80bffe17 	ldw	r2,-8(r16)
   13d8c:	28000e26 	beq	r5,zero,13dc8 <__b2d+0xe8>
   13d90:	1949c83a 	sub	r4,r3,r5
   13d94:	9164983a 	sll	r18,r18,r5
   13d98:	1106d83a 	srl	r3,r2,r4
   13d9c:	81bffe04 	addi	r6,r16,-8
   13da0:	948ffc34 	orhi	r18,r18,16368
   13da4:	90c6b03a 	or	r3,r18,r3
   13da8:	89800e2e 	bgeu	r17,r6,13de4 <__b2d+0x104>
   13dac:	81bffd17 	ldw	r6,-12(r16)
   13db0:	1144983a 	sll	r2,r2,r5
   13db4:	310ad83a 	srl	r5,r6,r4
   13db8:	2884b03a 	or	r2,r5,r2
   13dbc:	003fe806 	br	13d60 <__alt_data_end+0xfc013d60>
   13dc0:	10bffd44 	addi	r2,r2,-11
   13dc4:	1000041e 	bne	r2,zero,13dd8 <__b2d+0xf8>
   13dc8:	90cffc34 	orhi	r3,r18,16368
   13dcc:	003fe406 	br	13d60 <__alt_data_end+0xfc013d60>
   13dd0:	000d883a 	mov	r6,zero
   13dd4:	003fdf06 	br	13d54 <__alt_data_end+0xfc013d54>
   13dd8:	90a4983a 	sll	r18,r18,r2
   13ddc:	0005883a 	mov	r2,zero
   13de0:	003ff906 	br	13dc8 <__alt_data_end+0xfc013dc8>
   13de4:	1144983a 	sll	r2,r2,r5
   13de8:	003fdd06 	br	13d60 <__alt_data_end+0xfc013d60>

00013dec <__d2b>:
   13dec:	defff804 	addi	sp,sp,-32
   13df0:	dc000215 	stw	r16,8(sp)
   13df4:	3021883a 	mov	r16,r6
   13df8:	dc400315 	stw	r17,12(sp)
   13dfc:	8022907a 	slli	r17,r16,1
   13e00:	dd000615 	stw	r20,24(sp)
   13e04:	2829883a 	mov	r20,r5
   13e08:	01400044 	movi	r5,1
   13e0c:	dcc00515 	stw	r19,20(sp)
   13e10:	dc800415 	stw	r18,16(sp)
   13e14:	dfc00715 	stw	ra,28(sp)
   13e18:	3825883a 	mov	r18,r7
   13e1c:	8822d57a 	srli	r17,r17,21
   13e20:	001309c0 	call	1309c <_Balloc>
   13e24:	1027883a 	mov	r19,r2
   13e28:	00800434 	movhi	r2,16
   13e2c:	10bfffc4 	addi	r2,r2,-1
   13e30:	808c703a 	and	r6,r16,r2
   13e34:	88000126 	beq	r17,zero,13e3c <__d2b+0x50>
   13e38:	31800434 	orhi	r6,r6,16
   13e3c:	d9800015 	stw	r6,0(sp)
   13e40:	a0002426 	beq	r20,zero,13ed4 <__d2b+0xe8>
   13e44:	d9000104 	addi	r4,sp,4
   13e48:	dd000115 	stw	r20,4(sp)
   13e4c:	00134200 	call	13420 <__lo0bits>
   13e50:	d8c00017 	ldw	r3,0(sp)
   13e54:	10002f1e 	bne	r2,zero,13f14 <__d2b+0x128>
   13e58:	d9000117 	ldw	r4,4(sp)
   13e5c:	99000515 	stw	r4,20(r19)
   13e60:	1821003a 	cmpeq	r16,r3,zero
   13e64:	01000084 	movi	r4,2
   13e68:	2421c83a 	sub	r16,r4,r16
   13e6c:	98c00615 	stw	r3,24(r19)
   13e70:	9c000415 	stw	r16,16(r19)
   13e74:	88001f1e 	bne	r17,zero,13ef4 <__d2b+0x108>
   13e78:	10bef384 	addi	r2,r2,-1074
   13e7c:	90800015 	stw	r2,0(r18)
   13e80:	00900034 	movhi	r2,16384
   13e84:	10bfffc4 	addi	r2,r2,-1
   13e88:	8085883a 	add	r2,r16,r2
   13e8c:	1085883a 	add	r2,r2,r2
   13e90:	1085883a 	add	r2,r2,r2
   13e94:	9885883a 	add	r2,r19,r2
   13e98:	11000517 	ldw	r4,20(r2)
   13e9c:	8020917a 	slli	r16,r16,5
   13ea0:	00133b80 	call	133b8 <__hi0bits>
   13ea4:	d8c00817 	ldw	r3,32(sp)
   13ea8:	8085c83a 	sub	r2,r16,r2
   13eac:	18800015 	stw	r2,0(r3)
   13eb0:	9805883a 	mov	r2,r19
   13eb4:	dfc00717 	ldw	ra,28(sp)
   13eb8:	dd000617 	ldw	r20,24(sp)
   13ebc:	dcc00517 	ldw	r19,20(sp)
   13ec0:	dc800417 	ldw	r18,16(sp)
   13ec4:	dc400317 	ldw	r17,12(sp)
   13ec8:	dc000217 	ldw	r16,8(sp)
   13ecc:	dec00804 	addi	sp,sp,32
   13ed0:	f800283a 	ret
   13ed4:	d809883a 	mov	r4,sp
   13ed8:	00134200 	call	13420 <__lo0bits>
   13edc:	d8c00017 	ldw	r3,0(sp)
   13ee0:	04000044 	movi	r16,1
   13ee4:	9c000415 	stw	r16,16(r19)
   13ee8:	98c00515 	stw	r3,20(r19)
   13eec:	10800804 	addi	r2,r2,32
   13ef0:	883fe126 	beq	r17,zero,13e78 <__alt_data_end+0xfc013e78>
   13ef4:	00c00d44 	movi	r3,53
   13ef8:	8c7ef344 	addi	r17,r17,-1075
   13efc:	88a3883a 	add	r17,r17,r2
   13f00:	1885c83a 	sub	r2,r3,r2
   13f04:	d8c00817 	ldw	r3,32(sp)
   13f08:	94400015 	stw	r17,0(r18)
   13f0c:	18800015 	stw	r2,0(r3)
   13f10:	003fe706 	br	13eb0 <__alt_data_end+0xfc013eb0>
   13f14:	01000804 	movi	r4,32
   13f18:	2089c83a 	sub	r4,r4,r2
   13f1c:	1908983a 	sll	r4,r3,r4
   13f20:	d9400117 	ldw	r5,4(sp)
   13f24:	1886d83a 	srl	r3,r3,r2
   13f28:	2148b03a 	or	r4,r4,r5
   13f2c:	99000515 	stw	r4,20(r19)
   13f30:	d8c00015 	stw	r3,0(sp)
   13f34:	003fca06 	br	13e60 <__alt_data_end+0xfc013e60>

00013f38 <__ratio>:
   13f38:	defff904 	addi	sp,sp,-28
   13f3c:	dc400315 	stw	r17,12(sp)
   13f40:	2823883a 	mov	r17,r5
   13f44:	d9400104 	addi	r5,sp,4
   13f48:	dfc00615 	stw	ra,24(sp)
   13f4c:	dcc00515 	stw	r19,20(sp)
   13f50:	dc800415 	stw	r18,16(sp)
   13f54:	2027883a 	mov	r19,r4
   13f58:	dc000215 	stw	r16,8(sp)
   13f5c:	0013ce00 	call	13ce0 <__b2d>
   13f60:	d80b883a 	mov	r5,sp
   13f64:	8809883a 	mov	r4,r17
   13f68:	1025883a 	mov	r18,r2
   13f6c:	1821883a 	mov	r16,r3
   13f70:	0013ce00 	call	13ce0 <__b2d>
   13f74:	8a000417 	ldw	r8,16(r17)
   13f78:	99000417 	ldw	r4,16(r19)
   13f7c:	d9400117 	ldw	r5,4(sp)
   13f80:	2209c83a 	sub	r4,r4,r8
   13f84:	2010917a 	slli	r8,r4,5
   13f88:	d9000017 	ldw	r4,0(sp)
   13f8c:	2909c83a 	sub	r4,r5,r4
   13f90:	4109883a 	add	r4,r8,r4
   13f94:	01000e0e 	bge	zero,r4,13fd0 <__ratio+0x98>
   13f98:	2008953a 	slli	r4,r4,20
   13f9c:	2421883a 	add	r16,r4,r16
   13fa0:	100d883a 	mov	r6,r2
   13fa4:	180f883a 	mov	r7,r3
   13fa8:	9009883a 	mov	r4,r18
   13fac:	800b883a 	mov	r5,r16
   13fb0:	0017e480 	call	17e48 <__divdf3>
   13fb4:	dfc00617 	ldw	ra,24(sp)
   13fb8:	dcc00517 	ldw	r19,20(sp)
   13fbc:	dc800417 	ldw	r18,16(sp)
   13fc0:	dc400317 	ldw	r17,12(sp)
   13fc4:	dc000217 	ldw	r16,8(sp)
   13fc8:	dec00704 	addi	sp,sp,28
   13fcc:	f800283a 	ret
   13fd0:	2008953a 	slli	r4,r4,20
   13fd4:	1907c83a 	sub	r3,r3,r4
   13fd8:	003ff106 	br	13fa0 <__alt_data_end+0xfc013fa0>

00013fdc <_mprec_log10>:
   13fdc:	defffe04 	addi	sp,sp,-8
   13fe0:	dc000015 	stw	r16,0(sp)
   13fe4:	dfc00115 	stw	ra,4(sp)
   13fe8:	008005c4 	movi	r2,23
   13fec:	2021883a 	mov	r16,r4
   13ff0:	11000d0e 	bge	r2,r4,14028 <_mprec_log10+0x4c>
   13ff4:	0005883a 	mov	r2,zero
   13ff8:	00cffc34 	movhi	r3,16368
   13ffc:	843fffc4 	addi	r16,r16,-1
   14000:	000d883a 	mov	r6,zero
   14004:	01d00934 	movhi	r7,16420
   14008:	1009883a 	mov	r4,r2
   1400c:	180b883a 	mov	r5,r3
   14010:	0018a700 	call	18a70 <__muldf3>
   14014:	803ff91e 	bne	r16,zero,13ffc <__alt_data_end+0xfc013ffc>
   14018:	dfc00117 	ldw	ra,4(sp)
   1401c:	dc000017 	ldw	r16,0(sp)
   14020:	dec00204 	addi	sp,sp,8
   14024:	f800283a 	ret
   14028:	202090fa 	slli	r16,r4,3
   1402c:	008000b4 	movhi	r2,2
   14030:	10b12c04 	addi	r2,r2,-15184
   14034:	1421883a 	add	r16,r2,r16
   14038:	80800017 	ldw	r2,0(r16)
   1403c:	80c00117 	ldw	r3,4(r16)
   14040:	dfc00117 	ldw	ra,4(sp)
   14044:	dc000017 	ldw	r16,0(sp)
   14048:	dec00204 	addi	sp,sp,8
   1404c:	f800283a 	ret

00014050 <__copybits>:
   14050:	297fffc4 	addi	r5,r5,-1
   14054:	280fd17a 	srai	r7,r5,5
   14058:	30c00417 	ldw	r3,16(r6)
   1405c:	30800504 	addi	r2,r6,20
   14060:	39c00044 	addi	r7,r7,1
   14064:	18c7883a 	add	r3,r3,r3
   14068:	39cf883a 	add	r7,r7,r7
   1406c:	18c7883a 	add	r3,r3,r3
   14070:	39cf883a 	add	r7,r7,r7
   14074:	10c7883a 	add	r3,r2,r3
   14078:	21cf883a 	add	r7,r4,r7
   1407c:	10c00d2e 	bgeu	r2,r3,140b4 <__copybits+0x64>
   14080:	200b883a 	mov	r5,r4
   14084:	12000017 	ldw	r8,0(r2)
   14088:	29400104 	addi	r5,r5,4
   1408c:	10800104 	addi	r2,r2,4
   14090:	2a3fff15 	stw	r8,-4(r5)
   14094:	10fffb36 	bltu	r2,r3,14084 <__alt_data_end+0xfc014084>
   14098:	1985c83a 	sub	r2,r3,r6
   1409c:	10bffac4 	addi	r2,r2,-21
   140a0:	1004d0ba 	srli	r2,r2,2
   140a4:	10800044 	addi	r2,r2,1
   140a8:	1085883a 	add	r2,r2,r2
   140ac:	1085883a 	add	r2,r2,r2
   140b0:	2089883a 	add	r4,r4,r2
   140b4:	21c0032e 	bgeu	r4,r7,140c4 <__copybits+0x74>
   140b8:	20000015 	stw	zero,0(r4)
   140bc:	21000104 	addi	r4,r4,4
   140c0:	21fffd36 	bltu	r4,r7,140b8 <__alt_data_end+0xfc0140b8>
   140c4:	f800283a 	ret

000140c8 <__any_on>:
   140c8:	20c00417 	ldw	r3,16(r4)
   140cc:	2805d17a 	srai	r2,r5,5
   140d0:	21000504 	addi	r4,r4,20
   140d4:	18800d0e 	bge	r3,r2,1410c <__any_on+0x44>
   140d8:	18c7883a 	add	r3,r3,r3
   140dc:	18c7883a 	add	r3,r3,r3
   140e0:	20c7883a 	add	r3,r4,r3
   140e4:	20c0192e 	bgeu	r4,r3,1414c <__any_on+0x84>
   140e8:	18bfff17 	ldw	r2,-4(r3)
   140ec:	18ffff04 	addi	r3,r3,-4
   140f0:	1000041e 	bne	r2,zero,14104 <__any_on+0x3c>
   140f4:	20c0142e 	bgeu	r4,r3,14148 <__any_on+0x80>
   140f8:	18ffff04 	addi	r3,r3,-4
   140fc:	19400017 	ldw	r5,0(r3)
   14100:	283ffc26 	beq	r5,zero,140f4 <__alt_data_end+0xfc0140f4>
   14104:	00800044 	movi	r2,1
   14108:	f800283a 	ret
   1410c:	10c00a0e 	bge	r2,r3,14138 <__any_on+0x70>
   14110:	1085883a 	add	r2,r2,r2
   14114:	1085883a 	add	r2,r2,r2
   14118:	294007cc 	andi	r5,r5,31
   1411c:	2087883a 	add	r3,r4,r2
   14120:	283ff026 	beq	r5,zero,140e4 <__alt_data_end+0xfc0140e4>
   14124:	19800017 	ldw	r6,0(r3)
   14128:	3144d83a 	srl	r2,r6,r5
   1412c:	114a983a 	sll	r5,r2,r5
   14130:	317ff41e 	bne	r6,r5,14104 <__alt_data_end+0xfc014104>
   14134:	003feb06 	br	140e4 <__alt_data_end+0xfc0140e4>
   14138:	1085883a 	add	r2,r2,r2
   1413c:	1085883a 	add	r2,r2,r2
   14140:	2087883a 	add	r3,r4,r2
   14144:	003fe706 	br	140e4 <__alt_data_end+0xfc0140e4>
   14148:	f800283a 	ret
   1414c:	0005883a 	mov	r2,zero
   14150:	f800283a 	ret

00014154 <_realloc_r>:
   14154:	defff604 	addi	sp,sp,-40
   14158:	dc800215 	stw	r18,8(sp)
   1415c:	dfc00915 	stw	ra,36(sp)
   14160:	df000815 	stw	fp,32(sp)
   14164:	ddc00715 	stw	r23,28(sp)
   14168:	dd800615 	stw	r22,24(sp)
   1416c:	dd400515 	stw	r21,20(sp)
   14170:	dd000415 	stw	r20,16(sp)
   14174:	dcc00315 	stw	r19,12(sp)
   14178:	dc400115 	stw	r17,4(sp)
   1417c:	dc000015 	stw	r16,0(sp)
   14180:	3025883a 	mov	r18,r6
   14184:	2800b726 	beq	r5,zero,14464 <_realloc_r+0x310>
   14188:	282b883a 	mov	r21,r5
   1418c:	2029883a 	mov	r20,r4
   14190:	001a4100 	call	1a410 <__malloc_lock>
   14194:	a8bfff17 	ldw	r2,-4(r21)
   14198:	043fff04 	movi	r16,-4
   1419c:	90c002c4 	addi	r3,r18,11
   141a0:	01000584 	movi	r4,22
   141a4:	acfffe04 	addi	r19,r21,-8
   141a8:	1420703a 	and	r16,r2,r16
   141ac:	20c0332e 	bgeu	r4,r3,1427c <_realloc_r+0x128>
   141b0:	047ffe04 	movi	r17,-8
   141b4:	1c62703a 	and	r17,r3,r17
   141b8:	8807883a 	mov	r3,r17
   141bc:	88005816 	blt	r17,zero,14320 <_realloc_r+0x1cc>
   141c0:	8c805736 	bltu	r17,r18,14320 <_realloc_r+0x1cc>
   141c4:	80c0300e 	bge	r16,r3,14288 <_realloc_r+0x134>
   141c8:	070000b4 	movhi	fp,2
   141cc:	e732da04 	addi	fp,fp,-13464
   141d0:	e1c00217 	ldw	r7,8(fp)
   141d4:	9c09883a 	add	r4,r19,r16
   141d8:	22000117 	ldw	r8,4(r4)
   141dc:	21c06326 	beq	r4,r7,1436c <_realloc_r+0x218>
   141e0:	017fff84 	movi	r5,-2
   141e4:	414a703a 	and	r5,r8,r5
   141e8:	214b883a 	add	r5,r4,r5
   141ec:	29800117 	ldw	r6,4(r5)
   141f0:	3180004c 	andi	r6,r6,1
   141f4:	30003f26 	beq	r6,zero,142f4 <_realloc_r+0x1a0>
   141f8:	1080004c 	andi	r2,r2,1
   141fc:	10008326 	beq	r2,zero,1440c <_realloc_r+0x2b8>
   14200:	900b883a 	mov	r5,r18
   14204:	a009883a 	mov	r4,r20
   14208:	00123e00 	call	123e0 <_malloc_r>
   1420c:	1025883a 	mov	r18,r2
   14210:	10011e26 	beq	r2,zero,1468c <_realloc_r+0x538>
   14214:	a93fff17 	ldw	r4,-4(r21)
   14218:	10fffe04 	addi	r3,r2,-8
   1421c:	00bfff84 	movi	r2,-2
   14220:	2084703a 	and	r2,r4,r2
   14224:	9885883a 	add	r2,r19,r2
   14228:	1880ee26 	beq	r3,r2,145e4 <_realloc_r+0x490>
   1422c:	81bfff04 	addi	r6,r16,-4
   14230:	00800904 	movi	r2,36
   14234:	1180b836 	bltu	r2,r6,14518 <_realloc_r+0x3c4>
   14238:	00c004c4 	movi	r3,19
   1423c:	19809636 	bltu	r3,r6,14498 <_realloc_r+0x344>
   14240:	9005883a 	mov	r2,r18
   14244:	a807883a 	mov	r3,r21
   14248:	19000017 	ldw	r4,0(r3)
   1424c:	11000015 	stw	r4,0(r2)
   14250:	19000117 	ldw	r4,4(r3)
   14254:	11000115 	stw	r4,4(r2)
   14258:	18c00217 	ldw	r3,8(r3)
   1425c:	10c00215 	stw	r3,8(r2)
   14260:	a80b883a 	mov	r5,r21
   14264:	a009883a 	mov	r4,r20
   14268:	00117e80 	call	117e8 <_free_r>
   1426c:	a009883a 	mov	r4,r20
   14270:	001a4340 	call	1a434 <__malloc_unlock>
   14274:	9005883a 	mov	r2,r18
   14278:	00001206 	br	142c4 <_realloc_r+0x170>
   1427c:	00c00404 	movi	r3,16
   14280:	1823883a 	mov	r17,r3
   14284:	003fce06 	br	141c0 <__alt_data_end+0xfc0141c0>
   14288:	a825883a 	mov	r18,r21
   1428c:	8445c83a 	sub	r2,r16,r17
   14290:	00c003c4 	movi	r3,15
   14294:	18802636 	bltu	r3,r2,14330 <_realloc_r+0x1dc>
   14298:	99800117 	ldw	r6,4(r19)
   1429c:	9c07883a 	add	r3,r19,r16
   142a0:	3180004c 	andi	r6,r6,1
   142a4:	3420b03a 	or	r16,r6,r16
   142a8:	9c000115 	stw	r16,4(r19)
   142ac:	18800117 	ldw	r2,4(r3)
   142b0:	10800054 	ori	r2,r2,1
   142b4:	18800115 	stw	r2,4(r3)
   142b8:	a009883a 	mov	r4,r20
   142bc:	001a4340 	call	1a434 <__malloc_unlock>
   142c0:	9005883a 	mov	r2,r18
   142c4:	dfc00917 	ldw	ra,36(sp)
   142c8:	df000817 	ldw	fp,32(sp)
   142cc:	ddc00717 	ldw	r23,28(sp)
   142d0:	dd800617 	ldw	r22,24(sp)
   142d4:	dd400517 	ldw	r21,20(sp)
   142d8:	dd000417 	ldw	r20,16(sp)
   142dc:	dcc00317 	ldw	r19,12(sp)
   142e0:	dc800217 	ldw	r18,8(sp)
   142e4:	dc400117 	ldw	r17,4(sp)
   142e8:	dc000017 	ldw	r16,0(sp)
   142ec:	dec00a04 	addi	sp,sp,40
   142f0:	f800283a 	ret
   142f4:	017fff04 	movi	r5,-4
   142f8:	414a703a 	and	r5,r8,r5
   142fc:	814d883a 	add	r6,r16,r5
   14300:	30c01f16 	blt	r6,r3,14380 <_realloc_r+0x22c>
   14304:	20800317 	ldw	r2,12(r4)
   14308:	20c00217 	ldw	r3,8(r4)
   1430c:	a825883a 	mov	r18,r21
   14310:	3021883a 	mov	r16,r6
   14314:	18800315 	stw	r2,12(r3)
   14318:	10c00215 	stw	r3,8(r2)
   1431c:	003fdb06 	br	1428c <__alt_data_end+0xfc01428c>
   14320:	00800304 	movi	r2,12
   14324:	a0800015 	stw	r2,0(r20)
   14328:	0005883a 	mov	r2,zero
   1432c:	003fe506 	br	142c4 <__alt_data_end+0xfc0142c4>
   14330:	98c00117 	ldw	r3,4(r19)
   14334:	9c4b883a 	add	r5,r19,r17
   14338:	11000054 	ori	r4,r2,1
   1433c:	18c0004c 	andi	r3,r3,1
   14340:	1c62b03a 	or	r17,r3,r17
   14344:	9c400115 	stw	r17,4(r19)
   14348:	29000115 	stw	r4,4(r5)
   1434c:	2885883a 	add	r2,r5,r2
   14350:	10c00117 	ldw	r3,4(r2)
   14354:	29400204 	addi	r5,r5,8
   14358:	a009883a 	mov	r4,r20
   1435c:	18c00054 	ori	r3,r3,1
   14360:	10c00115 	stw	r3,4(r2)
   14364:	00117e80 	call	117e8 <_free_r>
   14368:	003fd306 	br	142b8 <__alt_data_end+0xfc0142b8>
   1436c:	017fff04 	movi	r5,-4
   14370:	414a703a 	and	r5,r8,r5
   14374:	89800404 	addi	r6,r17,16
   14378:	8151883a 	add	r8,r16,r5
   1437c:	4180590e 	bge	r8,r6,144e4 <_realloc_r+0x390>
   14380:	1080004c 	andi	r2,r2,1
   14384:	103f9e1e 	bne	r2,zero,14200 <__alt_data_end+0xfc014200>
   14388:	adbffe17 	ldw	r22,-8(r21)
   1438c:	00bfff04 	movi	r2,-4
   14390:	9dadc83a 	sub	r22,r19,r22
   14394:	b1800117 	ldw	r6,4(r22)
   14398:	3084703a 	and	r2,r6,r2
   1439c:	20002026 	beq	r4,zero,14420 <_realloc_r+0x2cc>
   143a0:	80af883a 	add	r23,r16,r2
   143a4:	b96f883a 	add	r23,r23,r5
   143a8:	21c05f26 	beq	r4,r7,14528 <_realloc_r+0x3d4>
   143ac:	b8c01c16 	blt	r23,r3,14420 <_realloc_r+0x2cc>
   143b0:	20800317 	ldw	r2,12(r4)
   143b4:	20c00217 	ldw	r3,8(r4)
   143b8:	81bfff04 	addi	r6,r16,-4
   143bc:	01000904 	movi	r4,36
   143c0:	18800315 	stw	r2,12(r3)
   143c4:	10c00215 	stw	r3,8(r2)
   143c8:	b0c00217 	ldw	r3,8(r22)
   143cc:	b0800317 	ldw	r2,12(r22)
   143d0:	b4800204 	addi	r18,r22,8
   143d4:	18800315 	stw	r2,12(r3)
   143d8:	10c00215 	stw	r3,8(r2)
   143dc:	21801b36 	bltu	r4,r6,1444c <_realloc_r+0x2f8>
   143e0:	008004c4 	movi	r2,19
   143e4:	1180352e 	bgeu	r2,r6,144bc <_realloc_r+0x368>
   143e8:	a8800017 	ldw	r2,0(r21)
   143ec:	b0800215 	stw	r2,8(r22)
   143f0:	a8800117 	ldw	r2,4(r21)
   143f4:	b0800315 	stw	r2,12(r22)
   143f8:	008006c4 	movi	r2,27
   143fc:	11807f36 	bltu	r2,r6,145fc <_realloc_r+0x4a8>
   14400:	b0800404 	addi	r2,r22,16
   14404:	ad400204 	addi	r21,r21,8
   14408:	00002d06 	br	144c0 <_realloc_r+0x36c>
   1440c:	adbffe17 	ldw	r22,-8(r21)
   14410:	00bfff04 	movi	r2,-4
   14414:	9dadc83a 	sub	r22,r19,r22
   14418:	b1000117 	ldw	r4,4(r22)
   1441c:	2084703a 	and	r2,r4,r2
   14420:	b03f7726 	beq	r22,zero,14200 <__alt_data_end+0xfc014200>
   14424:	80af883a 	add	r23,r16,r2
   14428:	b8ff7516 	blt	r23,r3,14200 <__alt_data_end+0xfc014200>
   1442c:	b0800317 	ldw	r2,12(r22)
   14430:	b0c00217 	ldw	r3,8(r22)
   14434:	81bfff04 	addi	r6,r16,-4
   14438:	01000904 	movi	r4,36
   1443c:	18800315 	stw	r2,12(r3)
   14440:	10c00215 	stw	r3,8(r2)
   14444:	b4800204 	addi	r18,r22,8
   14448:	21bfe52e 	bgeu	r4,r6,143e0 <__alt_data_end+0xfc0143e0>
   1444c:	a80b883a 	mov	r5,r21
   14450:	9009883a 	mov	r4,r18
   14454:	0012e180 	call	12e18 <memmove>
   14458:	b821883a 	mov	r16,r23
   1445c:	b027883a 	mov	r19,r22
   14460:	003f8a06 	br	1428c <__alt_data_end+0xfc01428c>
   14464:	300b883a 	mov	r5,r6
   14468:	dfc00917 	ldw	ra,36(sp)
   1446c:	df000817 	ldw	fp,32(sp)
   14470:	ddc00717 	ldw	r23,28(sp)
   14474:	dd800617 	ldw	r22,24(sp)
   14478:	dd400517 	ldw	r21,20(sp)
   1447c:	dd000417 	ldw	r20,16(sp)
   14480:	dcc00317 	ldw	r19,12(sp)
   14484:	dc800217 	ldw	r18,8(sp)
   14488:	dc400117 	ldw	r17,4(sp)
   1448c:	dc000017 	ldw	r16,0(sp)
   14490:	dec00a04 	addi	sp,sp,40
   14494:	00123e01 	jmpi	123e0 <_malloc_r>
   14498:	a8c00017 	ldw	r3,0(r21)
   1449c:	90c00015 	stw	r3,0(r18)
   144a0:	a8c00117 	ldw	r3,4(r21)
   144a4:	90c00115 	stw	r3,4(r18)
   144a8:	00c006c4 	movi	r3,27
   144ac:	19804536 	bltu	r3,r6,145c4 <_realloc_r+0x470>
   144b0:	90800204 	addi	r2,r18,8
   144b4:	a8c00204 	addi	r3,r21,8
   144b8:	003f6306 	br	14248 <__alt_data_end+0xfc014248>
   144bc:	9005883a 	mov	r2,r18
   144c0:	a8c00017 	ldw	r3,0(r21)
   144c4:	b821883a 	mov	r16,r23
   144c8:	b027883a 	mov	r19,r22
   144cc:	10c00015 	stw	r3,0(r2)
   144d0:	a8c00117 	ldw	r3,4(r21)
   144d4:	10c00115 	stw	r3,4(r2)
   144d8:	a8c00217 	ldw	r3,8(r21)
   144dc:	10c00215 	stw	r3,8(r2)
   144e0:	003f6a06 	br	1428c <__alt_data_end+0xfc01428c>
   144e4:	9c67883a 	add	r19,r19,r17
   144e8:	4445c83a 	sub	r2,r8,r17
   144ec:	e4c00215 	stw	r19,8(fp)
   144f0:	10800054 	ori	r2,r2,1
   144f4:	98800115 	stw	r2,4(r19)
   144f8:	a8bfff17 	ldw	r2,-4(r21)
   144fc:	a009883a 	mov	r4,r20
   14500:	1080004c 	andi	r2,r2,1
   14504:	1462b03a 	or	r17,r2,r17
   14508:	ac7fff15 	stw	r17,-4(r21)
   1450c:	001a4340 	call	1a434 <__malloc_unlock>
   14510:	a805883a 	mov	r2,r21
   14514:	003f6b06 	br	142c4 <__alt_data_end+0xfc0142c4>
   14518:	a80b883a 	mov	r5,r21
   1451c:	9009883a 	mov	r4,r18
   14520:	0012e180 	call	12e18 <memmove>
   14524:	003f4e06 	br	14260 <__alt_data_end+0xfc014260>
   14528:	89000404 	addi	r4,r17,16
   1452c:	b93fbc16 	blt	r23,r4,14420 <__alt_data_end+0xfc014420>
   14530:	b0800317 	ldw	r2,12(r22)
   14534:	b0c00217 	ldw	r3,8(r22)
   14538:	81bfff04 	addi	r6,r16,-4
   1453c:	01000904 	movi	r4,36
   14540:	18800315 	stw	r2,12(r3)
   14544:	10c00215 	stw	r3,8(r2)
   14548:	b4800204 	addi	r18,r22,8
   1454c:	21804336 	bltu	r4,r6,1465c <_realloc_r+0x508>
   14550:	008004c4 	movi	r2,19
   14554:	11803f2e 	bgeu	r2,r6,14654 <_realloc_r+0x500>
   14558:	a8800017 	ldw	r2,0(r21)
   1455c:	b0800215 	stw	r2,8(r22)
   14560:	a8800117 	ldw	r2,4(r21)
   14564:	b0800315 	stw	r2,12(r22)
   14568:	008006c4 	movi	r2,27
   1456c:	11803f36 	bltu	r2,r6,1466c <_realloc_r+0x518>
   14570:	b0800404 	addi	r2,r22,16
   14574:	ad400204 	addi	r21,r21,8
   14578:	a8c00017 	ldw	r3,0(r21)
   1457c:	10c00015 	stw	r3,0(r2)
   14580:	a8c00117 	ldw	r3,4(r21)
   14584:	10c00115 	stw	r3,4(r2)
   14588:	a8c00217 	ldw	r3,8(r21)
   1458c:	10c00215 	stw	r3,8(r2)
   14590:	b447883a 	add	r3,r22,r17
   14594:	bc45c83a 	sub	r2,r23,r17
   14598:	e0c00215 	stw	r3,8(fp)
   1459c:	10800054 	ori	r2,r2,1
   145a0:	18800115 	stw	r2,4(r3)
   145a4:	b0800117 	ldw	r2,4(r22)
   145a8:	a009883a 	mov	r4,r20
   145ac:	1080004c 	andi	r2,r2,1
   145b0:	1462b03a 	or	r17,r2,r17
   145b4:	b4400115 	stw	r17,4(r22)
   145b8:	001a4340 	call	1a434 <__malloc_unlock>
   145bc:	9005883a 	mov	r2,r18
   145c0:	003f4006 	br	142c4 <__alt_data_end+0xfc0142c4>
   145c4:	a8c00217 	ldw	r3,8(r21)
   145c8:	90c00215 	stw	r3,8(r18)
   145cc:	a8c00317 	ldw	r3,12(r21)
   145d0:	90c00315 	stw	r3,12(r18)
   145d4:	30801126 	beq	r6,r2,1461c <_realloc_r+0x4c8>
   145d8:	90800404 	addi	r2,r18,16
   145dc:	a8c00404 	addi	r3,r21,16
   145e0:	003f1906 	br	14248 <__alt_data_end+0xfc014248>
   145e4:	90ffff17 	ldw	r3,-4(r18)
   145e8:	00bfff04 	movi	r2,-4
   145ec:	a825883a 	mov	r18,r21
   145f0:	1884703a 	and	r2,r3,r2
   145f4:	80a1883a 	add	r16,r16,r2
   145f8:	003f2406 	br	1428c <__alt_data_end+0xfc01428c>
   145fc:	a8800217 	ldw	r2,8(r21)
   14600:	b0800415 	stw	r2,16(r22)
   14604:	a8800317 	ldw	r2,12(r21)
   14608:	b0800515 	stw	r2,20(r22)
   1460c:	31000a26 	beq	r6,r4,14638 <_realloc_r+0x4e4>
   14610:	b0800604 	addi	r2,r22,24
   14614:	ad400404 	addi	r21,r21,16
   14618:	003fa906 	br	144c0 <__alt_data_end+0xfc0144c0>
   1461c:	a9000417 	ldw	r4,16(r21)
   14620:	90800604 	addi	r2,r18,24
   14624:	a8c00604 	addi	r3,r21,24
   14628:	91000415 	stw	r4,16(r18)
   1462c:	a9000517 	ldw	r4,20(r21)
   14630:	91000515 	stw	r4,20(r18)
   14634:	003f0406 	br	14248 <__alt_data_end+0xfc014248>
   14638:	a8c00417 	ldw	r3,16(r21)
   1463c:	ad400604 	addi	r21,r21,24
   14640:	b0800804 	addi	r2,r22,32
   14644:	b0c00615 	stw	r3,24(r22)
   14648:	a8ffff17 	ldw	r3,-4(r21)
   1464c:	b0c00715 	stw	r3,28(r22)
   14650:	003f9b06 	br	144c0 <__alt_data_end+0xfc0144c0>
   14654:	9005883a 	mov	r2,r18
   14658:	003fc706 	br	14578 <__alt_data_end+0xfc014578>
   1465c:	a80b883a 	mov	r5,r21
   14660:	9009883a 	mov	r4,r18
   14664:	0012e180 	call	12e18 <memmove>
   14668:	003fc906 	br	14590 <__alt_data_end+0xfc014590>
   1466c:	a8800217 	ldw	r2,8(r21)
   14670:	b0800415 	stw	r2,16(r22)
   14674:	a8800317 	ldw	r2,12(r21)
   14678:	b0800515 	stw	r2,20(r22)
   1467c:	31000726 	beq	r6,r4,1469c <_realloc_r+0x548>
   14680:	b0800604 	addi	r2,r22,24
   14684:	ad400404 	addi	r21,r21,16
   14688:	003fbb06 	br	14578 <__alt_data_end+0xfc014578>
   1468c:	a009883a 	mov	r4,r20
   14690:	001a4340 	call	1a434 <__malloc_unlock>
   14694:	0005883a 	mov	r2,zero
   14698:	003f0a06 	br	142c4 <__alt_data_end+0xfc0142c4>
   1469c:	a8c00417 	ldw	r3,16(r21)
   146a0:	ad400604 	addi	r21,r21,24
   146a4:	b0800804 	addi	r2,r22,32
   146a8:	b0c00615 	stw	r3,24(r22)
   146ac:	a8ffff17 	ldw	r3,-4(r21)
   146b0:	b0c00715 	stw	r3,28(r22)
   146b4:	003fb006 	br	14578 <__alt_data_end+0xfc014578>

000146b8 <__fpclassifyd>:
   146b8:	00a00034 	movhi	r2,32768
   146bc:	10bfffc4 	addi	r2,r2,-1
   146c0:	2884703a 	and	r2,r5,r2
   146c4:	10000726 	beq	r2,zero,146e4 <__fpclassifyd+0x2c>
   146c8:	00fffc34 	movhi	r3,65520
   146cc:	019ff834 	movhi	r6,32736
   146d0:	28c7883a 	add	r3,r5,r3
   146d4:	31bfffc4 	addi	r6,r6,-1
   146d8:	30c00536 	bltu	r6,r3,146f0 <__fpclassifyd+0x38>
   146dc:	00800104 	movi	r2,4
   146e0:	f800283a 	ret
   146e4:	2000021e 	bne	r4,zero,146f0 <__fpclassifyd+0x38>
   146e8:	00800084 	movi	r2,2
   146ec:	f800283a 	ret
   146f0:	00dffc34 	movhi	r3,32752
   146f4:	019ff834 	movhi	r6,32736
   146f8:	28cb883a 	add	r5,r5,r3
   146fc:	31bfffc4 	addi	r6,r6,-1
   14700:	317ff62e 	bgeu	r6,r5,146dc <__alt_data_end+0xfc0146dc>
   14704:	01400434 	movhi	r5,16
   14708:	297fffc4 	addi	r5,r5,-1
   1470c:	28800236 	bltu	r5,r2,14718 <__fpclassifyd+0x60>
   14710:	008000c4 	movi	r2,3
   14714:	f800283a 	ret
   14718:	10c00226 	beq	r2,r3,14724 <__fpclassifyd+0x6c>
   1471c:	0005883a 	mov	r2,zero
   14720:	f800283a 	ret
   14724:	2005003a 	cmpeq	r2,r4,zero
   14728:	f800283a 	ret

0001472c <_sbrk_r>:
   1472c:	defffd04 	addi	sp,sp,-12
   14730:	dc000015 	stw	r16,0(sp)
   14734:	040000b4 	movhi	r16,2
   14738:	dc400115 	stw	r17,4(sp)
   1473c:	843f3804 	addi	r16,r16,-800
   14740:	2023883a 	mov	r17,r4
   14744:	2809883a 	mov	r4,r5
   14748:	dfc00215 	stw	ra,8(sp)
   1474c:	80000015 	stw	zero,0(r16)
   14750:	001a61c0 	call	1a61c <sbrk>
   14754:	00ffffc4 	movi	r3,-1
   14758:	10c00526 	beq	r2,r3,14770 <_sbrk_r+0x44>
   1475c:	dfc00217 	ldw	ra,8(sp)
   14760:	dc400117 	ldw	r17,4(sp)
   14764:	dc000017 	ldw	r16,0(sp)
   14768:	dec00304 	addi	sp,sp,12
   1476c:	f800283a 	ret
   14770:	80c00017 	ldw	r3,0(r16)
   14774:	183ff926 	beq	r3,zero,1475c <__alt_data_end+0xfc01475c>
   14778:	88c00015 	stw	r3,0(r17)
   1477c:	003ff706 	br	1475c <__alt_data_end+0xfc01475c>

00014780 <__sread>:
   14780:	defffe04 	addi	sp,sp,-8
   14784:	dc000015 	stw	r16,0(sp)
   14788:	2821883a 	mov	r16,r5
   1478c:	2940038f 	ldh	r5,14(r5)
   14790:	dfc00115 	stw	ra,4(sp)
   14794:	001663c0 	call	1663c <_read_r>
   14798:	10000716 	blt	r2,zero,147b8 <__sread+0x38>
   1479c:	80c01417 	ldw	r3,80(r16)
   147a0:	1887883a 	add	r3,r3,r2
   147a4:	80c01415 	stw	r3,80(r16)
   147a8:	dfc00117 	ldw	ra,4(sp)
   147ac:	dc000017 	ldw	r16,0(sp)
   147b0:	dec00204 	addi	sp,sp,8
   147b4:	f800283a 	ret
   147b8:	80c0030b 	ldhu	r3,12(r16)
   147bc:	18fbffcc 	andi	r3,r3,61439
   147c0:	80c0030d 	sth	r3,12(r16)
   147c4:	dfc00117 	ldw	ra,4(sp)
   147c8:	dc000017 	ldw	r16,0(sp)
   147cc:	dec00204 	addi	sp,sp,8
   147d0:	f800283a 	ret

000147d4 <__seofread>:
   147d4:	0005883a 	mov	r2,zero
   147d8:	f800283a 	ret

000147dc <__swrite>:
   147dc:	2880030b 	ldhu	r2,12(r5)
   147e0:	defffb04 	addi	sp,sp,-20
   147e4:	dcc00315 	stw	r19,12(sp)
   147e8:	dc800215 	stw	r18,8(sp)
   147ec:	dc400115 	stw	r17,4(sp)
   147f0:	dc000015 	stw	r16,0(sp)
   147f4:	dfc00415 	stw	ra,16(sp)
   147f8:	10c0400c 	andi	r3,r2,256
   147fc:	2821883a 	mov	r16,r5
   14800:	2023883a 	mov	r17,r4
   14804:	3025883a 	mov	r18,r6
   14808:	3827883a 	mov	r19,r7
   1480c:	18000526 	beq	r3,zero,14824 <__swrite+0x48>
   14810:	2940038f 	ldh	r5,14(r5)
   14814:	01c00084 	movi	r7,2
   14818:	000d883a 	mov	r6,zero
   1481c:	00165dc0 	call	165dc <_lseek_r>
   14820:	8080030b 	ldhu	r2,12(r16)
   14824:	8140038f 	ldh	r5,14(r16)
   14828:	10bbffcc 	andi	r2,r2,61439
   1482c:	980f883a 	mov	r7,r19
   14830:	900d883a 	mov	r6,r18
   14834:	8809883a 	mov	r4,r17
   14838:	8080030d 	sth	r2,12(r16)
   1483c:	dfc00417 	ldw	ra,16(sp)
   14840:	dcc00317 	ldw	r19,12(sp)
   14844:	dc800217 	ldw	r18,8(sp)
   14848:	dc400117 	ldw	r17,4(sp)
   1484c:	dc000017 	ldw	r16,0(sp)
   14850:	dec00504 	addi	sp,sp,20
   14854:	00160901 	jmpi	16090 <_write_r>

00014858 <__sseek>:
   14858:	defffe04 	addi	sp,sp,-8
   1485c:	dc000015 	stw	r16,0(sp)
   14860:	2821883a 	mov	r16,r5
   14864:	2940038f 	ldh	r5,14(r5)
   14868:	dfc00115 	stw	ra,4(sp)
   1486c:	00165dc0 	call	165dc <_lseek_r>
   14870:	00ffffc4 	movi	r3,-1
   14874:	10c00826 	beq	r2,r3,14898 <__sseek+0x40>
   14878:	80c0030b 	ldhu	r3,12(r16)
   1487c:	80801415 	stw	r2,80(r16)
   14880:	18c40014 	ori	r3,r3,4096
   14884:	80c0030d 	sth	r3,12(r16)
   14888:	dfc00117 	ldw	ra,4(sp)
   1488c:	dc000017 	ldw	r16,0(sp)
   14890:	dec00204 	addi	sp,sp,8
   14894:	f800283a 	ret
   14898:	80c0030b 	ldhu	r3,12(r16)
   1489c:	18fbffcc 	andi	r3,r3,61439
   148a0:	80c0030d 	sth	r3,12(r16)
   148a4:	dfc00117 	ldw	ra,4(sp)
   148a8:	dc000017 	ldw	r16,0(sp)
   148ac:	dec00204 	addi	sp,sp,8
   148b0:	f800283a 	ret

000148b4 <__sclose>:
   148b4:	2940038f 	ldh	r5,14(r5)
   148b8:	00160f01 	jmpi	160f0 <_close_r>

000148bc <strcmp>:
   148bc:	2144b03a 	or	r2,r4,r5
   148c0:	108000cc 	andi	r2,r2,3
   148c4:	1000171e 	bne	r2,zero,14924 <strcmp+0x68>
   148c8:	20800017 	ldw	r2,0(r4)
   148cc:	28c00017 	ldw	r3,0(r5)
   148d0:	10c0141e 	bne	r2,r3,14924 <strcmp+0x68>
   148d4:	027fbff4 	movhi	r9,65279
   148d8:	4a7fbfc4 	addi	r9,r9,-257
   148dc:	0086303a 	nor	r3,zero,r2
   148e0:	02202074 	movhi	r8,32897
   148e4:	1245883a 	add	r2,r2,r9
   148e8:	42202004 	addi	r8,r8,-32640
   148ec:	10c4703a 	and	r2,r2,r3
   148f0:	1204703a 	and	r2,r2,r8
   148f4:	10000226 	beq	r2,zero,14900 <strcmp+0x44>
   148f8:	00002306 	br	14988 <strcmp+0xcc>
   148fc:	1000221e 	bne	r2,zero,14988 <strcmp+0xcc>
   14900:	21000104 	addi	r4,r4,4
   14904:	20c00017 	ldw	r3,0(r4)
   14908:	29400104 	addi	r5,r5,4
   1490c:	29800017 	ldw	r6,0(r5)
   14910:	1a4f883a 	add	r7,r3,r9
   14914:	00c4303a 	nor	r2,zero,r3
   14918:	3884703a 	and	r2,r7,r2
   1491c:	1204703a 	and	r2,r2,r8
   14920:	19bff626 	beq	r3,r6,148fc <__alt_data_end+0xfc0148fc>
   14924:	20800003 	ldbu	r2,0(r4)
   14928:	10c03fcc 	andi	r3,r2,255
   1492c:	18c0201c 	xori	r3,r3,128
   14930:	18ffe004 	addi	r3,r3,-128
   14934:	18000c26 	beq	r3,zero,14968 <strcmp+0xac>
   14938:	29800007 	ldb	r6,0(r5)
   1493c:	19800326 	beq	r3,r6,1494c <strcmp+0x90>
   14940:	00001306 	br	14990 <strcmp+0xd4>
   14944:	29800007 	ldb	r6,0(r5)
   14948:	11800b1e 	bne	r2,r6,14978 <strcmp+0xbc>
   1494c:	21000044 	addi	r4,r4,1
   14950:	20c00003 	ldbu	r3,0(r4)
   14954:	29400044 	addi	r5,r5,1
   14958:	18803fcc 	andi	r2,r3,255
   1495c:	1080201c 	xori	r2,r2,128
   14960:	10bfe004 	addi	r2,r2,-128
   14964:	103ff71e 	bne	r2,zero,14944 <__alt_data_end+0xfc014944>
   14968:	0007883a 	mov	r3,zero
   1496c:	28800003 	ldbu	r2,0(r5)
   14970:	1885c83a 	sub	r2,r3,r2
   14974:	f800283a 	ret
   14978:	28800003 	ldbu	r2,0(r5)
   1497c:	18c03fcc 	andi	r3,r3,255
   14980:	1885c83a 	sub	r2,r3,r2
   14984:	f800283a 	ret
   14988:	0005883a 	mov	r2,zero
   1498c:	f800283a 	ret
   14990:	10c03fcc 	andi	r3,r2,255
   14994:	003ff506 	br	1496c <__alt_data_end+0xfc01496c>

00014998 <__sprint_r.part.0>:
   14998:	28801917 	ldw	r2,100(r5)
   1499c:	defff604 	addi	sp,sp,-40
   149a0:	dd400515 	stw	r21,20(sp)
   149a4:	dfc00915 	stw	ra,36(sp)
   149a8:	df000815 	stw	fp,32(sp)
   149ac:	ddc00715 	stw	r23,28(sp)
   149b0:	dd800615 	stw	r22,24(sp)
   149b4:	dd000415 	stw	r20,16(sp)
   149b8:	dcc00315 	stw	r19,12(sp)
   149bc:	dc800215 	stw	r18,8(sp)
   149c0:	dc400115 	stw	r17,4(sp)
   149c4:	dc000015 	stw	r16,0(sp)
   149c8:	1088000c 	andi	r2,r2,8192
   149cc:	302b883a 	mov	r21,r6
   149d0:	10002e26 	beq	r2,zero,14a8c <__sprint_r.part.0+0xf4>
   149d4:	30800217 	ldw	r2,8(r6)
   149d8:	35800017 	ldw	r22,0(r6)
   149dc:	10002926 	beq	r2,zero,14a84 <__sprint_r.part.0+0xec>
   149e0:	2827883a 	mov	r19,r5
   149e4:	2029883a 	mov	r20,r4
   149e8:	b5c00104 	addi	r23,r22,4
   149ec:	04bfffc4 	movi	r18,-1
   149f0:	bc400017 	ldw	r17,0(r23)
   149f4:	b4000017 	ldw	r16,0(r22)
   149f8:	0039883a 	mov	fp,zero
   149fc:	8822d0ba 	srli	r17,r17,2
   14a00:	8800031e 	bne	r17,zero,14a10 <__sprint_r.part.0+0x78>
   14a04:	00001806 	br	14a68 <__sprint_r.part.0+0xd0>
   14a08:	84000104 	addi	r16,r16,4
   14a0c:	8f001526 	beq	r17,fp,14a64 <__sprint_r.part.0+0xcc>
   14a10:	81400017 	ldw	r5,0(r16)
   14a14:	980d883a 	mov	r6,r19
   14a18:	a009883a 	mov	r4,r20
   14a1c:	00164880 	call	16488 <_fputwc_r>
   14a20:	e7000044 	addi	fp,fp,1
   14a24:	14bff81e 	bne	r2,r18,14a08 <__alt_data_end+0xfc014a08>
   14a28:	9005883a 	mov	r2,r18
   14a2c:	a8000215 	stw	zero,8(r21)
   14a30:	a8000115 	stw	zero,4(r21)
   14a34:	dfc00917 	ldw	ra,36(sp)
   14a38:	df000817 	ldw	fp,32(sp)
   14a3c:	ddc00717 	ldw	r23,28(sp)
   14a40:	dd800617 	ldw	r22,24(sp)
   14a44:	dd400517 	ldw	r21,20(sp)
   14a48:	dd000417 	ldw	r20,16(sp)
   14a4c:	dcc00317 	ldw	r19,12(sp)
   14a50:	dc800217 	ldw	r18,8(sp)
   14a54:	dc400117 	ldw	r17,4(sp)
   14a58:	dc000017 	ldw	r16,0(sp)
   14a5c:	dec00a04 	addi	sp,sp,40
   14a60:	f800283a 	ret
   14a64:	a8800217 	ldw	r2,8(r21)
   14a68:	8c63883a 	add	r17,r17,r17
   14a6c:	8c63883a 	add	r17,r17,r17
   14a70:	1445c83a 	sub	r2,r2,r17
   14a74:	a8800215 	stw	r2,8(r21)
   14a78:	b5800204 	addi	r22,r22,8
   14a7c:	bdc00204 	addi	r23,r23,8
   14a80:	103fdb1e 	bne	r2,zero,149f0 <__alt_data_end+0xfc0149f0>
   14a84:	0005883a 	mov	r2,zero
   14a88:	003fe806 	br	14a2c <__alt_data_end+0xfc014a2c>
   14a8c:	0011af80 	call	11af8 <__sfvwrite_r>
   14a90:	003fe606 	br	14a2c <__alt_data_end+0xfc014a2c>

00014a94 <__sprint_r>:
   14a94:	30c00217 	ldw	r3,8(r6)
   14a98:	18000126 	beq	r3,zero,14aa0 <__sprint_r+0xc>
   14a9c:	00149981 	jmpi	14998 <__sprint_r.part.0>
   14aa0:	30000115 	stw	zero,4(r6)
   14aa4:	0005883a 	mov	r2,zero
   14aa8:	f800283a 	ret

00014aac <___vfiprintf_internal_r>:
   14aac:	deffca04 	addi	sp,sp,-216
   14ab0:	dd403115 	stw	r21,196(sp)
   14ab4:	dfc03515 	stw	ra,212(sp)
   14ab8:	df003415 	stw	fp,208(sp)
   14abc:	ddc03315 	stw	r23,204(sp)
   14ac0:	dd803215 	stw	r22,200(sp)
   14ac4:	dd003015 	stw	r20,192(sp)
   14ac8:	dcc02f15 	stw	r19,188(sp)
   14acc:	dc802e15 	stw	r18,184(sp)
   14ad0:	dc402d15 	stw	r17,180(sp)
   14ad4:	dc002c15 	stw	r16,176(sp)
   14ad8:	d9002115 	stw	r4,132(sp)
   14adc:	d9402015 	stw	r5,128(sp)
   14ae0:	d9c02215 	stw	r7,136(sp)
   14ae4:	302b883a 	mov	r21,r6
   14ae8:	20000226 	beq	r4,zero,14af4 <___vfiprintf_internal_r+0x48>
   14aec:	20800e17 	ldw	r2,56(r4)
   14af0:	1000cf26 	beq	r2,zero,14e30 <___vfiprintf_internal_r+0x384>
   14af4:	d8c02017 	ldw	r3,128(sp)
   14af8:	1880030b 	ldhu	r2,12(r3)
   14afc:	10c8000c 	andi	r3,r2,8192
   14b00:	1800071e 	bne	r3,zero,14b20 <___vfiprintf_internal_r+0x74>
   14b04:	d9402017 	ldw	r5,128(sp)
   14b08:	00f7ffc4 	movi	r3,-8193
   14b0c:	10880014 	ori	r2,r2,8192
   14b10:	29001917 	ldw	r4,100(r5)
   14b14:	2880030d 	sth	r2,12(r5)
   14b18:	20c6703a 	and	r3,r4,r3
   14b1c:	28c01915 	stw	r3,100(r5)
   14b20:	10c0020c 	andi	r3,r2,8
   14b24:	1800a526 	beq	r3,zero,14dbc <___vfiprintf_internal_r+0x310>
   14b28:	d9002017 	ldw	r4,128(sp)
   14b2c:	20c00417 	ldw	r3,16(r4)
   14b30:	1800a226 	beq	r3,zero,14dbc <___vfiprintf_internal_r+0x310>
   14b34:	1080068c 	andi	r2,r2,26
   14b38:	00c00284 	movi	r3,10
   14b3c:	10c0a826 	beq	r2,r3,14de0 <___vfiprintf_internal_r+0x334>
   14b40:	d9001a04 	addi	r4,sp,104
   14b44:	d94019c4 	addi	r5,sp,103
   14b48:	048000b4 	movhi	r18,2
   14b4c:	2145c83a 	sub	r2,r4,r5
   14b50:	94b15e04 	addi	r18,r18,-14984
   14b54:	d9001e15 	stw	r4,120(sp)
   14b58:	d9401f15 	stw	r5,124(sp)
   14b5c:	dec01a15 	stw	sp,104(sp)
   14b60:	d8001c15 	stw	zero,112(sp)
   14b64:	d8001b15 	stw	zero,108(sp)
   14b68:	d811883a 	mov	r8,sp
   14b6c:	d8002615 	stw	zero,152(sp)
   14b70:	d8002415 	stw	zero,144(sp)
   14b74:	d8802815 	stw	r2,160(sp)
   14b78:	a82d883a 	mov	r22,r21
   14b7c:	b0800007 	ldb	r2,0(r22)
   14b80:	10040d26 	beq	r2,zero,15bb8 <___vfiprintf_internal_r+0x110c>
   14b84:	00c00944 	movi	r3,37
   14b88:	b029883a 	mov	r20,r22
   14b8c:	10c0021e 	bne	r2,r3,14b98 <___vfiprintf_internal_r+0xec>
   14b90:	00001606 	br	14bec <___vfiprintf_internal_r+0x140>
   14b94:	10c00326 	beq	r2,r3,14ba4 <___vfiprintf_internal_r+0xf8>
   14b98:	a5000044 	addi	r20,r20,1
   14b9c:	a0800007 	ldb	r2,0(r20)
   14ba0:	103ffc1e 	bne	r2,zero,14b94 <__alt_data_end+0xfc014b94>
   14ba4:	a5a1c83a 	sub	r16,r20,r22
   14ba8:	80001026 	beq	r16,zero,14bec <___vfiprintf_internal_r+0x140>
   14bac:	d8c01c17 	ldw	r3,112(sp)
   14bb0:	d8801b17 	ldw	r2,108(sp)
   14bb4:	45800015 	stw	r22,0(r8)
   14bb8:	80c7883a 	add	r3,r16,r3
   14bbc:	10800044 	addi	r2,r2,1
   14bc0:	44000115 	stw	r16,4(r8)
   14bc4:	d8c01c15 	stw	r3,112(sp)
   14bc8:	d8801b15 	stw	r2,108(sp)
   14bcc:	010001c4 	movi	r4,7
   14bd0:	2080750e 	bge	r4,r2,14da8 <___vfiprintf_internal_r+0x2fc>
   14bd4:	1803951e 	bne	r3,zero,15a2c <___vfiprintf_internal_r+0xf80>
   14bd8:	d8c02417 	ldw	r3,144(sp)
   14bdc:	d8001b15 	stw	zero,108(sp)
   14be0:	d811883a 	mov	r8,sp
   14be4:	1c07883a 	add	r3,r3,r16
   14be8:	d8c02415 	stw	r3,144(sp)
   14bec:	a0800007 	ldb	r2,0(r20)
   14bf0:	1002e026 	beq	r2,zero,15774 <___vfiprintf_internal_r+0xcc8>
   14bf4:	a5800044 	addi	r22,r20,1
   14bf8:	a0c00047 	ldb	r3,1(r20)
   14bfc:	d8001d85 	stb	zero,118(sp)
   14c00:	0027883a 	mov	r19,zero
   14c04:	d8002305 	stb	zero,140(sp)
   14c08:	043fffc4 	movi	r16,-1
   14c0c:	d8002515 	stw	zero,148(sp)
   14c10:	0023883a 	mov	r17,zero
   14c14:	05001604 	movi	r20,88
   14c18:	05400244 	movi	r21,9
   14c1c:	402f883a 	mov	r23,r8
   14c20:	b5800044 	addi	r22,r22,1
   14c24:	18bff804 	addi	r2,r3,-32
   14c28:	a0827736 	bltu	r20,r2,15608 <___vfiprintf_internal_r+0xb5c>
   14c2c:	100490ba 	slli	r2,r2,2
   14c30:	01000074 	movhi	r4,1
   14c34:	21131104 	addi	r4,r4,19524
   14c38:	1105883a 	add	r2,r2,r4
   14c3c:	10800017 	ldw	r2,0(r2)
   14c40:	1000683a 	jmp	r2
   14c44:	00015308 	cmpgei	zero,zero,1356
   14c48:	00015608 	cmpgei	zero,zero,1368
   14c4c:	00015608 	cmpgei	zero,zero,1368
   14c50:	00015324 	muli	zero,zero,1356
   14c54:	00015608 	cmpgei	zero,zero,1368
   14c58:	00015608 	cmpgei	zero,zero,1368
   14c5c:	00015608 	cmpgei	zero,zero,1368
   14c60:	00015608 	cmpgei	zero,zero,1368
   14c64:	00015608 	cmpgei	zero,zero,1368
   14c68:	00015608 	cmpgei	zero,zero,1368
   14c6c:	0001552c 	andhi	zero,zero,1364
   14c70:	00015550 	cmplti	zero,zero,1365
   14c74:	00015608 	cmpgei	zero,zero,1368
   14c78:	00014e48 	cmpgei	zero,zero,1337
   14c7c:	00015564 	muli	zero,zero,1365
   14c80:	00015608 	cmpgei	zero,zero,1368
   14c84:	00015330 	cmpltui	zero,zero,1356
   14c88:	0001533c 	xorhi	zero,zero,1356
   14c8c:	0001533c 	xorhi	zero,zero,1356
   14c90:	0001533c 	xorhi	zero,zero,1356
   14c94:	0001533c 	xorhi	zero,zero,1356
   14c98:	0001533c 	xorhi	zero,zero,1356
   14c9c:	0001533c 	xorhi	zero,zero,1356
   14ca0:	0001533c 	xorhi	zero,zero,1356
   14ca4:	0001533c 	xorhi	zero,zero,1356
   14ca8:	0001533c 	xorhi	zero,zero,1356
   14cac:	00015608 	cmpgei	zero,zero,1368
   14cb0:	00015608 	cmpgei	zero,zero,1368
   14cb4:	00015608 	cmpgei	zero,zero,1368
   14cb8:	00015608 	cmpgei	zero,zero,1368
   14cbc:	00015608 	cmpgei	zero,zero,1368
   14cc0:	00015608 	cmpgei	zero,zero,1368
   14cc4:	00015608 	cmpgei	zero,zero,1368
   14cc8:	00015608 	cmpgei	zero,zero,1368
   14ccc:	00015608 	cmpgei	zero,zero,1368
   14cd0:	00015608 	cmpgei	zero,zero,1368
   14cd4:	0001537c 	xorhi	zero,zero,1357
   14cd8:	00015608 	cmpgei	zero,zero,1368
   14cdc:	00015608 	cmpgei	zero,zero,1368
   14ce0:	00015608 	cmpgei	zero,zero,1368
   14ce4:	00015608 	cmpgei	zero,zero,1368
   14ce8:	00015608 	cmpgei	zero,zero,1368
   14cec:	00015608 	cmpgei	zero,zero,1368
   14cf0:	00015608 	cmpgei	zero,zero,1368
   14cf4:	00015608 	cmpgei	zero,zero,1368
   14cf8:	00015608 	cmpgei	zero,zero,1368
   14cfc:	00015608 	cmpgei	zero,zero,1368
   14d00:	000153b8 	rdprs	zero,zero,1358
   14d04:	00015608 	cmpgei	zero,zero,1368
   14d08:	00015608 	cmpgei	zero,zero,1368
   14d0c:	00015608 	cmpgei	zero,zero,1368
   14d10:	00015608 	cmpgei	zero,zero,1368
   14d14:	00015608 	cmpgei	zero,zero,1368
   14d18:	00015414 	movui	zero,1360
   14d1c:	00015608 	cmpgei	zero,zero,1368
   14d20:	00015608 	cmpgei	zero,zero,1368
   14d24:	00015488 	cmpgei	zero,zero,1362
   14d28:	00015608 	cmpgei	zero,zero,1368
   14d2c:	00015608 	cmpgei	zero,zero,1368
   14d30:	00015608 	cmpgei	zero,zero,1368
   14d34:	00015608 	cmpgei	zero,zero,1368
   14d38:	00015608 	cmpgei	zero,zero,1368
   14d3c:	00015608 	cmpgei	zero,zero,1368
   14d40:	00015608 	cmpgei	zero,zero,1368
   14d44:	00015608 	cmpgei	zero,zero,1368
   14d48:	00015608 	cmpgei	zero,zero,1368
   14d4c:	00015608 	cmpgei	zero,zero,1368
   14d50:	00015230 	cmpltui	zero,zero,1352
   14d54:	00015260 	cmpeqi	zero,zero,1353
   14d58:	00015608 	cmpgei	zero,zero,1368
   14d5c:	00015608 	cmpgei	zero,zero,1368
   14d60:	00015608 	cmpgei	zero,zero,1368
   14d64:	000155b0 	cmpltui	zero,zero,1366
   14d68:	00015260 	cmpeqi	zero,zero,1353
   14d6c:	00015608 	cmpgei	zero,zero,1368
   14d70:	00015608 	cmpgei	zero,zero,1368
   14d74:	00015108 	cmpgei	zero,zero,1348
   14d78:	00015608 	cmpgei	zero,zero,1368
   14d7c:	0001511c 	xori	zero,zero,1348
   14d80:	00015154 	movui	zero,1349
   14d84:	00014e54 	movui	zero,1337
   14d88:	000150fc 	xorhi	zero,zero,1347
   14d8c:	00015608 	cmpgei	zero,zero,1368
   14d90:	000154c8 	cmpgei	zero,zero,1363
   14d94:	00015608 	cmpgei	zero,zero,1368
   14d98:	00015514 	movui	zero,1364
   14d9c:	00015608 	cmpgei	zero,zero,1368
   14da0:	00015608 	cmpgei	zero,zero,1368
   14da4:	000151d8 	cmpnei	zero,zero,1351
   14da8:	42000204 	addi	r8,r8,8
   14dac:	d8c02417 	ldw	r3,144(sp)
   14db0:	1c07883a 	add	r3,r3,r16
   14db4:	d8c02415 	stw	r3,144(sp)
   14db8:	003f8c06 	br	14bec <__alt_data_end+0xfc014bec>
   14dbc:	d9402017 	ldw	r5,128(sp)
   14dc0:	d9002117 	ldw	r4,132(sp)
   14dc4:	000f4e80 	call	f4e8 <__swsetup_r>
   14dc8:	1003c11e 	bne	r2,zero,15cd0 <___vfiprintf_internal_r+0x1224>
   14dcc:	d9402017 	ldw	r5,128(sp)
   14dd0:	00c00284 	movi	r3,10
   14dd4:	2880030b 	ldhu	r2,12(r5)
   14dd8:	1080068c 	andi	r2,r2,26
   14ddc:	10ff581e 	bne	r2,r3,14b40 <__alt_data_end+0xfc014b40>
   14de0:	d8c02017 	ldw	r3,128(sp)
   14de4:	1880038f 	ldh	r2,14(r3)
   14de8:	103f5516 	blt	r2,zero,14b40 <__alt_data_end+0xfc014b40>
   14dec:	d9c02217 	ldw	r7,136(sp)
   14df0:	d9002117 	ldw	r4,132(sp)
   14df4:	a80d883a 	mov	r6,r21
   14df8:	180b883a 	mov	r5,r3
   14dfc:	0015fd40 	call	15fd4 <__sbprintf>
   14e00:	dfc03517 	ldw	ra,212(sp)
   14e04:	df003417 	ldw	fp,208(sp)
   14e08:	ddc03317 	ldw	r23,204(sp)
   14e0c:	dd803217 	ldw	r22,200(sp)
   14e10:	dd403117 	ldw	r21,196(sp)
   14e14:	dd003017 	ldw	r20,192(sp)
   14e18:	dcc02f17 	ldw	r19,188(sp)
   14e1c:	dc802e17 	ldw	r18,184(sp)
   14e20:	dc402d17 	ldw	r17,180(sp)
   14e24:	dc002c17 	ldw	r16,176(sp)
   14e28:	dec03604 	addi	sp,sp,216
   14e2c:	f800283a 	ret
   14e30:	00116740 	call	11674 <__sinit>
   14e34:	003f2f06 	br	14af4 <__alt_data_end+0xfc014af4>
   14e38:	d8c02517 	ldw	r3,148(sp)
   14e3c:	d8802215 	stw	r2,136(sp)
   14e40:	00c7c83a 	sub	r3,zero,r3
   14e44:	d8c02515 	stw	r3,148(sp)
   14e48:	8c400114 	ori	r17,r17,4
   14e4c:	b0c00007 	ldb	r3,0(r22)
   14e50:	003f7306 	br	14c20 <__alt_data_end+0xfc014c20>
   14e54:	00800c04 	movi	r2,48
   14e58:	d9402217 	ldw	r5,136(sp)
   14e5c:	d8801d05 	stb	r2,116(sp)
   14e60:	00801e04 	movi	r2,120
   14e64:	d8801d45 	stb	r2,117(sp)
   14e68:	d8001d85 	stb	zero,118(sp)
   14e6c:	b811883a 	mov	r8,r23
   14e70:	28c00104 	addi	r3,r5,4
   14e74:	2cc00017 	ldw	r19,0(r5)
   14e78:	0029883a 	mov	r20,zero
   14e7c:	88800094 	ori	r2,r17,2
   14e80:	80032516 	blt	r16,zero,15b18 <___vfiprintf_internal_r+0x106c>
   14e84:	00bfdfc4 	movi	r2,-129
   14e88:	88a2703a 	and	r17,r17,r2
   14e8c:	d8c02215 	stw	r3,136(sp)
   14e90:	8c400094 	ori	r17,r17,2
   14e94:	98032a1e 	bne	r19,zero,15b40 <___vfiprintf_internal_r+0x1094>
   14e98:	008000b4 	movhi	r2,2
   14e9c:	10b0fe04 	addi	r2,r2,-15368
   14ea0:	d8802615 	stw	r2,152(sp)
   14ea4:	002b883a 	mov	r21,zero
   14ea8:	8001741e 	bne	r16,zero,1547c <___vfiprintf_internal_r+0x9d0>
   14eac:	0021883a 	mov	r16,zero
   14eb0:	0029883a 	mov	r20,zero
   14eb4:	ddc01a04 	addi	r23,sp,104
   14eb8:	8027883a 	mov	r19,r16
   14ebc:	8500010e 	bge	r16,r20,14ec4 <___vfiprintf_internal_r+0x418>
   14ec0:	a027883a 	mov	r19,r20
   14ec4:	ad403fcc 	andi	r21,r21,255
   14ec8:	ad40201c 	xori	r21,r21,128
   14ecc:	ad7fe004 	addi	r21,r21,-128
   14ed0:	a8000126 	beq	r21,zero,14ed8 <___vfiprintf_internal_r+0x42c>
   14ed4:	9cc00044 	addi	r19,r19,1
   14ed8:	89c0008c 	andi	r7,r17,2
   14edc:	38000126 	beq	r7,zero,14ee4 <___vfiprintf_internal_r+0x438>
   14ee0:	9cc00084 	addi	r19,r19,2
   14ee4:	88c0210c 	andi	r3,r17,132
   14ee8:	1801dd1e 	bne	r3,zero,15660 <___vfiprintf_internal_r+0xbb4>
   14eec:	d9402517 	ldw	r5,148(sp)
   14ef0:	2cebc83a 	sub	r21,r5,r19
   14ef4:	0541da0e 	bge	zero,r21,15660 <___vfiprintf_internal_r+0xbb4>
   14ef8:	07000404 	movi	fp,16
   14efc:	d8801c17 	ldw	r2,112(sp)
   14f00:	e543be0e 	bge	fp,r21,15dfc <___vfiprintf_internal_r+0x1350>
   14f04:	014000b4 	movhi	r5,2
   14f08:	29716204 	addi	r5,r5,-14968
   14f0c:	dc002715 	stw	r16,156(sp)
   14f10:	d9801b17 	ldw	r6,108(sp)
   14f14:	a821883a 	mov	r16,r21
   14f18:	d9402315 	stw	r5,140(sp)
   14f1c:	028001c4 	movi	r10,7
   14f20:	d9c02915 	stw	r7,164(sp)
   14f24:	182b883a 	mov	r21,r3
   14f28:	00000506 	br	14f40 <___vfiprintf_internal_r+0x494>
   14f2c:	31000084 	addi	r4,r6,2
   14f30:	42000204 	addi	r8,r8,8
   14f34:	180d883a 	mov	r6,r3
   14f38:	843ffc04 	addi	r16,r16,-16
   14f3c:	e4000f0e 	bge	fp,r16,14f7c <___vfiprintf_internal_r+0x4d0>
   14f40:	010000b4 	movhi	r4,2
   14f44:	10800404 	addi	r2,r2,16
   14f48:	30c00044 	addi	r3,r6,1
   14f4c:	21316204 	addi	r4,r4,-14968
   14f50:	41000015 	stw	r4,0(r8)
   14f54:	47000115 	stw	fp,4(r8)
   14f58:	d8801c15 	stw	r2,112(sp)
   14f5c:	d8c01b15 	stw	r3,108(sp)
   14f60:	50fff20e 	bge	r10,r3,14f2c <__alt_data_end+0xfc014f2c>
   14f64:	1001b21e 	bne	r2,zero,15630 <___vfiprintf_internal_r+0xb84>
   14f68:	843ffc04 	addi	r16,r16,-16
   14f6c:	000d883a 	mov	r6,zero
   14f70:	01000044 	movi	r4,1
   14f74:	d811883a 	mov	r8,sp
   14f78:	e43ff116 	blt	fp,r16,14f40 <__alt_data_end+0xfc014f40>
   14f7c:	a807883a 	mov	r3,r21
   14f80:	d9c02917 	ldw	r7,164(sp)
   14f84:	802b883a 	mov	r21,r16
   14f88:	dc002717 	ldw	r16,156(sp)
   14f8c:	d9402317 	ldw	r5,140(sp)
   14f90:	a885883a 	add	r2,r21,r2
   14f94:	45400115 	stw	r21,4(r8)
   14f98:	41400015 	stw	r5,0(r8)
   14f9c:	d8801c15 	stw	r2,112(sp)
   14fa0:	d9001b15 	stw	r4,108(sp)
   14fa4:	014001c4 	movi	r5,7
   14fa8:	29026216 	blt	r5,r4,15934 <___vfiprintf_internal_r+0xe88>
   14fac:	d9801d87 	ldb	r6,118(sp)
   14fb0:	42000204 	addi	r8,r8,8
   14fb4:	21400044 	addi	r5,r4,1
   14fb8:	3001ae1e 	bne	r6,zero,15674 <___vfiprintf_internal_r+0xbc8>
   14fbc:	3801bb26 	beq	r7,zero,156ac <___vfiprintf_internal_r+0xc00>
   14fc0:	d9001d04 	addi	r4,sp,116
   14fc4:	10800084 	addi	r2,r2,2
   14fc8:	41000015 	stw	r4,0(r8)
   14fcc:	01000084 	movi	r4,2
   14fd0:	41000115 	stw	r4,4(r8)
   14fd4:	d8801c15 	stw	r2,112(sp)
   14fd8:	d9401b15 	stw	r5,108(sp)
   14fdc:	010001c4 	movi	r4,7
   14fe0:	2142680e 	bge	r4,r5,15984 <___vfiprintf_internal_r+0xed8>
   14fe4:	1002b11e 	bne	r2,zero,15aac <___vfiprintf_internal_r+0x1000>
   14fe8:	01802004 	movi	r6,128
   14fec:	01400044 	movi	r5,1
   14ff0:	0009883a 	mov	r4,zero
   14ff4:	d811883a 	mov	r8,sp
   14ff8:	1981ae1e 	bne	r3,r6,156b4 <___vfiprintf_internal_r+0xc08>
   14ffc:	d8c02517 	ldw	r3,148(sp)
   15000:	1cf9c83a 	sub	fp,r3,r19
   15004:	0701ab0e 	bge	zero,fp,156b4 <___vfiprintf_internal_r+0xc08>
   15008:	05400404 	movi	r21,16
   1500c:	af03a90e 	bge	r21,fp,15eb4 <___vfiprintf_internal_r+0x1408>
   15010:	014000b4 	movhi	r5,2
   15014:	29715e04 	addi	r5,r5,-14984
   15018:	d9402315 	stw	r5,140(sp)
   1501c:	01c001c4 	movi	r7,7
   15020:	00000506 	br	15038 <___vfiprintf_internal_r+0x58c>
   15024:	21800084 	addi	r6,r4,2
   15028:	42000204 	addi	r8,r8,8
   1502c:	1809883a 	mov	r4,r3
   15030:	e73ffc04 	addi	fp,fp,-16
   15034:	af000d0e 	bge	r21,fp,1506c <___vfiprintf_internal_r+0x5c0>
   15038:	10800404 	addi	r2,r2,16
   1503c:	20c00044 	addi	r3,r4,1
   15040:	44800015 	stw	r18,0(r8)
   15044:	45400115 	stw	r21,4(r8)
   15048:	d8801c15 	stw	r2,112(sp)
   1504c:	d8c01b15 	stw	r3,108(sp)
   15050:	38fff40e 	bge	r7,r3,15024 <__alt_data_end+0xfc015024>
   15054:	10022b1e 	bne	r2,zero,15904 <___vfiprintf_internal_r+0xe58>
   15058:	e73ffc04 	addi	fp,fp,-16
   1505c:	01800044 	movi	r6,1
   15060:	0009883a 	mov	r4,zero
   15064:	d811883a 	mov	r8,sp
   15068:	af3ff316 	blt	r21,fp,15038 <__alt_data_end+0xfc015038>
   1506c:	d8c02317 	ldw	r3,140(sp)
   15070:	1705883a 	add	r2,r2,fp
   15074:	47000115 	stw	fp,4(r8)
   15078:	40c00015 	stw	r3,0(r8)
   1507c:	d8801c15 	stw	r2,112(sp)
   15080:	d9801b15 	stw	r6,108(sp)
   15084:	00c001c4 	movi	r3,7
   15088:	19829416 	blt	r3,r6,15adc <___vfiprintf_internal_r+0x1030>
   1508c:	8521c83a 	sub	r16,r16,r20
   15090:	42000204 	addi	r8,r8,8
   15094:	31400044 	addi	r5,r6,1
   15098:	3009883a 	mov	r4,r6
   1509c:	04018716 	blt	zero,r16,156bc <___vfiprintf_internal_r+0xc10>
   150a0:	a085883a 	add	r2,r20,r2
   150a4:	45c00015 	stw	r23,0(r8)
   150a8:	45000115 	stw	r20,4(r8)
   150ac:	d8801c15 	stw	r2,112(sp)
   150b0:	d9401b15 	stw	r5,108(sp)
   150b4:	00c001c4 	movi	r3,7
   150b8:	1941c20e 	bge	r3,r5,157c4 <___vfiprintf_internal_r+0xd18>
   150bc:	1002531e 	bne	r2,zero,15a0c <___vfiprintf_internal_r+0xf60>
   150c0:	d8001b15 	stw	zero,108(sp)
   150c4:	8c40010c 	andi	r17,r17,4
   150c8:	88023226 	beq	r17,zero,15994 <___vfiprintf_internal_r+0xee8>
   150cc:	d9002517 	ldw	r4,148(sp)
   150d0:	24e3c83a 	sub	r17,r4,r19
   150d4:	04432916 	blt	zero,r17,15d7c <___vfiprintf_internal_r+0x12d0>
   150d8:	d8802517 	ldw	r2,148(sp)
   150dc:	14c0010e 	bge	r2,r19,150e4 <___vfiprintf_internal_r+0x638>
   150e0:	9805883a 	mov	r2,r19
   150e4:	d8c02417 	ldw	r3,144(sp)
   150e8:	1887883a 	add	r3,r3,r2
   150ec:	d8c02415 	stw	r3,144(sp)
   150f0:	d8001b15 	stw	zero,108(sp)
   150f4:	d811883a 	mov	r8,sp
   150f8:	003ea006 	br	14b7c <__alt_data_end+0xfc014b7c>
   150fc:	8c400814 	ori	r17,r17,32
   15100:	b0c00007 	ldb	r3,0(r22)
   15104:	003ec606 	br	14c20 <__alt_data_end+0xfc014c20>
   15108:	b0c00007 	ldb	r3,0(r22)
   1510c:	00801b04 	movi	r2,108
   15110:	18832026 	beq	r3,r2,15d94 <___vfiprintf_internal_r+0x12e8>
   15114:	8c400414 	ori	r17,r17,16
   15118:	003ec106 	br	14c20 <__alt_data_end+0xfc014c20>
   1511c:	9cc03fcc 	andi	r19,r19,255
   15120:	b811883a 	mov	r8,r23
   15124:	9803981e 	bne	r19,zero,15f88 <___vfiprintf_internal_r+0x14dc>
   15128:	8880080c 	andi	r2,r17,32
   1512c:	1002be26 	beq	r2,zero,15c28 <___vfiprintf_internal_r+0x117c>
   15130:	d9002217 	ldw	r4,136(sp)
   15134:	d9402417 	ldw	r5,144(sp)
   15138:	20800017 	ldw	r2,0(r4)
   1513c:	2807d7fa 	srai	r3,r5,31
   15140:	21000104 	addi	r4,r4,4
   15144:	d9002215 	stw	r4,136(sp)
   15148:	11400015 	stw	r5,0(r2)
   1514c:	10c00115 	stw	r3,4(r2)
   15150:	003e8a06 	br	14b7c <__alt_data_end+0xfc014b7c>
   15154:	9cc03fcc 	andi	r19,r19,255
   15158:	b811883a 	mov	r8,r23
   1515c:	9803871e 	bne	r19,zero,15f7c <___vfiprintf_internal_r+0x14d0>
   15160:	8880080c 	andi	r2,r17,32
   15164:	10009a26 	beq	r2,zero,153d0 <___vfiprintf_internal_r+0x924>
   15168:	d9002217 	ldw	r4,136(sp)
   1516c:	d8001d85 	stb	zero,118(sp)
   15170:	20800204 	addi	r2,r4,8
   15174:	24c00017 	ldw	r19,0(r4)
   15178:	25000117 	ldw	r20,4(r4)
   1517c:	8002a416 	blt	r16,zero,15c10 <___vfiprintf_internal_r+0x1164>
   15180:	013fdfc4 	movi	r4,-129
   15184:	9d06b03a 	or	r3,r19,r20
   15188:	d8802215 	stw	r2,136(sp)
   1518c:	8922703a 	and	r17,r17,r4
   15190:	18009b26 	beq	r3,zero,15400 <___vfiprintf_internal_r+0x954>
   15194:	002b883a 	mov	r21,zero
   15198:	ddc01a04 	addi	r23,sp,104
   1519c:	9806d0fa 	srli	r3,r19,3
   151a0:	a008977a 	slli	r4,r20,29
   151a4:	a028d0fa 	srli	r20,r20,3
   151a8:	9cc001cc 	andi	r19,r19,7
   151ac:	98800c04 	addi	r2,r19,48
   151b0:	bdffffc4 	addi	r23,r23,-1
   151b4:	20e6b03a 	or	r19,r4,r3
   151b8:	b8800005 	stb	r2,0(r23)
   151bc:	9d06b03a 	or	r3,r19,r20
   151c0:	183ff61e 	bne	r3,zero,1519c <__alt_data_end+0xfc01519c>
   151c4:	88c0004c 	andi	r3,r17,1
   151c8:	18021f1e 	bne	r3,zero,15a48 <___vfiprintf_internal_r+0xf9c>
   151cc:	d9401e17 	ldw	r5,120(sp)
   151d0:	2de9c83a 	sub	r20,r5,r23
   151d4:	003f3806 	br	14eb8 <__alt_data_end+0xfc014eb8>
   151d8:	9cc03fcc 	andi	r19,r19,255
   151dc:	b811883a 	mov	r8,r23
   151e0:	98034f1e 	bne	r19,zero,15f20 <___vfiprintf_internal_r+0x1474>
   151e4:	008000b4 	movhi	r2,2
   151e8:	10b0fe04 	addi	r2,r2,-15368
   151ec:	d8802615 	stw	r2,152(sp)
   151f0:	8880080c 	andi	r2,r17,32
   151f4:	1000ac26 	beq	r2,zero,154a8 <___vfiprintf_internal_r+0x9fc>
   151f8:	d9002217 	ldw	r4,136(sp)
   151fc:	24c00017 	ldw	r19,0(r4)
   15200:	25000117 	ldw	r20,4(r4)
   15204:	21000204 	addi	r4,r4,8
   15208:	d9002215 	stw	r4,136(sp)
   1520c:	8880004c 	andi	r2,r17,1
   15210:	1001e726 	beq	r2,zero,159b0 <___vfiprintf_internal_r+0xf04>
   15214:	9d04b03a 	or	r2,r19,r20
   15218:	10025c1e 	bne	r2,zero,15b8c <___vfiprintf_internal_r+0x10e0>
   1521c:	d8001d85 	stb	zero,118(sp)
   15220:	80024416 	blt	r16,zero,15b34 <___vfiprintf_internal_r+0x1088>
   15224:	00bfdfc4 	movi	r2,-129
   15228:	88a2703a 	and	r17,r17,r2
   1522c:	003f1d06 	br	14ea4 <__alt_data_end+0xfc014ea4>
   15230:	d8c02217 	ldw	r3,136(sp)
   15234:	04c00044 	movi	r19,1
   15238:	b811883a 	mov	r8,r23
   1523c:	18800017 	ldw	r2,0(r3)
   15240:	18c00104 	addi	r3,r3,4
   15244:	d8001d85 	stb	zero,118(sp)
   15248:	d8801005 	stb	r2,64(sp)
   1524c:	d8c02215 	stw	r3,136(sp)
   15250:	9829883a 	mov	r20,r19
   15254:	ddc01004 	addi	r23,sp,64
   15258:	0021883a 	mov	r16,zero
   1525c:	003f1e06 	br	14ed8 <__alt_data_end+0xfc014ed8>
   15260:	9cc03fcc 	andi	r19,r19,255
   15264:	b811883a 	mov	r8,r23
   15268:	9803331e 	bne	r19,zero,15f38 <___vfiprintf_internal_r+0x148c>
   1526c:	8880080c 	andi	r2,r17,32
   15270:	10004826 	beq	r2,zero,15394 <___vfiprintf_internal_r+0x8e8>
   15274:	d9002217 	ldw	r4,136(sp)
   15278:	20800117 	ldw	r2,4(r4)
   1527c:	24c00017 	ldw	r19,0(r4)
   15280:	21000204 	addi	r4,r4,8
   15284:	d9002215 	stw	r4,136(sp)
   15288:	1029883a 	mov	r20,r2
   1528c:	10024c16 	blt	r2,zero,15bc0 <___vfiprintf_internal_r+0x1114>
   15290:	dd401d83 	ldbu	r21,118(sp)
   15294:	80007116 	blt	r16,zero,1545c <___vfiprintf_internal_r+0x9b0>
   15298:	00ffdfc4 	movi	r3,-129
   1529c:	9d04b03a 	or	r2,r19,r20
   152a0:	88e2703a 	and	r17,r17,r3
   152a4:	1000d126 	beq	r2,zero,155ec <___vfiprintf_internal_r+0xb40>
   152a8:	a0023526 	beq	r20,zero,15b80 <___vfiprintf_internal_r+0x10d4>
   152ac:	ddc01a04 	addi	r23,sp,104
   152b0:	4039883a 	mov	fp,r8
   152b4:	9809883a 	mov	r4,r19
   152b8:	a00b883a 	mov	r5,r20
   152bc:	01800284 	movi	r6,10
   152c0:	000f883a 	mov	r7,zero
   152c4:	0016fd80 	call	16fd8 <__umoddi3>
   152c8:	10800c04 	addi	r2,r2,48
   152cc:	bdffffc4 	addi	r23,r23,-1
   152d0:	9809883a 	mov	r4,r19
   152d4:	a00b883a 	mov	r5,r20
   152d8:	b8800005 	stb	r2,0(r23)
   152dc:	01800284 	movi	r6,10
   152e0:	000f883a 	mov	r7,zero
   152e4:	00169dc0 	call	169dc <__udivdi3>
   152e8:	1027883a 	mov	r19,r2
   152ec:	10c4b03a 	or	r2,r2,r3
   152f0:	1829883a 	mov	r20,r3
   152f4:	103fef1e 	bne	r2,zero,152b4 <__alt_data_end+0xfc0152b4>
   152f8:	d9001e17 	ldw	r4,120(sp)
   152fc:	e011883a 	mov	r8,fp
   15300:	25e9c83a 	sub	r20,r4,r23
   15304:	003eec06 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15308:	d8802307 	ldb	r2,140(sp)
   1530c:	1002361e 	bne	r2,zero,15be8 <___vfiprintf_internal_r+0x113c>
   15310:	00c00804 	movi	r3,32
   15314:	d8c02305 	stb	r3,140(sp)
   15318:	04c00044 	movi	r19,1
   1531c:	b0c00007 	ldb	r3,0(r22)
   15320:	003e3f06 	br	14c20 <__alt_data_end+0xfc014c20>
   15324:	8c400054 	ori	r17,r17,1
   15328:	b0c00007 	ldb	r3,0(r22)
   1532c:	003e3c06 	br	14c20 <__alt_data_end+0xfc014c20>
   15330:	8c402014 	ori	r17,r17,128
   15334:	b0c00007 	ldb	r3,0(r22)
   15338:	003e3906 	br	14c20 <__alt_data_end+0xfc014c20>
   1533c:	dc002715 	stw	r16,156(sp)
   15340:	d8002515 	stw	zero,148(sp)
   15344:	1f3ff404 	addi	fp,r3,-48
   15348:	0009883a 	mov	r4,zero
   1534c:	b021883a 	mov	r16,r22
   15350:	01400284 	movi	r5,10
   15354:	000cefc0 	call	cefc <__mulsi3>
   15358:	80c00007 	ldb	r3,0(r16)
   1535c:	e089883a 	add	r4,fp,r2
   15360:	b5800044 	addi	r22,r22,1
   15364:	1f3ff404 	addi	fp,r3,-48
   15368:	b021883a 	mov	r16,r22
   1536c:	af3ff82e 	bgeu	r21,fp,15350 <__alt_data_end+0xfc015350>
   15370:	d9002515 	stw	r4,148(sp)
   15374:	dc002717 	ldw	r16,156(sp)
   15378:	003e2a06 	br	14c24 <__alt_data_end+0xfc014c24>
   1537c:	9cc03fcc 	andi	r19,r19,255
   15380:	b811883a 	mov	r8,r23
   15384:	9802e91e 	bne	r19,zero,15f2c <___vfiprintf_internal_r+0x1480>
   15388:	8c400414 	ori	r17,r17,16
   1538c:	8880080c 	andi	r2,r17,32
   15390:	103fb81e 	bne	r2,zero,15274 <__alt_data_end+0xfc015274>
   15394:	8880040c 	andi	r2,r17,16
   15398:	10022e26 	beq	r2,zero,15c54 <___vfiprintf_internal_r+0x11a8>
   1539c:	d9402217 	ldw	r5,136(sp)
   153a0:	2cc00017 	ldw	r19,0(r5)
   153a4:	29400104 	addi	r5,r5,4
   153a8:	d9402215 	stw	r5,136(sp)
   153ac:	9829d7fa 	srai	r20,r19,31
   153b0:	a005883a 	mov	r2,r20
   153b4:	003fb506 	br	1528c <__alt_data_end+0xfc01528c>
   153b8:	9cc03fcc 	andi	r19,r19,255
   153bc:	b811883a 	mov	r8,r23
   153c0:	9802fa1e 	bne	r19,zero,15fac <___vfiprintf_internal_r+0x1500>
   153c4:	8c400414 	ori	r17,r17,16
   153c8:	8880080c 	andi	r2,r17,32
   153cc:	103f661e 	bne	r2,zero,15168 <__alt_data_end+0xfc015168>
   153d0:	8880040c 	andi	r2,r17,16
   153d4:	10020626 	beq	r2,zero,15bf0 <___vfiprintf_internal_r+0x1144>
   153d8:	d9402217 	ldw	r5,136(sp)
   153dc:	d8001d85 	stb	zero,118(sp)
   153e0:	0029883a 	mov	r20,zero
   153e4:	28800104 	addi	r2,r5,4
   153e8:	2cc00017 	ldw	r19,0(r5)
   153ec:	80020816 	blt	r16,zero,15c10 <___vfiprintf_internal_r+0x1164>
   153f0:	00ffdfc4 	movi	r3,-129
   153f4:	d8802215 	stw	r2,136(sp)
   153f8:	88e2703a 	and	r17,r17,r3
   153fc:	983f651e 	bne	r19,zero,15194 <__alt_data_end+0xfc015194>
   15400:	002b883a 	mov	r21,zero
   15404:	8002cf26 	beq	r16,zero,15f44 <___vfiprintf_internal_r+0x1498>
   15408:	0027883a 	mov	r19,zero
   1540c:	0029883a 	mov	r20,zero
   15410:	003f6106 	br	15198 <__alt_data_end+0xfc015198>
   15414:	9cc03fcc 	andi	r19,r19,255
   15418:	b811883a 	mov	r8,r23
   1541c:	9802e01e 	bne	r19,zero,15fa0 <___vfiprintf_internal_r+0x14f4>
   15420:	8c400414 	ori	r17,r17,16
   15424:	8880080c 	andi	r2,r17,32
   15428:	1000641e 	bne	r2,zero,155bc <___vfiprintf_internal_r+0xb10>
   1542c:	8880040c 	andi	r2,r17,16
   15430:	1001c81e 	bne	r2,zero,15b54 <___vfiprintf_internal_r+0x10a8>
   15434:	8880100c 	andi	r2,r17,64
   15438:	d8001d85 	stb	zero,118(sp)
   1543c:	1002281e 	bne	r2,zero,15ce0 <___vfiprintf_internal_r+0x1234>
   15440:	d9002217 	ldw	r4,136(sp)
   15444:	0029883a 	mov	r20,zero
   15448:	20800104 	addi	r2,r4,4
   1544c:	24c00017 	ldw	r19,0(r4)
   15450:	8001c60e 	bge	r16,zero,15b6c <___vfiprintf_internal_r+0x10c0>
   15454:	d8802215 	stw	r2,136(sp)
   15458:	002b883a 	mov	r21,zero
   1545c:	9d04b03a 	or	r2,r19,r20
   15460:	103f911e 	bne	r2,zero,152a8 <__alt_data_end+0xfc0152a8>
   15464:	00800044 	movi	r2,1
   15468:	10803fcc 	andi	r2,r2,255
   1546c:	00c00044 	movi	r3,1
   15470:	10c05f26 	beq	r2,r3,155f0 <___vfiprintf_internal_r+0xb44>
   15474:	00c00084 	movi	r3,2
   15478:	10ffe31e 	bne	r2,r3,15408 <__alt_data_end+0xfc015408>
   1547c:	0027883a 	mov	r19,zero
   15480:	0029883a 	mov	r20,zero
   15484:	00015106 	br	159cc <___vfiprintf_internal_r+0xf20>
   15488:	9cc03fcc 	andi	r19,r19,255
   1548c:	b811883a 	mov	r8,r23
   15490:	9802c01e 	bne	r19,zero,15f94 <___vfiprintf_internal_r+0x14e8>
   15494:	014000b4 	movhi	r5,2
   15498:	2970f904 	addi	r5,r5,-15388
   1549c:	d9402615 	stw	r5,152(sp)
   154a0:	8880080c 	andi	r2,r17,32
   154a4:	103f541e 	bne	r2,zero,151f8 <__alt_data_end+0xfc0151f8>
   154a8:	8880040c 	andi	r2,r17,16
   154ac:	1001f226 	beq	r2,zero,15c78 <___vfiprintf_internal_r+0x11cc>
   154b0:	d9402217 	ldw	r5,136(sp)
   154b4:	0029883a 	mov	r20,zero
   154b8:	2cc00017 	ldw	r19,0(r5)
   154bc:	29400104 	addi	r5,r5,4
   154c0:	d9402215 	stw	r5,136(sp)
   154c4:	003f5106 	br	1520c <__alt_data_end+0xfc01520c>
   154c8:	d8c02217 	ldw	r3,136(sp)
   154cc:	b811883a 	mov	r8,r23
   154d0:	d8001d85 	stb	zero,118(sp)
   154d4:	1dc00017 	ldw	r23,0(r3)
   154d8:	1f000104 	addi	fp,r3,4
   154dc:	b8025926 	beq	r23,zero,15e44 <___vfiprintf_internal_r+0x1398>
   154e0:	80023316 	blt	r16,zero,15db0 <___vfiprintf_internal_r+0x1304>
   154e4:	800d883a 	mov	r6,r16
   154e8:	000b883a 	mov	r5,zero
   154ec:	b809883a 	mov	r4,r23
   154f0:	da002a15 	stw	r8,168(sp)
   154f4:	0012bec0 	call	12bec <memchr>
   154f8:	da002a17 	ldw	r8,168(sp)
   154fc:	10026826 	beq	r2,zero,15ea0 <___vfiprintf_internal_r+0x13f4>
   15500:	15e9c83a 	sub	r20,r2,r23
   15504:	dd401d83 	ldbu	r21,118(sp)
   15508:	df002215 	stw	fp,136(sp)
   1550c:	0021883a 	mov	r16,zero
   15510:	003e6906 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15514:	9cc03fcc 	andi	r19,r19,255
   15518:	b811883a 	mov	r8,r23
   1551c:	983fc126 	beq	r19,zero,15424 <__alt_data_end+0xfc015424>
   15520:	d8c02303 	ldbu	r3,140(sp)
   15524:	d8c01d85 	stb	r3,118(sp)
   15528:	003fbe06 	br	15424 <__alt_data_end+0xfc015424>
   1552c:	d9002217 	ldw	r4,136(sp)
   15530:	d9402217 	ldw	r5,136(sp)
   15534:	21000017 	ldw	r4,0(r4)
   15538:	28800104 	addi	r2,r5,4
   1553c:	d9002515 	stw	r4,148(sp)
   15540:	203e3d16 	blt	r4,zero,14e38 <__alt_data_end+0xfc014e38>
   15544:	d8802215 	stw	r2,136(sp)
   15548:	b0c00007 	ldb	r3,0(r22)
   1554c:	003db406 	br	14c20 <__alt_data_end+0xfc014c20>
   15550:	00c00ac4 	movi	r3,43
   15554:	d8c02305 	stb	r3,140(sp)
   15558:	04c00044 	movi	r19,1
   1555c:	b0c00007 	ldb	r3,0(r22)
   15560:	003daf06 	br	14c20 <__alt_data_end+0xfc014c20>
   15564:	b0c00007 	ldb	r3,0(r22)
   15568:	01000a84 	movi	r4,42
   1556c:	b4000044 	addi	r16,r22,1
   15570:	19025e26 	beq	r3,r4,15eec <___vfiprintf_internal_r+0x1440>
   15574:	1f3ff404 	addi	fp,r3,-48
   15578:	0009883a 	mov	r4,zero
   1557c:	af025236 	bltu	r21,fp,15ec8 <___vfiprintf_internal_r+0x141c>
   15580:	01400284 	movi	r5,10
   15584:	000cefc0 	call	cefc <__mulsi3>
   15588:	80c00007 	ldb	r3,0(r16)
   1558c:	1709883a 	add	r4,r2,fp
   15590:	85800044 	addi	r22,r16,1
   15594:	1f3ff404 	addi	fp,r3,-48
   15598:	b021883a 	mov	r16,r22
   1559c:	af3ff82e 	bgeu	r21,fp,15580 <__alt_data_end+0xfc015580>
   155a0:	2021883a 	mov	r16,r4
   155a4:	203d9f0e 	bge	r4,zero,14c24 <__alt_data_end+0xfc014c24>
   155a8:	043fffc4 	movi	r16,-1
   155ac:	003d9d06 	br	14c24 <__alt_data_end+0xfc014c24>
   155b0:	8c401014 	ori	r17,r17,64
   155b4:	b0c00007 	ldb	r3,0(r22)
   155b8:	003d9906 	br	14c20 <__alt_data_end+0xfc014c20>
   155bc:	d9002217 	ldw	r4,136(sp)
   155c0:	d8001d85 	stb	zero,118(sp)
   155c4:	20c00204 	addi	r3,r4,8
   155c8:	24c00017 	ldw	r19,0(r4)
   155cc:	25000117 	ldw	r20,4(r4)
   155d0:	8001e716 	blt	r16,zero,15d70 <___vfiprintf_internal_r+0x12c4>
   155d4:	013fdfc4 	movi	r4,-129
   155d8:	9d04b03a 	or	r2,r19,r20
   155dc:	d8c02215 	stw	r3,136(sp)
   155e0:	8922703a 	and	r17,r17,r4
   155e4:	002b883a 	mov	r21,zero
   155e8:	103f2f1e 	bne	r2,zero,152a8 <__alt_data_end+0xfc0152a8>
   155ec:	803e2f26 	beq	r16,zero,14eac <__alt_data_end+0xfc014eac>
   155f0:	0027883a 	mov	r19,zero
   155f4:	9cc00c04 	addi	r19,r19,48
   155f8:	dcc019c5 	stb	r19,103(sp)
   155fc:	dd002817 	ldw	r20,160(sp)
   15600:	ddc019c4 	addi	r23,sp,103
   15604:	003e2c06 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15608:	9cc03fcc 	andi	r19,r19,255
   1560c:	b811883a 	mov	r8,r23
   15610:	9802571e 	bne	r19,zero,15f70 <___vfiprintf_internal_r+0x14c4>
   15614:	18005726 	beq	r3,zero,15774 <___vfiprintf_internal_r+0xcc8>
   15618:	04c00044 	movi	r19,1
   1561c:	d8c01005 	stb	r3,64(sp)
   15620:	d8001d85 	stb	zero,118(sp)
   15624:	9829883a 	mov	r20,r19
   15628:	ddc01004 	addi	r23,sp,64
   1562c:	003f0a06 	br	15258 <__alt_data_end+0xfc015258>
   15630:	d9402017 	ldw	r5,128(sp)
   15634:	d9002117 	ldw	r4,132(sp)
   15638:	d9801a04 	addi	r6,sp,104
   1563c:	da802a15 	stw	r10,168(sp)
   15640:	00149980 	call	14998 <__sprint_r.part.0>
   15644:	da802a17 	ldw	r10,168(sp)
   15648:	1000501e 	bne	r2,zero,1578c <___vfiprintf_internal_r+0xce0>
   1564c:	d9801b17 	ldw	r6,108(sp)
   15650:	d8801c17 	ldw	r2,112(sp)
   15654:	d811883a 	mov	r8,sp
   15658:	31000044 	addi	r4,r6,1
   1565c:	003e3606 	br	14f38 <__alt_data_end+0xfc014f38>
   15660:	d9001b17 	ldw	r4,108(sp)
   15664:	d8801c17 	ldw	r2,112(sp)
   15668:	21400044 	addi	r5,r4,1
   1566c:	d9801d87 	ldb	r6,118(sp)
   15670:	303e5226 	beq	r6,zero,14fbc <__alt_data_end+0xfc014fbc>
   15674:	01800044 	movi	r6,1
   15678:	d9001d84 	addi	r4,sp,118
   1567c:	1185883a 	add	r2,r2,r6
   15680:	41000015 	stw	r4,0(r8)
   15684:	41800115 	stw	r6,4(r8)
   15688:	d8801c15 	stw	r2,112(sp)
   1568c:	d9401b15 	stw	r5,108(sp)
   15690:	010001c4 	movi	r4,7
   15694:	2140b00e 	bge	r4,r5,15958 <___vfiprintf_internal_r+0xeac>
   15698:	1000f61e 	bne	r2,zero,15a74 <___vfiprintf_internal_r+0xfc8>
   1569c:	3800b31e 	bne	r7,zero,1596c <___vfiprintf_internal_r+0xec0>
   156a0:	0009883a 	mov	r4,zero
   156a4:	300b883a 	mov	r5,r6
   156a8:	d811883a 	mov	r8,sp
   156ac:	01802004 	movi	r6,128
   156b0:	19be5226 	beq	r3,r6,14ffc <__alt_data_end+0xfc014ffc>
   156b4:	8521c83a 	sub	r16,r16,r20
   156b8:	043e790e 	bge	zero,r16,150a0 <__alt_data_end+0xfc0150a0>
   156bc:	05400404 	movi	r21,16
   156c0:	ac01b00e 	bge	r21,r16,15d84 <___vfiprintf_internal_r+0x12d8>
   156c4:	014000b4 	movhi	r5,2
   156c8:	29715e04 	addi	r5,r5,-14984
   156cc:	d9402315 	stw	r5,140(sp)
   156d0:	070001c4 	movi	fp,7
   156d4:	00000506 	br	156ec <___vfiprintf_internal_r+0xc40>
   156d8:	21400084 	addi	r5,r4,2
   156dc:	42000204 	addi	r8,r8,8
   156e0:	1809883a 	mov	r4,r3
   156e4:	843ffc04 	addi	r16,r16,-16
   156e8:	ac000d0e 	bge	r21,r16,15720 <___vfiprintf_internal_r+0xc74>
   156ec:	10800404 	addi	r2,r2,16
   156f0:	20c00044 	addi	r3,r4,1
   156f4:	44800015 	stw	r18,0(r8)
   156f8:	45400115 	stw	r21,4(r8)
   156fc:	d8801c15 	stw	r2,112(sp)
   15700:	d8c01b15 	stw	r3,108(sp)
   15704:	e0fff40e 	bge	fp,r3,156d8 <__alt_data_end+0xfc0156d8>
   15708:	1000101e 	bne	r2,zero,1574c <___vfiprintf_internal_r+0xca0>
   1570c:	843ffc04 	addi	r16,r16,-16
   15710:	01400044 	movi	r5,1
   15714:	0009883a 	mov	r4,zero
   15718:	d811883a 	mov	r8,sp
   1571c:	ac3ff316 	blt	r21,r16,156ec <__alt_data_end+0xfc0156ec>
   15720:	d8c02317 	ldw	r3,140(sp)
   15724:	1405883a 	add	r2,r2,r16
   15728:	44000115 	stw	r16,4(r8)
   1572c:	40c00015 	stw	r3,0(r8)
   15730:	d8801c15 	stw	r2,112(sp)
   15734:	d9401b15 	stw	r5,108(sp)
   15738:	00c001c4 	movi	r3,7
   1573c:	19401916 	blt	r3,r5,157a4 <___vfiprintf_internal_r+0xcf8>
   15740:	42000204 	addi	r8,r8,8
   15744:	29400044 	addi	r5,r5,1
   15748:	003e5506 	br	150a0 <__alt_data_end+0xfc0150a0>
   1574c:	d9402017 	ldw	r5,128(sp)
   15750:	d9002117 	ldw	r4,132(sp)
   15754:	d9801a04 	addi	r6,sp,104
   15758:	00149980 	call	14998 <__sprint_r.part.0>
   1575c:	10000b1e 	bne	r2,zero,1578c <___vfiprintf_internal_r+0xce0>
   15760:	d9001b17 	ldw	r4,108(sp)
   15764:	d8801c17 	ldw	r2,112(sp)
   15768:	d811883a 	mov	r8,sp
   1576c:	21400044 	addi	r5,r4,1
   15770:	003fdc06 	br	156e4 <__alt_data_end+0xfc0156e4>
   15774:	d8801c17 	ldw	r2,112(sp)
   15778:	10000426 	beq	r2,zero,1578c <___vfiprintf_internal_r+0xce0>
   1577c:	d9402017 	ldw	r5,128(sp)
   15780:	d9002117 	ldw	r4,132(sp)
   15784:	d9801a04 	addi	r6,sp,104
   15788:	00149980 	call	14998 <__sprint_r.part.0>
   1578c:	d9402017 	ldw	r5,128(sp)
   15790:	2880030b 	ldhu	r2,12(r5)
   15794:	1080100c 	andi	r2,r2,64
   15798:	10014d1e 	bne	r2,zero,15cd0 <___vfiprintf_internal_r+0x1224>
   1579c:	d8802417 	ldw	r2,144(sp)
   157a0:	003d9706 	br	14e00 <__alt_data_end+0xfc014e00>
   157a4:	1000d21e 	bne	r2,zero,15af0 <___vfiprintf_internal_r+0x1044>
   157a8:	00c00044 	movi	r3,1
   157ac:	a005883a 	mov	r2,r20
   157b0:	ddc00015 	stw	r23,0(sp)
   157b4:	dd000115 	stw	r20,4(sp)
   157b8:	dd001c15 	stw	r20,112(sp)
   157bc:	d8c01b15 	stw	r3,108(sp)
   157c0:	d811883a 	mov	r8,sp
   157c4:	42000204 	addi	r8,r8,8
   157c8:	8c40010c 	andi	r17,r17,4
   157cc:	88004026 	beq	r17,zero,158d0 <___vfiprintf_internal_r+0xe24>
   157d0:	d9002517 	ldw	r4,148(sp)
   157d4:	24e3c83a 	sub	r17,r4,r19
   157d8:	04403d0e 	bge	zero,r17,158d0 <___vfiprintf_internal_r+0xe24>
   157dc:	04000404 	movi	r16,16
   157e0:	8441a90e 	bge	r16,r17,15e88 <___vfiprintf_internal_r+0x13dc>
   157e4:	00c000b4 	movhi	r3,2
   157e8:	18f16204 	addi	r3,r3,-14968
   157ec:	d9001b17 	ldw	r4,108(sp)
   157f0:	d8c02315 	stw	r3,140(sp)
   157f4:	050001c4 	movi	r20,7
   157f8:	dd402117 	ldw	r21,132(sp)
   157fc:	ddc02017 	ldw	r23,128(sp)
   15800:	00000506 	br	15818 <___vfiprintf_internal_r+0xd6c>
   15804:	21400084 	addi	r5,r4,2
   15808:	42000204 	addi	r8,r8,8
   1580c:	1809883a 	mov	r4,r3
   15810:	8c7ffc04 	addi	r17,r17,-16
   15814:	84400f0e 	bge	r16,r17,15854 <___vfiprintf_internal_r+0xda8>
   15818:	014000b4 	movhi	r5,2
   1581c:	10800404 	addi	r2,r2,16
   15820:	20c00044 	addi	r3,r4,1
   15824:	29716204 	addi	r5,r5,-14968
   15828:	41400015 	stw	r5,0(r8)
   1582c:	44000115 	stw	r16,4(r8)
   15830:	d8801c15 	stw	r2,112(sp)
   15834:	d8c01b15 	stw	r3,108(sp)
   15838:	a0fff20e 	bge	r20,r3,15804 <__alt_data_end+0xfc015804>
   1583c:	1000141e 	bne	r2,zero,15890 <___vfiprintf_internal_r+0xde4>
   15840:	8c7ffc04 	addi	r17,r17,-16
   15844:	01400044 	movi	r5,1
   15848:	0009883a 	mov	r4,zero
   1584c:	d811883a 	mov	r8,sp
   15850:	847ff116 	blt	r16,r17,15818 <__alt_data_end+0xfc015818>
   15854:	d8c02317 	ldw	r3,140(sp)
   15858:	1445883a 	add	r2,r2,r17
   1585c:	44400115 	stw	r17,4(r8)
   15860:	40c00015 	stw	r3,0(r8)
   15864:	d8801c15 	stw	r2,112(sp)
   15868:	d9401b15 	stw	r5,108(sp)
   1586c:	00c001c4 	movi	r3,7
   15870:	1940170e 	bge	r3,r5,158d0 <___vfiprintf_internal_r+0xe24>
   15874:	1000101e 	bne	r2,zero,158b8 <___vfiprintf_internal_r+0xe0c>
   15878:	d8802517 	ldw	r2,148(sp)
   1587c:	14c11616 	blt	r2,r19,15cd8 <___vfiprintf_internal_r+0x122c>
   15880:	d9002417 	ldw	r4,144(sp)
   15884:	2089883a 	add	r4,r4,r2
   15888:	d9002415 	stw	r4,144(sp)
   1588c:	003e1806 	br	150f0 <__alt_data_end+0xfc0150f0>
   15890:	d9801a04 	addi	r6,sp,104
   15894:	b80b883a 	mov	r5,r23
   15898:	a809883a 	mov	r4,r21
   1589c:	00149980 	call	14998 <__sprint_r.part.0>
   158a0:	103fba1e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   158a4:	d9001b17 	ldw	r4,108(sp)
   158a8:	d8801c17 	ldw	r2,112(sp)
   158ac:	d811883a 	mov	r8,sp
   158b0:	21400044 	addi	r5,r4,1
   158b4:	003fd606 	br	15810 <__alt_data_end+0xfc015810>
   158b8:	d9402017 	ldw	r5,128(sp)
   158bc:	d9002117 	ldw	r4,132(sp)
   158c0:	d9801a04 	addi	r6,sp,104
   158c4:	00149980 	call	14998 <__sprint_r.part.0>
   158c8:	103fb01e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   158cc:	d8801c17 	ldw	r2,112(sp)
   158d0:	d8c02517 	ldw	r3,148(sp)
   158d4:	1cc0010e 	bge	r3,r19,158dc <___vfiprintf_internal_r+0xe30>
   158d8:	9807883a 	mov	r3,r19
   158dc:	d9002417 	ldw	r4,144(sp)
   158e0:	20c9883a 	add	r4,r4,r3
   158e4:	d9002415 	stw	r4,144(sp)
   158e8:	103e0126 	beq	r2,zero,150f0 <__alt_data_end+0xfc0150f0>
   158ec:	d9402017 	ldw	r5,128(sp)
   158f0:	d9002117 	ldw	r4,132(sp)
   158f4:	d9801a04 	addi	r6,sp,104
   158f8:	00149980 	call	14998 <__sprint_r.part.0>
   158fc:	103dfc26 	beq	r2,zero,150f0 <__alt_data_end+0xfc0150f0>
   15900:	003fa206 	br	1578c <__alt_data_end+0xfc01578c>
   15904:	d9402017 	ldw	r5,128(sp)
   15908:	d9002117 	ldw	r4,132(sp)
   1590c:	d9801a04 	addi	r6,sp,104
   15910:	d9c02b15 	stw	r7,172(sp)
   15914:	00149980 	call	14998 <__sprint_r.part.0>
   15918:	d9c02b17 	ldw	r7,172(sp)
   1591c:	103f9b1e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15920:	d9001b17 	ldw	r4,108(sp)
   15924:	d8801c17 	ldw	r2,112(sp)
   15928:	d811883a 	mov	r8,sp
   1592c:	21800044 	addi	r6,r4,1
   15930:	003dbf06 	br	15030 <__alt_data_end+0xfc015030>
   15934:	1000d81e 	bne	r2,zero,15c98 <___vfiprintf_internal_r+0x11ec>
   15938:	d9001d87 	ldb	r4,118(sp)
   1593c:	20000a26 	beq	r4,zero,15968 <___vfiprintf_internal_r+0xebc>
   15940:	00800044 	movi	r2,1
   15944:	d9001d84 	addi	r4,sp,118
   15948:	100b883a 	mov	r5,r2
   1594c:	d9000015 	stw	r4,0(sp)
   15950:	d8800115 	stw	r2,4(sp)
   15954:	d811883a 	mov	r8,sp
   15958:	2809883a 	mov	r4,r5
   1595c:	42000204 	addi	r8,r8,8
   15960:	29400044 	addi	r5,r5,1
   15964:	003d9506 	br	14fbc <__alt_data_end+0xfc014fbc>
   15968:	3800fd26 	beq	r7,zero,15d60 <___vfiprintf_internal_r+0x12b4>
   1596c:	00800084 	movi	r2,2
   15970:	d9001d04 	addi	r4,sp,116
   15974:	d9000015 	stw	r4,0(sp)
   15978:	d8800115 	stw	r2,4(sp)
   1597c:	01400044 	movi	r5,1
   15980:	d811883a 	mov	r8,sp
   15984:	2809883a 	mov	r4,r5
   15988:	42000204 	addi	r8,r8,8
   1598c:	29400044 	addi	r5,r5,1
   15990:	003f4606 	br	156ac <__alt_data_end+0xfc0156ac>
   15994:	d8802517 	ldw	r2,148(sp)
   15998:	14c0010e 	bge	r2,r19,159a0 <___vfiprintf_internal_r+0xef4>
   1599c:	9805883a 	mov	r2,r19
   159a0:	d9402417 	ldw	r5,144(sp)
   159a4:	288b883a 	add	r5,r5,r2
   159a8:	d9402415 	stw	r5,144(sp)
   159ac:	003dd006 	br	150f0 <__alt_data_end+0xfc0150f0>
   159b0:	d8001d85 	stb	zero,118(sp)
   159b4:	80005d16 	blt	r16,zero,15b2c <___vfiprintf_internal_r+0x1080>
   159b8:	00ffdfc4 	movi	r3,-129
   159bc:	9d04b03a 	or	r2,r19,r20
   159c0:	88e2703a 	and	r17,r17,r3
   159c4:	103d3726 	beq	r2,zero,14ea4 <__alt_data_end+0xfc014ea4>
   159c8:	002b883a 	mov	r21,zero
   159cc:	d9002617 	ldw	r4,152(sp)
   159d0:	ddc01a04 	addi	r23,sp,104
   159d4:	988003cc 	andi	r2,r19,15
   159d8:	a006973a 	slli	r3,r20,28
   159dc:	2085883a 	add	r2,r4,r2
   159e0:	9826d13a 	srli	r19,r19,4
   159e4:	10800003 	ldbu	r2,0(r2)
   159e8:	a028d13a 	srli	r20,r20,4
   159ec:	bdffffc4 	addi	r23,r23,-1
   159f0:	1ce6b03a 	or	r19,r3,r19
   159f4:	b8800005 	stb	r2,0(r23)
   159f8:	9d04b03a 	or	r2,r19,r20
   159fc:	103ff51e 	bne	r2,zero,159d4 <__alt_data_end+0xfc0159d4>
   15a00:	d8801e17 	ldw	r2,120(sp)
   15a04:	15e9c83a 	sub	r20,r2,r23
   15a08:	003d2b06 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15a0c:	d9402017 	ldw	r5,128(sp)
   15a10:	d9002117 	ldw	r4,132(sp)
   15a14:	d9801a04 	addi	r6,sp,104
   15a18:	00149980 	call	14998 <__sprint_r.part.0>
   15a1c:	103f5b1e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15a20:	d8801c17 	ldw	r2,112(sp)
   15a24:	d811883a 	mov	r8,sp
   15a28:	003f6706 	br	157c8 <__alt_data_end+0xfc0157c8>
   15a2c:	d9402017 	ldw	r5,128(sp)
   15a30:	d9002117 	ldw	r4,132(sp)
   15a34:	d9801a04 	addi	r6,sp,104
   15a38:	00149980 	call	14998 <__sprint_r.part.0>
   15a3c:	103f531e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15a40:	d811883a 	mov	r8,sp
   15a44:	003cd906 	br	14dac <__alt_data_end+0xfc014dac>
   15a48:	10803fcc 	andi	r2,r2,255
   15a4c:	1080201c 	xori	r2,r2,128
   15a50:	10bfe004 	addi	r2,r2,-128
   15a54:	00c00c04 	movi	r3,48
   15a58:	10ffe926 	beq	r2,r3,15a00 <__alt_data_end+0xfc015a00>
   15a5c:	b8ffffc5 	stb	r3,-1(r23)
   15a60:	d8c01e17 	ldw	r3,120(sp)
   15a64:	b8bfffc4 	addi	r2,r23,-1
   15a68:	102f883a 	mov	r23,r2
   15a6c:	18a9c83a 	sub	r20,r3,r2
   15a70:	003d1106 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15a74:	d9402017 	ldw	r5,128(sp)
   15a78:	d9002117 	ldw	r4,132(sp)
   15a7c:	d9801a04 	addi	r6,sp,104
   15a80:	d8c02a15 	stw	r3,168(sp)
   15a84:	d9c02b15 	stw	r7,172(sp)
   15a88:	00149980 	call	14998 <__sprint_r.part.0>
   15a8c:	d8c02a17 	ldw	r3,168(sp)
   15a90:	d9c02b17 	ldw	r7,172(sp)
   15a94:	103f3d1e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15a98:	d9001b17 	ldw	r4,108(sp)
   15a9c:	d8801c17 	ldw	r2,112(sp)
   15aa0:	d811883a 	mov	r8,sp
   15aa4:	21400044 	addi	r5,r4,1
   15aa8:	003d4406 	br	14fbc <__alt_data_end+0xfc014fbc>
   15aac:	d9402017 	ldw	r5,128(sp)
   15ab0:	d9002117 	ldw	r4,132(sp)
   15ab4:	d9801a04 	addi	r6,sp,104
   15ab8:	d8c02a15 	stw	r3,168(sp)
   15abc:	00149980 	call	14998 <__sprint_r.part.0>
   15ac0:	d8c02a17 	ldw	r3,168(sp)
   15ac4:	103f311e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15ac8:	d9001b17 	ldw	r4,108(sp)
   15acc:	d8801c17 	ldw	r2,112(sp)
   15ad0:	d811883a 	mov	r8,sp
   15ad4:	21400044 	addi	r5,r4,1
   15ad8:	003ef406 	br	156ac <__alt_data_end+0xfc0156ac>
   15adc:	1000bd1e 	bne	r2,zero,15dd4 <___vfiprintf_internal_r+0x1328>
   15ae0:	01400044 	movi	r5,1
   15ae4:	0009883a 	mov	r4,zero
   15ae8:	d811883a 	mov	r8,sp
   15aec:	003ef106 	br	156b4 <__alt_data_end+0xfc0156b4>
   15af0:	d9402017 	ldw	r5,128(sp)
   15af4:	d9002117 	ldw	r4,132(sp)
   15af8:	d9801a04 	addi	r6,sp,104
   15afc:	00149980 	call	14998 <__sprint_r.part.0>
   15b00:	103f221e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15b04:	d9401b17 	ldw	r5,108(sp)
   15b08:	d8801c17 	ldw	r2,112(sp)
   15b0c:	d811883a 	mov	r8,sp
   15b10:	29400044 	addi	r5,r5,1
   15b14:	003d6206 	br	150a0 <__alt_data_end+0xfc0150a0>
   15b18:	014000b4 	movhi	r5,2
   15b1c:	2970fe04 	addi	r5,r5,-15368
   15b20:	d9402615 	stw	r5,152(sp)
   15b24:	d8c02215 	stw	r3,136(sp)
   15b28:	1023883a 	mov	r17,r2
   15b2c:	9d04b03a 	or	r2,r19,r20
   15b30:	103fa51e 	bne	r2,zero,159c8 <__alt_data_end+0xfc0159c8>
   15b34:	002b883a 	mov	r21,zero
   15b38:	00800084 	movi	r2,2
   15b3c:	003e4a06 	br	15468 <__alt_data_end+0xfc015468>
   15b40:	014000b4 	movhi	r5,2
   15b44:	2970fe04 	addi	r5,r5,-15368
   15b48:	002b883a 	mov	r21,zero
   15b4c:	d9402615 	stw	r5,152(sp)
   15b50:	003f9e06 	br	159cc <__alt_data_end+0xfc0159cc>
   15b54:	d9402217 	ldw	r5,136(sp)
   15b58:	d8001d85 	stb	zero,118(sp)
   15b5c:	0029883a 	mov	r20,zero
   15b60:	28800104 	addi	r2,r5,4
   15b64:	2cc00017 	ldw	r19,0(r5)
   15b68:	803e3a16 	blt	r16,zero,15454 <__alt_data_end+0xfc015454>
   15b6c:	00ffdfc4 	movi	r3,-129
   15b70:	d8802215 	stw	r2,136(sp)
   15b74:	88e2703a 	and	r17,r17,r3
   15b78:	002b883a 	mov	r21,zero
   15b7c:	983e9b26 	beq	r19,zero,155ec <__alt_data_end+0xfc0155ec>
   15b80:	00800244 	movi	r2,9
   15b84:	14fdc936 	bltu	r2,r19,152ac <__alt_data_end+0xfc0152ac>
   15b88:	003e9a06 	br	155f4 <__alt_data_end+0xfc0155f4>
   15b8c:	00800c04 	movi	r2,48
   15b90:	d8c01d45 	stb	r3,117(sp)
   15b94:	d8801d05 	stb	r2,116(sp)
   15b98:	d8001d85 	stb	zero,118(sp)
   15b9c:	88c00094 	ori	r3,r17,2
   15ba0:	80009c16 	blt	r16,zero,15e14 <___vfiprintf_internal_r+0x1368>
   15ba4:	00bfdfc4 	movi	r2,-129
   15ba8:	88a2703a 	and	r17,r17,r2
   15bac:	8c400094 	ori	r17,r17,2
   15bb0:	002b883a 	mov	r21,zero
   15bb4:	003f8506 	br	159cc <__alt_data_end+0xfc0159cc>
   15bb8:	b029883a 	mov	r20,r22
   15bbc:	003c0b06 	br	14bec <__alt_data_end+0xfc014bec>
   15bc0:	04e7c83a 	sub	r19,zero,r19
   15bc4:	05400b44 	movi	r21,45
   15bc8:	9804c03a 	cmpne	r2,r19,zero
   15bcc:	0529c83a 	sub	r20,zero,r20
   15bd0:	dd401d85 	stb	r21,118(sp)
   15bd4:	a0a9c83a 	sub	r20,r20,r2
   15bd8:	80009716 	blt	r16,zero,15e38 <___vfiprintf_internal_r+0x138c>
   15bdc:	00bfdfc4 	movi	r2,-129
   15be0:	88a2703a 	and	r17,r17,r2
   15be4:	003db006 	br	152a8 <__alt_data_end+0xfc0152a8>
   15be8:	b0c00007 	ldb	r3,0(r22)
   15bec:	003c0c06 	br	14c20 <__alt_data_end+0xfc014c20>
   15bf0:	8880100c 	andi	r2,r17,64
   15bf4:	d8001d85 	stb	zero,118(sp)
   15bf8:	1000461e 	bne	r2,zero,15d14 <___vfiprintf_internal_r+0x1268>
   15bfc:	d9002217 	ldw	r4,136(sp)
   15c00:	0029883a 	mov	r20,zero
   15c04:	20800104 	addi	r2,r4,4
   15c08:	24c00017 	ldw	r19,0(r4)
   15c0c:	803df80e 	bge	r16,zero,153f0 <__alt_data_end+0xfc0153f0>
   15c10:	9d06b03a 	or	r3,r19,r20
   15c14:	d8802215 	stw	r2,136(sp)
   15c18:	183d5e1e 	bne	r3,zero,15194 <__alt_data_end+0xfc015194>
   15c1c:	002b883a 	mov	r21,zero
   15c20:	0005883a 	mov	r2,zero
   15c24:	003e1006 	br	15468 <__alt_data_end+0xfc015468>
   15c28:	8880040c 	andi	r2,r17,16
   15c2c:	1000321e 	bne	r2,zero,15cf8 <___vfiprintf_internal_r+0x124c>
   15c30:	8c40100c 	andi	r17,r17,64
   15c34:	88008d26 	beq	r17,zero,15e6c <___vfiprintf_internal_r+0x13c0>
   15c38:	d9402217 	ldw	r5,136(sp)
   15c3c:	d8c02417 	ldw	r3,144(sp)
   15c40:	28800017 	ldw	r2,0(r5)
   15c44:	29400104 	addi	r5,r5,4
   15c48:	d9402215 	stw	r5,136(sp)
   15c4c:	10c0000d 	sth	r3,0(r2)
   15c50:	003bca06 	br	14b7c <__alt_data_end+0xfc014b7c>
   15c54:	8880100c 	andi	r2,r17,64
   15c58:	10003a26 	beq	r2,zero,15d44 <___vfiprintf_internal_r+0x1298>
   15c5c:	d8802217 	ldw	r2,136(sp)
   15c60:	14c0000f 	ldh	r19,0(r2)
   15c64:	10800104 	addi	r2,r2,4
   15c68:	d8802215 	stw	r2,136(sp)
   15c6c:	9829d7fa 	srai	r20,r19,31
   15c70:	a005883a 	mov	r2,r20
   15c74:	003d8506 	br	1528c <__alt_data_end+0xfc01528c>
   15c78:	8880100c 	andi	r2,r17,64
   15c7c:	10002b26 	beq	r2,zero,15d2c <___vfiprintf_internal_r+0x1280>
   15c80:	d8802217 	ldw	r2,136(sp)
   15c84:	0029883a 	mov	r20,zero
   15c88:	14c0000b 	ldhu	r19,0(r2)
   15c8c:	10800104 	addi	r2,r2,4
   15c90:	d8802215 	stw	r2,136(sp)
   15c94:	003d5d06 	br	1520c <__alt_data_end+0xfc01520c>
   15c98:	d9402017 	ldw	r5,128(sp)
   15c9c:	d9002117 	ldw	r4,132(sp)
   15ca0:	d9801a04 	addi	r6,sp,104
   15ca4:	d8c02a15 	stw	r3,168(sp)
   15ca8:	d9c02b15 	stw	r7,172(sp)
   15cac:	00149980 	call	14998 <__sprint_r.part.0>
   15cb0:	d8c02a17 	ldw	r3,168(sp)
   15cb4:	d9c02b17 	ldw	r7,172(sp)
   15cb8:	103eb41e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15cbc:	d9001b17 	ldw	r4,108(sp)
   15cc0:	d8801c17 	ldw	r2,112(sp)
   15cc4:	d811883a 	mov	r8,sp
   15cc8:	21400044 	addi	r5,r4,1
   15ccc:	003e6706 	br	1566c <__alt_data_end+0xfc01566c>
   15cd0:	00bfffc4 	movi	r2,-1
   15cd4:	003c4a06 	br	14e00 <__alt_data_end+0xfc014e00>
   15cd8:	9805883a 	mov	r2,r19
   15cdc:	003ee806 	br	15880 <__alt_data_end+0xfc015880>
   15ce0:	d8c02217 	ldw	r3,136(sp)
   15ce4:	0029883a 	mov	r20,zero
   15ce8:	18800104 	addi	r2,r3,4
   15cec:	1cc0000b 	ldhu	r19,0(r3)
   15cf0:	803f9e0e 	bge	r16,zero,15b6c <__alt_data_end+0xfc015b6c>
   15cf4:	003dd706 	br	15454 <__alt_data_end+0xfc015454>
   15cf8:	d8c02217 	ldw	r3,136(sp)
   15cfc:	d9002417 	ldw	r4,144(sp)
   15d00:	18800017 	ldw	r2,0(r3)
   15d04:	18c00104 	addi	r3,r3,4
   15d08:	d8c02215 	stw	r3,136(sp)
   15d0c:	11000015 	stw	r4,0(r2)
   15d10:	003b9a06 	br	14b7c <__alt_data_end+0xfc014b7c>
   15d14:	d8c02217 	ldw	r3,136(sp)
   15d18:	0029883a 	mov	r20,zero
   15d1c:	18800104 	addi	r2,r3,4
   15d20:	1cc0000b 	ldhu	r19,0(r3)
   15d24:	803db20e 	bge	r16,zero,153f0 <__alt_data_end+0xfc0153f0>
   15d28:	003fb906 	br	15c10 <__alt_data_end+0xfc015c10>
   15d2c:	d9002217 	ldw	r4,136(sp)
   15d30:	0029883a 	mov	r20,zero
   15d34:	24c00017 	ldw	r19,0(r4)
   15d38:	21000104 	addi	r4,r4,4
   15d3c:	d9002215 	stw	r4,136(sp)
   15d40:	003d3206 	br	1520c <__alt_data_end+0xfc01520c>
   15d44:	d8c02217 	ldw	r3,136(sp)
   15d48:	1cc00017 	ldw	r19,0(r3)
   15d4c:	18c00104 	addi	r3,r3,4
   15d50:	d8c02215 	stw	r3,136(sp)
   15d54:	9829d7fa 	srai	r20,r19,31
   15d58:	a005883a 	mov	r2,r20
   15d5c:	003d4b06 	br	1528c <__alt_data_end+0xfc01528c>
   15d60:	0009883a 	mov	r4,zero
   15d64:	01400044 	movi	r5,1
   15d68:	d811883a 	mov	r8,sp
   15d6c:	003e4f06 	br	156ac <__alt_data_end+0xfc0156ac>
   15d70:	d8c02215 	stw	r3,136(sp)
   15d74:	002b883a 	mov	r21,zero
   15d78:	003db806 	br	1545c <__alt_data_end+0xfc01545c>
   15d7c:	d811883a 	mov	r8,sp
   15d80:	003e9606 	br	157dc <__alt_data_end+0xfc0157dc>
   15d84:	010000b4 	movhi	r4,2
   15d88:	21315e04 	addi	r4,r4,-14984
   15d8c:	d9002315 	stw	r4,140(sp)
   15d90:	003e6306 	br	15720 <__alt_data_end+0xfc015720>
   15d94:	b0c00043 	ldbu	r3,1(r22)
   15d98:	8c400814 	ori	r17,r17,32
   15d9c:	b5800044 	addi	r22,r22,1
   15da0:	18c03fcc 	andi	r3,r3,255
   15da4:	18c0201c 	xori	r3,r3,128
   15da8:	18ffe004 	addi	r3,r3,-128
   15dac:	003b9c06 	br	14c20 <__alt_data_end+0xfc014c20>
   15db0:	b809883a 	mov	r4,r23
   15db4:	da002a15 	stw	r8,168(sp)
   15db8:	000d09c0 	call	d09c <strlen>
   15dbc:	1029883a 	mov	r20,r2
   15dc0:	dd401d83 	ldbu	r21,118(sp)
   15dc4:	df002215 	stw	fp,136(sp)
   15dc8:	0021883a 	mov	r16,zero
   15dcc:	da002a17 	ldw	r8,168(sp)
   15dd0:	003c3906 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15dd4:	d9402017 	ldw	r5,128(sp)
   15dd8:	d9002117 	ldw	r4,132(sp)
   15ddc:	d9801a04 	addi	r6,sp,104
   15de0:	00149980 	call	14998 <__sprint_r.part.0>
   15de4:	103e691e 	bne	r2,zero,1578c <__alt_data_end+0xfc01578c>
   15de8:	d9001b17 	ldw	r4,108(sp)
   15dec:	d8801c17 	ldw	r2,112(sp)
   15df0:	d811883a 	mov	r8,sp
   15df4:	21400044 	addi	r5,r4,1
   15df8:	003e2e06 	br	156b4 <__alt_data_end+0xfc0156b4>
   15dfc:	010000b4 	movhi	r4,2
   15e00:	21316204 	addi	r4,r4,-14968
   15e04:	d9002315 	stw	r4,140(sp)
   15e08:	d9001b17 	ldw	r4,108(sp)
   15e0c:	21000044 	addi	r4,r4,1
   15e10:	003c5e06 	br	14f8c <__alt_data_end+0xfc014f8c>
   15e14:	002b883a 	mov	r21,zero
   15e18:	00800084 	movi	r2,2
   15e1c:	10803fcc 	andi	r2,r2,255
   15e20:	01000044 	movi	r4,1
   15e24:	11002b26 	beq	r2,r4,15ed4 <___vfiprintf_internal_r+0x1428>
   15e28:	01000084 	movi	r4,2
   15e2c:	11002b1e 	bne	r2,r4,15edc <___vfiprintf_internal_r+0x1430>
   15e30:	1823883a 	mov	r17,r3
   15e34:	003ee506 	br	159cc <__alt_data_end+0xfc0159cc>
   15e38:	8807883a 	mov	r3,r17
   15e3c:	00800044 	movi	r2,1
   15e40:	003ff606 	br	15e1c <__alt_data_end+0xfc015e1c>
   15e44:	00800184 	movi	r2,6
   15e48:	1400012e 	bgeu	r2,r16,15e50 <___vfiprintf_internal_r+0x13a4>
   15e4c:	1021883a 	mov	r16,r2
   15e50:	8029883a 	mov	r20,r16
   15e54:	8027883a 	mov	r19,r16
   15e58:	80002216 	blt	r16,zero,15ee4 <___vfiprintf_internal_r+0x1438>
   15e5c:	05c000b4 	movhi	r23,2
   15e60:	df002215 	stw	fp,136(sp)
   15e64:	bdf10304 	addi	r23,r23,-15348
   15e68:	003cfb06 	br	15258 <__alt_data_end+0xfc015258>
   15e6c:	d9002217 	ldw	r4,136(sp)
   15e70:	d9402417 	ldw	r5,144(sp)
   15e74:	20800017 	ldw	r2,0(r4)
   15e78:	21000104 	addi	r4,r4,4
   15e7c:	d9002215 	stw	r4,136(sp)
   15e80:	11400015 	stw	r5,0(r2)
   15e84:	003b3d06 	br	14b7c <__alt_data_end+0xfc014b7c>
   15e88:	014000b4 	movhi	r5,2
   15e8c:	29716204 	addi	r5,r5,-14968
   15e90:	d9402315 	stw	r5,140(sp)
   15e94:	d9401b17 	ldw	r5,108(sp)
   15e98:	29400044 	addi	r5,r5,1
   15e9c:	003e6d06 	br	15854 <__alt_data_end+0xfc015854>
   15ea0:	8029883a 	mov	r20,r16
   15ea4:	dd401d83 	ldbu	r21,118(sp)
   15ea8:	df002215 	stw	fp,136(sp)
   15eac:	0021883a 	mov	r16,zero
   15eb0:	003c0106 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15eb4:	00c000b4 	movhi	r3,2
   15eb8:	18f15e04 	addi	r3,r3,-14984
   15ebc:	d8c02315 	stw	r3,140(sp)
   15ec0:	280d883a 	mov	r6,r5
   15ec4:	003c6906 	br	1506c <__alt_data_end+0xfc01506c>
   15ec8:	802d883a 	mov	r22,r16
   15ecc:	0021883a 	mov	r16,zero
   15ed0:	003b5406 	br	14c24 <__alt_data_end+0xfc014c24>
   15ed4:	1823883a 	mov	r17,r3
   15ed8:	003cf306 	br	152a8 <__alt_data_end+0xfc0152a8>
   15edc:	1823883a 	mov	r17,r3
   15ee0:	003cad06 	br	15198 <__alt_data_end+0xfc015198>
   15ee4:	0027883a 	mov	r19,zero
   15ee8:	003fdc06 	br	15e5c <__alt_data_end+0xfc015e5c>
   15eec:	d9402217 	ldw	r5,136(sp)
   15ef0:	8005883a 	mov	r2,r16
   15ef4:	b0c00043 	ldbu	r3,1(r22)
   15ef8:	2c000017 	ldw	r16,0(r5)
   15efc:	29000104 	addi	r4,r5,4
   15f00:	d9002215 	stw	r4,136(sp)
   15f04:	102d883a 	mov	r22,r2
   15f08:	803fa50e 	bge	r16,zero,15da0 <__alt_data_end+0xfc015da0>
   15f0c:	18c03fcc 	andi	r3,r3,255
   15f10:	18c0201c 	xori	r3,r3,128
   15f14:	043fffc4 	movi	r16,-1
   15f18:	18ffe004 	addi	r3,r3,-128
   15f1c:	003b4006 	br	14c20 <__alt_data_end+0xfc014c20>
   15f20:	d9402303 	ldbu	r5,140(sp)
   15f24:	d9401d85 	stb	r5,118(sp)
   15f28:	003cae06 	br	151e4 <__alt_data_end+0xfc0151e4>
   15f2c:	d8c02303 	ldbu	r3,140(sp)
   15f30:	d8c01d85 	stb	r3,118(sp)
   15f34:	003d1406 	br	15388 <__alt_data_end+0xfc015388>
   15f38:	d8c02303 	ldbu	r3,140(sp)
   15f3c:	d8c01d85 	stb	r3,118(sp)
   15f40:	003cca06 	br	1526c <__alt_data_end+0xfc01526c>
   15f44:	8880004c 	andi	r2,r17,1
   15f48:	002b883a 	mov	r21,zero
   15f4c:	10000526 	beq	r2,zero,15f64 <___vfiprintf_internal_r+0x14b8>
   15f50:	00800c04 	movi	r2,48
   15f54:	d88019c5 	stb	r2,103(sp)
   15f58:	dd002817 	ldw	r20,160(sp)
   15f5c:	ddc019c4 	addi	r23,sp,103
   15f60:	003bd506 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15f64:	0029883a 	mov	r20,zero
   15f68:	ddc01a04 	addi	r23,sp,104
   15f6c:	003bd206 	br	14eb8 <__alt_data_end+0xfc014eb8>
   15f70:	d9002303 	ldbu	r4,140(sp)
   15f74:	d9001d85 	stb	r4,118(sp)
   15f78:	003da606 	br	15614 <__alt_data_end+0xfc015614>
   15f7c:	d8c02303 	ldbu	r3,140(sp)
   15f80:	d8c01d85 	stb	r3,118(sp)
   15f84:	003c7606 	br	15160 <__alt_data_end+0xfc015160>
   15f88:	d8c02303 	ldbu	r3,140(sp)
   15f8c:	d8c01d85 	stb	r3,118(sp)
   15f90:	003c6506 	br	15128 <__alt_data_end+0xfc015128>
   15f94:	d9002303 	ldbu	r4,140(sp)
   15f98:	d9001d85 	stb	r4,118(sp)
   15f9c:	003d3d06 	br	15494 <__alt_data_end+0xfc015494>
   15fa0:	d8c02303 	ldbu	r3,140(sp)
   15fa4:	d8c01d85 	stb	r3,118(sp)
   15fa8:	003d1d06 	br	15420 <__alt_data_end+0xfc015420>
   15fac:	d8c02303 	ldbu	r3,140(sp)
   15fb0:	d8c01d85 	stb	r3,118(sp)
   15fb4:	003d0306 	br	153c4 <__alt_data_end+0xfc0153c4>

00015fb8 <__vfiprintf_internal>:
   15fb8:	008000b4 	movhi	r2,2
   15fbc:	10b86304 	addi	r2,r2,-7796
   15fc0:	300f883a 	mov	r7,r6
   15fc4:	280d883a 	mov	r6,r5
   15fc8:	200b883a 	mov	r5,r4
   15fcc:	11000017 	ldw	r4,0(r2)
   15fd0:	0014aac1 	jmpi	14aac <___vfiprintf_internal_r>

00015fd4 <__sbprintf>:
   15fd4:	2880030b 	ldhu	r2,12(r5)
   15fd8:	2ac01917 	ldw	r11,100(r5)
   15fdc:	2a80038b 	ldhu	r10,14(r5)
   15fe0:	2a400717 	ldw	r9,28(r5)
   15fe4:	2a000917 	ldw	r8,36(r5)
   15fe8:	defee204 	addi	sp,sp,-1144
   15fec:	00c10004 	movi	r3,1024
   15ff0:	dc011a15 	stw	r16,1128(sp)
   15ff4:	10bfff4c 	andi	r2,r2,65533
   15ff8:	2821883a 	mov	r16,r5
   15ffc:	d8cb883a 	add	r5,sp,r3
   16000:	dc811c15 	stw	r18,1136(sp)
   16004:	dc411b15 	stw	r17,1132(sp)
   16008:	dfc11d15 	stw	ra,1140(sp)
   1600c:	2025883a 	mov	r18,r4
   16010:	d881030d 	sth	r2,1036(sp)
   16014:	dac11915 	stw	r11,1124(sp)
   16018:	da81038d 	sth	r10,1038(sp)
   1601c:	da410715 	stw	r9,1052(sp)
   16020:	da010915 	stw	r8,1060(sp)
   16024:	dec10015 	stw	sp,1024(sp)
   16028:	dec10415 	stw	sp,1040(sp)
   1602c:	d8c10215 	stw	r3,1032(sp)
   16030:	d8c10515 	stw	r3,1044(sp)
   16034:	d8010615 	stw	zero,1048(sp)
   16038:	0014aac0 	call	14aac <___vfiprintf_internal_r>
   1603c:	1023883a 	mov	r17,r2
   16040:	10000416 	blt	r2,zero,16054 <__sbprintf+0x80>
   16044:	d9410004 	addi	r5,sp,1024
   16048:	9009883a 	mov	r4,r18
   1604c:	00112880 	call	11288 <_fflush_r>
   16050:	10000d1e 	bne	r2,zero,16088 <__sbprintf+0xb4>
   16054:	d881030b 	ldhu	r2,1036(sp)
   16058:	1080100c 	andi	r2,r2,64
   1605c:	10000326 	beq	r2,zero,1606c <__sbprintf+0x98>
   16060:	8080030b 	ldhu	r2,12(r16)
   16064:	10801014 	ori	r2,r2,64
   16068:	8080030d 	sth	r2,12(r16)
   1606c:	8805883a 	mov	r2,r17
   16070:	dfc11d17 	ldw	ra,1140(sp)
   16074:	dc811c17 	ldw	r18,1136(sp)
   16078:	dc411b17 	ldw	r17,1132(sp)
   1607c:	dc011a17 	ldw	r16,1128(sp)
   16080:	dec11e04 	addi	sp,sp,1144
   16084:	f800283a 	ret
   16088:	047fffc4 	movi	r17,-1
   1608c:	003ff106 	br	16054 <__alt_data_end+0xfc016054>

00016090 <_write_r>:
   16090:	defffd04 	addi	sp,sp,-12
   16094:	2805883a 	mov	r2,r5
   16098:	dc000015 	stw	r16,0(sp)
   1609c:	040000b4 	movhi	r16,2
   160a0:	dc400115 	stw	r17,4(sp)
   160a4:	300b883a 	mov	r5,r6
   160a8:	843f3804 	addi	r16,r16,-800
   160ac:	2023883a 	mov	r17,r4
   160b0:	380d883a 	mov	r6,r7
   160b4:	1009883a 	mov	r4,r2
   160b8:	dfc00215 	stw	ra,8(sp)
   160bc:	80000015 	stw	zero,0(r16)
   160c0:	001a7080 	call	1a708 <write>
   160c4:	00ffffc4 	movi	r3,-1
   160c8:	10c00526 	beq	r2,r3,160e0 <_write_r+0x50>
   160cc:	dfc00217 	ldw	ra,8(sp)
   160d0:	dc400117 	ldw	r17,4(sp)
   160d4:	dc000017 	ldw	r16,0(sp)
   160d8:	dec00304 	addi	sp,sp,12
   160dc:	f800283a 	ret
   160e0:	80c00017 	ldw	r3,0(r16)
   160e4:	183ff926 	beq	r3,zero,160cc <__alt_data_end+0xfc0160cc>
   160e8:	88c00015 	stw	r3,0(r17)
   160ec:	003ff706 	br	160cc <__alt_data_end+0xfc0160cc>

000160f0 <_close_r>:
   160f0:	defffd04 	addi	sp,sp,-12
   160f4:	dc000015 	stw	r16,0(sp)
   160f8:	040000b4 	movhi	r16,2
   160fc:	dc400115 	stw	r17,4(sp)
   16100:	843f3804 	addi	r16,r16,-800
   16104:	2023883a 	mov	r17,r4
   16108:	2809883a 	mov	r4,r5
   1610c:	dfc00215 	stw	ra,8(sp)
   16110:	80000015 	stw	zero,0(r16)
   16114:	0019e7c0 	call	19e7c <close>
   16118:	00ffffc4 	movi	r3,-1
   1611c:	10c00526 	beq	r2,r3,16134 <_close_r+0x44>
   16120:	dfc00217 	ldw	ra,8(sp)
   16124:	dc400117 	ldw	r17,4(sp)
   16128:	dc000017 	ldw	r16,0(sp)
   1612c:	dec00304 	addi	sp,sp,12
   16130:	f800283a 	ret
   16134:	80c00017 	ldw	r3,0(r16)
   16138:	183ff926 	beq	r3,zero,16120 <__alt_data_end+0xfc016120>
   1613c:	88c00015 	stw	r3,0(r17)
   16140:	003ff706 	br	16120 <__alt_data_end+0xfc016120>

00016144 <_calloc_r>:
   16144:	defffe04 	addi	sp,sp,-8
   16148:	2805883a 	mov	r2,r5
   1614c:	dc000015 	stw	r16,0(sp)
   16150:	300b883a 	mov	r5,r6
   16154:	2021883a 	mov	r16,r4
   16158:	1009883a 	mov	r4,r2
   1615c:	dfc00115 	stw	ra,4(sp)
   16160:	000cefc0 	call	cefc <__mulsi3>
   16164:	100b883a 	mov	r5,r2
   16168:	8009883a 	mov	r4,r16
   1616c:	00123e00 	call	123e0 <_malloc_r>
   16170:	10002926 	beq	r2,zero,16218 <_calloc_r+0xd4>
   16174:	11bfff17 	ldw	r6,-4(r2)
   16178:	1021883a 	mov	r16,r2
   1617c:	00bfff04 	movi	r2,-4
   16180:	308c703a 	and	r6,r6,r2
   16184:	00c00904 	movi	r3,36
   16188:	308d883a 	add	r6,r6,r2
   1618c:	19801636 	bltu	r3,r6,161e8 <_calloc_r+0xa4>
   16190:	008004c4 	movi	r2,19
   16194:	11800b2e 	bgeu	r2,r6,161c4 <_calloc_r+0x80>
   16198:	80000015 	stw	zero,0(r16)
   1619c:	80000115 	stw	zero,4(r16)
   161a0:	008006c4 	movi	r2,27
   161a4:	11801a2e 	bgeu	r2,r6,16210 <_calloc_r+0xcc>
   161a8:	80000215 	stw	zero,8(r16)
   161ac:	80000315 	stw	zero,12(r16)
   161b0:	30c0151e 	bne	r6,r3,16208 <_calloc_r+0xc4>
   161b4:	80000415 	stw	zero,16(r16)
   161b8:	80800604 	addi	r2,r16,24
   161bc:	80000515 	stw	zero,20(r16)
   161c0:	00000106 	br	161c8 <_calloc_r+0x84>
   161c4:	8005883a 	mov	r2,r16
   161c8:	10000015 	stw	zero,0(r2)
   161cc:	10000115 	stw	zero,4(r2)
   161d0:	10000215 	stw	zero,8(r2)
   161d4:	8005883a 	mov	r2,r16
   161d8:	dfc00117 	ldw	ra,4(sp)
   161dc:	dc000017 	ldw	r16,0(sp)
   161e0:	dec00204 	addi	sp,sp,8
   161e4:	f800283a 	ret
   161e8:	000b883a 	mov	r5,zero
   161ec:	8009883a 	mov	r4,r16
   161f0:	0012f740 	call	12f74 <memset>
   161f4:	8005883a 	mov	r2,r16
   161f8:	dfc00117 	ldw	ra,4(sp)
   161fc:	dc000017 	ldw	r16,0(sp)
   16200:	dec00204 	addi	sp,sp,8
   16204:	f800283a 	ret
   16208:	80800404 	addi	r2,r16,16
   1620c:	003fee06 	br	161c8 <__alt_data_end+0xfc0161c8>
   16210:	80800204 	addi	r2,r16,8
   16214:	003fec06 	br	161c8 <__alt_data_end+0xfc0161c8>
   16218:	0005883a 	mov	r2,zero
   1621c:	003fee06 	br	161d8 <__alt_data_end+0xfc0161d8>

00016220 <_fclose_r>:
   16220:	28003926 	beq	r5,zero,16308 <_fclose_r+0xe8>
   16224:	defffc04 	addi	sp,sp,-16
   16228:	dc400115 	stw	r17,4(sp)
   1622c:	dc000015 	stw	r16,0(sp)
   16230:	dfc00315 	stw	ra,12(sp)
   16234:	dc800215 	stw	r18,8(sp)
   16238:	2023883a 	mov	r17,r4
   1623c:	2821883a 	mov	r16,r5
   16240:	20000226 	beq	r4,zero,1624c <_fclose_r+0x2c>
   16244:	20800e17 	ldw	r2,56(r4)
   16248:	10002726 	beq	r2,zero,162e8 <_fclose_r+0xc8>
   1624c:	8080030f 	ldh	r2,12(r16)
   16250:	1000071e 	bne	r2,zero,16270 <_fclose_r+0x50>
   16254:	0005883a 	mov	r2,zero
   16258:	dfc00317 	ldw	ra,12(sp)
   1625c:	dc800217 	ldw	r18,8(sp)
   16260:	dc400117 	ldw	r17,4(sp)
   16264:	dc000017 	ldw	r16,0(sp)
   16268:	dec00404 	addi	sp,sp,16
   1626c:	f800283a 	ret
   16270:	800b883a 	mov	r5,r16
   16274:	8809883a 	mov	r4,r17
   16278:	001106c0 	call	1106c <__sflush_r>
   1627c:	1025883a 	mov	r18,r2
   16280:	80800b17 	ldw	r2,44(r16)
   16284:	10000426 	beq	r2,zero,16298 <_fclose_r+0x78>
   16288:	81400717 	ldw	r5,28(r16)
   1628c:	8809883a 	mov	r4,r17
   16290:	103ee83a 	callr	r2
   16294:	10001616 	blt	r2,zero,162f0 <_fclose_r+0xd0>
   16298:	8080030b 	ldhu	r2,12(r16)
   1629c:	1080200c 	andi	r2,r2,128
   162a0:	1000151e 	bne	r2,zero,162f8 <_fclose_r+0xd8>
   162a4:	81400c17 	ldw	r5,48(r16)
   162a8:	28000526 	beq	r5,zero,162c0 <_fclose_r+0xa0>
   162ac:	80801004 	addi	r2,r16,64
   162b0:	28800226 	beq	r5,r2,162bc <_fclose_r+0x9c>
   162b4:	8809883a 	mov	r4,r17
   162b8:	00117e80 	call	117e8 <_free_r>
   162bc:	80000c15 	stw	zero,48(r16)
   162c0:	81401117 	ldw	r5,68(r16)
   162c4:	28000326 	beq	r5,zero,162d4 <_fclose_r+0xb4>
   162c8:	8809883a 	mov	r4,r17
   162cc:	00117e80 	call	117e8 <_free_r>
   162d0:	80001115 	stw	zero,68(r16)
   162d4:	00116840 	call	11684 <__sfp_lock_acquire>
   162d8:	8000030d 	sth	zero,12(r16)
   162dc:	00116880 	call	11688 <__sfp_lock_release>
   162e0:	9005883a 	mov	r2,r18
   162e4:	003fdc06 	br	16258 <__alt_data_end+0xfc016258>
   162e8:	00116740 	call	11674 <__sinit>
   162ec:	003fd706 	br	1624c <__alt_data_end+0xfc01624c>
   162f0:	04bfffc4 	movi	r18,-1
   162f4:	003fe806 	br	16298 <__alt_data_end+0xfc016298>
   162f8:	81400417 	ldw	r5,16(r16)
   162fc:	8809883a 	mov	r4,r17
   16300:	00117e80 	call	117e8 <_free_r>
   16304:	003fe706 	br	162a4 <__alt_data_end+0xfc0162a4>
   16308:	0005883a 	mov	r2,zero
   1630c:	f800283a 	ret

00016310 <fclose>:
   16310:	008000b4 	movhi	r2,2
   16314:	10b86304 	addi	r2,r2,-7796
   16318:	200b883a 	mov	r5,r4
   1631c:	11000017 	ldw	r4,0(r2)
   16320:	00162201 	jmpi	16220 <_fclose_r>

00016324 <__fputwc>:
   16324:	defff804 	addi	sp,sp,-32
   16328:	dcc00415 	stw	r19,16(sp)
   1632c:	dc800315 	stw	r18,12(sp)
   16330:	dc000115 	stw	r16,4(sp)
   16334:	dfc00715 	stw	ra,28(sp)
   16338:	dd400615 	stw	r21,24(sp)
   1633c:	dd000515 	stw	r20,20(sp)
   16340:	dc400215 	stw	r17,8(sp)
   16344:	2027883a 	mov	r19,r4
   16348:	2825883a 	mov	r18,r5
   1634c:	3021883a 	mov	r16,r6
   16350:	00121d00 	call	121d0 <__locale_mb_cur_max>
   16354:	00c00044 	movi	r3,1
   16358:	10c03e26 	beq	r2,r3,16454 <__fputwc+0x130>
   1635c:	81c01704 	addi	r7,r16,92
   16360:	900d883a 	mov	r6,r18
   16364:	d80b883a 	mov	r5,sp
   16368:	9809883a 	mov	r4,r19
   1636c:	00167f40 	call	167f4 <_wcrtomb_r>
   16370:	1029883a 	mov	r20,r2
   16374:	00bfffc4 	movi	r2,-1
   16378:	a0802026 	beq	r20,r2,163fc <__fputwc+0xd8>
   1637c:	d9400003 	ldbu	r5,0(sp)
   16380:	a0001c26 	beq	r20,zero,163f4 <__fputwc+0xd0>
   16384:	0023883a 	mov	r17,zero
   16388:	05400284 	movi	r21,10
   1638c:	00000906 	br	163b4 <__fputwc+0x90>
   16390:	80800017 	ldw	r2,0(r16)
   16394:	11400005 	stb	r5,0(r2)
   16398:	80c00017 	ldw	r3,0(r16)
   1639c:	18c00044 	addi	r3,r3,1
   163a0:	80c00015 	stw	r3,0(r16)
   163a4:	8c400044 	addi	r17,r17,1
   163a8:	dc45883a 	add	r2,sp,r17
   163ac:	8d00112e 	bgeu	r17,r20,163f4 <__fputwc+0xd0>
   163b0:	11400003 	ldbu	r5,0(r2)
   163b4:	80c00217 	ldw	r3,8(r16)
   163b8:	18ffffc4 	addi	r3,r3,-1
   163bc:	80c00215 	stw	r3,8(r16)
   163c0:	183ff30e 	bge	r3,zero,16390 <__alt_data_end+0xfc016390>
   163c4:	80800617 	ldw	r2,24(r16)
   163c8:	18801916 	blt	r3,r2,16430 <__fputwc+0x10c>
   163cc:	80800017 	ldw	r2,0(r16)
   163d0:	11400005 	stb	r5,0(r2)
   163d4:	80800017 	ldw	r2,0(r16)
   163d8:	10c00003 	ldbu	r3,0(r2)
   163dc:	10800044 	addi	r2,r2,1
   163e0:	1d402326 	beq	r3,r21,16470 <__fputwc+0x14c>
   163e4:	80800015 	stw	r2,0(r16)
   163e8:	8c400044 	addi	r17,r17,1
   163ec:	dc45883a 	add	r2,sp,r17
   163f0:	8d3fef36 	bltu	r17,r20,163b0 <__alt_data_end+0xfc0163b0>
   163f4:	9005883a 	mov	r2,r18
   163f8:	00000406 	br	1640c <__fputwc+0xe8>
   163fc:	80c0030b 	ldhu	r3,12(r16)
   16400:	a005883a 	mov	r2,r20
   16404:	18c01014 	ori	r3,r3,64
   16408:	80c0030d 	sth	r3,12(r16)
   1640c:	dfc00717 	ldw	ra,28(sp)
   16410:	dd400617 	ldw	r21,24(sp)
   16414:	dd000517 	ldw	r20,20(sp)
   16418:	dcc00417 	ldw	r19,16(sp)
   1641c:	dc800317 	ldw	r18,12(sp)
   16420:	dc400217 	ldw	r17,8(sp)
   16424:	dc000117 	ldw	r16,4(sp)
   16428:	dec00804 	addi	sp,sp,32
   1642c:	f800283a 	ret
   16430:	800d883a 	mov	r6,r16
   16434:	29403fcc 	andi	r5,r5,255
   16438:	9809883a 	mov	r4,r19
   1643c:	001669c0 	call	1669c <__swbuf_r>
   16440:	10bfffe0 	cmpeqi	r2,r2,-1
   16444:	10803fcc 	andi	r2,r2,255
   16448:	103fd626 	beq	r2,zero,163a4 <__alt_data_end+0xfc0163a4>
   1644c:	00bfffc4 	movi	r2,-1
   16450:	003fee06 	br	1640c <__alt_data_end+0xfc01640c>
   16454:	90ffffc4 	addi	r3,r18,-1
   16458:	01003f84 	movi	r4,254
   1645c:	20ffbf36 	bltu	r4,r3,1635c <__alt_data_end+0xfc01635c>
   16460:	900b883a 	mov	r5,r18
   16464:	dc800005 	stb	r18,0(sp)
   16468:	1029883a 	mov	r20,r2
   1646c:	003fc506 	br	16384 <__alt_data_end+0xfc016384>
   16470:	800d883a 	mov	r6,r16
   16474:	a80b883a 	mov	r5,r21
   16478:	9809883a 	mov	r4,r19
   1647c:	001669c0 	call	1669c <__swbuf_r>
   16480:	10bfffe0 	cmpeqi	r2,r2,-1
   16484:	003fef06 	br	16444 <__alt_data_end+0xfc016444>

00016488 <_fputwc_r>:
   16488:	3080030b 	ldhu	r2,12(r6)
   1648c:	10c8000c 	andi	r3,r2,8192
   16490:	1800051e 	bne	r3,zero,164a8 <_fputwc_r+0x20>
   16494:	30c01917 	ldw	r3,100(r6)
   16498:	10880014 	ori	r2,r2,8192
   1649c:	3080030d 	sth	r2,12(r6)
   164a0:	18880014 	ori	r2,r3,8192
   164a4:	30801915 	stw	r2,100(r6)
   164a8:	00163241 	jmpi	16324 <__fputwc>

000164ac <fputwc>:
   164ac:	008000b4 	movhi	r2,2
   164b0:	defffc04 	addi	sp,sp,-16
   164b4:	10b86304 	addi	r2,r2,-7796
   164b8:	dc000115 	stw	r16,4(sp)
   164bc:	14000017 	ldw	r16,0(r2)
   164c0:	dc400215 	stw	r17,8(sp)
   164c4:	dfc00315 	stw	ra,12(sp)
   164c8:	2023883a 	mov	r17,r4
   164cc:	80000226 	beq	r16,zero,164d8 <fputwc+0x2c>
   164d0:	80800e17 	ldw	r2,56(r16)
   164d4:	10001026 	beq	r2,zero,16518 <fputwc+0x6c>
   164d8:	2880030b 	ldhu	r2,12(r5)
   164dc:	10c8000c 	andi	r3,r2,8192
   164e0:	1800051e 	bne	r3,zero,164f8 <fputwc+0x4c>
   164e4:	28c01917 	ldw	r3,100(r5)
   164e8:	10880014 	ori	r2,r2,8192
   164ec:	2880030d 	sth	r2,12(r5)
   164f0:	18880014 	ori	r2,r3,8192
   164f4:	28801915 	stw	r2,100(r5)
   164f8:	280d883a 	mov	r6,r5
   164fc:	8009883a 	mov	r4,r16
   16500:	880b883a 	mov	r5,r17
   16504:	dfc00317 	ldw	ra,12(sp)
   16508:	dc400217 	ldw	r17,8(sp)
   1650c:	dc000117 	ldw	r16,4(sp)
   16510:	dec00404 	addi	sp,sp,16
   16514:	00163241 	jmpi	16324 <__fputwc>
   16518:	8009883a 	mov	r4,r16
   1651c:	d9400015 	stw	r5,0(sp)
   16520:	00116740 	call	11674 <__sinit>
   16524:	d9400017 	ldw	r5,0(sp)
   16528:	003feb06 	br	164d8 <__alt_data_end+0xfc0164d8>

0001652c <_fstat_r>:
   1652c:	defffd04 	addi	sp,sp,-12
   16530:	2805883a 	mov	r2,r5
   16534:	dc000015 	stw	r16,0(sp)
   16538:	040000b4 	movhi	r16,2
   1653c:	dc400115 	stw	r17,4(sp)
   16540:	843f3804 	addi	r16,r16,-800
   16544:	2023883a 	mov	r17,r4
   16548:	300b883a 	mov	r5,r6
   1654c:	1009883a 	mov	r4,r2
   16550:	dfc00215 	stw	ra,8(sp)
   16554:	80000015 	stw	zero,0(r16)
   16558:	0019ff00 	call	19ff0 <fstat>
   1655c:	00ffffc4 	movi	r3,-1
   16560:	10c00526 	beq	r2,r3,16578 <_fstat_r+0x4c>
   16564:	dfc00217 	ldw	ra,8(sp)
   16568:	dc400117 	ldw	r17,4(sp)
   1656c:	dc000017 	ldw	r16,0(sp)
   16570:	dec00304 	addi	sp,sp,12
   16574:	f800283a 	ret
   16578:	80c00017 	ldw	r3,0(r16)
   1657c:	183ff926 	beq	r3,zero,16564 <__alt_data_end+0xfc016564>
   16580:	88c00015 	stw	r3,0(r17)
   16584:	003ff706 	br	16564 <__alt_data_end+0xfc016564>

00016588 <_isatty_r>:
   16588:	defffd04 	addi	sp,sp,-12
   1658c:	dc000015 	stw	r16,0(sp)
   16590:	040000b4 	movhi	r16,2
   16594:	dc400115 	stw	r17,4(sp)
   16598:	843f3804 	addi	r16,r16,-800
   1659c:	2023883a 	mov	r17,r4
   165a0:	2809883a 	mov	r4,r5
   165a4:	dfc00215 	stw	ra,8(sp)
   165a8:	80000015 	stw	zero,0(r16)
   165ac:	001a0e40 	call	1a0e4 <isatty>
   165b0:	00ffffc4 	movi	r3,-1
   165b4:	10c00526 	beq	r2,r3,165cc <_isatty_r+0x44>
   165b8:	dfc00217 	ldw	ra,8(sp)
   165bc:	dc400117 	ldw	r17,4(sp)
   165c0:	dc000017 	ldw	r16,0(sp)
   165c4:	dec00304 	addi	sp,sp,12
   165c8:	f800283a 	ret
   165cc:	80c00017 	ldw	r3,0(r16)
   165d0:	183ff926 	beq	r3,zero,165b8 <__alt_data_end+0xfc0165b8>
   165d4:	88c00015 	stw	r3,0(r17)
   165d8:	003ff706 	br	165b8 <__alt_data_end+0xfc0165b8>

000165dc <_lseek_r>:
   165dc:	defffd04 	addi	sp,sp,-12
   165e0:	2805883a 	mov	r2,r5
   165e4:	dc000015 	stw	r16,0(sp)
   165e8:	040000b4 	movhi	r16,2
   165ec:	dc400115 	stw	r17,4(sp)
   165f0:	300b883a 	mov	r5,r6
   165f4:	843f3804 	addi	r16,r16,-800
   165f8:	2023883a 	mov	r17,r4
   165fc:	380d883a 	mov	r6,r7
   16600:	1009883a 	mov	r4,r2
   16604:	dfc00215 	stw	ra,8(sp)
   16608:	80000015 	stw	zero,0(r16)
   1660c:	001a2b80 	call	1a2b8 <lseek>
   16610:	00ffffc4 	movi	r3,-1
   16614:	10c00526 	beq	r2,r3,1662c <_lseek_r+0x50>
   16618:	dfc00217 	ldw	ra,8(sp)
   1661c:	dc400117 	ldw	r17,4(sp)
   16620:	dc000017 	ldw	r16,0(sp)
   16624:	dec00304 	addi	sp,sp,12
   16628:	f800283a 	ret
   1662c:	80c00017 	ldw	r3,0(r16)
   16630:	183ff926 	beq	r3,zero,16618 <__alt_data_end+0xfc016618>
   16634:	88c00015 	stw	r3,0(r17)
   16638:	003ff706 	br	16618 <__alt_data_end+0xfc016618>

0001663c <_read_r>:
   1663c:	defffd04 	addi	sp,sp,-12
   16640:	2805883a 	mov	r2,r5
   16644:	dc000015 	stw	r16,0(sp)
   16648:	040000b4 	movhi	r16,2
   1664c:	dc400115 	stw	r17,4(sp)
   16650:	300b883a 	mov	r5,r6
   16654:	843f3804 	addi	r16,r16,-800
   16658:	2023883a 	mov	r17,r4
   1665c:	380d883a 	mov	r6,r7
   16660:	1009883a 	mov	r4,r2
   16664:	dfc00215 	stw	ra,8(sp)
   16668:	80000015 	stw	zero,0(r16)
   1666c:	001a4940 	call	1a494 <read>
   16670:	00ffffc4 	movi	r3,-1
   16674:	10c00526 	beq	r2,r3,1668c <_read_r+0x50>
   16678:	dfc00217 	ldw	ra,8(sp)
   1667c:	dc400117 	ldw	r17,4(sp)
   16680:	dc000017 	ldw	r16,0(sp)
   16684:	dec00304 	addi	sp,sp,12
   16688:	f800283a 	ret
   1668c:	80c00017 	ldw	r3,0(r16)
   16690:	183ff926 	beq	r3,zero,16678 <__alt_data_end+0xfc016678>
   16694:	88c00015 	stw	r3,0(r17)
   16698:	003ff706 	br	16678 <__alt_data_end+0xfc016678>

0001669c <__swbuf_r>:
   1669c:	defffb04 	addi	sp,sp,-20
   166a0:	dcc00315 	stw	r19,12(sp)
   166a4:	dc800215 	stw	r18,8(sp)
   166a8:	dc000015 	stw	r16,0(sp)
   166ac:	dfc00415 	stw	ra,16(sp)
   166b0:	dc400115 	stw	r17,4(sp)
   166b4:	2025883a 	mov	r18,r4
   166b8:	2827883a 	mov	r19,r5
   166bc:	3021883a 	mov	r16,r6
   166c0:	20000226 	beq	r4,zero,166cc <__swbuf_r+0x30>
   166c4:	20800e17 	ldw	r2,56(r4)
   166c8:	10004226 	beq	r2,zero,167d4 <__swbuf_r+0x138>
   166cc:	80800617 	ldw	r2,24(r16)
   166d0:	8100030b 	ldhu	r4,12(r16)
   166d4:	80800215 	stw	r2,8(r16)
   166d8:	2080020c 	andi	r2,r4,8
   166dc:	10003626 	beq	r2,zero,167b8 <__swbuf_r+0x11c>
   166e0:	80c00417 	ldw	r3,16(r16)
   166e4:	18003426 	beq	r3,zero,167b8 <__swbuf_r+0x11c>
   166e8:	2088000c 	andi	r2,r4,8192
   166ec:	9c403fcc 	andi	r17,r19,255
   166f0:	10001a26 	beq	r2,zero,1675c <__swbuf_r+0xc0>
   166f4:	80800017 	ldw	r2,0(r16)
   166f8:	81000517 	ldw	r4,20(r16)
   166fc:	10c7c83a 	sub	r3,r2,r3
   16700:	1900200e 	bge	r3,r4,16784 <__swbuf_r+0xe8>
   16704:	18c00044 	addi	r3,r3,1
   16708:	81000217 	ldw	r4,8(r16)
   1670c:	11400044 	addi	r5,r2,1
   16710:	81400015 	stw	r5,0(r16)
   16714:	213fffc4 	addi	r4,r4,-1
   16718:	81000215 	stw	r4,8(r16)
   1671c:	14c00005 	stb	r19,0(r2)
   16720:	80800517 	ldw	r2,20(r16)
   16724:	10c01e26 	beq	r2,r3,167a0 <__swbuf_r+0x104>
   16728:	8080030b 	ldhu	r2,12(r16)
   1672c:	1080004c 	andi	r2,r2,1
   16730:	10000226 	beq	r2,zero,1673c <__swbuf_r+0xa0>
   16734:	00800284 	movi	r2,10
   16738:	88801926 	beq	r17,r2,167a0 <__swbuf_r+0x104>
   1673c:	8805883a 	mov	r2,r17
   16740:	dfc00417 	ldw	ra,16(sp)
   16744:	dcc00317 	ldw	r19,12(sp)
   16748:	dc800217 	ldw	r18,8(sp)
   1674c:	dc400117 	ldw	r17,4(sp)
   16750:	dc000017 	ldw	r16,0(sp)
   16754:	dec00504 	addi	sp,sp,20
   16758:	f800283a 	ret
   1675c:	81401917 	ldw	r5,100(r16)
   16760:	00b7ffc4 	movi	r2,-8193
   16764:	21080014 	ori	r4,r4,8192
   16768:	2884703a 	and	r2,r5,r2
   1676c:	80801915 	stw	r2,100(r16)
   16770:	80800017 	ldw	r2,0(r16)
   16774:	8100030d 	sth	r4,12(r16)
   16778:	81000517 	ldw	r4,20(r16)
   1677c:	10c7c83a 	sub	r3,r2,r3
   16780:	193fe016 	blt	r3,r4,16704 <__alt_data_end+0xfc016704>
   16784:	800b883a 	mov	r5,r16
   16788:	9009883a 	mov	r4,r18
   1678c:	00112880 	call	11288 <_fflush_r>
   16790:	1000071e 	bne	r2,zero,167b0 <__swbuf_r+0x114>
   16794:	80800017 	ldw	r2,0(r16)
   16798:	00c00044 	movi	r3,1
   1679c:	003fda06 	br	16708 <__alt_data_end+0xfc016708>
   167a0:	800b883a 	mov	r5,r16
   167a4:	9009883a 	mov	r4,r18
   167a8:	00112880 	call	11288 <_fflush_r>
   167ac:	103fe326 	beq	r2,zero,1673c <__alt_data_end+0xfc01673c>
   167b0:	00bfffc4 	movi	r2,-1
   167b4:	003fe206 	br	16740 <__alt_data_end+0xfc016740>
   167b8:	800b883a 	mov	r5,r16
   167bc:	9009883a 	mov	r4,r18
   167c0:	000f4e80 	call	f4e8 <__swsetup_r>
   167c4:	103ffa1e 	bne	r2,zero,167b0 <__alt_data_end+0xfc0167b0>
   167c8:	8100030b 	ldhu	r4,12(r16)
   167cc:	80c00417 	ldw	r3,16(r16)
   167d0:	003fc506 	br	166e8 <__alt_data_end+0xfc0166e8>
   167d4:	00116740 	call	11674 <__sinit>
   167d8:	003fbc06 	br	166cc <__alt_data_end+0xfc0166cc>

000167dc <__swbuf>:
   167dc:	008000b4 	movhi	r2,2
   167e0:	10b86304 	addi	r2,r2,-7796
   167e4:	280d883a 	mov	r6,r5
   167e8:	200b883a 	mov	r5,r4
   167ec:	11000017 	ldw	r4,0(r2)
   167f0:	001669c1 	jmpi	1669c <__swbuf_r>

000167f4 <_wcrtomb_r>:
   167f4:	defff604 	addi	sp,sp,-40
   167f8:	008000b4 	movhi	r2,2
   167fc:	dc800815 	stw	r18,32(sp)
   16800:	dc400715 	stw	r17,28(sp)
   16804:	dc000615 	stw	r16,24(sp)
   16808:	10b86704 	addi	r2,r2,-7780
   1680c:	dfc00915 	stw	ra,36(sp)
   16810:	2021883a 	mov	r16,r4
   16814:	3823883a 	mov	r17,r7
   16818:	14800017 	ldw	r18,0(r2)
   1681c:	28001426 	beq	r5,zero,16870 <_wcrtomb_r+0x7c>
   16820:	d9400415 	stw	r5,16(sp)
   16824:	d9800515 	stw	r6,20(sp)
   16828:	00121c40 	call	121c4 <__locale_charset>
   1682c:	d9800517 	ldw	r6,20(sp)
   16830:	d9400417 	ldw	r5,16(sp)
   16834:	100f883a 	mov	r7,r2
   16838:	dc400015 	stw	r17,0(sp)
   1683c:	8009883a 	mov	r4,r16
   16840:	903ee83a 	callr	r18
   16844:	00ffffc4 	movi	r3,-1
   16848:	10c0031e 	bne	r2,r3,16858 <_wcrtomb_r+0x64>
   1684c:	88000015 	stw	zero,0(r17)
   16850:	00c02284 	movi	r3,138
   16854:	80c00015 	stw	r3,0(r16)
   16858:	dfc00917 	ldw	ra,36(sp)
   1685c:	dc800817 	ldw	r18,32(sp)
   16860:	dc400717 	ldw	r17,28(sp)
   16864:	dc000617 	ldw	r16,24(sp)
   16868:	dec00a04 	addi	sp,sp,40
   1686c:	f800283a 	ret
   16870:	00121c40 	call	121c4 <__locale_charset>
   16874:	100f883a 	mov	r7,r2
   16878:	dc400015 	stw	r17,0(sp)
   1687c:	000d883a 	mov	r6,zero
   16880:	d9400104 	addi	r5,sp,4
   16884:	8009883a 	mov	r4,r16
   16888:	903ee83a 	callr	r18
   1688c:	003fed06 	br	16844 <__alt_data_end+0xfc016844>

00016890 <wcrtomb>:
   16890:	defff604 	addi	sp,sp,-40
   16894:	008000b4 	movhi	r2,2
   16898:	dc800615 	stw	r18,24(sp)
   1689c:	dc400515 	stw	r17,20(sp)
   168a0:	10b86304 	addi	r2,r2,-7796
   168a4:	dfc00915 	stw	ra,36(sp)
   168a8:	dd000815 	stw	r20,32(sp)
   168ac:	dcc00715 	stw	r19,28(sp)
   168b0:	dc000415 	stw	r16,16(sp)
   168b4:	3025883a 	mov	r18,r6
   168b8:	14400017 	ldw	r17,0(r2)
   168bc:	20001926 	beq	r4,zero,16924 <wcrtomb+0x94>
   168c0:	008000b4 	movhi	r2,2
   168c4:	10b86704 	addi	r2,r2,-7780
   168c8:	15000017 	ldw	r20,0(r2)
   168cc:	2021883a 	mov	r16,r4
   168d0:	2827883a 	mov	r19,r5
   168d4:	00121c40 	call	121c4 <__locale_charset>
   168d8:	100f883a 	mov	r7,r2
   168dc:	dc800015 	stw	r18,0(sp)
   168e0:	980d883a 	mov	r6,r19
   168e4:	800b883a 	mov	r5,r16
   168e8:	8809883a 	mov	r4,r17
   168ec:	a03ee83a 	callr	r20
   168f0:	00ffffc4 	movi	r3,-1
   168f4:	10c0031e 	bne	r2,r3,16904 <wcrtomb+0x74>
   168f8:	90000015 	stw	zero,0(r18)
   168fc:	00c02284 	movi	r3,138
   16900:	88c00015 	stw	r3,0(r17)
   16904:	dfc00917 	ldw	ra,36(sp)
   16908:	dd000817 	ldw	r20,32(sp)
   1690c:	dcc00717 	ldw	r19,28(sp)
   16910:	dc800617 	ldw	r18,24(sp)
   16914:	dc400517 	ldw	r17,20(sp)
   16918:	dc000417 	ldw	r16,16(sp)
   1691c:	dec00a04 	addi	sp,sp,40
   16920:	f800283a 	ret
   16924:	008000b4 	movhi	r2,2
   16928:	10b86704 	addi	r2,r2,-7780
   1692c:	14000017 	ldw	r16,0(r2)
   16930:	00121c40 	call	121c4 <__locale_charset>
   16934:	100f883a 	mov	r7,r2
   16938:	dc800015 	stw	r18,0(sp)
   1693c:	000d883a 	mov	r6,zero
   16940:	d9400104 	addi	r5,sp,4
   16944:	8809883a 	mov	r4,r17
   16948:	803ee83a 	callr	r16
   1694c:	003fe806 	br	168f0 <__alt_data_end+0xfc0168f0>

00016950 <__ascii_wctomb>:
   16950:	28000526 	beq	r5,zero,16968 <__ascii_wctomb+0x18>
   16954:	00803fc4 	movi	r2,255
   16958:	11800536 	bltu	r2,r6,16970 <__ascii_wctomb+0x20>
   1695c:	29800005 	stb	r6,0(r5)
   16960:	00800044 	movi	r2,1
   16964:	f800283a 	ret
   16968:	0005883a 	mov	r2,zero
   1696c:	f800283a 	ret
   16970:	00802284 	movi	r2,138
   16974:	20800015 	stw	r2,0(r4)
   16978:	00bfffc4 	movi	r2,-1
   1697c:	f800283a 	ret

00016980 <_wctomb_r>:
   16980:	008000b4 	movhi	r2,2
   16984:	defff904 	addi	sp,sp,-28
   16988:	10b86704 	addi	r2,r2,-7780
   1698c:	dfc00615 	stw	ra,24(sp)
   16990:	dc400515 	stw	r17,20(sp)
   16994:	dc000415 	stw	r16,16(sp)
   16998:	3823883a 	mov	r17,r7
   1699c:	14000017 	ldw	r16,0(r2)
   169a0:	d9000115 	stw	r4,4(sp)
   169a4:	d9400215 	stw	r5,8(sp)
   169a8:	d9800315 	stw	r6,12(sp)
   169ac:	00121c40 	call	121c4 <__locale_charset>
   169b0:	d9800317 	ldw	r6,12(sp)
   169b4:	d9400217 	ldw	r5,8(sp)
   169b8:	d9000117 	ldw	r4,4(sp)
   169bc:	100f883a 	mov	r7,r2
   169c0:	dc400015 	stw	r17,0(sp)
   169c4:	803ee83a 	callr	r16
   169c8:	dfc00617 	ldw	ra,24(sp)
   169cc:	dc400517 	ldw	r17,20(sp)
   169d0:	dc000417 	ldw	r16,16(sp)
   169d4:	dec00704 	addi	sp,sp,28
   169d8:	f800283a 	ret

000169dc <__udivdi3>:
   169dc:	defff404 	addi	sp,sp,-48
   169e0:	dcc00515 	stw	r19,20(sp)
   169e4:	dc000215 	stw	r16,8(sp)
   169e8:	dfc00b15 	stw	ra,44(sp)
   169ec:	df000a15 	stw	fp,40(sp)
   169f0:	ddc00915 	stw	r23,36(sp)
   169f4:	dd800815 	stw	r22,32(sp)
   169f8:	dd400715 	stw	r21,28(sp)
   169fc:	dd000615 	stw	r20,24(sp)
   16a00:	dc800415 	stw	r18,16(sp)
   16a04:	dc400315 	stw	r17,12(sp)
   16a08:	2027883a 	mov	r19,r4
   16a0c:	2821883a 	mov	r16,r5
   16a10:	3800461e 	bne	r7,zero,16b2c <__udivdi3+0x150>
   16a14:	3023883a 	mov	r17,r6
   16a18:	2025883a 	mov	r18,r4
   16a1c:	2980572e 	bgeu	r5,r6,16b7c <__udivdi3+0x1a0>
   16a20:	00bfffd4 	movui	r2,65535
   16a24:	282d883a 	mov	r22,r5
   16a28:	1180b236 	bltu	r2,r6,16cf4 <__udivdi3+0x318>
   16a2c:	00803fc4 	movi	r2,255
   16a30:	1185803a 	cmpltu	r2,r2,r6
   16a34:	100490fa 	slli	r2,r2,3
   16a38:	3086d83a 	srl	r3,r6,r2
   16a3c:	010000b4 	movhi	r4,2
   16a40:	21316604 	addi	r4,r4,-14952
   16a44:	20c7883a 	add	r3,r4,r3
   16a48:	18c00003 	ldbu	r3,0(r3)
   16a4c:	1885883a 	add	r2,r3,r2
   16a50:	00c00804 	movi	r3,32
   16a54:	1887c83a 	sub	r3,r3,r2
   16a58:	18000526 	beq	r3,zero,16a70 <__udivdi3+0x94>
   16a5c:	80e0983a 	sll	r16,r16,r3
   16a60:	9884d83a 	srl	r2,r19,r2
   16a64:	30e2983a 	sll	r17,r6,r3
   16a68:	98e4983a 	sll	r18,r19,r3
   16a6c:	142cb03a 	or	r22,r2,r16
   16a70:	882ad43a 	srli	r21,r17,16
   16a74:	b009883a 	mov	r4,r22
   16a78:	8d3fffcc 	andi	r20,r17,65535
   16a7c:	a80b883a 	mov	r5,r21
   16a80:	000cea40 	call	cea4 <__umodsi3>
   16a84:	b009883a 	mov	r4,r22
   16a88:	a80b883a 	mov	r5,r21
   16a8c:	1027883a 	mov	r19,r2
   16a90:	000ce400 	call	ce40 <__udivsi3>
   16a94:	100b883a 	mov	r5,r2
   16a98:	a009883a 	mov	r4,r20
   16a9c:	102d883a 	mov	r22,r2
   16aa0:	000cefc0 	call	cefc <__mulsi3>
   16aa4:	9826943a 	slli	r19,r19,16
   16aa8:	9006d43a 	srli	r3,r18,16
   16aac:	1cc6b03a 	or	r3,r3,r19
   16ab0:	1880052e 	bgeu	r3,r2,16ac8 <__udivdi3+0xec>
   16ab4:	1c47883a 	add	r3,r3,r17
   16ab8:	b13fffc4 	addi	r4,r22,-1
   16abc:	1c400136 	bltu	r3,r17,16ac4 <__udivdi3+0xe8>
   16ac0:	18814236 	bltu	r3,r2,16fcc <__udivdi3+0x5f0>
   16ac4:	202d883a 	mov	r22,r4
   16ac8:	18a1c83a 	sub	r16,r3,r2
   16acc:	8009883a 	mov	r4,r16
   16ad0:	a80b883a 	mov	r5,r21
   16ad4:	000cea40 	call	cea4 <__umodsi3>
   16ad8:	1027883a 	mov	r19,r2
   16adc:	8009883a 	mov	r4,r16
   16ae0:	a80b883a 	mov	r5,r21
   16ae4:	9826943a 	slli	r19,r19,16
   16ae8:	000ce400 	call	ce40 <__udivsi3>
   16aec:	100b883a 	mov	r5,r2
   16af0:	a009883a 	mov	r4,r20
   16af4:	94bfffcc 	andi	r18,r18,65535
   16af8:	1021883a 	mov	r16,r2
   16afc:	94e4b03a 	or	r18,r18,r19
   16b00:	000cefc0 	call	cefc <__mulsi3>
   16b04:	9080052e 	bgeu	r18,r2,16b1c <__udivdi3+0x140>
   16b08:	8ca5883a 	add	r18,r17,r18
   16b0c:	80ffffc4 	addi	r3,r16,-1
   16b10:	94410c36 	bltu	r18,r17,16f44 <__udivdi3+0x568>
   16b14:	90810b2e 	bgeu	r18,r2,16f44 <__udivdi3+0x568>
   16b18:	843fff84 	addi	r16,r16,-2
   16b1c:	b004943a 	slli	r2,r22,16
   16b20:	0007883a 	mov	r3,zero
   16b24:	1404b03a 	or	r2,r2,r16
   16b28:	00005e06 	br	16ca4 <__udivdi3+0x2c8>
   16b2c:	29c05b36 	bltu	r5,r7,16c9c <__udivdi3+0x2c0>
   16b30:	00bfffd4 	movui	r2,65535
   16b34:	11c0672e 	bgeu	r2,r7,16cd4 <__udivdi3+0x2f8>
   16b38:	00804034 	movhi	r2,256
   16b3c:	10bfffc4 	addi	r2,r2,-1
   16b40:	11c10a36 	bltu	r2,r7,16f6c <__udivdi3+0x590>
   16b44:	00800404 	movi	r2,16
   16b48:	3886d83a 	srl	r3,r7,r2
   16b4c:	010000b4 	movhi	r4,2
   16b50:	21316604 	addi	r4,r4,-14952
   16b54:	20c7883a 	add	r3,r4,r3
   16b58:	18c00003 	ldbu	r3,0(r3)
   16b5c:	05c00804 	movi	r23,32
   16b60:	1885883a 	add	r2,r3,r2
   16b64:	b8afc83a 	sub	r23,r23,r2
   16b68:	b800671e 	bne	r23,zero,16d08 <__udivdi3+0x32c>
   16b6c:	3c010536 	bltu	r7,r16,16f84 <__udivdi3+0x5a8>
   16b70:	9985403a 	cmpgeu	r2,r19,r6
   16b74:	0007883a 	mov	r3,zero
   16b78:	00004a06 	br	16ca4 <__udivdi3+0x2c8>
   16b7c:	3000041e 	bne	r6,zero,16b90 <__udivdi3+0x1b4>
   16b80:	000b883a 	mov	r5,zero
   16b84:	01000044 	movi	r4,1
   16b88:	000ce400 	call	ce40 <__udivsi3>
   16b8c:	1023883a 	mov	r17,r2
   16b90:	00bfffd4 	movui	r2,65535
   16b94:	1440532e 	bgeu	r2,r17,16ce4 <__udivdi3+0x308>
   16b98:	00804034 	movhi	r2,256
   16b9c:	10bfffc4 	addi	r2,r2,-1
   16ba0:	1440f436 	bltu	r2,r17,16f74 <__udivdi3+0x598>
   16ba4:	00800404 	movi	r2,16
   16ba8:	8886d83a 	srl	r3,r17,r2
   16bac:	010000b4 	movhi	r4,2
   16bb0:	21316604 	addi	r4,r4,-14952
   16bb4:	20c7883a 	add	r3,r4,r3
   16bb8:	18c00003 	ldbu	r3,0(r3)
   16bbc:	1885883a 	add	r2,r3,r2
   16bc0:	00c00804 	movi	r3,32
   16bc4:	1887c83a 	sub	r3,r3,r2
   16bc8:	1800a51e 	bne	r3,zero,16e60 <__udivdi3+0x484>
   16bcc:	882ad43a 	srli	r21,r17,16
   16bd0:	8461c83a 	sub	r16,r16,r17
   16bd4:	8d3fffcc 	andi	r20,r17,65535
   16bd8:	00c00044 	movi	r3,1
   16bdc:	a80b883a 	mov	r5,r21
   16be0:	8009883a 	mov	r4,r16
   16be4:	d8c00115 	stw	r3,4(sp)
   16be8:	000cea40 	call	cea4 <__umodsi3>
   16bec:	a80b883a 	mov	r5,r21
   16bf0:	8009883a 	mov	r4,r16
   16bf4:	1027883a 	mov	r19,r2
   16bf8:	000ce400 	call	ce40 <__udivsi3>
   16bfc:	a00b883a 	mov	r5,r20
   16c00:	1009883a 	mov	r4,r2
   16c04:	102d883a 	mov	r22,r2
   16c08:	000cefc0 	call	cefc <__mulsi3>
   16c0c:	9826943a 	slli	r19,r19,16
   16c10:	900ed43a 	srli	r7,r18,16
   16c14:	d8c00117 	ldw	r3,4(sp)
   16c18:	3cceb03a 	or	r7,r7,r19
   16c1c:	3880052e 	bgeu	r7,r2,16c34 <__udivdi3+0x258>
   16c20:	3c4f883a 	add	r7,r7,r17
   16c24:	b13fffc4 	addi	r4,r22,-1
   16c28:	3c400136 	bltu	r7,r17,16c30 <__udivdi3+0x254>
   16c2c:	3880e436 	bltu	r7,r2,16fc0 <__udivdi3+0x5e4>
   16c30:	202d883a 	mov	r22,r4
   16c34:	38a1c83a 	sub	r16,r7,r2
   16c38:	8009883a 	mov	r4,r16
   16c3c:	a80b883a 	mov	r5,r21
   16c40:	d8c00115 	stw	r3,4(sp)
   16c44:	000cea40 	call	cea4 <__umodsi3>
   16c48:	1027883a 	mov	r19,r2
   16c4c:	8009883a 	mov	r4,r16
   16c50:	a80b883a 	mov	r5,r21
   16c54:	9826943a 	slli	r19,r19,16
   16c58:	000ce400 	call	ce40 <__udivsi3>
   16c5c:	a00b883a 	mov	r5,r20
   16c60:	1009883a 	mov	r4,r2
   16c64:	94bfffcc 	andi	r18,r18,65535
   16c68:	1021883a 	mov	r16,r2
   16c6c:	94e4b03a 	or	r18,r18,r19
   16c70:	000cefc0 	call	cefc <__mulsi3>
   16c74:	d8c00117 	ldw	r3,4(sp)
   16c78:	9080052e 	bgeu	r18,r2,16c90 <__udivdi3+0x2b4>
   16c7c:	8ca5883a 	add	r18,r17,r18
   16c80:	813fffc4 	addi	r4,r16,-1
   16c84:	9440ad36 	bltu	r18,r17,16f3c <__udivdi3+0x560>
   16c88:	9080ac2e 	bgeu	r18,r2,16f3c <__udivdi3+0x560>
   16c8c:	843fff84 	addi	r16,r16,-2
   16c90:	b004943a 	slli	r2,r22,16
   16c94:	1404b03a 	or	r2,r2,r16
   16c98:	00000206 	br	16ca4 <__udivdi3+0x2c8>
   16c9c:	0007883a 	mov	r3,zero
   16ca0:	0005883a 	mov	r2,zero
   16ca4:	dfc00b17 	ldw	ra,44(sp)
   16ca8:	df000a17 	ldw	fp,40(sp)
   16cac:	ddc00917 	ldw	r23,36(sp)
   16cb0:	dd800817 	ldw	r22,32(sp)
   16cb4:	dd400717 	ldw	r21,28(sp)
   16cb8:	dd000617 	ldw	r20,24(sp)
   16cbc:	dcc00517 	ldw	r19,20(sp)
   16cc0:	dc800417 	ldw	r18,16(sp)
   16cc4:	dc400317 	ldw	r17,12(sp)
   16cc8:	dc000217 	ldw	r16,8(sp)
   16ccc:	dec00c04 	addi	sp,sp,48
   16cd0:	f800283a 	ret
   16cd4:	00803fc4 	movi	r2,255
   16cd8:	11c5803a 	cmpltu	r2,r2,r7
   16cdc:	100490fa 	slli	r2,r2,3
   16ce0:	003f9906 	br	16b48 <__alt_data_end+0xfc016b48>
   16ce4:	00803fc4 	movi	r2,255
   16ce8:	1445803a 	cmpltu	r2,r2,r17
   16cec:	100490fa 	slli	r2,r2,3
   16cf0:	003fad06 	br	16ba8 <__alt_data_end+0xfc016ba8>
   16cf4:	00804034 	movhi	r2,256
   16cf8:	10bfffc4 	addi	r2,r2,-1
   16cfc:	11809f36 	bltu	r2,r6,16f7c <__udivdi3+0x5a0>
   16d00:	00800404 	movi	r2,16
   16d04:	003f4c06 	br	16a38 <__alt_data_end+0xfc016a38>
   16d08:	3dce983a 	sll	r7,r7,r23
   16d0c:	30b8d83a 	srl	fp,r6,r2
   16d10:	80a2d83a 	srl	r17,r16,r2
   16d14:	35cc983a 	sll	r6,r6,r23
   16d18:	3f38b03a 	or	fp,r7,fp
   16d1c:	e024d43a 	srli	r18,fp,16
   16d20:	9884d83a 	srl	r2,r19,r2
   16d24:	85e0983a 	sll	r16,r16,r23
   16d28:	8809883a 	mov	r4,r17
   16d2c:	900b883a 	mov	r5,r18
   16d30:	d9800015 	stw	r6,0(sp)
   16d34:	1420b03a 	or	r16,r2,r16
   16d38:	000cea40 	call	cea4 <__umodsi3>
   16d3c:	900b883a 	mov	r5,r18
   16d40:	8809883a 	mov	r4,r17
   16d44:	1029883a 	mov	r20,r2
   16d48:	e5bfffcc 	andi	r22,fp,65535
   16d4c:	000ce400 	call	ce40 <__udivsi3>
   16d50:	100b883a 	mov	r5,r2
   16d54:	b009883a 	mov	r4,r22
   16d58:	102b883a 	mov	r21,r2
   16d5c:	000cefc0 	call	cefc <__mulsi3>
   16d60:	a028943a 	slli	r20,r20,16
   16d64:	8006d43a 	srli	r3,r16,16
   16d68:	1d06b03a 	or	r3,r3,r20
   16d6c:	1880042e 	bgeu	r3,r2,16d80 <__udivdi3+0x3a4>
   16d70:	1f07883a 	add	r3,r3,fp
   16d74:	a93fffc4 	addi	r4,r21,-1
   16d78:	1f00892e 	bgeu	r3,fp,16fa0 <__udivdi3+0x5c4>
   16d7c:	202b883a 	mov	r21,r4
   16d80:	18a3c83a 	sub	r17,r3,r2
   16d84:	8809883a 	mov	r4,r17
   16d88:	900b883a 	mov	r5,r18
   16d8c:	000cea40 	call	cea4 <__umodsi3>
   16d90:	1029883a 	mov	r20,r2
   16d94:	8809883a 	mov	r4,r17
   16d98:	900b883a 	mov	r5,r18
   16d9c:	a028943a 	slli	r20,r20,16
   16da0:	000ce400 	call	ce40 <__udivsi3>
   16da4:	100b883a 	mov	r5,r2
   16da8:	b009883a 	mov	r4,r22
   16dac:	843fffcc 	andi	r16,r16,65535
   16db0:	1023883a 	mov	r17,r2
   16db4:	8520b03a 	or	r16,r16,r20
   16db8:	000cefc0 	call	cefc <__mulsi3>
   16dbc:	8080042e 	bgeu	r16,r2,16dd0 <__udivdi3+0x3f4>
   16dc0:	8721883a 	add	r16,r16,fp
   16dc4:	88ffffc4 	addi	r3,r17,-1
   16dc8:	8700712e 	bgeu	r16,fp,16f90 <__udivdi3+0x5b4>
   16dcc:	1823883a 	mov	r17,r3
   16dd0:	a80e943a 	slli	r7,r21,16
   16dd4:	d8c00017 	ldw	r3,0(sp)
   16dd8:	80a1c83a 	sub	r16,r16,r2
   16ddc:	3c64b03a 	or	r18,r7,r17
   16de0:	1d3fffcc 	andi	r20,r3,65535
   16de4:	9022d43a 	srli	r17,r18,16
   16de8:	95bfffcc 	andi	r22,r18,65535
   16dec:	a00b883a 	mov	r5,r20
   16df0:	b009883a 	mov	r4,r22
   16df4:	182ad43a 	srli	r21,r3,16
   16df8:	000cefc0 	call	cefc <__mulsi3>
   16dfc:	a00b883a 	mov	r5,r20
   16e00:	8809883a 	mov	r4,r17
   16e04:	1039883a 	mov	fp,r2
   16e08:	000cefc0 	call	cefc <__mulsi3>
   16e0c:	8809883a 	mov	r4,r17
   16e10:	a80b883a 	mov	r5,r21
   16e14:	1029883a 	mov	r20,r2
   16e18:	000cefc0 	call	cefc <__mulsi3>
   16e1c:	a80b883a 	mov	r5,r21
   16e20:	b009883a 	mov	r4,r22
   16e24:	1023883a 	mov	r17,r2
   16e28:	000cefc0 	call	cefc <__mulsi3>
   16e2c:	e006d43a 	srli	r3,fp,16
   16e30:	1505883a 	add	r2,r2,r20
   16e34:	1887883a 	add	r3,r3,r2
   16e38:	1d00022e 	bgeu	r3,r20,16e44 <__udivdi3+0x468>
   16e3c:	00800074 	movhi	r2,1
   16e40:	88a3883a 	add	r17,r17,r2
   16e44:	1804d43a 	srli	r2,r3,16
   16e48:	1463883a 	add	r17,r2,r17
   16e4c:	84404436 	bltu	r16,r17,16f60 <__udivdi3+0x584>
   16e50:	84403e26 	beq	r16,r17,16f4c <__udivdi3+0x570>
   16e54:	9005883a 	mov	r2,r18
   16e58:	0007883a 	mov	r3,zero
   16e5c:	003f9106 	br	16ca4 <__alt_data_end+0xfc016ca4>
   16e60:	88e2983a 	sll	r17,r17,r3
   16e64:	80aed83a 	srl	r23,r16,r2
   16e68:	80e0983a 	sll	r16,r16,r3
   16e6c:	882ad43a 	srli	r21,r17,16
   16e70:	9884d83a 	srl	r2,r19,r2
   16e74:	b809883a 	mov	r4,r23
   16e78:	a80b883a 	mov	r5,r21
   16e7c:	98e4983a 	sll	r18,r19,r3
   16e80:	142cb03a 	or	r22,r2,r16
   16e84:	000cea40 	call	cea4 <__umodsi3>
   16e88:	b809883a 	mov	r4,r23
   16e8c:	a80b883a 	mov	r5,r21
   16e90:	1027883a 	mov	r19,r2
   16e94:	8d3fffcc 	andi	r20,r17,65535
   16e98:	000ce400 	call	ce40 <__udivsi3>
   16e9c:	a009883a 	mov	r4,r20
   16ea0:	100b883a 	mov	r5,r2
   16ea4:	102f883a 	mov	r23,r2
   16ea8:	000cefc0 	call	cefc <__mulsi3>
   16eac:	9826943a 	slli	r19,r19,16
   16eb0:	b008d43a 	srli	r4,r22,16
   16eb4:	24c8b03a 	or	r4,r4,r19
   16eb8:	2080062e 	bgeu	r4,r2,16ed4 <__udivdi3+0x4f8>
   16ebc:	2449883a 	add	r4,r4,r17
   16ec0:	b8ffffc4 	addi	r3,r23,-1
   16ec4:	24403c36 	bltu	r4,r17,16fb8 <__udivdi3+0x5dc>
   16ec8:	20803b2e 	bgeu	r4,r2,16fb8 <__udivdi3+0x5dc>
   16ecc:	bdffff84 	addi	r23,r23,-2
   16ed0:	2449883a 	add	r4,r4,r17
   16ed4:	20a1c83a 	sub	r16,r4,r2
   16ed8:	a80b883a 	mov	r5,r21
   16edc:	8009883a 	mov	r4,r16
   16ee0:	000cea40 	call	cea4 <__umodsi3>
   16ee4:	a80b883a 	mov	r5,r21
   16ee8:	8009883a 	mov	r4,r16
   16eec:	1027883a 	mov	r19,r2
   16ef0:	000ce400 	call	ce40 <__udivsi3>
   16ef4:	a009883a 	mov	r4,r20
   16ef8:	100b883a 	mov	r5,r2
   16efc:	9826943a 	slli	r19,r19,16
   16f00:	1039883a 	mov	fp,r2
   16f04:	000cefc0 	call	cefc <__mulsi3>
   16f08:	b13fffcc 	andi	r4,r22,65535
   16f0c:	24c8b03a 	or	r4,r4,r19
   16f10:	2080062e 	bgeu	r4,r2,16f2c <__udivdi3+0x550>
   16f14:	2449883a 	add	r4,r4,r17
   16f18:	e0ffffc4 	addi	r3,fp,-1
   16f1c:	24402436 	bltu	r4,r17,16fb0 <__udivdi3+0x5d4>
   16f20:	2080232e 	bgeu	r4,r2,16fb0 <__udivdi3+0x5d4>
   16f24:	e73fff84 	addi	fp,fp,-2
   16f28:	2449883a 	add	r4,r4,r17
   16f2c:	b82e943a 	slli	r23,r23,16
   16f30:	20a1c83a 	sub	r16,r4,r2
   16f34:	bf06b03a 	or	r3,r23,fp
   16f38:	003f2806 	br	16bdc <__alt_data_end+0xfc016bdc>
   16f3c:	2021883a 	mov	r16,r4
   16f40:	003f5306 	br	16c90 <__alt_data_end+0xfc016c90>
   16f44:	1821883a 	mov	r16,r3
   16f48:	003ef406 	br	16b1c <__alt_data_end+0xfc016b1c>
   16f4c:	1806943a 	slli	r3,r3,16
   16f50:	9de6983a 	sll	r19,r19,r23
   16f54:	e73fffcc 	andi	fp,fp,65535
   16f58:	1f07883a 	add	r3,r3,fp
   16f5c:	98ffbd2e 	bgeu	r19,r3,16e54 <__alt_data_end+0xfc016e54>
   16f60:	90bfffc4 	addi	r2,r18,-1
   16f64:	0007883a 	mov	r3,zero
   16f68:	003f4e06 	br	16ca4 <__alt_data_end+0xfc016ca4>
   16f6c:	00800604 	movi	r2,24
   16f70:	003ef506 	br	16b48 <__alt_data_end+0xfc016b48>
   16f74:	00800604 	movi	r2,24
   16f78:	003f0b06 	br	16ba8 <__alt_data_end+0xfc016ba8>
   16f7c:	00800604 	movi	r2,24
   16f80:	003ead06 	br	16a38 <__alt_data_end+0xfc016a38>
   16f84:	0007883a 	mov	r3,zero
   16f88:	00800044 	movi	r2,1
   16f8c:	003f4506 	br	16ca4 <__alt_data_end+0xfc016ca4>
   16f90:	80bf8e2e 	bgeu	r16,r2,16dcc <__alt_data_end+0xfc016dcc>
   16f94:	8c7fff84 	addi	r17,r17,-2
   16f98:	8721883a 	add	r16,r16,fp
   16f9c:	003f8c06 	br	16dd0 <__alt_data_end+0xfc016dd0>
   16fa0:	18bf762e 	bgeu	r3,r2,16d7c <__alt_data_end+0xfc016d7c>
   16fa4:	ad7fff84 	addi	r21,r21,-2
   16fa8:	1f07883a 	add	r3,r3,fp
   16fac:	003f7406 	br	16d80 <__alt_data_end+0xfc016d80>
   16fb0:	1839883a 	mov	fp,r3
   16fb4:	003fdd06 	br	16f2c <__alt_data_end+0xfc016f2c>
   16fb8:	182f883a 	mov	r23,r3
   16fbc:	003fc506 	br	16ed4 <__alt_data_end+0xfc016ed4>
   16fc0:	b5bfff84 	addi	r22,r22,-2
   16fc4:	3c4f883a 	add	r7,r7,r17
   16fc8:	003f1a06 	br	16c34 <__alt_data_end+0xfc016c34>
   16fcc:	b5bfff84 	addi	r22,r22,-2
   16fd0:	1c47883a 	add	r3,r3,r17
   16fd4:	003ebc06 	br	16ac8 <__alt_data_end+0xfc016ac8>

00016fd8 <__umoddi3>:
   16fd8:	defff304 	addi	sp,sp,-52
   16fdc:	df000b15 	stw	fp,44(sp)
   16fe0:	dc400415 	stw	r17,16(sp)
   16fe4:	dc000315 	stw	r16,12(sp)
   16fe8:	dfc00c15 	stw	ra,48(sp)
   16fec:	ddc00a15 	stw	r23,40(sp)
   16ff0:	dd800915 	stw	r22,36(sp)
   16ff4:	dd400815 	stw	r21,32(sp)
   16ff8:	dd000715 	stw	r20,28(sp)
   16ffc:	dcc00615 	stw	r19,24(sp)
   17000:	dc800515 	stw	r18,20(sp)
   17004:	2021883a 	mov	r16,r4
   17008:	2823883a 	mov	r17,r5
   1700c:	2839883a 	mov	fp,r5
   17010:	3800401e 	bne	r7,zero,17114 <__umoddi3+0x13c>
   17014:	3027883a 	mov	r19,r6
   17018:	2029883a 	mov	r20,r4
   1701c:	2980552e 	bgeu	r5,r6,17174 <__umoddi3+0x19c>
   17020:	00bfffd4 	movui	r2,65535
   17024:	1180a236 	bltu	r2,r6,172b0 <__umoddi3+0x2d8>
   17028:	01003fc4 	movi	r4,255
   1702c:	2189803a 	cmpltu	r4,r4,r6
   17030:	200890fa 	slli	r4,r4,3
   17034:	3104d83a 	srl	r2,r6,r4
   17038:	00c000b4 	movhi	r3,2
   1703c:	18f16604 	addi	r3,r3,-14952
   17040:	1885883a 	add	r2,r3,r2
   17044:	10c00003 	ldbu	r3,0(r2)
   17048:	00800804 	movi	r2,32
   1704c:	1909883a 	add	r4,r3,r4
   17050:	1125c83a 	sub	r18,r2,r4
   17054:	90000526 	beq	r18,zero,1706c <__umoddi3+0x94>
   17058:	8ca2983a 	sll	r17,r17,r18
   1705c:	8108d83a 	srl	r4,r16,r4
   17060:	34a6983a 	sll	r19,r6,r18
   17064:	84a8983a 	sll	r20,r16,r18
   17068:	2478b03a 	or	fp,r4,r17
   1706c:	982cd43a 	srli	r22,r19,16
   17070:	e009883a 	mov	r4,fp
   17074:	9dffffcc 	andi	r23,r19,65535
   17078:	b00b883a 	mov	r5,r22
   1707c:	000cea40 	call	cea4 <__umodsi3>
   17080:	b00b883a 	mov	r5,r22
   17084:	e009883a 	mov	r4,fp
   17088:	102b883a 	mov	r21,r2
   1708c:	000ce400 	call	ce40 <__udivsi3>
   17090:	100b883a 	mov	r5,r2
   17094:	b809883a 	mov	r4,r23
   17098:	000cefc0 	call	cefc <__mulsi3>
   1709c:	a82a943a 	slli	r21,r21,16
   170a0:	a006d43a 	srli	r3,r20,16
   170a4:	1d46b03a 	or	r3,r3,r21
   170a8:	1880032e 	bgeu	r3,r2,170b8 <__umoddi3+0xe0>
   170ac:	1cc7883a 	add	r3,r3,r19
   170b0:	1cc00136 	bltu	r3,r19,170b8 <__umoddi3+0xe0>
   170b4:	18813136 	bltu	r3,r2,1757c <__umoddi3+0x5a4>
   170b8:	18a1c83a 	sub	r16,r3,r2
   170bc:	b00b883a 	mov	r5,r22
   170c0:	8009883a 	mov	r4,r16
   170c4:	000cea40 	call	cea4 <__umodsi3>
   170c8:	b00b883a 	mov	r5,r22
   170cc:	8009883a 	mov	r4,r16
   170d0:	1023883a 	mov	r17,r2
   170d4:	000ce400 	call	ce40 <__udivsi3>
   170d8:	100b883a 	mov	r5,r2
   170dc:	b809883a 	mov	r4,r23
   170e0:	8822943a 	slli	r17,r17,16
   170e4:	000cefc0 	call	cefc <__mulsi3>
   170e8:	a0ffffcc 	andi	r3,r20,65535
   170ec:	1c46b03a 	or	r3,r3,r17
   170f0:	1880042e 	bgeu	r3,r2,17104 <__umoddi3+0x12c>
   170f4:	1cc7883a 	add	r3,r3,r19
   170f8:	1cc00236 	bltu	r3,r19,17104 <__umoddi3+0x12c>
   170fc:	1880012e 	bgeu	r3,r2,17104 <__umoddi3+0x12c>
   17100:	1cc7883a 	add	r3,r3,r19
   17104:	1885c83a 	sub	r2,r3,r2
   17108:	1484d83a 	srl	r2,r2,r18
   1710c:	0007883a 	mov	r3,zero
   17110:	00005306 	br	17260 <__umoddi3+0x288>
   17114:	29c05036 	bltu	r5,r7,17258 <__umoddi3+0x280>
   17118:	00bfffd4 	movui	r2,65535
   1711c:	11c05c2e 	bgeu	r2,r7,17290 <__umoddi3+0x2b8>
   17120:	00804034 	movhi	r2,256
   17124:	10bfffc4 	addi	r2,r2,-1
   17128:	11c10636 	bltu	r2,r7,17544 <__umoddi3+0x56c>
   1712c:	01000404 	movi	r4,16
   17130:	3904d83a 	srl	r2,r7,r4
   17134:	00c000b4 	movhi	r3,2
   17138:	18f16604 	addi	r3,r3,-14952
   1713c:	1885883a 	add	r2,r3,r2
   17140:	14c00003 	ldbu	r19,0(r2)
   17144:	00c00804 	movi	r3,32
   17148:	9927883a 	add	r19,r19,r4
   1714c:	1ce9c83a 	sub	r20,r3,r19
   17150:	a0005c1e 	bne	r20,zero,172c4 <__umoddi3+0x2ec>
   17154:	3c400136 	bltu	r7,r17,1715c <__umoddi3+0x184>
   17158:	81810a36 	bltu	r16,r6,17584 <__umoddi3+0x5ac>
   1715c:	8185c83a 	sub	r2,r16,r6
   17160:	89e3c83a 	sub	r17,r17,r7
   17164:	8089803a 	cmpltu	r4,r16,r2
   17168:	8939c83a 	sub	fp,r17,r4
   1716c:	e007883a 	mov	r3,fp
   17170:	00003b06 	br	17260 <__umoddi3+0x288>
   17174:	3000041e 	bne	r6,zero,17188 <__umoddi3+0x1b0>
   17178:	000b883a 	mov	r5,zero
   1717c:	01000044 	movi	r4,1
   17180:	000ce400 	call	ce40 <__udivsi3>
   17184:	1027883a 	mov	r19,r2
   17188:	00bfffd4 	movui	r2,65535
   1718c:	14c0442e 	bgeu	r2,r19,172a0 <__umoddi3+0x2c8>
   17190:	00804034 	movhi	r2,256
   17194:	10bfffc4 	addi	r2,r2,-1
   17198:	14c0ec36 	bltu	r2,r19,1754c <__umoddi3+0x574>
   1719c:	00800404 	movi	r2,16
   171a0:	9886d83a 	srl	r3,r19,r2
   171a4:	010000b4 	movhi	r4,2
   171a8:	21316604 	addi	r4,r4,-14952
   171ac:	20c7883a 	add	r3,r4,r3
   171b0:	18c00003 	ldbu	r3,0(r3)
   171b4:	1887883a 	add	r3,r3,r2
   171b8:	00800804 	movi	r2,32
   171bc:	10e5c83a 	sub	r18,r2,r3
   171c0:	9000ab1e 	bne	r18,zero,17470 <__umoddi3+0x498>
   171c4:	982cd43a 	srli	r22,r19,16
   171c8:	8ce3c83a 	sub	r17,r17,r19
   171cc:	9dffffcc 	andi	r23,r19,65535
   171d0:	b00b883a 	mov	r5,r22
   171d4:	8809883a 	mov	r4,r17
   171d8:	000cea40 	call	cea4 <__umodsi3>
   171dc:	b00b883a 	mov	r5,r22
   171e0:	8809883a 	mov	r4,r17
   171e4:	102b883a 	mov	r21,r2
   171e8:	000ce400 	call	ce40 <__udivsi3>
   171ec:	b80b883a 	mov	r5,r23
   171f0:	1009883a 	mov	r4,r2
   171f4:	000cefc0 	call	cefc <__mulsi3>
   171f8:	a82a943a 	slli	r21,r21,16
   171fc:	a006d43a 	srli	r3,r20,16
   17200:	1d46b03a 	or	r3,r3,r21
   17204:	1880042e 	bgeu	r3,r2,17218 <__umoddi3+0x240>
   17208:	1cc7883a 	add	r3,r3,r19
   1720c:	1cc00236 	bltu	r3,r19,17218 <__umoddi3+0x240>
   17210:	1880012e 	bgeu	r3,r2,17218 <__umoddi3+0x240>
   17214:	1cc7883a 	add	r3,r3,r19
   17218:	18a1c83a 	sub	r16,r3,r2
   1721c:	b00b883a 	mov	r5,r22
   17220:	8009883a 	mov	r4,r16
   17224:	000cea40 	call	cea4 <__umodsi3>
   17228:	1023883a 	mov	r17,r2
   1722c:	b00b883a 	mov	r5,r22
   17230:	8009883a 	mov	r4,r16
   17234:	000ce400 	call	ce40 <__udivsi3>
   17238:	8822943a 	slli	r17,r17,16
   1723c:	b80b883a 	mov	r5,r23
   17240:	1009883a 	mov	r4,r2
   17244:	000cefc0 	call	cefc <__mulsi3>
   17248:	a53fffcc 	andi	r20,r20,65535
   1724c:	a446b03a 	or	r3,r20,r17
   17250:	18bfac2e 	bgeu	r3,r2,17104 <__alt_data_end+0xfc017104>
   17254:	003fa706 	br	170f4 <__alt_data_end+0xfc0170f4>
   17258:	2005883a 	mov	r2,r4
   1725c:	2807883a 	mov	r3,r5
   17260:	dfc00c17 	ldw	ra,48(sp)
   17264:	df000b17 	ldw	fp,44(sp)
   17268:	ddc00a17 	ldw	r23,40(sp)
   1726c:	dd800917 	ldw	r22,36(sp)
   17270:	dd400817 	ldw	r21,32(sp)
   17274:	dd000717 	ldw	r20,28(sp)
   17278:	dcc00617 	ldw	r19,24(sp)
   1727c:	dc800517 	ldw	r18,20(sp)
   17280:	dc400417 	ldw	r17,16(sp)
   17284:	dc000317 	ldw	r16,12(sp)
   17288:	dec00d04 	addi	sp,sp,52
   1728c:	f800283a 	ret
   17290:	04c03fc4 	movi	r19,255
   17294:	99c9803a 	cmpltu	r4,r19,r7
   17298:	200890fa 	slli	r4,r4,3
   1729c:	003fa406 	br	17130 <__alt_data_end+0xfc017130>
   172a0:	00803fc4 	movi	r2,255
   172a4:	14c5803a 	cmpltu	r2,r2,r19
   172a8:	100490fa 	slli	r2,r2,3
   172ac:	003fbc06 	br	171a0 <__alt_data_end+0xfc0171a0>
   172b0:	00804034 	movhi	r2,256
   172b4:	10bfffc4 	addi	r2,r2,-1
   172b8:	1180a636 	bltu	r2,r6,17554 <__umoddi3+0x57c>
   172bc:	01000404 	movi	r4,16
   172c0:	003f5c06 	br	17034 <__alt_data_end+0xfc017034>
   172c4:	3d0e983a 	sll	r7,r7,r20
   172c8:	34ead83a 	srl	r21,r6,r19
   172cc:	8cc6d83a 	srl	r3,r17,r19
   172d0:	8d10983a 	sll	r8,r17,r20
   172d4:	3d6ab03a 	or	r21,r7,r21
   172d8:	a82cd43a 	srli	r22,r21,16
   172dc:	84e2d83a 	srl	r17,r16,r19
   172e0:	1809883a 	mov	r4,r3
   172e4:	b00b883a 	mov	r5,r22
   172e8:	8a22b03a 	or	r17,r17,r8
   172ec:	3524983a 	sll	r18,r6,r20
   172f0:	dc400015 	stw	r17,0(sp)
   172f4:	d8c00115 	stw	r3,4(sp)
   172f8:	000cea40 	call	cea4 <__umodsi3>
   172fc:	d8c00117 	ldw	r3,4(sp)
   17300:	b00b883a 	mov	r5,r22
   17304:	1039883a 	mov	fp,r2
   17308:	1809883a 	mov	r4,r3
   1730c:	000ce400 	call	ce40 <__udivsi3>
   17310:	adffffcc 	andi	r23,r21,65535
   17314:	100b883a 	mov	r5,r2
   17318:	b809883a 	mov	r4,r23
   1731c:	1023883a 	mov	r17,r2
   17320:	000cefc0 	call	cefc <__mulsi3>
   17324:	d9400017 	ldw	r5,0(sp)
   17328:	e008943a 	slli	r4,fp,16
   1732c:	8520983a 	sll	r16,r16,r20
   17330:	2806d43a 	srli	r3,r5,16
   17334:	1906b03a 	or	r3,r3,r4
   17338:	1880042e 	bgeu	r3,r2,1734c <__umoddi3+0x374>
   1733c:	1d47883a 	add	r3,r3,r21
   17340:	893fffc4 	addi	r4,r17,-1
   17344:	1d40892e 	bgeu	r3,r21,1756c <__umoddi3+0x594>
   17348:	2023883a 	mov	r17,r4
   1734c:	18b9c83a 	sub	fp,r3,r2
   17350:	b00b883a 	mov	r5,r22
   17354:	e009883a 	mov	r4,fp
   17358:	000cea40 	call	cea4 <__umodsi3>
   1735c:	b00b883a 	mov	r5,r22
   17360:	e009883a 	mov	r4,fp
   17364:	d8800215 	stw	r2,8(sp)
   17368:	000ce400 	call	ce40 <__udivsi3>
   1736c:	100b883a 	mov	r5,r2
   17370:	b809883a 	mov	r4,r23
   17374:	102d883a 	mov	r22,r2
   17378:	000cefc0 	call	cefc <__mulsi3>
   1737c:	d9800217 	ldw	r6,8(sp)
   17380:	d8c00017 	ldw	r3,0(sp)
   17384:	300c943a 	slli	r6,r6,16
   17388:	1a3fffcc 	andi	r8,r3,65535
   1738c:	4190b03a 	or	r8,r8,r6
   17390:	4080042e 	bgeu	r8,r2,173a4 <__umoddi3+0x3cc>
   17394:	4551883a 	add	r8,r8,r21
   17398:	b0ffffc4 	addi	r3,r22,-1
   1739c:	45406f2e 	bgeu	r8,r21,1755c <__umoddi3+0x584>
   173a0:	182d883a 	mov	r22,r3
   173a4:	880e943a 	slli	r7,r17,16
   173a8:	9006d43a 	srli	r3,r18,16
   173ac:	91bfffcc 	andi	r6,r18,65535
   173b0:	3dacb03a 	or	r22,r7,r22
   173b4:	b02ed43a 	srli	r23,r22,16
   173b8:	b5bfffcc 	andi	r22,r22,65535
   173bc:	300b883a 	mov	r5,r6
   173c0:	b009883a 	mov	r4,r22
   173c4:	40a3c83a 	sub	r17,r8,r2
   173c8:	d8c00115 	stw	r3,4(sp)
   173cc:	d9800215 	stw	r6,8(sp)
   173d0:	000cefc0 	call	cefc <__mulsi3>
   173d4:	d9800217 	ldw	r6,8(sp)
   173d8:	b809883a 	mov	r4,r23
   173dc:	1039883a 	mov	fp,r2
   173e0:	300b883a 	mov	r5,r6
   173e4:	000cefc0 	call	cefc <__mulsi3>
   173e8:	d8c00117 	ldw	r3,4(sp)
   173ec:	b809883a 	mov	r4,r23
   173f0:	d8800215 	stw	r2,8(sp)
   173f4:	180b883a 	mov	r5,r3
   173f8:	000cefc0 	call	cefc <__mulsi3>
   173fc:	d8c00117 	ldw	r3,4(sp)
   17400:	b009883a 	mov	r4,r22
   17404:	102f883a 	mov	r23,r2
   17408:	180b883a 	mov	r5,r3
   1740c:	000cefc0 	call	cefc <__mulsi3>
   17410:	d9800217 	ldw	r6,8(sp)
   17414:	e006d43a 	srli	r3,fp,16
   17418:	1185883a 	add	r2,r2,r6
   1741c:	1885883a 	add	r2,r3,r2
   17420:	1180022e 	bgeu	r2,r6,1742c <__umoddi3+0x454>
   17424:	00c00074 	movhi	r3,1
   17428:	b8ef883a 	add	r23,r23,r3
   1742c:	1006d43a 	srli	r3,r2,16
   17430:	1004943a 	slli	r2,r2,16
   17434:	e73fffcc 	andi	fp,fp,65535
   17438:	1dc7883a 	add	r3,r3,r23
   1743c:	1739883a 	add	fp,r2,fp
   17440:	88c03a36 	bltu	r17,r3,1752c <__umoddi3+0x554>
   17444:	88c05126 	beq	r17,r3,1758c <__umoddi3+0x5b4>
   17448:	88c9c83a 	sub	r4,r17,r3
   1744c:	e00f883a 	mov	r7,fp
   17450:	81cfc83a 	sub	r7,r16,r7
   17454:	81c7803a 	cmpltu	r3,r16,r7
   17458:	20c7c83a 	sub	r3,r4,r3
   1745c:	1cc4983a 	sll	r2,r3,r19
   17460:	3d0ed83a 	srl	r7,r7,r20
   17464:	1d06d83a 	srl	r3,r3,r20
   17468:	11c4b03a 	or	r2,r2,r7
   1746c:	003f7c06 	br	17260 <__alt_data_end+0xfc017260>
   17470:	9ca6983a 	sll	r19,r19,r18
   17474:	88f8d83a 	srl	fp,r17,r3
   17478:	80c4d83a 	srl	r2,r16,r3
   1747c:	982cd43a 	srli	r22,r19,16
   17480:	8ca2983a 	sll	r17,r17,r18
   17484:	e009883a 	mov	r4,fp
   17488:	b00b883a 	mov	r5,r22
   1748c:	146ab03a 	or	r21,r2,r17
   17490:	000cea40 	call	cea4 <__umodsi3>
   17494:	b00b883a 	mov	r5,r22
   17498:	e009883a 	mov	r4,fp
   1749c:	1029883a 	mov	r20,r2
   174a0:	9dffffcc 	andi	r23,r19,65535
   174a4:	000ce400 	call	ce40 <__udivsi3>
   174a8:	b809883a 	mov	r4,r23
   174ac:	100b883a 	mov	r5,r2
   174b0:	000cefc0 	call	cefc <__mulsi3>
   174b4:	a008943a 	slli	r4,r20,16
   174b8:	a806d43a 	srli	r3,r21,16
   174bc:	84a8983a 	sll	r20,r16,r18
   174c0:	1906b03a 	or	r3,r3,r4
   174c4:	1880042e 	bgeu	r3,r2,174d8 <__umoddi3+0x500>
   174c8:	1cc7883a 	add	r3,r3,r19
   174cc:	1cc00236 	bltu	r3,r19,174d8 <__umoddi3+0x500>
   174d0:	1880012e 	bgeu	r3,r2,174d8 <__umoddi3+0x500>
   174d4:	1cc7883a 	add	r3,r3,r19
   174d8:	18a3c83a 	sub	r17,r3,r2
   174dc:	b00b883a 	mov	r5,r22
   174e0:	8809883a 	mov	r4,r17
   174e4:	000cea40 	call	cea4 <__umodsi3>
   174e8:	b00b883a 	mov	r5,r22
   174ec:	8809883a 	mov	r4,r17
   174f0:	1021883a 	mov	r16,r2
   174f4:	000ce400 	call	ce40 <__udivsi3>
   174f8:	100b883a 	mov	r5,r2
   174fc:	b809883a 	mov	r4,r23
   17500:	8020943a 	slli	r16,r16,16
   17504:	000cefc0 	call	cefc <__mulsi3>
   17508:	a8ffffcc 	andi	r3,r21,65535
   1750c:	1c06b03a 	or	r3,r3,r16
   17510:	1880042e 	bgeu	r3,r2,17524 <__umoddi3+0x54c>
   17514:	1cc7883a 	add	r3,r3,r19
   17518:	1cc00236 	bltu	r3,r19,17524 <__umoddi3+0x54c>
   1751c:	1880012e 	bgeu	r3,r2,17524 <__umoddi3+0x54c>
   17520:	1cc7883a 	add	r3,r3,r19
   17524:	18a3c83a 	sub	r17,r3,r2
   17528:	003f2906 	br	171d0 <__alt_data_end+0xfc0171d0>
   1752c:	e48fc83a 	sub	r7,fp,r18
   17530:	1d49c83a 	sub	r4,r3,r21
   17534:	e1f9803a 	cmpltu	fp,fp,r7
   17538:	2739c83a 	sub	fp,r4,fp
   1753c:	8f09c83a 	sub	r4,r17,fp
   17540:	003fc306 	br	17450 <__alt_data_end+0xfc017450>
   17544:	01000604 	movi	r4,24
   17548:	003ef906 	br	17130 <__alt_data_end+0xfc017130>
   1754c:	00800604 	movi	r2,24
   17550:	003f1306 	br	171a0 <__alt_data_end+0xfc0171a0>
   17554:	01000604 	movi	r4,24
   17558:	003eb606 	br	17034 <__alt_data_end+0xfc017034>
   1755c:	40bf902e 	bgeu	r8,r2,173a0 <__alt_data_end+0xfc0173a0>
   17560:	b5bfff84 	addi	r22,r22,-2
   17564:	4551883a 	add	r8,r8,r21
   17568:	003f8e06 	br	173a4 <__alt_data_end+0xfc0173a4>
   1756c:	18bf762e 	bgeu	r3,r2,17348 <__alt_data_end+0xfc017348>
   17570:	8c7fff84 	addi	r17,r17,-2
   17574:	1d47883a 	add	r3,r3,r21
   17578:	003f7406 	br	1734c <__alt_data_end+0xfc01734c>
   1757c:	1cc7883a 	add	r3,r3,r19
   17580:	003ecd06 	br	170b8 <__alt_data_end+0xfc0170b8>
   17584:	8005883a 	mov	r2,r16
   17588:	003ef806 	br	1716c <__alt_data_end+0xfc01716c>
   1758c:	873fe736 	bltu	r16,fp,1752c <__alt_data_end+0xfc01752c>
   17590:	e00f883a 	mov	r7,fp
   17594:	0009883a 	mov	r4,zero
   17598:	003fad06 	br	17450 <__alt_data_end+0xfc017450>

0001759c <__adddf3>:
   1759c:	02c00434 	movhi	r11,16
   175a0:	5affffc4 	addi	r11,r11,-1
   175a4:	2806d7fa 	srli	r3,r5,31
   175a8:	2ad4703a 	and	r10,r5,r11
   175ac:	3ad2703a 	and	r9,r7,r11
   175b0:	3804d53a 	srli	r2,r7,20
   175b4:	3018d77a 	srli	r12,r6,29
   175b8:	280ad53a 	srli	r5,r5,20
   175bc:	501490fa 	slli	r10,r10,3
   175c0:	2010d77a 	srli	r8,r4,29
   175c4:	481290fa 	slli	r9,r9,3
   175c8:	380ed7fa 	srli	r7,r7,31
   175cc:	defffb04 	addi	sp,sp,-20
   175d0:	dc800215 	stw	r18,8(sp)
   175d4:	dc400115 	stw	r17,4(sp)
   175d8:	dc000015 	stw	r16,0(sp)
   175dc:	dfc00415 	stw	ra,16(sp)
   175e0:	dcc00315 	stw	r19,12(sp)
   175e4:	1c803fcc 	andi	r18,r3,255
   175e8:	2c01ffcc 	andi	r16,r5,2047
   175ec:	5210b03a 	or	r8,r10,r8
   175f0:	202290fa 	slli	r17,r4,3
   175f4:	1081ffcc 	andi	r2,r2,2047
   175f8:	4b12b03a 	or	r9,r9,r12
   175fc:	300c90fa 	slli	r6,r6,3
   17600:	91c07526 	beq	r18,r7,177d8 <__adddf3+0x23c>
   17604:	8087c83a 	sub	r3,r16,r2
   17608:	00c0ab0e 	bge	zero,r3,178b8 <__adddf3+0x31c>
   1760c:	10002a1e 	bne	r2,zero,176b8 <__adddf3+0x11c>
   17610:	4984b03a 	or	r2,r9,r6
   17614:	1000961e 	bne	r2,zero,17870 <__adddf3+0x2d4>
   17618:	888001cc 	andi	r2,r17,7
   1761c:	10000726 	beq	r2,zero,1763c <__adddf3+0xa0>
   17620:	888003cc 	andi	r2,r17,15
   17624:	00c00104 	movi	r3,4
   17628:	10c00426 	beq	r2,r3,1763c <__adddf3+0xa0>
   1762c:	88c7883a 	add	r3,r17,r3
   17630:	1c63803a 	cmpltu	r17,r3,r17
   17634:	4451883a 	add	r8,r8,r17
   17638:	1823883a 	mov	r17,r3
   1763c:	4080202c 	andhi	r2,r8,128
   17640:	10005926 	beq	r2,zero,177a8 <__adddf3+0x20c>
   17644:	84000044 	addi	r16,r16,1
   17648:	0081ffc4 	movi	r2,2047
   1764c:	8080ba26 	beq	r16,r2,17938 <__adddf3+0x39c>
   17650:	00bfe034 	movhi	r2,65408
   17654:	10bfffc4 	addi	r2,r2,-1
   17658:	4090703a 	and	r8,r8,r2
   1765c:	4004977a 	slli	r2,r8,29
   17660:	4010927a 	slli	r8,r8,9
   17664:	8822d0fa 	srli	r17,r17,3
   17668:	8401ffcc 	andi	r16,r16,2047
   1766c:	4010d33a 	srli	r8,r8,12
   17670:	9007883a 	mov	r3,r18
   17674:	1444b03a 	or	r2,r2,r17
   17678:	8401ffcc 	andi	r16,r16,2047
   1767c:	8020953a 	slli	r16,r16,20
   17680:	18c03fcc 	andi	r3,r3,255
   17684:	01000434 	movhi	r4,16
   17688:	213fffc4 	addi	r4,r4,-1
   1768c:	180697fa 	slli	r3,r3,31
   17690:	4110703a 	and	r8,r8,r4
   17694:	4410b03a 	or	r8,r8,r16
   17698:	40c6b03a 	or	r3,r8,r3
   1769c:	dfc00417 	ldw	ra,16(sp)
   176a0:	dcc00317 	ldw	r19,12(sp)
   176a4:	dc800217 	ldw	r18,8(sp)
   176a8:	dc400117 	ldw	r17,4(sp)
   176ac:	dc000017 	ldw	r16,0(sp)
   176b0:	dec00504 	addi	sp,sp,20
   176b4:	f800283a 	ret
   176b8:	0081ffc4 	movi	r2,2047
   176bc:	80bfd626 	beq	r16,r2,17618 <__alt_data_end+0xfc017618>
   176c0:	4a402034 	orhi	r9,r9,128
   176c4:	00800e04 	movi	r2,56
   176c8:	10c09f16 	blt	r2,r3,17948 <__adddf3+0x3ac>
   176cc:	008007c4 	movi	r2,31
   176d0:	10c0c216 	blt	r2,r3,179dc <__adddf3+0x440>
   176d4:	00800804 	movi	r2,32
   176d8:	10c5c83a 	sub	r2,r2,r3
   176dc:	488a983a 	sll	r5,r9,r2
   176e0:	30c8d83a 	srl	r4,r6,r3
   176e4:	3084983a 	sll	r2,r6,r2
   176e8:	48c6d83a 	srl	r3,r9,r3
   176ec:	290cb03a 	or	r6,r5,r4
   176f0:	1004c03a 	cmpne	r2,r2,zero
   176f4:	308cb03a 	or	r6,r6,r2
   176f8:	898dc83a 	sub	r6,r17,r6
   176fc:	89a3803a 	cmpltu	r17,r17,r6
   17700:	40d1c83a 	sub	r8,r8,r3
   17704:	4451c83a 	sub	r8,r8,r17
   17708:	3023883a 	mov	r17,r6
   1770c:	4080202c 	andhi	r2,r8,128
   17710:	10002326 	beq	r2,zero,177a0 <__adddf3+0x204>
   17714:	04c02034 	movhi	r19,128
   17718:	9cffffc4 	addi	r19,r19,-1
   1771c:	44e6703a 	and	r19,r8,r19
   17720:	98007626 	beq	r19,zero,178fc <__adddf3+0x360>
   17724:	9809883a 	mov	r4,r19
   17728:	0019ddc0 	call	19ddc <__clzsi2>
   1772c:	10fffe04 	addi	r3,r2,-8
   17730:	010007c4 	movi	r4,31
   17734:	20c07716 	blt	r4,r3,17914 <__adddf3+0x378>
   17738:	00800804 	movi	r2,32
   1773c:	10c5c83a 	sub	r2,r2,r3
   17740:	8884d83a 	srl	r2,r17,r2
   17744:	98d0983a 	sll	r8,r19,r3
   17748:	88e2983a 	sll	r17,r17,r3
   1774c:	1204b03a 	or	r2,r2,r8
   17750:	1c007416 	blt	r3,r16,17924 <__adddf3+0x388>
   17754:	1c21c83a 	sub	r16,r3,r16
   17758:	82000044 	addi	r8,r16,1
   1775c:	00c007c4 	movi	r3,31
   17760:	1a009116 	blt	r3,r8,179a8 <__adddf3+0x40c>
   17764:	00c00804 	movi	r3,32
   17768:	1a07c83a 	sub	r3,r3,r8
   1776c:	8a08d83a 	srl	r4,r17,r8
   17770:	88e2983a 	sll	r17,r17,r3
   17774:	10c6983a 	sll	r3,r2,r3
   17778:	1210d83a 	srl	r8,r2,r8
   1777c:	8804c03a 	cmpne	r2,r17,zero
   17780:	1906b03a 	or	r3,r3,r4
   17784:	18a2b03a 	or	r17,r3,r2
   17788:	0021883a 	mov	r16,zero
   1778c:	003fa206 	br	17618 <__alt_data_end+0xfc017618>
   17790:	1890b03a 	or	r8,r3,r2
   17794:	40017d26 	beq	r8,zero,17d8c <__adddf3+0x7f0>
   17798:	1011883a 	mov	r8,r2
   1779c:	1823883a 	mov	r17,r3
   177a0:	888001cc 	andi	r2,r17,7
   177a4:	103f9e1e 	bne	r2,zero,17620 <__alt_data_end+0xfc017620>
   177a8:	4004977a 	slli	r2,r8,29
   177ac:	8822d0fa 	srli	r17,r17,3
   177b0:	4010d0fa 	srli	r8,r8,3
   177b4:	9007883a 	mov	r3,r18
   177b8:	1444b03a 	or	r2,r2,r17
   177bc:	0101ffc4 	movi	r4,2047
   177c0:	81002426 	beq	r16,r4,17854 <__adddf3+0x2b8>
   177c4:	8120703a 	and	r16,r16,r4
   177c8:	01000434 	movhi	r4,16
   177cc:	213fffc4 	addi	r4,r4,-1
   177d0:	4110703a 	and	r8,r8,r4
   177d4:	003fa806 	br	17678 <__alt_data_end+0xfc017678>
   177d8:	8089c83a 	sub	r4,r16,r2
   177dc:	01005e0e 	bge	zero,r4,17958 <__adddf3+0x3bc>
   177e0:	10002b26 	beq	r2,zero,17890 <__adddf3+0x2f4>
   177e4:	0081ffc4 	movi	r2,2047
   177e8:	80bf8b26 	beq	r16,r2,17618 <__alt_data_end+0xfc017618>
   177ec:	4a402034 	orhi	r9,r9,128
   177f0:	00800e04 	movi	r2,56
   177f4:	1100a40e 	bge	r2,r4,17a88 <__adddf3+0x4ec>
   177f8:	498cb03a 	or	r6,r9,r6
   177fc:	300ac03a 	cmpne	r5,r6,zero
   17800:	0013883a 	mov	r9,zero
   17804:	2c4b883a 	add	r5,r5,r17
   17808:	2c63803a 	cmpltu	r17,r5,r17
   1780c:	4a11883a 	add	r8,r9,r8
   17810:	8a11883a 	add	r8,r17,r8
   17814:	2823883a 	mov	r17,r5
   17818:	4080202c 	andhi	r2,r8,128
   1781c:	103fe026 	beq	r2,zero,177a0 <__alt_data_end+0xfc0177a0>
   17820:	84000044 	addi	r16,r16,1
   17824:	0081ffc4 	movi	r2,2047
   17828:	8080d226 	beq	r16,r2,17b74 <__adddf3+0x5d8>
   1782c:	00bfe034 	movhi	r2,65408
   17830:	10bfffc4 	addi	r2,r2,-1
   17834:	4090703a 	and	r8,r8,r2
   17838:	880ad07a 	srli	r5,r17,1
   1783c:	400897fa 	slli	r4,r8,31
   17840:	88c0004c 	andi	r3,r17,1
   17844:	28e2b03a 	or	r17,r5,r3
   17848:	4010d07a 	srli	r8,r8,1
   1784c:	2462b03a 	or	r17,r4,r17
   17850:	003f7106 	br	17618 <__alt_data_end+0xfc017618>
   17854:	4088b03a 	or	r4,r8,r2
   17858:	20014526 	beq	r4,zero,17d70 <__adddf3+0x7d4>
   1785c:	01000434 	movhi	r4,16
   17860:	42000234 	orhi	r8,r8,8
   17864:	213fffc4 	addi	r4,r4,-1
   17868:	4110703a 	and	r8,r8,r4
   1786c:	003f8206 	br	17678 <__alt_data_end+0xfc017678>
   17870:	18ffffc4 	addi	r3,r3,-1
   17874:	1800491e 	bne	r3,zero,1799c <__adddf3+0x400>
   17878:	898bc83a 	sub	r5,r17,r6
   1787c:	8963803a 	cmpltu	r17,r17,r5
   17880:	4251c83a 	sub	r8,r8,r9
   17884:	4451c83a 	sub	r8,r8,r17
   17888:	2823883a 	mov	r17,r5
   1788c:	003f9f06 	br	1770c <__alt_data_end+0xfc01770c>
   17890:	4984b03a 	or	r2,r9,r6
   17894:	103f6026 	beq	r2,zero,17618 <__alt_data_end+0xfc017618>
   17898:	213fffc4 	addi	r4,r4,-1
   1789c:	2000931e 	bne	r4,zero,17aec <__adddf3+0x550>
   178a0:	898d883a 	add	r6,r17,r6
   178a4:	3463803a 	cmpltu	r17,r6,r17
   178a8:	4251883a 	add	r8,r8,r9
   178ac:	8a11883a 	add	r8,r17,r8
   178b0:	3023883a 	mov	r17,r6
   178b4:	003fd806 	br	17818 <__alt_data_end+0xfc017818>
   178b8:	1800541e 	bne	r3,zero,17a0c <__adddf3+0x470>
   178bc:	80800044 	addi	r2,r16,1
   178c0:	1081ffcc 	andi	r2,r2,2047
   178c4:	00c00044 	movi	r3,1
   178c8:	1880a00e 	bge	r3,r2,17b4c <__adddf3+0x5b0>
   178cc:	8989c83a 	sub	r4,r17,r6
   178d0:	8905803a 	cmpltu	r2,r17,r4
   178d4:	4267c83a 	sub	r19,r8,r9
   178d8:	98a7c83a 	sub	r19,r19,r2
   178dc:	9880202c 	andhi	r2,r19,128
   178e0:	10006326 	beq	r2,zero,17a70 <__adddf3+0x4d4>
   178e4:	3463c83a 	sub	r17,r6,r17
   178e8:	4a07c83a 	sub	r3,r9,r8
   178ec:	344d803a 	cmpltu	r6,r6,r17
   178f0:	19a7c83a 	sub	r19,r3,r6
   178f4:	3825883a 	mov	r18,r7
   178f8:	983f8a1e 	bne	r19,zero,17724 <__alt_data_end+0xfc017724>
   178fc:	8809883a 	mov	r4,r17
   17900:	0019ddc0 	call	19ddc <__clzsi2>
   17904:	10800804 	addi	r2,r2,32
   17908:	10fffe04 	addi	r3,r2,-8
   1790c:	010007c4 	movi	r4,31
   17910:	20ff890e 	bge	r4,r3,17738 <__alt_data_end+0xfc017738>
   17914:	10bff604 	addi	r2,r2,-40
   17918:	8884983a 	sll	r2,r17,r2
   1791c:	0023883a 	mov	r17,zero
   17920:	1c3f8c0e 	bge	r3,r16,17754 <__alt_data_end+0xfc017754>
   17924:	023fe034 	movhi	r8,65408
   17928:	423fffc4 	addi	r8,r8,-1
   1792c:	80e1c83a 	sub	r16,r16,r3
   17930:	1210703a 	and	r8,r2,r8
   17934:	003f3806 	br	17618 <__alt_data_end+0xfc017618>
   17938:	9007883a 	mov	r3,r18
   1793c:	0011883a 	mov	r8,zero
   17940:	0005883a 	mov	r2,zero
   17944:	003f4c06 	br	17678 <__alt_data_end+0xfc017678>
   17948:	498cb03a 	or	r6,r9,r6
   1794c:	300cc03a 	cmpne	r6,r6,zero
   17950:	0007883a 	mov	r3,zero
   17954:	003f6806 	br	176f8 <__alt_data_end+0xfc0176f8>
   17958:	20009c1e 	bne	r4,zero,17bcc <__adddf3+0x630>
   1795c:	80800044 	addi	r2,r16,1
   17960:	1141ffcc 	andi	r5,r2,2047
   17964:	01000044 	movi	r4,1
   17968:	2140670e 	bge	r4,r5,17b08 <__adddf3+0x56c>
   1796c:	0101ffc4 	movi	r4,2047
   17970:	11007f26 	beq	r2,r4,17b70 <__adddf3+0x5d4>
   17974:	898d883a 	add	r6,r17,r6
   17978:	4247883a 	add	r3,r8,r9
   1797c:	3451803a 	cmpltu	r8,r6,r17
   17980:	40d1883a 	add	r8,r8,r3
   17984:	402297fa 	slli	r17,r8,31
   17988:	300cd07a 	srli	r6,r6,1
   1798c:	4010d07a 	srli	r8,r8,1
   17990:	1021883a 	mov	r16,r2
   17994:	89a2b03a 	or	r17,r17,r6
   17998:	003f1f06 	br	17618 <__alt_data_end+0xfc017618>
   1799c:	0081ffc4 	movi	r2,2047
   179a0:	80bf481e 	bne	r16,r2,176c4 <__alt_data_end+0xfc0176c4>
   179a4:	003f1c06 	br	17618 <__alt_data_end+0xfc017618>
   179a8:	843ff844 	addi	r16,r16,-31
   179ac:	01000804 	movi	r4,32
   179b0:	1406d83a 	srl	r3,r2,r16
   179b4:	41005026 	beq	r8,r4,17af8 <__adddf3+0x55c>
   179b8:	01001004 	movi	r4,64
   179bc:	2211c83a 	sub	r8,r4,r8
   179c0:	1204983a 	sll	r2,r2,r8
   179c4:	88a2b03a 	or	r17,r17,r2
   179c8:	8822c03a 	cmpne	r17,r17,zero
   179cc:	1c62b03a 	or	r17,r3,r17
   179d0:	0011883a 	mov	r8,zero
   179d4:	0021883a 	mov	r16,zero
   179d8:	003f7106 	br	177a0 <__alt_data_end+0xfc0177a0>
   179dc:	193ff804 	addi	r4,r3,-32
   179e0:	00800804 	movi	r2,32
   179e4:	4908d83a 	srl	r4,r9,r4
   179e8:	18804526 	beq	r3,r2,17b00 <__adddf3+0x564>
   179ec:	00801004 	movi	r2,64
   179f0:	10c5c83a 	sub	r2,r2,r3
   179f4:	4886983a 	sll	r3,r9,r2
   179f8:	198cb03a 	or	r6,r3,r6
   179fc:	300cc03a 	cmpne	r6,r6,zero
   17a00:	218cb03a 	or	r6,r4,r6
   17a04:	0007883a 	mov	r3,zero
   17a08:	003f3b06 	br	176f8 <__alt_data_end+0xfc0176f8>
   17a0c:	80002a26 	beq	r16,zero,17ab8 <__adddf3+0x51c>
   17a10:	0101ffc4 	movi	r4,2047
   17a14:	11006826 	beq	r2,r4,17bb8 <__adddf3+0x61c>
   17a18:	00c7c83a 	sub	r3,zero,r3
   17a1c:	42002034 	orhi	r8,r8,128
   17a20:	01000e04 	movi	r4,56
   17a24:	20c07c16 	blt	r4,r3,17c18 <__adddf3+0x67c>
   17a28:	010007c4 	movi	r4,31
   17a2c:	20c0da16 	blt	r4,r3,17d98 <__adddf3+0x7fc>
   17a30:	01000804 	movi	r4,32
   17a34:	20c9c83a 	sub	r4,r4,r3
   17a38:	4114983a 	sll	r10,r8,r4
   17a3c:	88cad83a 	srl	r5,r17,r3
   17a40:	8908983a 	sll	r4,r17,r4
   17a44:	40c6d83a 	srl	r3,r8,r3
   17a48:	5162b03a 	or	r17,r10,r5
   17a4c:	2008c03a 	cmpne	r4,r4,zero
   17a50:	8922b03a 	or	r17,r17,r4
   17a54:	3463c83a 	sub	r17,r6,r17
   17a58:	48c7c83a 	sub	r3,r9,r3
   17a5c:	344d803a 	cmpltu	r6,r6,r17
   17a60:	1991c83a 	sub	r8,r3,r6
   17a64:	1021883a 	mov	r16,r2
   17a68:	3825883a 	mov	r18,r7
   17a6c:	003f2706 	br	1770c <__alt_data_end+0xfc01770c>
   17a70:	24d0b03a 	or	r8,r4,r19
   17a74:	40001b1e 	bne	r8,zero,17ae4 <__adddf3+0x548>
   17a78:	0005883a 	mov	r2,zero
   17a7c:	0007883a 	mov	r3,zero
   17a80:	0021883a 	mov	r16,zero
   17a84:	003f4d06 	br	177bc <__alt_data_end+0xfc0177bc>
   17a88:	008007c4 	movi	r2,31
   17a8c:	11003c16 	blt	r2,r4,17b80 <__adddf3+0x5e4>
   17a90:	00800804 	movi	r2,32
   17a94:	1105c83a 	sub	r2,r2,r4
   17a98:	488e983a 	sll	r7,r9,r2
   17a9c:	310ad83a 	srl	r5,r6,r4
   17aa0:	3084983a 	sll	r2,r6,r2
   17aa4:	4912d83a 	srl	r9,r9,r4
   17aa8:	394ab03a 	or	r5,r7,r5
   17aac:	1004c03a 	cmpne	r2,r2,zero
   17ab0:	288ab03a 	or	r5,r5,r2
   17ab4:	003f5306 	br	17804 <__alt_data_end+0xfc017804>
   17ab8:	4448b03a 	or	r4,r8,r17
   17abc:	20003e26 	beq	r4,zero,17bb8 <__adddf3+0x61c>
   17ac0:	00c6303a 	nor	r3,zero,r3
   17ac4:	18003a1e 	bne	r3,zero,17bb0 <__adddf3+0x614>
   17ac8:	3463c83a 	sub	r17,r6,r17
   17acc:	4a07c83a 	sub	r3,r9,r8
   17ad0:	344d803a 	cmpltu	r6,r6,r17
   17ad4:	1991c83a 	sub	r8,r3,r6
   17ad8:	1021883a 	mov	r16,r2
   17adc:	3825883a 	mov	r18,r7
   17ae0:	003f0a06 	br	1770c <__alt_data_end+0xfc01770c>
   17ae4:	2023883a 	mov	r17,r4
   17ae8:	003f0d06 	br	17720 <__alt_data_end+0xfc017720>
   17aec:	0081ffc4 	movi	r2,2047
   17af0:	80bf3f1e 	bne	r16,r2,177f0 <__alt_data_end+0xfc0177f0>
   17af4:	003ec806 	br	17618 <__alt_data_end+0xfc017618>
   17af8:	0005883a 	mov	r2,zero
   17afc:	003fb106 	br	179c4 <__alt_data_end+0xfc0179c4>
   17b00:	0007883a 	mov	r3,zero
   17b04:	003fbc06 	br	179f8 <__alt_data_end+0xfc0179f8>
   17b08:	4444b03a 	or	r2,r8,r17
   17b0c:	8000871e 	bne	r16,zero,17d2c <__adddf3+0x790>
   17b10:	1000ba26 	beq	r2,zero,17dfc <__adddf3+0x860>
   17b14:	4984b03a 	or	r2,r9,r6
   17b18:	103ebf26 	beq	r2,zero,17618 <__alt_data_end+0xfc017618>
   17b1c:	8985883a 	add	r2,r17,r6
   17b20:	4247883a 	add	r3,r8,r9
   17b24:	1451803a 	cmpltu	r8,r2,r17
   17b28:	40d1883a 	add	r8,r8,r3
   17b2c:	40c0202c 	andhi	r3,r8,128
   17b30:	1023883a 	mov	r17,r2
   17b34:	183f1a26 	beq	r3,zero,177a0 <__alt_data_end+0xfc0177a0>
   17b38:	00bfe034 	movhi	r2,65408
   17b3c:	10bfffc4 	addi	r2,r2,-1
   17b40:	2021883a 	mov	r16,r4
   17b44:	4090703a 	and	r8,r8,r2
   17b48:	003eb306 	br	17618 <__alt_data_end+0xfc017618>
   17b4c:	4444b03a 	or	r2,r8,r17
   17b50:	8000291e 	bne	r16,zero,17bf8 <__adddf3+0x65c>
   17b54:	10004b1e 	bne	r2,zero,17c84 <__adddf3+0x6e8>
   17b58:	4990b03a 	or	r8,r9,r6
   17b5c:	40008b26 	beq	r8,zero,17d8c <__adddf3+0x7f0>
   17b60:	4811883a 	mov	r8,r9
   17b64:	3023883a 	mov	r17,r6
   17b68:	3825883a 	mov	r18,r7
   17b6c:	003eaa06 	br	17618 <__alt_data_end+0xfc017618>
   17b70:	1021883a 	mov	r16,r2
   17b74:	0011883a 	mov	r8,zero
   17b78:	0005883a 	mov	r2,zero
   17b7c:	003f0f06 	br	177bc <__alt_data_end+0xfc0177bc>
   17b80:	217ff804 	addi	r5,r4,-32
   17b84:	00800804 	movi	r2,32
   17b88:	494ad83a 	srl	r5,r9,r5
   17b8c:	20807d26 	beq	r4,r2,17d84 <__adddf3+0x7e8>
   17b90:	00801004 	movi	r2,64
   17b94:	1109c83a 	sub	r4,r2,r4
   17b98:	4912983a 	sll	r9,r9,r4
   17b9c:	498cb03a 	or	r6,r9,r6
   17ba0:	300cc03a 	cmpne	r6,r6,zero
   17ba4:	298ab03a 	or	r5,r5,r6
   17ba8:	0013883a 	mov	r9,zero
   17bac:	003f1506 	br	17804 <__alt_data_end+0xfc017804>
   17bb0:	0101ffc4 	movi	r4,2047
   17bb4:	113f9a1e 	bne	r2,r4,17a20 <__alt_data_end+0xfc017a20>
   17bb8:	4811883a 	mov	r8,r9
   17bbc:	3023883a 	mov	r17,r6
   17bc0:	1021883a 	mov	r16,r2
   17bc4:	3825883a 	mov	r18,r7
   17bc8:	003e9306 	br	17618 <__alt_data_end+0xfc017618>
   17bcc:	8000161e 	bne	r16,zero,17c28 <__adddf3+0x68c>
   17bd0:	444ab03a 	or	r5,r8,r17
   17bd4:	28005126 	beq	r5,zero,17d1c <__adddf3+0x780>
   17bd8:	0108303a 	nor	r4,zero,r4
   17bdc:	20004d1e 	bne	r4,zero,17d14 <__adddf3+0x778>
   17be0:	89a3883a 	add	r17,r17,r6
   17be4:	4253883a 	add	r9,r8,r9
   17be8:	898d803a 	cmpltu	r6,r17,r6
   17bec:	3251883a 	add	r8,r6,r9
   17bf0:	1021883a 	mov	r16,r2
   17bf4:	003f0806 	br	17818 <__alt_data_end+0xfc017818>
   17bf8:	1000301e 	bne	r2,zero,17cbc <__adddf3+0x720>
   17bfc:	4984b03a 	or	r2,r9,r6
   17c00:	10007126 	beq	r2,zero,17dc8 <__adddf3+0x82c>
   17c04:	4811883a 	mov	r8,r9
   17c08:	3023883a 	mov	r17,r6
   17c0c:	3825883a 	mov	r18,r7
   17c10:	0401ffc4 	movi	r16,2047
   17c14:	003e8006 	br	17618 <__alt_data_end+0xfc017618>
   17c18:	4462b03a 	or	r17,r8,r17
   17c1c:	8822c03a 	cmpne	r17,r17,zero
   17c20:	0007883a 	mov	r3,zero
   17c24:	003f8b06 	br	17a54 <__alt_data_end+0xfc017a54>
   17c28:	0141ffc4 	movi	r5,2047
   17c2c:	11403b26 	beq	r2,r5,17d1c <__adddf3+0x780>
   17c30:	0109c83a 	sub	r4,zero,r4
   17c34:	42002034 	orhi	r8,r8,128
   17c38:	01400e04 	movi	r5,56
   17c3c:	29006716 	blt	r5,r4,17ddc <__adddf3+0x840>
   17c40:	014007c4 	movi	r5,31
   17c44:	29007016 	blt	r5,r4,17e08 <__adddf3+0x86c>
   17c48:	01400804 	movi	r5,32
   17c4c:	290bc83a 	sub	r5,r5,r4
   17c50:	4154983a 	sll	r10,r8,r5
   17c54:	890ed83a 	srl	r7,r17,r4
   17c58:	894a983a 	sll	r5,r17,r5
   17c5c:	4108d83a 	srl	r4,r8,r4
   17c60:	51e2b03a 	or	r17,r10,r7
   17c64:	280ac03a 	cmpne	r5,r5,zero
   17c68:	8962b03a 	or	r17,r17,r5
   17c6c:	89a3883a 	add	r17,r17,r6
   17c70:	2253883a 	add	r9,r4,r9
   17c74:	898d803a 	cmpltu	r6,r17,r6
   17c78:	3251883a 	add	r8,r6,r9
   17c7c:	1021883a 	mov	r16,r2
   17c80:	003ee506 	br	17818 <__alt_data_end+0xfc017818>
   17c84:	4984b03a 	or	r2,r9,r6
   17c88:	103e6326 	beq	r2,zero,17618 <__alt_data_end+0xfc017618>
   17c8c:	8987c83a 	sub	r3,r17,r6
   17c90:	88c9803a 	cmpltu	r4,r17,r3
   17c94:	4245c83a 	sub	r2,r8,r9
   17c98:	1105c83a 	sub	r2,r2,r4
   17c9c:	1100202c 	andhi	r4,r2,128
   17ca0:	203ebb26 	beq	r4,zero,17790 <__alt_data_end+0xfc017790>
   17ca4:	3463c83a 	sub	r17,r6,r17
   17ca8:	4a07c83a 	sub	r3,r9,r8
   17cac:	344d803a 	cmpltu	r6,r6,r17
   17cb0:	1991c83a 	sub	r8,r3,r6
   17cb4:	3825883a 	mov	r18,r7
   17cb8:	003e5706 	br	17618 <__alt_data_end+0xfc017618>
   17cbc:	4984b03a 	or	r2,r9,r6
   17cc0:	10002e26 	beq	r2,zero,17d7c <__adddf3+0x7e0>
   17cc4:	4004d0fa 	srli	r2,r8,3
   17cc8:	8822d0fa 	srli	r17,r17,3
   17ccc:	4010977a 	slli	r8,r8,29
   17cd0:	10c0022c 	andhi	r3,r2,8
   17cd4:	4462b03a 	or	r17,r8,r17
   17cd8:	18000826 	beq	r3,zero,17cfc <__adddf3+0x760>
   17cdc:	4808d0fa 	srli	r4,r9,3
   17ce0:	20c0022c 	andhi	r3,r4,8
   17ce4:	1800051e 	bne	r3,zero,17cfc <__adddf3+0x760>
   17ce8:	300cd0fa 	srli	r6,r6,3
   17cec:	4806977a 	slli	r3,r9,29
   17cf0:	2005883a 	mov	r2,r4
   17cf4:	3825883a 	mov	r18,r7
   17cf8:	19a2b03a 	or	r17,r3,r6
   17cfc:	8810d77a 	srli	r8,r17,29
   17d00:	100490fa 	slli	r2,r2,3
   17d04:	882290fa 	slli	r17,r17,3
   17d08:	0401ffc4 	movi	r16,2047
   17d0c:	4090b03a 	or	r8,r8,r2
   17d10:	003e4106 	br	17618 <__alt_data_end+0xfc017618>
   17d14:	0141ffc4 	movi	r5,2047
   17d18:	117fc71e 	bne	r2,r5,17c38 <__alt_data_end+0xfc017c38>
   17d1c:	4811883a 	mov	r8,r9
   17d20:	3023883a 	mov	r17,r6
   17d24:	1021883a 	mov	r16,r2
   17d28:	003e3b06 	br	17618 <__alt_data_end+0xfc017618>
   17d2c:	10002f26 	beq	r2,zero,17dec <__adddf3+0x850>
   17d30:	4984b03a 	or	r2,r9,r6
   17d34:	10001126 	beq	r2,zero,17d7c <__adddf3+0x7e0>
   17d38:	4004d0fa 	srli	r2,r8,3
   17d3c:	8822d0fa 	srli	r17,r17,3
   17d40:	4010977a 	slli	r8,r8,29
   17d44:	10c0022c 	andhi	r3,r2,8
   17d48:	4462b03a 	or	r17,r8,r17
   17d4c:	183feb26 	beq	r3,zero,17cfc <__alt_data_end+0xfc017cfc>
   17d50:	4808d0fa 	srli	r4,r9,3
   17d54:	20c0022c 	andhi	r3,r4,8
   17d58:	183fe81e 	bne	r3,zero,17cfc <__alt_data_end+0xfc017cfc>
   17d5c:	300cd0fa 	srli	r6,r6,3
   17d60:	4806977a 	slli	r3,r9,29
   17d64:	2005883a 	mov	r2,r4
   17d68:	19a2b03a 	or	r17,r3,r6
   17d6c:	003fe306 	br	17cfc <__alt_data_end+0xfc017cfc>
   17d70:	0011883a 	mov	r8,zero
   17d74:	0005883a 	mov	r2,zero
   17d78:	003e3f06 	br	17678 <__alt_data_end+0xfc017678>
   17d7c:	0401ffc4 	movi	r16,2047
   17d80:	003e2506 	br	17618 <__alt_data_end+0xfc017618>
   17d84:	0013883a 	mov	r9,zero
   17d88:	003f8406 	br	17b9c <__alt_data_end+0xfc017b9c>
   17d8c:	0005883a 	mov	r2,zero
   17d90:	0007883a 	mov	r3,zero
   17d94:	003e8906 	br	177bc <__alt_data_end+0xfc0177bc>
   17d98:	197ff804 	addi	r5,r3,-32
   17d9c:	01000804 	movi	r4,32
   17da0:	414ad83a 	srl	r5,r8,r5
   17da4:	19002426 	beq	r3,r4,17e38 <__adddf3+0x89c>
   17da8:	01001004 	movi	r4,64
   17dac:	20c7c83a 	sub	r3,r4,r3
   17db0:	40c6983a 	sll	r3,r8,r3
   17db4:	1c46b03a 	or	r3,r3,r17
   17db8:	1806c03a 	cmpne	r3,r3,zero
   17dbc:	28e2b03a 	or	r17,r5,r3
   17dc0:	0007883a 	mov	r3,zero
   17dc4:	003f2306 	br	17a54 <__alt_data_end+0xfc017a54>
   17dc8:	0007883a 	mov	r3,zero
   17dcc:	5811883a 	mov	r8,r11
   17dd0:	00bfffc4 	movi	r2,-1
   17dd4:	0401ffc4 	movi	r16,2047
   17dd8:	003e7806 	br	177bc <__alt_data_end+0xfc0177bc>
   17ddc:	4462b03a 	or	r17,r8,r17
   17de0:	8822c03a 	cmpne	r17,r17,zero
   17de4:	0009883a 	mov	r4,zero
   17de8:	003fa006 	br	17c6c <__alt_data_end+0xfc017c6c>
   17dec:	4811883a 	mov	r8,r9
   17df0:	3023883a 	mov	r17,r6
   17df4:	0401ffc4 	movi	r16,2047
   17df8:	003e0706 	br	17618 <__alt_data_end+0xfc017618>
   17dfc:	4811883a 	mov	r8,r9
   17e00:	3023883a 	mov	r17,r6
   17e04:	003e0406 	br	17618 <__alt_data_end+0xfc017618>
   17e08:	21fff804 	addi	r7,r4,-32
   17e0c:	01400804 	movi	r5,32
   17e10:	41ced83a 	srl	r7,r8,r7
   17e14:	21400a26 	beq	r4,r5,17e40 <__adddf3+0x8a4>
   17e18:	01401004 	movi	r5,64
   17e1c:	2909c83a 	sub	r4,r5,r4
   17e20:	4108983a 	sll	r4,r8,r4
   17e24:	2448b03a 	or	r4,r4,r17
   17e28:	2008c03a 	cmpne	r4,r4,zero
   17e2c:	3922b03a 	or	r17,r7,r4
   17e30:	0009883a 	mov	r4,zero
   17e34:	003f8d06 	br	17c6c <__alt_data_end+0xfc017c6c>
   17e38:	0007883a 	mov	r3,zero
   17e3c:	003fdd06 	br	17db4 <__alt_data_end+0xfc017db4>
   17e40:	0009883a 	mov	r4,zero
   17e44:	003ff706 	br	17e24 <__alt_data_end+0xfc017e24>

00017e48 <__divdf3>:
   17e48:	defff004 	addi	sp,sp,-64
   17e4c:	dc800815 	stw	r18,32(sp)
   17e50:	2824d53a 	srli	r18,r5,20
   17e54:	dd800c15 	stw	r22,48(sp)
   17e58:	282cd7fa 	srli	r22,r5,31
   17e5c:	dc000615 	stw	r16,24(sp)
   17e60:	04000434 	movhi	r16,16
   17e64:	843fffc4 	addi	r16,r16,-1
   17e68:	dfc00f15 	stw	ra,60(sp)
   17e6c:	df000e15 	stw	fp,56(sp)
   17e70:	ddc00d15 	stw	r23,52(sp)
   17e74:	dd400b15 	stw	r21,44(sp)
   17e78:	dd000a15 	stw	r20,40(sp)
   17e7c:	dcc00915 	stw	r19,36(sp)
   17e80:	dc400715 	stw	r17,28(sp)
   17e84:	9481ffcc 	andi	r18,r18,2047
   17e88:	2c20703a 	and	r16,r5,r16
   17e8c:	b2003fcc 	andi	r8,r22,255
   17e90:	90006126 	beq	r18,zero,18018 <__divdf3+0x1d0>
   17e94:	0081ffc4 	movi	r2,2047
   17e98:	202b883a 	mov	r21,r4
   17e9c:	90803726 	beq	r18,r2,17f7c <__divdf3+0x134>
   17ea0:	80800434 	orhi	r2,r16,16
   17ea4:	100490fa 	slli	r2,r2,3
   17ea8:	2020d77a 	srli	r16,r4,29
   17eac:	202a90fa 	slli	r21,r4,3
   17eb0:	94bf0044 	addi	r18,r18,-1023
   17eb4:	80a0b03a 	or	r16,r16,r2
   17eb8:	0013883a 	mov	r9,zero
   17ebc:	000b883a 	mov	r5,zero
   17ec0:	3806d53a 	srli	r3,r7,20
   17ec4:	382ed7fa 	srli	r23,r7,31
   17ec8:	04400434 	movhi	r17,16
   17ecc:	8c7fffc4 	addi	r17,r17,-1
   17ed0:	18c1ffcc 	andi	r3,r3,2047
   17ed4:	3029883a 	mov	r20,r6
   17ed8:	3c62703a 	and	r17,r7,r17
   17edc:	bf003fcc 	andi	fp,r23,255
   17ee0:	18006e26 	beq	r3,zero,1809c <__divdf3+0x254>
   17ee4:	0081ffc4 	movi	r2,2047
   17ee8:	18806626 	beq	r3,r2,18084 <__divdf3+0x23c>
   17eec:	88800434 	orhi	r2,r17,16
   17ef0:	100490fa 	slli	r2,r2,3
   17ef4:	3022d77a 	srli	r17,r6,29
   17ef8:	302890fa 	slli	r20,r6,3
   17efc:	18ff0044 	addi	r3,r3,-1023
   17f00:	88a2b03a 	or	r17,r17,r2
   17f04:	000f883a 	mov	r7,zero
   17f08:	b5e6f03a 	xor	r19,r22,r23
   17f0c:	3a4cb03a 	or	r6,r7,r9
   17f10:	008003c4 	movi	r2,15
   17f14:	9809883a 	mov	r4,r19
   17f18:	90c7c83a 	sub	r3,r18,r3
   17f1c:	9cc03fcc 	andi	r19,r19,255
   17f20:	11809636 	bltu	r2,r6,1817c <__divdf3+0x334>
   17f24:	300c90ba 	slli	r6,r6,2
   17f28:	00800074 	movhi	r2,1
   17f2c:	109fcf04 	addi	r2,r2,32572
   17f30:	308d883a 	add	r6,r6,r2
   17f34:	30800017 	ldw	r2,0(r6)
   17f38:	1000683a 	jmp	r2
   17f3c:	0001817c 	xorhi	zero,zero,1541
   17f40:	00017fb4 	movhi	zero,1534
   17f44:	0001816c 	andhi	zero,zero,1541
   17f48:	00017fa8 	cmpgeui	zero,zero,1534
   17f4c:	0001816c 	andhi	zero,zero,1541
   17f50:	00018140 	call	1814 <drawTile+0x150>
   17f54:	0001816c 	andhi	zero,zero,1541
   17f58:	00017fa8 	cmpgeui	zero,zero,1534
   17f5c:	00017fb4 	movhi	zero,1534
   17f60:	00017fb4 	movhi	zero,1534
   17f64:	00018140 	call	1814 <drawTile+0x150>
   17f68:	00017fa8 	cmpgeui	zero,zero,1534
   17f6c:	00017f98 	cmpnei	zero,zero,1534
   17f70:	00017f98 	cmpnei	zero,zero,1534
   17f74:	00017f98 	cmpnei	zero,zero,1534
   17f78:	00018504 	movi	zero,1556
   17f7c:	2404b03a 	or	r2,r4,r16
   17f80:	10006c1e 	bne	r2,zero,18134 <__divdf3+0x2ec>
   17f84:	02400204 	movi	r9,8
   17f88:	0021883a 	mov	r16,zero
   17f8c:	002b883a 	mov	r21,zero
   17f90:	01400084 	movi	r5,2
   17f94:	003fca06 	br	17ec0 <__alt_data_end+0xfc017ec0>
   17f98:	8023883a 	mov	r17,r16
   17f9c:	a829883a 	mov	r20,r21
   17fa0:	4039883a 	mov	fp,r8
   17fa4:	280f883a 	mov	r7,r5
   17fa8:	00800084 	movi	r2,2
   17fac:	3881601e 	bne	r7,r2,18530 <__divdf3+0x6e8>
   17fb0:	e027883a 	mov	r19,fp
   17fb4:	9900004c 	andi	r4,r19,1
   17fb8:	0081ffc4 	movi	r2,2047
   17fbc:	0021883a 	mov	r16,zero
   17fc0:	002b883a 	mov	r21,zero
   17fc4:	1004953a 	slli	r2,r2,20
   17fc8:	20c03fcc 	andi	r3,r4,255
   17fcc:	01400434 	movhi	r5,16
   17fd0:	297fffc4 	addi	r5,r5,-1
   17fd4:	180697fa 	slli	r3,r3,31
   17fd8:	8160703a 	and	r16,r16,r5
   17fdc:	80a0b03a 	or	r16,r16,r2
   17fe0:	80c6b03a 	or	r3,r16,r3
   17fe4:	a805883a 	mov	r2,r21
   17fe8:	dfc00f17 	ldw	ra,60(sp)
   17fec:	df000e17 	ldw	fp,56(sp)
   17ff0:	ddc00d17 	ldw	r23,52(sp)
   17ff4:	dd800c17 	ldw	r22,48(sp)
   17ff8:	dd400b17 	ldw	r21,44(sp)
   17ffc:	dd000a17 	ldw	r20,40(sp)
   18000:	dcc00917 	ldw	r19,36(sp)
   18004:	dc800817 	ldw	r18,32(sp)
   18008:	dc400717 	ldw	r17,28(sp)
   1800c:	dc000617 	ldw	r16,24(sp)
   18010:	dec01004 	addi	sp,sp,64
   18014:	f800283a 	ret
   18018:	2404b03a 	or	r2,r4,r16
   1801c:	2023883a 	mov	r17,r4
   18020:	10003f26 	beq	r2,zero,18120 <__divdf3+0x2d8>
   18024:	80015e26 	beq	r16,zero,185a0 <__divdf3+0x758>
   18028:	8009883a 	mov	r4,r16
   1802c:	d9800215 	stw	r6,8(sp)
   18030:	d9c00515 	stw	r7,20(sp)
   18034:	da000415 	stw	r8,16(sp)
   18038:	0019ddc0 	call	19ddc <__clzsi2>
   1803c:	d9800217 	ldw	r6,8(sp)
   18040:	d9c00517 	ldw	r7,20(sp)
   18044:	da000417 	ldw	r8,16(sp)
   18048:	113ffd44 	addi	r4,r2,-11
   1804c:	00c00704 	movi	r3,28
   18050:	19014f16 	blt	r3,r4,18590 <__divdf3+0x748>
   18054:	00c00744 	movi	r3,29
   18058:	157ffe04 	addi	r21,r2,-8
   1805c:	1907c83a 	sub	r3,r3,r4
   18060:	8560983a 	sll	r16,r16,r21
   18064:	88c6d83a 	srl	r3,r17,r3
   18068:	8d6a983a 	sll	r21,r17,r21
   1806c:	1c20b03a 	or	r16,r3,r16
   18070:	1080fcc4 	addi	r2,r2,1011
   18074:	00a5c83a 	sub	r18,zero,r2
   18078:	0013883a 	mov	r9,zero
   1807c:	000b883a 	mov	r5,zero
   18080:	003f8f06 	br	17ec0 <__alt_data_end+0xfc017ec0>
   18084:	3444b03a 	or	r2,r6,r17
   18088:	1000231e 	bne	r2,zero,18118 <__divdf3+0x2d0>
   1808c:	0023883a 	mov	r17,zero
   18090:	0029883a 	mov	r20,zero
   18094:	01c00084 	movi	r7,2
   18098:	003f9b06 	br	17f08 <__alt_data_end+0xfc017f08>
   1809c:	3444b03a 	or	r2,r6,r17
   180a0:	10001926 	beq	r2,zero,18108 <__divdf3+0x2c0>
   180a4:	88014b26 	beq	r17,zero,185d4 <__divdf3+0x78c>
   180a8:	8809883a 	mov	r4,r17
   180ac:	d9400115 	stw	r5,4(sp)
   180b0:	d9800215 	stw	r6,8(sp)
   180b4:	da000415 	stw	r8,16(sp)
   180b8:	da400315 	stw	r9,12(sp)
   180bc:	0019ddc0 	call	19ddc <__clzsi2>
   180c0:	d9400117 	ldw	r5,4(sp)
   180c4:	d9800217 	ldw	r6,8(sp)
   180c8:	da000417 	ldw	r8,16(sp)
   180cc:	da400317 	ldw	r9,12(sp)
   180d0:	113ffd44 	addi	r4,r2,-11
   180d4:	00c00704 	movi	r3,28
   180d8:	19013a16 	blt	r3,r4,185c4 <__divdf3+0x77c>
   180dc:	00c00744 	movi	r3,29
   180e0:	153ffe04 	addi	r20,r2,-8
   180e4:	1907c83a 	sub	r3,r3,r4
   180e8:	8d22983a 	sll	r17,r17,r20
   180ec:	30c6d83a 	srl	r3,r6,r3
   180f0:	3528983a 	sll	r20,r6,r20
   180f4:	1c62b03a 	or	r17,r3,r17
   180f8:	1080fcc4 	addi	r2,r2,1011
   180fc:	0087c83a 	sub	r3,zero,r2
   18100:	000f883a 	mov	r7,zero
   18104:	003f8006 	br	17f08 <__alt_data_end+0xfc017f08>
   18108:	0023883a 	mov	r17,zero
   1810c:	0029883a 	mov	r20,zero
   18110:	01c00044 	movi	r7,1
   18114:	003f7c06 	br	17f08 <__alt_data_end+0xfc017f08>
   18118:	01c000c4 	movi	r7,3
   1811c:	003f7a06 	br	17f08 <__alt_data_end+0xfc017f08>
   18120:	02400104 	movi	r9,4
   18124:	0021883a 	mov	r16,zero
   18128:	002b883a 	mov	r21,zero
   1812c:	01400044 	movi	r5,1
   18130:	003f6306 	br	17ec0 <__alt_data_end+0xfc017ec0>
   18134:	02400304 	movi	r9,12
   18138:	014000c4 	movi	r5,3
   1813c:	003f6006 	br	17ec0 <__alt_data_end+0xfc017ec0>
   18140:	04000434 	movhi	r16,16
   18144:	0009883a 	mov	r4,zero
   18148:	843fffc4 	addi	r16,r16,-1
   1814c:	057fffc4 	movi	r21,-1
   18150:	0081ffc4 	movi	r2,2047
   18154:	003f9b06 	br	17fc4 <__alt_data_end+0xfc017fc4>
   18158:	00c00044 	movi	r3,1
   1815c:	1887c83a 	sub	r3,r3,r2
   18160:	01000e04 	movi	r4,56
   18164:	20c1530e 	bge	r4,r3,186b4 <__divdf3+0x86c>
   18168:	9900004c 	andi	r4,r19,1
   1816c:	0005883a 	mov	r2,zero
   18170:	0021883a 	mov	r16,zero
   18174:	002b883a 	mov	r21,zero
   18178:	003f9206 	br	17fc4 <__alt_data_end+0xfc017fc4>
   1817c:	8c012e36 	bltu	r17,r16,18638 <__divdf3+0x7f0>
   18180:	84412c26 	beq	r16,r17,18634 <__divdf3+0x7ec>
   18184:	a82f883a 	mov	r23,r21
   18188:	18ffffc4 	addi	r3,r3,-1
   1818c:	002b883a 	mov	r21,zero
   18190:	a004d63a 	srli	r2,r20,24
   18194:	8822923a 	slli	r17,r17,8
   18198:	a028923a 	slli	r20,r20,8
   1819c:	8009883a 	mov	r4,r16
   181a0:	88acb03a 	or	r22,r17,r2
   181a4:	dd000015 	stw	r20,0(sp)
   181a8:	b028d43a 	srli	r20,r22,16
   181ac:	d8c00215 	stw	r3,8(sp)
   181b0:	b4bfffcc 	andi	r18,r22,65535
   181b4:	a00b883a 	mov	r5,r20
   181b8:	000ce400 	call	ce40 <__udivsi3>
   181bc:	100b883a 	mov	r5,r2
   181c0:	9009883a 	mov	r4,r18
   181c4:	1023883a 	mov	r17,r2
   181c8:	000cefc0 	call	cefc <__mulsi3>
   181cc:	8009883a 	mov	r4,r16
   181d0:	a00b883a 	mov	r5,r20
   181d4:	1039883a 	mov	fp,r2
   181d8:	000cea40 	call	cea4 <__umodsi3>
   181dc:	1004943a 	slli	r2,r2,16
   181e0:	b808d43a 	srli	r4,r23,16
   181e4:	d8c00217 	ldw	r3,8(sp)
   181e8:	2084b03a 	or	r2,r4,r2
   181ec:	1700062e 	bgeu	r2,fp,18208 <__divdf3+0x3c0>
   181f0:	1585883a 	add	r2,r2,r22
   181f4:	893fffc4 	addi	r4,r17,-1
   181f8:	15811d36 	bltu	r2,r22,18670 <__divdf3+0x828>
   181fc:	17011c2e 	bgeu	r2,fp,18670 <__divdf3+0x828>
   18200:	8c7fff84 	addi	r17,r17,-2
   18204:	1585883a 	add	r2,r2,r22
   18208:	1739c83a 	sub	fp,r2,fp
   1820c:	a00b883a 	mov	r5,r20
   18210:	e009883a 	mov	r4,fp
   18214:	d8c00215 	stw	r3,8(sp)
   18218:	000ce400 	call	ce40 <__udivsi3>
   1821c:	100b883a 	mov	r5,r2
   18220:	9009883a 	mov	r4,r18
   18224:	1021883a 	mov	r16,r2
   18228:	000cefc0 	call	cefc <__mulsi3>
   1822c:	a00b883a 	mov	r5,r20
   18230:	e009883a 	mov	r4,fp
   18234:	d8800415 	stw	r2,16(sp)
   18238:	000cea40 	call	cea4 <__umodsi3>
   1823c:	1004943a 	slli	r2,r2,16
   18240:	da000417 	ldw	r8,16(sp)
   18244:	bdffffcc 	andi	r23,r23,65535
   18248:	b884b03a 	or	r2,r23,r2
   1824c:	d8c00217 	ldw	r3,8(sp)
   18250:	1200062e 	bgeu	r2,r8,1826c <__divdf3+0x424>
   18254:	1585883a 	add	r2,r2,r22
   18258:	813fffc4 	addi	r4,r16,-1
   1825c:	15810236 	bltu	r2,r22,18668 <__divdf3+0x820>
   18260:	1201012e 	bgeu	r2,r8,18668 <__divdf3+0x820>
   18264:	843fff84 	addi	r16,r16,-2
   18268:	1585883a 	add	r2,r2,r22
   1826c:	8822943a 	slli	r17,r17,16
   18270:	d9800017 	ldw	r6,0(sp)
   18274:	1211c83a 	sub	r8,r2,r8
   18278:	8c22b03a 	or	r17,r17,r16
   1827c:	373fffcc 	andi	fp,r6,65535
   18280:	8abfffcc 	andi	r10,r17,65535
   18284:	8820d43a 	srli	r16,r17,16
   18288:	5009883a 	mov	r4,r10
   1828c:	e00b883a 	mov	r5,fp
   18290:	302ed43a 	srli	r23,r6,16
   18294:	d8c00215 	stw	r3,8(sp)
   18298:	da000415 	stw	r8,16(sp)
   1829c:	da800115 	stw	r10,4(sp)
   182a0:	000cefc0 	call	cefc <__mulsi3>
   182a4:	800b883a 	mov	r5,r16
   182a8:	e009883a 	mov	r4,fp
   182ac:	d8800515 	stw	r2,20(sp)
   182b0:	000cefc0 	call	cefc <__mulsi3>
   182b4:	8009883a 	mov	r4,r16
   182b8:	b80b883a 	mov	r5,r23
   182bc:	d8800315 	stw	r2,12(sp)
   182c0:	000cefc0 	call	cefc <__mulsi3>
   182c4:	da800117 	ldw	r10,4(sp)
   182c8:	b80b883a 	mov	r5,r23
   182cc:	1021883a 	mov	r16,r2
   182d0:	5009883a 	mov	r4,r10
   182d4:	000cefc0 	call	cefc <__mulsi3>
   182d8:	d9c00517 	ldw	r7,20(sp)
   182dc:	da400317 	ldw	r9,12(sp)
   182e0:	d8c00217 	ldw	r3,8(sp)
   182e4:	3808d43a 	srli	r4,r7,16
   182e8:	1245883a 	add	r2,r2,r9
   182ec:	da000417 	ldw	r8,16(sp)
   182f0:	2085883a 	add	r2,r4,r2
   182f4:	1240022e 	bgeu	r2,r9,18300 <__divdf3+0x4b8>
   182f8:	01000074 	movhi	r4,1
   182fc:	8121883a 	add	r16,r16,r4
   18300:	1008d43a 	srli	r4,r2,16
   18304:	1004943a 	slli	r2,r2,16
   18308:	39ffffcc 	andi	r7,r7,65535
   1830c:	2409883a 	add	r4,r4,r16
   18310:	11c5883a 	add	r2,r2,r7
   18314:	4100bb36 	bltu	r8,r4,18604 <__divdf3+0x7bc>
   18318:	4100d726 	beq	r8,r4,18678 <__divdf3+0x830>
   1831c:	4109c83a 	sub	r4,r8,r4
   18320:	a8a1c83a 	sub	r16,r21,r2
   18324:	ac2b803a 	cmpltu	r21,r21,r16
   18328:	256bc83a 	sub	r21,r4,r21
   1832c:	b540d926 	beq	r22,r21,18694 <__divdf3+0x84c>
   18330:	a00b883a 	mov	r5,r20
   18334:	a809883a 	mov	r4,r21
   18338:	d8c00215 	stw	r3,8(sp)
   1833c:	000ce400 	call	ce40 <__udivsi3>
   18340:	100b883a 	mov	r5,r2
   18344:	9009883a 	mov	r4,r18
   18348:	d8800515 	stw	r2,20(sp)
   1834c:	000cefc0 	call	cefc <__mulsi3>
   18350:	a809883a 	mov	r4,r21
   18354:	a00b883a 	mov	r5,r20
   18358:	d8800415 	stw	r2,16(sp)
   1835c:	000cea40 	call	cea4 <__umodsi3>
   18360:	1004943a 	slli	r2,r2,16
   18364:	8008d43a 	srli	r4,r16,16
   18368:	da000417 	ldw	r8,16(sp)
   1836c:	d8c00217 	ldw	r3,8(sp)
   18370:	2084b03a 	or	r2,r4,r2
   18374:	d9c00517 	ldw	r7,20(sp)
   18378:	1200062e 	bgeu	r2,r8,18394 <__divdf3+0x54c>
   1837c:	1585883a 	add	r2,r2,r22
   18380:	393fffc4 	addi	r4,r7,-1
   18384:	1580c536 	bltu	r2,r22,1869c <__divdf3+0x854>
   18388:	1200c42e 	bgeu	r2,r8,1869c <__divdf3+0x854>
   1838c:	39ffff84 	addi	r7,r7,-2
   18390:	1585883a 	add	r2,r2,r22
   18394:	122bc83a 	sub	r21,r2,r8
   18398:	a00b883a 	mov	r5,r20
   1839c:	a809883a 	mov	r4,r21
   183a0:	d8c00215 	stw	r3,8(sp)
   183a4:	d9c00515 	stw	r7,20(sp)
   183a8:	000ce400 	call	ce40 <__udivsi3>
   183ac:	9009883a 	mov	r4,r18
   183b0:	100b883a 	mov	r5,r2
   183b4:	d8800415 	stw	r2,16(sp)
   183b8:	000cefc0 	call	cefc <__mulsi3>
   183bc:	a809883a 	mov	r4,r21
   183c0:	a00b883a 	mov	r5,r20
   183c4:	1025883a 	mov	r18,r2
   183c8:	000cea40 	call	cea4 <__umodsi3>
   183cc:	1004943a 	slli	r2,r2,16
   183d0:	813fffcc 	andi	r4,r16,65535
   183d4:	d8c00217 	ldw	r3,8(sp)
   183d8:	20a0b03a 	or	r16,r4,r2
   183dc:	d9c00517 	ldw	r7,20(sp)
   183e0:	da000417 	ldw	r8,16(sp)
   183e4:	8480062e 	bgeu	r16,r18,18400 <__divdf3+0x5b8>
   183e8:	85a1883a 	add	r16,r16,r22
   183ec:	40bfffc4 	addi	r2,r8,-1
   183f0:	8580ac36 	bltu	r16,r22,186a4 <__divdf3+0x85c>
   183f4:	8480ab2e 	bgeu	r16,r18,186a4 <__divdf3+0x85c>
   183f8:	423fff84 	addi	r8,r8,-2
   183fc:	85a1883a 	add	r16,r16,r22
   18400:	3804943a 	slli	r2,r7,16
   18404:	84a1c83a 	sub	r16,r16,r18
   18408:	e009883a 	mov	r4,fp
   1840c:	1228b03a 	or	r20,r2,r8
   18410:	a1ffffcc 	andi	r7,r20,65535
   18414:	a024d43a 	srli	r18,r20,16
   18418:	380b883a 	mov	r5,r7
   1841c:	d8c00215 	stw	r3,8(sp)
   18420:	d9c00515 	stw	r7,20(sp)
   18424:	000cefc0 	call	cefc <__mulsi3>
   18428:	900b883a 	mov	r5,r18
   1842c:	e009883a 	mov	r4,fp
   18430:	102b883a 	mov	r21,r2
   18434:	000cefc0 	call	cefc <__mulsi3>
   18438:	900b883a 	mov	r5,r18
   1843c:	b809883a 	mov	r4,r23
   18440:	1039883a 	mov	fp,r2
   18444:	000cefc0 	call	cefc <__mulsi3>
   18448:	d9c00517 	ldw	r7,20(sp)
   1844c:	b80b883a 	mov	r5,r23
   18450:	1025883a 	mov	r18,r2
   18454:	3809883a 	mov	r4,r7
   18458:	000cefc0 	call	cefc <__mulsi3>
   1845c:	a808d43a 	srli	r4,r21,16
   18460:	1705883a 	add	r2,r2,fp
   18464:	d8c00217 	ldw	r3,8(sp)
   18468:	2085883a 	add	r2,r4,r2
   1846c:	1700022e 	bgeu	r2,fp,18478 <__divdf3+0x630>
   18470:	01000074 	movhi	r4,1
   18474:	9125883a 	add	r18,r18,r4
   18478:	1008d43a 	srli	r4,r2,16
   1847c:	1004943a 	slli	r2,r2,16
   18480:	ad7fffcc 	andi	r21,r21,65535
   18484:	2489883a 	add	r4,r4,r18
   18488:	1545883a 	add	r2,r2,r21
   1848c:	81003836 	bltu	r16,r4,18570 <__divdf3+0x728>
   18490:	81003626 	beq	r16,r4,1856c <__divdf3+0x724>
   18494:	a5000054 	ori	r20,r20,1
   18498:	1880ffc4 	addi	r2,r3,1023
   1849c:	00bf2e0e 	bge	zero,r2,18158 <__alt_data_end+0xfc018158>
   184a0:	a10001cc 	andi	r4,r20,7
   184a4:	20000726 	beq	r4,zero,184c4 <__divdf3+0x67c>
   184a8:	a10003cc 	andi	r4,r20,15
   184ac:	01400104 	movi	r5,4
   184b0:	21400426 	beq	r4,r5,184c4 <__divdf3+0x67c>
   184b4:	a149883a 	add	r4,r20,r5
   184b8:	2529803a 	cmpltu	r20,r4,r20
   184bc:	8d23883a 	add	r17,r17,r20
   184c0:	2029883a 	mov	r20,r4
   184c4:	8900402c 	andhi	r4,r17,256
   184c8:	20000426 	beq	r4,zero,184dc <__divdf3+0x694>
   184cc:	18810004 	addi	r2,r3,1024
   184d0:	00ffc034 	movhi	r3,65280
   184d4:	18ffffc4 	addi	r3,r3,-1
   184d8:	88e2703a 	and	r17,r17,r3
   184dc:	00c1ff84 	movi	r3,2046
   184e0:	18beb416 	blt	r3,r2,17fb4 <__alt_data_end+0xfc017fb4>
   184e4:	a028d0fa 	srli	r20,r20,3
   184e8:	882a977a 	slli	r21,r17,29
   184ec:	8820927a 	slli	r16,r17,9
   184f0:	1081ffcc 	andi	r2,r2,2047
   184f4:	ad2ab03a 	or	r21,r21,r20
   184f8:	8020d33a 	srli	r16,r16,12
   184fc:	9900004c 	andi	r4,r19,1
   18500:	003eb006 	br	17fc4 <__alt_data_end+0xfc017fc4>
   18504:	8080022c 	andhi	r2,r16,8
   18508:	10001226 	beq	r2,zero,18554 <__divdf3+0x70c>
   1850c:	8880022c 	andhi	r2,r17,8
   18510:	1000101e 	bne	r2,zero,18554 <__divdf3+0x70c>
   18514:	00800434 	movhi	r2,16
   18518:	8c000234 	orhi	r16,r17,8
   1851c:	10bfffc4 	addi	r2,r2,-1
   18520:	b809883a 	mov	r4,r23
   18524:	80a0703a 	and	r16,r16,r2
   18528:	a02b883a 	mov	r21,r20
   1852c:	003f0806 	br	18150 <__alt_data_end+0xfc018150>
   18530:	008000c4 	movi	r2,3
   18534:	3880b126 	beq	r7,r2,187fc <__divdf3+0x9b4>
   18538:	00800044 	movi	r2,1
   1853c:	38805b1e 	bne	r7,r2,186ac <__divdf3+0x864>
   18540:	e009883a 	mov	r4,fp
   18544:	0005883a 	mov	r2,zero
   18548:	0021883a 	mov	r16,zero
   1854c:	002b883a 	mov	r21,zero
   18550:	003e9c06 	br	17fc4 <__alt_data_end+0xfc017fc4>
   18554:	00800434 	movhi	r2,16
   18558:	84000234 	orhi	r16,r16,8
   1855c:	10bfffc4 	addi	r2,r2,-1
   18560:	b009883a 	mov	r4,r22
   18564:	80a0703a 	and	r16,r16,r2
   18568:	003ef906 	br	18150 <__alt_data_end+0xfc018150>
   1856c:	103fca26 	beq	r2,zero,18498 <__alt_data_end+0xfc018498>
   18570:	b421883a 	add	r16,r22,r16
   18574:	a17fffc4 	addi	r5,r20,-1
   18578:	8580422e 	bgeu	r16,r22,18684 <__divdf3+0x83c>
   1857c:	2829883a 	mov	r20,r5
   18580:	813fc41e 	bne	r16,r4,18494 <__alt_data_end+0xfc018494>
   18584:	d9800017 	ldw	r6,0(sp)
   18588:	30bfc21e 	bne	r6,r2,18494 <__alt_data_end+0xfc018494>
   1858c:	003fc206 	br	18498 <__alt_data_end+0xfc018498>
   18590:	143ff604 	addi	r16,r2,-40
   18594:	8c20983a 	sll	r16,r17,r16
   18598:	002b883a 	mov	r21,zero
   1859c:	003eb406 	br	18070 <__alt_data_end+0xfc018070>
   185a0:	d9800215 	stw	r6,8(sp)
   185a4:	d9c00515 	stw	r7,20(sp)
   185a8:	da000415 	stw	r8,16(sp)
   185ac:	0019ddc0 	call	19ddc <__clzsi2>
   185b0:	10800804 	addi	r2,r2,32
   185b4:	da000417 	ldw	r8,16(sp)
   185b8:	d9c00517 	ldw	r7,20(sp)
   185bc:	d9800217 	ldw	r6,8(sp)
   185c0:	003ea106 	br	18048 <__alt_data_end+0xfc018048>
   185c4:	147ff604 	addi	r17,r2,-40
   185c8:	3462983a 	sll	r17,r6,r17
   185cc:	0029883a 	mov	r20,zero
   185d0:	003ec906 	br	180f8 <__alt_data_end+0xfc0180f8>
   185d4:	3009883a 	mov	r4,r6
   185d8:	d9400115 	stw	r5,4(sp)
   185dc:	d9800215 	stw	r6,8(sp)
   185e0:	da000415 	stw	r8,16(sp)
   185e4:	da400315 	stw	r9,12(sp)
   185e8:	0019ddc0 	call	19ddc <__clzsi2>
   185ec:	10800804 	addi	r2,r2,32
   185f0:	da400317 	ldw	r9,12(sp)
   185f4:	da000417 	ldw	r8,16(sp)
   185f8:	d9800217 	ldw	r6,8(sp)
   185fc:	d9400117 	ldw	r5,4(sp)
   18600:	003eb306 	br	180d0 <__alt_data_end+0xfc0180d0>
   18604:	d9800017 	ldw	r6,0(sp)
   18608:	a9ab883a 	add	r21,r21,r6
   1860c:	a98b803a 	cmpltu	r5,r21,r6
   18610:	2d8b883a 	add	r5,r5,r22
   18614:	2a11883a 	add	r8,r5,r8
   18618:	897fffc4 	addi	r5,r17,-1
   1861c:	b2000c2e 	bgeu	r22,r8,18650 <__divdf3+0x808>
   18620:	41003f36 	bltu	r8,r4,18720 <__divdf3+0x8d8>
   18624:	22006c26 	beq	r4,r8,187d8 <__divdf3+0x990>
   18628:	4109c83a 	sub	r4,r8,r4
   1862c:	2823883a 	mov	r17,r5
   18630:	003f3b06 	br	18320 <__alt_data_end+0xfc018320>
   18634:	ad3ed336 	bltu	r21,r20,18184 <__alt_data_end+0xfc018184>
   18638:	a804d07a 	srli	r2,r21,1
   1863c:	802e97fa 	slli	r23,r16,31
   18640:	a82a97fa 	slli	r21,r21,31
   18644:	8020d07a 	srli	r16,r16,1
   18648:	b8aeb03a 	or	r23,r23,r2
   1864c:	003ed006 	br	18190 <__alt_data_end+0xfc018190>
   18650:	b23ff51e 	bne	r22,r8,18628 <__alt_data_end+0xfc018628>
   18654:	d9800017 	ldw	r6,0(sp)
   18658:	a9bff12e 	bgeu	r21,r6,18620 <__alt_data_end+0xfc018620>
   1865c:	b109c83a 	sub	r4,r22,r4
   18660:	2823883a 	mov	r17,r5
   18664:	003f2e06 	br	18320 <__alt_data_end+0xfc018320>
   18668:	2021883a 	mov	r16,r4
   1866c:	003eff06 	br	1826c <__alt_data_end+0xfc01826c>
   18670:	2023883a 	mov	r17,r4
   18674:	003ee406 	br	18208 <__alt_data_end+0xfc018208>
   18678:	a8bfe236 	bltu	r21,r2,18604 <__alt_data_end+0xfc018604>
   1867c:	0009883a 	mov	r4,zero
   18680:	003f2706 	br	18320 <__alt_data_end+0xfc018320>
   18684:	81002d36 	bltu	r16,r4,1873c <__divdf3+0x8f4>
   18688:	24005626 	beq	r4,r16,187e4 <__divdf3+0x99c>
   1868c:	2829883a 	mov	r20,r5
   18690:	003f8006 	br	18494 <__alt_data_end+0xfc018494>
   18694:	053fffc4 	movi	r20,-1
   18698:	003f7f06 	br	18498 <__alt_data_end+0xfc018498>
   1869c:	200f883a 	mov	r7,r4
   186a0:	003f3c06 	br	18394 <__alt_data_end+0xfc018394>
   186a4:	1011883a 	mov	r8,r2
   186a8:	003f5506 	br	18400 <__alt_data_end+0xfc018400>
   186ac:	e027883a 	mov	r19,fp
   186b0:	003f7906 	br	18498 <__alt_data_end+0xfc018498>
   186b4:	010007c4 	movi	r4,31
   186b8:	20c02816 	blt	r4,r3,1875c <__divdf3+0x914>
   186bc:	00800804 	movi	r2,32
   186c0:	10c5c83a 	sub	r2,r2,r3
   186c4:	888a983a 	sll	r5,r17,r2
   186c8:	a0c8d83a 	srl	r4,r20,r3
   186cc:	a084983a 	sll	r2,r20,r2
   186d0:	88e2d83a 	srl	r17,r17,r3
   186d4:	2906b03a 	or	r3,r5,r4
   186d8:	1004c03a 	cmpne	r2,r2,zero
   186dc:	1886b03a 	or	r3,r3,r2
   186e0:	188001cc 	andi	r2,r3,7
   186e4:	10000726 	beq	r2,zero,18704 <__divdf3+0x8bc>
   186e8:	188003cc 	andi	r2,r3,15
   186ec:	01000104 	movi	r4,4
   186f0:	11000426 	beq	r2,r4,18704 <__divdf3+0x8bc>
   186f4:	1805883a 	mov	r2,r3
   186f8:	10c00104 	addi	r3,r2,4
   186fc:	1885803a 	cmpltu	r2,r3,r2
   18700:	88a3883a 	add	r17,r17,r2
   18704:	8880202c 	andhi	r2,r17,128
   18708:	10002926 	beq	r2,zero,187b0 <__divdf3+0x968>
   1870c:	9900004c 	andi	r4,r19,1
   18710:	00800044 	movi	r2,1
   18714:	0021883a 	mov	r16,zero
   18718:	002b883a 	mov	r21,zero
   1871c:	003e2906 	br	17fc4 <__alt_data_end+0xfc017fc4>
   18720:	d9800017 	ldw	r6,0(sp)
   18724:	8c7fff84 	addi	r17,r17,-2
   18728:	a9ab883a 	add	r21,r21,r6
   1872c:	a98b803a 	cmpltu	r5,r21,r6
   18730:	2d8b883a 	add	r5,r5,r22
   18734:	2a11883a 	add	r8,r5,r8
   18738:	003ef806 	br	1831c <__alt_data_end+0xfc01831c>
   1873c:	d9800017 	ldw	r6,0(sp)
   18740:	318f883a 	add	r7,r6,r6
   18744:	398b803a 	cmpltu	r5,r7,r6
   18748:	2d8d883a 	add	r6,r5,r22
   1874c:	81a1883a 	add	r16,r16,r6
   18750:	a17fff84 	addi	r5,r20,-2
   18754:	d9c00015 	stw	r7,0(sp)
   18758:	003f8806 	br	1857c <__alt_data_end+0xfc01857c>
   1875c:	013ff844 	movi	r4,-31
   18760:	2085c83a 	sub	r2,r4,r2
   18764:	8888d83a 	srl	r4,r17,r2
   18768:	00800804 	movi	r2,32
   1876c:	18802126 	beq	r3,r2,187f4 <__divdf3+0x9ac>
   18770:	04001004 	movi	r16,64
   18774:	80c7c83a 	sub	r3,r16,r3
   18778:	88e0983a 	sll	r16,r17,r3
   1877c:	8504b03a 	or	r2,r16,r20
   18780:	1004c03a 	cmpne	r2,r2,zero
   18784:	2084b03a 	or	r2,r4,r2
   18788:	144001cc 	andi	r17,r2,7
   1878c:	88000d1e 	bne	r17,zero,187c4 <__divdf3+0x97c>
   18790:	0021883a 	mov	r16,zero
   18794:	102ad0fa 	srli	r21,r2,3
   18798:	9900004c 	andi	r4,r19,1
   1879c:	0005883a 	mov	r2,zero
   187a0:	ac6ab03a 	or	r21,r21,r17
   187a4:	003e0706 	br	17fc4 <__alt_data_end+0xfc017fc4>
   187a8:	1007883a 	mov	r3,r2
   187ac:	0023883a 	mov	r17,zero
   187b0:	8820927a 	slli	r16,r17,9
   187b4:	1805883a 	mov	r2,r3
   187b8:	8822977a 	slli	r17,r17,29
   187bc:	8020d33a 	srli	r16,r16,12
   187c0:	003ff406 	br	18794 <__alt_data_end+0xfc018794>
   187c4:	10c003cc 	andi	r3,r2,15
   187c8:	01000104 	movi	r4,4
   187cc:	193ff626 	beq	r3,r4,187a8 <__alt_data_end+0xfc0187a8>
   187d0:	0023883a 	mov	r17,zero
   187d4:	003fc806 	br	186f8 <__alt_data_end+0xfc0186f8>
   187d8:	a8bfd136 	bltu	r21,r2,18720 <__alt_data_end+0xfc018720>
   187dc:	2823883a 	mov	r17,r5
   187e0:	003fa606 	br	1867c <__alt_data_end+0xfc01867c>
   187e4:	d9800017 	ldw	r6,0(sp)
   187e8:	30bfd436 	bltu	r6,r2,1873c <__alt_data_end+0xfc01873c>
   187ec:	2829883a 	mov	r20,r5
   187f0:	003f6406 	br	18584 <__alt_data_end+0xfc018584>
   187f4:	0021883a 	mov	r16,zero
   187f8:	003fe006 	br	1877c <__alt_data_end+0xfc01877c>
   187fc:	00800434 	movhi	r2,16
   18800:	8c000234 	orhi	r16,r17,8
   18804:	10bfffc4 	addi	r2,r2,-1
   18808:	e009883a 	mov	r4,fp
   1880c:	80a0703a 	and	r16,r16,r2
   18810:	a02b883a 	mov	r21,r20
   18814:	003e4e06 	br	18150 <__alt_data_end+0xfc018150>

00018818 <__eqdf2>:
   18818:	2804d53a 	srli	r2,r5,20
   1881c:	3806d53a 	srli	r3,r7,20
   18820:	02000434 	movhi	r8,16
   18824:	423fffc4 	addi	r8,r8,-1
   18828:	1081ffcc 	andi	r2,r2,2047
   1882c:	0281ffc4 	movi	r10,2047
   18830:	2a12703a 	and	r9,r5,r8
   18834:	18c1ffcc 	andi	r3,r3,2047
   18838:	3a10703a 	and	r8,r7,r8
   1883c:	280ad7fa 	srli	r5,r5,31
   18840:	380ed7fa 	srli	r7,r7,31
   18844:	12801026 	beq	r2,r10,18888 <__eqdf2+0x70>
   18848:	0281ffc4 	movi	r10,2047
   1884c:	1a800a26 	beq	r3,r10,18878 <__eqdf2+0x60>
   18850:	10c00226 	beq	r2,r3,1885c <__eqdf2+0x44>
   18854:	00800044 	movi	r2,1
   18858:	f800283a 	ret
   1885c:	4a3ffd1e 	bne	r9,r8,18854 <__alt_data_end+0xfc018854>
   18860:	21bffc1e 	bne	r4,r6,18854 <__alt_data_end+0xfc018854>
   18864:	29c00c26 	beq	r5,r7,18898 <__eqdf2+0x80>
   18868:	103ffa1e 	bne	r2,zero,18854 <__alt_data_end+0xfc018854>
   1886c:	2244b03a 	or	r2,r4,r9
   18870:	1004c03a 	cmpne	r2,r2,zero
   18874:	f800283a 	ret
   18878:	3214b03a 	or	r10,r6,r8
   1887c:	503ff426 	beq	r10,zero,18850 <__alt_data_end+0xfc018850>
   18880:	00800044 	movi	r2,1
   18884:	f800283a 	ret
   18888:	2254b03a 	or	r10,r4,r9
   1888c:	503fee26 	beq	r10,zero,18848 <__alt_data_end+0xfc018848>
   18890:	00800044 	movi	r2,1
   18894:	f800283a 	ret
   18898:	0005883a 	mov	r2,zero
   1889c:	f800283a 	ret

000188a0 <__gedf2>:
   188a0:	2804d53a 	srli	r2,r5,20
   188a4:	3806d53a 	srli	r3,r7,20
   188a8:	02000434 	movhi	r8,16
   188ac:	423fffc4 	addi	r8,r8,-1
   188b0:	1081ffcc 	andi	r2,r2,2047
   188b4:	0241ffc4 	movi	r9,2047
   188b8:	2a14703a 	and	r10,r5,r8
   188bc:	18c1ffcc 	andi	r3,r3,2047
   188c0:	3a10703a 	and	r8,r7,r8
   188c4:	280ad7fa 	srli	r5,r5,31
   188c8:	380ed7fa 	srli	r7,r7,31
   188cc:	12401d26 	beq	r2,r9,18944 <__gedf2+0xa4>
   188d0:	0241ffc4 	movi	r9,2047
   188d4:	1a401226 	beq	r3,r9,18920 <__gedf2+0x80>
   188d8:	1000081e 	bne	r2,zero,188fc <__gedf2+0x5c>
   188dc:	2296b03a 	or	r11,r4,r10
   188e0:	5813003a 	cmpeq	r9,r11,zero
   188e4:	1800091e 	bne	r3,zero,1890c <__gedf2+0x6c>
   188e8:	3218b03a 	or	r12,r6,r8
   188ec:	6000071e 	bne	r12,zero,1890c <__gedf2+0x6c>
   188f0:	0005883a 	mov	r2,zero
   188f4:	5800101e 	bne	r11,zero,18938 <__gedf2+0x98>
   188f8:	f800283a 	ret
   188fc:	18000c1e 	bne	r3,zero,18930 <__gedf2+0x90>
   18900:	3212b03a 	or	r9,r6,r8
   18904:	48000c26 	beq	r9,zero,18938 <__gedf2+0x98>
   18908:	0013883a 	mov	r9,zero
   1890c:	39c03fcc 	andi	r7,r7,255
   18910:	48000826 	beq	r9,zero,18934 <__gedf2+0x94>
   18914:	38000926 	beq	r7,zero,1893c <__gedf2+0x9c>
   18918:	00800044 	movi	r2,1
   1891c:	f800283a 	ret
   18920:	3212b03a 	or	r9,r6,r8
   18924:	483fec26 	beq	r9,zero,188d8 <__alt_data_end+0xfc0188d8>
   18928:	00bfff84 	movi	r2,-2
   1892c:	f800283a 	ret
   18930:	39c03fcc 	andi	r7,r7,255
   18934:	29c00626 	beq	r5,r7,18950 <__gedf2+0xb0>
   18938:	283ff726 	beq	r5,zero,18918 <__alt_data_end+0xfc018918>
   1893c:	00bfffc4 	movi	r2,-1
   18940:	f800283a 	ret
   18944:	2292b03a 	or	r9,r4,r10
   18948:	483fe126 	beq	r9,zero,188d0 <__alt_data_end+0xfc0188d0>
   1894c:	003ff606 	br	18928 <__alt_data_end+0xfc018928>
   18950:	18bff916 	blt	r3,r2,18938 <__alt_data_end+0xfc018938>
   18954:	10c00316 	blt	r2,r3,18964 <__gedf2+0xc4>
   18958:	42bff736 	bltu	r8,r10,18938 <__alt_data_end+0xfc018938>
   1895c:	52000326 	beq	r10,r8,1896c <__gedf2+0xcc>
   18960:	5200042e 	bgeu	r10,r8,18974 <__gedf2+0xd4>
   18964:	283fec1e 	bne	r5,zero,18918 <__alt_data_end+0xfc018918>
   18968:	003ff406 	br	1893c <__alt_data_end+0xfc01893c>
   1896c:	313ff236 	bltu	r6,r4,18938 <__alt_data_end+0xfc018938>
   18970:	21bffc36 	bltu	r4,r6,18964 <__alt_data_end+0xfc018964>
   18974:	0005883a 	mov	r2,zero
   18978:	f800283a 	ret

0001897c <__ledf2>:
   1897c:	2804d53a 	srli	r2,r5,20
   18980:	3810d53a 	srli	r8,r7,20
   18984:	00c00434 	movhi	r3,16
   18988:	18ffffc4 	addi	r3,r3,-1
   1898c:	1081ffcc 	andi	r2,r2,2047
   18990:	0241ffc4 	movi	r9,2047
   18994:	28d4703a 	and	r10,r5,r3
   18998:	4201ffcc 	andi	r8,r8,2047
   1899c:	38c6703a 	and	r3,r7,r3
   189a0:	280ad7fa 	srli	r5,r5,31
   189a4:	380ed7fa 	srli	r7,r7,31
   189a8:	12401f26 	beq	r2,r9,18a28 <__ledf2+0xac>
   189ac:	0241ffc4 	movi	r9,2047
   189b0:	42401426 	beq	r8,r9,18a04 <__ledf2+0x88>
   189b4:	1000091e 	bne	r2,zero,189dc <__ledf2+0x60>
   189b8:	2296b03a 	or	r11,r4,r10
   189bc:	5813003a 	cmpeq	r9,r11,zero
   189c0:	29403fcc 	andi	r5,r5,255
   189c4:	40000a1e 	bne	r8,zero,189f0 <__ledf2+0x74>
   189c8:	30d8b03a 	or	r12,r6,r3
   189cc:	6000081e 	bne	r12,zero,189f0 <__ledf2+0x74>
   189d0:	0005883a 	mov	r2,zero
   189d4:	5800111e 	bne	r11,zero,18a1c <__ledf2+0xa0>
   189d8:	f800283a 	ret
   189dc:	29403fcc 	andi	r5,r5,255
   189e0:	40000c1e 	bne	r8,zero,18a14 <__ledf2+0x98>
   189e4:	30d2b03a 	or	r9,r6,r3
   189e8:	48000c26 	beq	r9,zero,18a1c <__ledf2+0xa0>
   189ec:	0013883a 	mov	r9,zero
   189f0:	39c03fcc 	andi	r7,r7,255
   189f4:	48000826 	beq	r9,zero,18a18 <__ledf2+0x9c>
   189f8:	38001126 	beq	r7,zero,18a40 <__ledf2+0xc4>
   189fc:	00800044 	movi	r2,1
   18a00:	f800283a 	ret
   18a04:	30d2b03a 	or	r9,r6,r3
   18a08:	483fea26 	beq	r9,zero,189b4 <__alt_data_end+0xfc0189b4>
   18a0c:	00800084 	movi	r2,2
   18a10:	f800283a 	ret
   18a14:	39c03fcc 	andi	r7,r7,255
   18a18:	39400726 	beq	r7,r5,18a38 <__ledf2+0xbc>
   18a1c:	2800081e 	bne	r5,zero,18a40 <__ledf2+0xc4>
   18a20:	00800044 	movi	r2,1
   18a24:	f800283a 	ret
   18a28:	2292b03a 	or	r9,r4,r10
   18a2c:	483fdf26 	beq	r9,zero,189ac <__alt_data_end+0xfc0189ac>
   18a30:	00800084 	movi	r2,2
   18a34:	f800283a 	ret
   18a38:	4080030e 	bge	r8,r2,18a48 <__ledf2+0xcc>
   18a3c:	383fef26 	beq	r7,zero,189fc <__alt_data_end+0xfc0189fc>
   18a40:	00bfffc4 	movi	r2,-1
   18a44:	f800283a 	ret
   18a48:	123feb16 	blt	r2,r8,189f8 <__alt_data_end+0xfc0189f8>
   18a4c:	1abff336 	bltu	r3,r10,18a1c <__alt_data_end+0xfc018a1c>
   18a50:	50c00326 	beq	r10,r3,18a60 <__ledf2+0xe4>
   18a54:	50c0042e 	bgeu	r10,r3,18a68 <__ledf2+0xec>
   18a58:	283fe81e 	bne	r5,zero,189fc <__alt_data_end+0xfc0189fc>
   18a5c:	003ff806 	br	18a40 <__alt_data_end+0xfc018a40>
   18a60:	313fee36 	bltu	r6,r4,18a1c <__alt_data_end+0xfc018a1c>
   18a64:	21bffc36 	bltu	r4,r6,18a58 <__alt_data_end+0xfc018a58>
   18a68:	0005883a 	mov	r2,zero
   18a6c:	f800283a 	ret

00018a70 <__muldf3>:
   18a70:	deffee04 	addi	sp,sp,-72
   18a74:	dd000c15 	stw	r20,48(sp)
   18a78:	2828d53a 	srli	r20,r5,20
   18a7c:	ddc00f15 	stw	r23,60(sp)
   18a80:	282ed7fa 	srli	r23,r5,31
   18a84:	dc000815 	stw	r16,32(sp)
   18a88:	04000434 	movhi	r16,16
   18a8c:	dcc00b15 	stw	r19,44(sp)
   18a90:	843fffc4 	addi	r16,r16,-1
   18a94:	dfc01115 	stw	ra,68(sp)
   18a98:	df001015 	stw	fp,64(sp)
   18a9c:	dd800e15 	stw	r22,56(sp)
   18aa0:	dd400d15 	stw	r21,52(sp)
   18aa4:	dc800a15 	stw	r18,40(sp)
   18aa8:	dc400915 	stw	r17,36(sp)
   18aac:	a501ffcc 	andi	r20,r20,2047
   18ab0:	2c20703a 	and	r16,r5,r16
   18ab4:	b827883a 	mov	r19,r23
   18ab8:	ba403fcc 	andi	r9,r23,255
   18abc:	a0006026 	beq	r20,zero,18c40 <__muldf3+0x1d0>
   18ac0:	0081ffc4 	movi	r2,2047
   18ac4:	202d883a 	mov	r22,r4
   18ac8:	a0803626 	beq	r20,r2,18ba4 <__muldf3+0x134>
   18acc:	84000434 	orhi	r16,r16,16
   18ad0:	200ad77a 	srli	r5,r4,29
   18ad4:	800490fa 	slli	r2,r16,3
   18ad8:	202c90fa 	slli	r22,r4,3
   18adc:	a53f0044 	addi	r20,r20,-1023
   18ae0:	28a0b03a 	or	r16,r5,r2
   18ae4:	002b883a 	mov	r21,zero
   18ae8:	000b883a 	mov	r5,zero
   18aec:	3804d53a 	srli	r2,r7,20
   18af0:	3838d7fa 	srli	fp,r7,31
   18af4:	04400434 	movhi	r17,16
   18af8:	8c7fffc4 	addi	r17,r17,-1
   18afc:	1081ffcc 	andi	r2,r2,2047
   18b00:	3025883a 	mov	r18,r6
   18b04:	3c62703a 	and	r17,r7,r17
   18b08:	e2803fcc 	andi	r10,fp,255
   18b0c:	10006d26 	beq	r2,zero,18cc4 <__muldf3+0x254>
   18b10:	00c1ffc4 	movi	r3,2047
   18b14:	10c06526 	beq	r2,r3,18cac <__muldf3+0x23c>
   18b18:	8c400434 	orhi	r17,r17,16
   18b1c:	300ed77a 	srli	r7,r6,29
   18b20:	880690fa 	slli	r3,r17,3
   18b24:	302490fa 	slli	r18,r6,3
   18b28:	10bf0044 	addi	r2,r2,-1023
   18b2c:	38e2b03a 	or	r17,r7,r3
   18b30:	000f883a 	mov	r7,zero
   18b34:	a087883a 	add	r3,r20,r2
   18b38:	010003c4 	movi	r4,15
   18b3c:	3d44b03a 	or	r2,r7,r21
   18b40:	e5ccf03a 	xor	r6,fp,r23
   18b44:	1a000044 	addi	r8,r3,1
   18b48:	20809b36 	bltu	r4,r2,18db8 <__muldf3+0x348>
   18b4c:	100490ba 	slli	r2,r2,2
   18b50:	010000b4 	movhi	r4,2
   18b54:	2122d904 	addi	r4,r4,-29852
   18b58:	1105883a 	add	r2,r2,r4
   18b5c:	10800017 	ldw	r2,0(r2)
   18b60:	1000683a 	jmp	r2
   18b64:	00018db8 	rdprs	zero,zero,1590
   18b68:	00018bc4 	movi	zero,1583
   18b6c:	00018bc4 	movi	zero,1583
   18b70:	00018bc0 	call	18bc <readTileData+0x34>
   18b74:	00018d94 	movui	zero,1590
   18b78:	00018d94 	movui	zero,1590
   18b7c:	00018d7c 	xorhi	zero,zero,1589
   18b80:	00018bc0 	call	18bc <readTileData+0x34>
   18b84:	00018d94 	movui	zero,1590
   18b88:	00018d7c 	xorhi	zero,zero,1589
   18b8c:	00018d94 	movui	zero,1590
   18b90:	00018bc0 	call	18bc <readTileData+0x34>
   18b94:	00018da4 	muli	zero,zero,1590
   18b98:	00018da4 	muli	zero,zero,1590
   18b9c:	00018da4 	muli	zero,zero,1590
   18ba0:	00019104 	movi	zero,1604
   18ba4:	2404b03a 	or	r2,r4,r16
   18ba8:	1000711e 	bne	r2,zero,18d70 <__muldf3+0x300>
   18bac:	05400204 	movi	r21,8
   18bb0:	0021883a 	mov	r16,zero
   18bb4:	002d883a 	mov	r22,zero
   18bb8:	01400084 	movi	r5,2
   18bbc:	003fcb06 	br	18aec <__alt_data_end+0xfc018aec>
   18bc0:	500d883a 	mov	r6,r10
   18bc4:	00800084 	movi	r2,2
   18bc8:	38805926 	beq	r7,r2,18d30 <__muldf3+0x2c0>
   18bcc:	008000c4 	movi	r2,3
   18bd0:	3881bb26 	beq	r7,r2,192c0 <__muldf3+0x850>
   18bd4:	00800044 	movi	r2,1
   18bd8:	3881961e 	bne	r7,r2,19234 <__muldf3+0x7c4>
   18bdc:	3027883a 	mov	r19,r6
   18be0:	0005883a 	mov	r2,zero
   18be4:	0021883a 	mov	r16,zero
   18be8:	002d883a 	mov	r22,zero
   18bec:	1004953a 	slli	r2,r2,20
   18bf0:	98c03fcc 	andi	r3,r19,255
   18bf4:	04400434 	movhi	r17,16
   18bf8:	8c7fffc4 	addi	r17,r17,-1
   18bfc:	180697fa 	slli	r3,r3,31
   18c00:	8460703a 	and	r16,r16,r17
   18c04:	80a0b03a 	or	r16,r16,r2
   18c08:	80c6b03a 	or	r3,r16,r3
   18c0c:	b005883a 	mov	r2,r22
   18c10:	dfc01117 	ldw	ra,68(sp)
   18c14:	df001017 	ldw	fp,64(sp)
   18c18:	ddc00f17 	ldw	r23,60(sp)
   18c1c:	dd800e17 	ldw	r22,56(sp)
   18c20:	dd400d17 	ldw	r21,52(sp)
   18c24:	dd000c17 	ldw	r20,48(sp)
   18c28:	dcc00b17 	ldw	r19,44(sp)
   18c2c:	dc800a17 	ldw	r18,40(sp)
   18c30:	dc400917 	ldw	r17,36(sp)
   18c34:	dc000817 	ldw	r16,32(sp)
   18c38:	dec01204 	addi	sp,sp,72
   18c3c:	f800283a 	ret
   18c40:	2404b03a 	or	r2,r4,r16
   18c44:	202b883a 	mov	r21,r4
   18c48:	10004426 	beq	r2,zero,18d5c <__muldf3+0x2ec>
   18c4c:	80015126 	beq	r16,zero,19194 <__muldf3+0x724>
   18c50:	8009883a 	mov	r4,r16
   18c54:	d9800715 	stw	r6,28(sp)
   18c58:	d9c00215 	stw	r7,8(sp)
   18c5c:	da400415 	stw	r9,16(sp)
   18c60:	0019ddc0 	call	19ddc <__clzsi2>
   18c64:	d9800717 	ldw	r6,28(sp)
   18c68:	d9c00217 	ldw	r7,8(sp)
   18c6c:	da400417 	ldw	r9,16(sp)
   18c70:	113ffd44 	addi	r4,r2,-11
   18c74:	00c00704 	movi	r3,28
   18c78:	19014216 	blt	r3,r4,19184 <__muldf3+0x714>
   18c7c:	00c00744 	movi	r3,29
   18c80:	15bffe04 	addi	r22,r2,-8
   18c84:	1907c83a 	sub	r3,r3,r4
   18c88:	85a0983a 	sll	r16,r16,r22
   18c8c:	a8c6d83a 	srl	r3,r21,r3
   18c90:	adac983a 	sll	r22,r21,r22
   18c94:	1c20b03a 	or	r16,r3,r16
   18c98:	1080fcc4 	addi	r2,r2,1011
   18c9c:	00a9c83a 	sub	r20,zero,r2
   18ca0:	002b883a 	mov	r21,zero
   18ca4:	000b883a 	mov	r5,zero
   18ca8:	003f9006 	br	18aec <__alt_data_end+0xfc018aec>
   18cac:	3446b03a 	or	r3,r6,r17
   18cb0:	1800281e 	bne	r3,zero,18d54 <__muldf3+0x2e4>
   18cb4:	0023883a 	mov	r17,zero
   18cb8:	0025883a 	mov	r18,zero
   18cbc:	01c00084 	movi	r7,2
   18cc0:	003f9c06 	br	18b34 <__alt_data_end+0xfc018b34>
   18cc4:	3446b03a 	or	r3,r6,r17
   18cc8:	18001e26 	beq	r3,zero,18d44 <__muldf3+0x2d4>
   18ccc:	88012126 	beq	r17,zero,19154 <__muldf3+0x6e4>
   18cd0:	8809883a 	mov	r4,r17
   18cd4:	d9400215 	stw	r5,8(sp)
   18cd8:	d9800715 	stw	r6,28(sp)
   18cdc:	da400415 	stw	r9,16(sp)
   18ce0:	da800315 	stw	r10,12(sp)
   18ce4:	0019ddc0 	call	19ddc <__clzsi2>
   18ce8:	d9400217 	ldw	r5,8(sp)
   18cec:	d9800717 	ldw	r6,28(sp)
   18cf0:	da400417 	ldw	r9,16(sp)
   18cf4:	da800317 	ldw	r10,12(sp)
   18cf8:	113ffd44 	addi	r4,r2,-11
   18cfc:	00c00704 	movi	r3,28
   18d00:	19011016 	blt	r3,r4,19144 <__muldf3+0x6d4>
   18d04:	00c00744 	movi	r3,29
   18d08:	14bffe04 	addi	r18,r2,-8
   18d0c:	1907c83a 	sub	r3,r3,r4
   18d10:	8ca2983a 	sll	r17,r17,r18
   18d14:	30c6d83a 	srl	r3,r6,r3
   18d18:	34a4983a 	sll	r18,r6,r18
   18d1c:	1c62b03a 	or	r17,r3,r17
   18d20:	1080fcc4 	addi	r2,r2,1011
   18d24:	0085c83a 	sub	r2,zero,r2
   18d28:	000f883a 	mov	r7,zero
   18d2c:	003f8106 	br	18b34 <__alt_data_end+0xfc018b34>
   18d30:	3027883a 	mov	r19,r6
   18d34:	0081ffc4 	movi	r2,2047
   18d38:	0021883a 	mov	r16,zero
   18d3c:	002d883a 	mov	r22,zero
   18d40:	003faa06 	br	18bec <__alt_data_end+0xfc018bec>
   18d44:	0023883a 	mov	r17,zero
   18d48:	0025883a 	mov	r18,zero
   18d4c:	01c00044 	movi	r7,1
   18d50:	003f7806 	br	18b34 <__alt_data_end+0xfc018b34>
   18d54:	01c000c4 	movi	r7,3
   18d58:	003f7606 	br	18b34 <__alt_data_end+0xfc018b34>
   18d5c:	05400104 	movi	r21,4
   18d60:	0021883a 	mov	r16,zero
   18d64:	002d883a 	mov	r22,zero
   18d68:	01400044 	movi	r5,1
   18d6c:	003f5f06 	br	18aec <__alt_data_end+0xfc018aec>
   18d70:	05400304 	movi	r21,12
   18d74:	014000c4 	movi	r5,3
   18d78:	003f5c06 	br	18aec <__alt_data_end+0xfc018aec>
   18d7c:	04000434 	movhi	r16,16
   18d80:	0027883a 	mov	r19,zero
   18d84:	843fffc4 	addi	r16,r16,-1
   18d88:	05bfffc4 	movi	r22,-1
   18d8c:	0081ffc4 	movi	r2,2047
   18d90:	003f9606 	br	18bec <__alt_data_end+0xfc018bec>
   18d94:	8023883a 	mov	r17,r16
   18d98:	b025883a 	mov	r18,r22
   18d9c:	280f883a 	mov	r7,r5
   18da0:	003f8806 	br	18bc4 <__alt_data_end+0xfc018bc4>
   18da4:	8023883a 	mov	r17,r16
   18da8:	b025883a 	mov	r18,r22
   18dac:	480d883a 	mov	r6,r9
   18db0:	280f883a 	mov	r7,r5
   18db4:	003f8306 	br	18bc4 <__alt_data_end+0xfc018bc4>
   18db8:	b026d43a 	srli	r19,r22,16
   18dbc:	902ed43a 	srli	r23,r18,16
   18dc0:	b5bfffcc 	andi	r22,r22,65535
   18dc4:	94bfffcc 	andi	r18,r18,65535
   18dc8:	b00b883a 	mov	r5,r22
   18dcc:	9009883a 	mov	r4,r18
   18dd0:	d8c00515 	stw	r3,20(sp)
   18dd4:	d9800715 	stw	r6,28(sp)
   18dd8:	da000615 	stw	r8,24(sp)
   18ddc:	000cefc0 	call	cefc <__mulsi3>
   18de0:	980b883a 	mov	r5,r19
   18de4:	9009883a 	mov	r4,r18
   18de8:	1029883a 	mov	r20,r2
   18dec:	000cefc0 	call	cefc <__mulsi3>
   18df0:	b80b883a 	mov	r5,r23
   18df4:	9809883a 	mov	r4,r19
   18df8:	102b883a 	mov	r21,r2
   18dfc:	000cefc0 	call	cefc <__mulsi3>
   18e00:	b809883a 	mov	r4,r23
   18e04:	b00b883a 	mov	r5,r22
   18e08:	1039883a 	mov	fp,r2
   18e0c:	000cefc0 	call	cefc <__mulsi3>
   18e10:	a008d43a 	srli	r4,r20,16
   18e14:	1545883a 	add	r2,r2,r21
   18e18:	d8c00517 	ldw	r3,20(sp)
   18e1c:	2085883a 	add	r2,r4,r2
   18e20:	d9800717 	ldw	r6,28(sp)
   18e24:	da000617 	ldw	r8,24(sp)
   18e28:	1540022e 	bgeu	r2,r21,18e34 <__muldf3+0x3c4>
   18e2c:	01000074 	movhi	r4,1
   18e30:	e139883a 	add	fp,fp,r4
   18e34:	100e943a 	slli	r7,r2,16
   18e38:	1004d43a 	srli	r2,r2,16
   18e3c:	882ad43a 	srli	r21,r17,16
   18e40:	a53fffcc 	andi	r20,r20,65535
   18e44:	8c7fffcc 	andi	r17,r17,65535
   18e48:	3d29883a 	add	r20,r7,r20
   18e4c:	b00b883a 	mov	r5,r22
   18e50:	8809883a 	mov	r4,r17
   18e54:	d8c00515 	stw	r3,20(sp)
   18e58:	d9800715 	stw	r6,28(sp)
   18e5c:	da000615 	stw	r8,24(sp)
   18e60:	dd000115 	stw	r20,4(sp)
   18e64:	d8800015 	stw	r2,0(sp)
   18e68:	000cefc0 	call	cefc <__mulsi3>
   18e6c:	980b883a 	mov	r5,r19
   18e70:	8809883a 	mov	r4,r17
   18e74:	d8800215 	stw	r2,8(sp)
   18e78:	000cefc0 	call	cefc <__mulsi3>
   18e7c:	9809883a 	mov	r4,r19
   18e80:	a80b883a 	mov	r5,r21
   18e84:	1029883a 	mov	r20,r2
   18e88:	000cefc0 	call	cefc <__mulsi3>
   18e8c:	b00b883a 	mov	r5,r22
   18e90:	a809883a 	mov	r4,r21
   18e94:	d8800415 	stw	r2,16(sp)
   18e98:	000cefc0 	call	cefc <__mulsi3>
   18e9c:	d9c00217 	ldw	r7,8(sp)
   18ea0:	1505883a 	add	r2,r2,r20
   18ea4:	d8c00517 	ldw	r3,20(sp)
   18ea8:	3826d43a 	srli	r19,r7,16
   18eac:	d9800717 	ldw	r6,28(sp)
   18eb0:	da000617 	ldw	r8,24(sp)
   18eb4:	9885883a 	add	r2,r19,r2
   18eb8:	da400417 	ldw	r9,16(sp)
   18ebc:	1500022e 	bgeu	r2,r20,18ec8 <__muldf3+0x458>
   18ec0:	01000074 	movhi	r4,1
   18ec4:	4913883a 	add	r9,r9,r4
   18ec8:	1028d43a 	srli	r20,r2,16
   18ecc:	1004943a 	slli	r2,r2,16
   18ed0:	802cd43a 	srli	r22,r16,16
   18ed4:	843fffcc 	andi	r16,r16,65535
   18ed8:	3cffffcc 	andi	r19,r7,65535
   18edc:	9009883a 	mov	r4,r18
   18ee0:	800b883a 	mov	r5,r16
   18ee4:	a269883a 	add	r20,r20,r9
   18ee8:	d8c00515 	stw	r3,20(sp)
   18eec:	d9800715 	stw	r6,28(sp)
   18ef0:	da000615 	stw	r8,24(sp)
   18ef4:	14e7883a 	add	r19,r2,r19
   18ef8:	000cefc0 	call	cefc <__mulsi3>
   18efc:	9009883a 	mov	r4,r18
   18f00:	b00b883a 	mov	r5,r22
   18f04:	d8800315 	stw	r2,12(sp)
   18f08:	000cefc0 	call	cefc <__mulsi3>
   18f0c:	b809883a 	mov	r4,r23
   18f10:	b00b883a 	mov	r5,r22
   18f14:	d8800215 	stw	r2,8(sp)
   18f18:	000cefc0 	call	cefc <__mulsi3>
   18f1c:	b80b883a 	mov	r5,r23
   18f20:	8009883a 	mov	r4,r16
   18f24:	d8800415 	stw	r2,16(sp)
   18f28:	000cefc0 	call	cefc <__mulsi3>
   18f2c:	da800317 	ldw	r10,12(sp)
   18f30:	d9c00217 	ldw	r7,8(sp)
   18f34:	d9000017 	ldw	r4,0(sp)
   18f38:	502ed43a 	srli	r23,r10,16
   18f3c:	11c5883a 	add	r2,r2,r7
   18f40:	24e5883a 	add	r18,r4,r19
   18f44:	b885883a 	add	r2,r23,r2
   18f48:	d8c00517 	ldw	r3,20(sp)
   18f4c:	d9800717 	ldw	r6,28(sp)
   18f50:	da000617 	ldw	r8,24(sp)
   18f54:	da400417 	ldw	r9,16(sp)
   18f58:	11c0022e 	bgeu	r2,r7,18f64 <__muldf3+0x4f4>
   18f5c:	01000074 	movhi	r4,1
   18f60:	4913883a 	add	r9,r9,r4
   18f64:	100ed43a 	srli	r7,r2,16
   18f68:	1004943a 	slli	r2,r2,16
   18f6c:	55ffffcc 	andi	r23,r10,65535
   18f70:	3a53883a 	add	r9,r7,r9
   18f74:	8809883a 	mov	r4,r17
   18f78:	800b883a 	mov	r5,r16
   18f7c:	d8c00515 	stw	r3,20(sp)
   18f80:	d9800715 	stw	r6,28(sp)
   18f84:	da000615 	stw	r8,24(sp)
   18f88:	da400415 	stw	r9,16(sp)
   18f8c:	15ef883a 	add	r23,r2,r23
   18f90:	000cefc0 	call	cefc <__mulsi3>
   18f94:	8809883a 	mov	r4,r17
   18f98:	b00b883a 	mov	r5,r22
   18f9c:	d8800215 	stw	r2,8(sp)
   18fa0:	000cefc0 	call	cefc <__mulsi3>
   18fa4:	b00b883a 	mov	r5,r22
   18fa8:	a809883a 	mov	r4,r21
   18fac:	d8800315 	stw	r2,12(sp)
   18fb0:	000cefc0 	call	cefc <__mulsi3>
   18fb4:	8009883a 	mov	r4,r16
   18fb8:	a80b883a 	mov	r5,r21
   18fbc:	1023883a 	mov	r17,r2
   18fc0:	000cefc0 	call	cefc <__mulsi3>
   18fc4:	d9c00217 	ldw	r7,8(sp)
   18fc8:	da800317 	ldw	r10,12(sp)
   18fcc:	d8c00517 	ldw	r3,20(sp)
   18fd0:	3808d43a 	srli	r4,r7,16
   18fd4:	1285883a 	add	r2,r2,r10
   18fd8:	d9800717 	ldw	r6,28(sp)
   18fdc:	2085883a 	add	r2,r4,r2
   18fe0:	da000617 	ldw	r8,24(sp)
   18fe4:	da400417 	ldw	r9,16(sp)
   18fe8:	1280022e 	bgeu	r2,r10,18ff4 <__muldf3+0x584>
   18fec:	01000074 	movhi	r4,1
   18ff0:	8923883a 	add	r17,r17,r4
   18ff4:	1008943a 	slli	r4,r2,16
   18ff8:	39ffffcc 	andi	r7,r7,65535
   18ffc:	e4b9883a 	add	fp,fp,r18
   19000:	21cf883a 	add	r7,r4,r7
   19004:	e4e7803a 	cmpltu	r19,fp,r19
   19008:	3d0f883a 	add	r7,r7,r20
   1900c:	bf39883a 	add	fp,r23,fp
   19010:	99c9883a 	add	r4,r19,r7
   19014:	e5ef803a 	cmpltu	r23,fp,r23
   19018:	490b883a 	add	r5,r9,r4
   1901c:	1004d43a 	srli	r2,r2,16
   19020:	b965883a 	add	r18,r23,r5
   19024:	24c9803a 	cmpltu	r4,r4,r19
   19028:	3d29803a 	cmpltu	r20,r7,r20
   1902c:	a128b03a 	or	r20,r20,r4
   19030:	95ef803a 	cmpltu	r23,r18,r23
   19034:	2a53803a 	cmpltu	r9,r5,r9
   19038:	a0a9883a 	add	r20,r20,r2
   1903c:	4deeb03a 	or	r23,r9,r23
   19040:	a5ef883a 	add	r23,r20,r23
   19044:	bc63883a 	add	r17,r23,r17
   19048:	e004927a 	slli	r2,fp,9
   1904c:	d9000117 	ldw	r4,4(sp)
   19050:	882e927a 	slli	r23,r17,9
   19054:	9022d5fa 	srli	r17,r18,23
   19058:	e038d5fa 	srli	fp,fp,23
   1905c:	1104b03a 	or	r2,r2,r4
   19060:	9024927a 	slli	r18,r18,9
   19064:	1004c03a 	cmpne	r2,r2,zero
   19068:	bc62b03a 	or	r17,r23,r17
   1906c:	1738b03a 	or	fp,r2,fp
   19070:	8880402c 	andhi	r2,r17,256
   19074:	e4a4b03a 	or	r18,fp,r18
   19078:	10000726 	beq	r2,zero,19098 <__muldf3+0x628>
   1907c:	9006d07a 	srli	r3,r18,1
   19080:	880497fa 	slli	r2,r17,31
   19084:	9480004c 	andi	r18,r18,1
   19088:	8822d07a 	srli	r17,r17,1
   1908c:	1ca4b03a 	or	r18,r3,r18
   19090:	14a4b03a 	or	r18,r2,r18
   19094:	4007883a 	mov	r3,r8
   19098:	1880ffc4 	addi	r2,r3,1023
   1909c:	0080460e 	bge	zero,r2,191b8 <__muldf3+0x748>
   190a0:	910001cc 	andi	r4,r18,7
   190a4:	20000726 	beq	r4,zero,190c4 <__muldf3+0x654>
   190a8:	910003cc 	andi	r4,r18,15
   190ac:	01400104 	movi	r5,4
   190b0:	21400426 	beq	r4,r5,190c4 <__muldf3+0x654>
   190b4:	9149883a 	add	r4,r18,r5
   190b8:	24a5803a 	cmpltu	r18,r4,r18
   190bc:	8ca3883a 	add	r17,r17,r18
   190c0:	2025883a 	mov	r18,r4
   190c4:	8900402c 	andhi	r4,r17,256
   190c8:	20000426 	beq	r4,zero,190dc <__muldf3+0x66c>
   190cc:	18810004 	addi	r2,r3,1024
   190d0:	00ffc034 	movhi	r3,65280
   190d4:	18ffffc4 	addi	r3,r3,-1
   190d8:	88e2703a 	and	r17,r17,r3
   190dc:	00c1ff84 	movi	r3,2046
   190e0:	18bf1316 	blt	r3,r2,18d30 <__alt_data_end+0xfc018d30>
   190e4:	882c977a 	slli	r22,r17,29
   190e8:	9024d0fa 	srli	r18,r18,3
   190ec:	8822927a 	slli	r17,r17,9
   190f0:	1081ffcc 	andi	r2,r2,2047
   190f4:	b4acb03a 	or	r22,r22,r18
   190f8:	8820d33a 	srli	r16,r17,12
   190fc:	3027883a 	mov	r19,r6
   19100:	003eba06 	br	18bec <__alt_data_end+0xfc018bec>
   19104:	8080022c 	andhi	r2,r16,8
   19108:	10000926 	beq	r2,zero,19130 <__muldf3+0x6c0>
   1910c:	8880022c 	andhi	r2,r17,8
   19110:	1000071e 	bne	r2,zero,19130 <__muldf3+0x6c0>
   19114:	00800434 	movhi	r2,16
   19118:	8c000234 	orhi	r16,r17,8
   1911c:	10bfffc4 	addi	r2,r2,-1
   19120:	e027883a 	mov	r19,fp
   19124:	80a0703a 	and	r16,r16,r2
   19128:	902d883a 	mov	r22,r18
   1912c:	003f1706 	br	18d8c <__alt_data_end+0xfc018d8c>
   19130:	00800434 	movhi	r2,16
   19134:	84000234 	orhi	r16,r16,8
   19138:	10bfffc4 	addi	r2,r2,-1
   1913c:	80a0703a 	and	r16,r16,r2
   19140:	003f1206 	br	18d8c <__alt_data_end+0xfc018d8c>
   19144:	147ff604 	addi	r17,r2,-40
   19148:	3462983a 	sll	r17,r6,r17
   1914c:	0025883a 	mov	r18,zero
   19150:	003ef306 	br	18d20 <__alt_data_end+0xfc018d20>
   19154:	3009883a 	mov	r4,r6
   19158:	d9400215 	stw	r5,8(sp)
   1915c:	d9800715 	stw	r6,28(sp)
   19160:	da400415 	stw	r9,16(sp)
   19164:	da800315 	stw	r10,12(sp)
   19168:	0019ddc0 	call	19ddc <__clzsi2>
   1916c:	10800804 	addi	r2,r2,32
   19170:	da800317 	ldw	r10,12(sp)
   19174:	da400417 	ldw	r9,16(sp)
   19178:	d9800717 	ldw	r6,28(sp)
   1917c:	d9400217 	ldw	r5,8(sp)
   19180:	003edd06 	br	18cf8 <__alt_data_end+0xfc018cf8>
   19184:	143ff604 	addi	r16,r2,-40
   19188:	ac20983a 	sll	r16,r21,r16
   1918c:	002d883a 	mov	r22,zero
   19190:	003ec106 	br	18c98 <__alt_data_end+0xfc018c98>
   19194:	d9800715 	stw	r6,28(sp)
   19198:	d9c00215 	stw	r7,8(sp)
   1919c:	da400415 	stw	r9,16(sp)
   191a0:	0019ddc0 	call	19ddc <__clzsi2>
   191a4:	10800804 	addi	r2,r2,32
   191a8:	da400417 	ldw	r9,16(sp)
   191ac:	d9c00217 	ldw	r7,8(sp)
   191b0:	d9800717 	ldw	r6,28(sp)
   191b4:	003eae06 	br	18c70 <__alt_data_end+0xfc018c70>
   191b8:	00c00044 	movi	r3,1
   191bc:	1887c83a 	sub	r3,r3,r2
   191c0:	01000e04 	movi	r4,56
   191c4:	20fe8516 	blt	r4,r3,18bdc <__alt_data_end+0xfc018bdc>
   191c8:	010007c4 	movi	r4,31
   191cc:	20c01b16 	blt	r4,r3,1923c <__muldf3+0x7cc>
   191d0:	00800804 	movi	r2,32
   191d4:	10c5c83a 	sub	r2,r2,r3
   191d8:	888a983a 	sll	r5,r17,r2
   191dc:	90c8d83a 	srl	r4,r18,r3
   191e0:	9084983a 	sll	r2,r18,r2
   191e4:	88e2d83a 	srl	r17,r17,r3
   191e8:	2906b03a 	or	r3,r5,r4
   191ec:	1004c03a 	cmpne	r2,r2,zero
   191f0:	1886b03a 	or	r3,r3,r2
   191f4:	188001cc 	andi	r2,r3,7
   191f8:	10000726 	beq	r2,zero,19218 <__muldf3+0x7a8>
   191fc:	188003cc 	andi	r2,r3,15
   19200:	01000104 	movi	r4,4
   19204:	11000426 	beq	r2,r4,19218 <__muldf3+0x7a8>
   19208:	1805883a 	mov	r2,r3
   1920c:	10c00104 	addi	r3,r2,4
   19210:	1885803a 	cmpltu	r2,r3,r2
   19214:	88a3883a 	add	r17,r17,r2
   19218:	8880202c 	andhi	r2,r17,128
   1921c:	10001c26 	beq	r2,zero,19290 <__muldf3+0x820>
   19220:	3027883a 	mov	r19,r6
   19224:	00800044 	movi	r2,1
   19228:	0021883a 	mov	r16,zero
   1922c:	002d883a 	mov	r22,zero
   19230:	003e6e06 	br	18bec <__alt_data_end+0xfc018bec>
   19234:	4007883a 	mov	r3,r8
   19238:	003f9706 	br	19098 <__alt_data_end+0xfc019098>
   1923c:	017ff844 	movi	r5,-31
   19240:	2885c83a 	sub	r2,r5,r2
   19244:	888ad83a 	srl	r5,r17,r2
   19248:	00800804 	movi	r2,32
   1924c:	18801a26 	beq	r3,r2,192b8 <__muldf3+0x848>
   19250:	01001004 	movi	r4,64
   19254:	20c7c83a 	sub	r3,r4,r3
   19258:	88e2983a 	sll	r17,r17,r3
   1925c:	8ca4b03a 	or	r18,r17,r18
   19260:	9004c03a 	cmpne	r2,r18,zero
   19264:	2884b03a 	or	r2,r5,r2
   19268:	144001cc 	andi	r17,r2,7
   1926c:	88000d1e 	bne	r17,zero,192a4 <__muldf3+0x834>
   19270:	0021883a 	mov	r16,zero
   19274:	102cd0fa 	srli	r22,r2,3
   19278:	3027883a 	mov	r19,r6
   1927c:	0005883a 	mov	r2,zero
   19280:	b46cb03a 	or	r22,r22,r17
   19284:	003e5906 	br	18bec <__alt_data_end+0xfc018bec>
   19288:	1007883a 	mov	r3,r2
   1928c:	0023883a 	mov	r17,zero
   19290:	8820927a 	slli	r16,r17,9
   19294:	1805883a 	mov	r2,r3
   19298:	8822977a 	slli	r17,r17,29
   1929c:	8020d33a 	srli	r16,r16,12
   192a0:	003ff406 	br	19274 <__alt_data_end+0xfc019274>
   192a4:	10c003cc 	andi	r3,r2,15
   192a8:	01000104 	movi	r4,4
   192ac:	193ff626 	beq	r3,r4,19288 <__alt_data_end+0xfc019288>
   192b0:	0023883a 	mov	r17,zero
   192b4:	003fd506 	br	1920c <__alt_data_end+0xfc01920c>
   192b8:	0023883a 	mov	r17,zero
   192bc:	003fe706 	br	1925c <__alt_data_end+0xfc01925c>
   192c0:	00800434 	movhi	r2,16
   192c4:	8c000234 	orhi	r16,r17,8
   192c8:	10bfffc4 	addi	r2,r2,-1
   192cc:	3027883a 	mov	r19,r6
   192d0:	80a0703a 	and	r16,r16,r2
   192d4:	902d883a 	mov	r22,r18
   192d8:	003eac06 	br	18d8c <__alt_data_end+0xfc018d8c>

000192dc <__subdf3>:
   192dc:	02000434 	movhi	r8,16
   192e0:	423fffc4 	addi	r8,r8,-1
   192e4:	defffb04 	addi	sp,sp,-20
   192e8:	2a14703a 	and	r10,r5,r8
   192ec:	3812d53a 	srli	r9,r7,20
   192f0:	3a10703a 	and	r8,r7,r8
   192f4:	2006d77a 	srli	r3,r4,29
   192f8:	3004d77a 	srli	r2,r6,29
   192fc:	dc000015 	stw	r16,0(sp)
   19300:	501490fa 	slli	r10,r10,3
   19304:	2820d53a 	srli	r16,r5,20
   19308:	401090fa 	slli	r8,r8,3
   1930c:	dc800215 	stw	r18,8(sp)
   19310:	dc400115 	stw	r17,4(sp)
   19314:	dfc00415 	stw	ra,16(sp)
   19318:	202290fa 	slli	r17,r4,3
   1931c:	dcc00315 	stw	r19,12(sp)
   19320:	4a41ffcc 	andi	r9,r9,2047
   19324:	0101ffc4 	movi	r4,2047
   19328:	2824d7fa 	srli	r18,r5,31
   1932c:	8401ffcc 	andi	r16,r16,2047
   19330:	50c6b03a 	or	r3,r10,r3
   19334:	380ed7fa 	srli	r7,r7,31
   19338:	408ab03a 	or	r5,r8,r2
   1933c:	300c90fa 	slli	r6,r6,3
   19340:	49009626 	beq	r9,r4,1959c <__subdf3+0x2c0>
   19344:	39c0005c 	xori	r7,r7,1
   19348:	8245c83a 	sub	r2,r16,r9
   1934c:	3c807426 	beq	r7,r18,19520 <__subdf3+0x244>
   19350:	0080af0e 	bge	zero,r2,19610 <__subdf3+0x334>
   19354:	48002a1e 	bne	r9,zero,19400 <__subdf3+0x124>
   19358:	2988b03a 	or	r4,r5,r6
   1935c:	20009a1e 	bne	r4,zero,195c8 <__subdf3+0x2ec>
   19360:	888001cc 	andi	r2,r17,7
   19364:	10000726 	beq	r2,zero,19384 <__subdf3+0xa8>
   19368:	888003cc 	andi	r2,r17,15
   1936c:	01000104 	movi	r4,4
   19370:	11000426 	beq	r2,r4,19384 <__subdf3+0xa8>
   19374:	890b883a 	add	r5,r17,r4
   19378:	2c63803a 	cmpltu	r17,r5,r17
   1937c:	1c47883a 	add	r3,r3,r17
   19380:	2823883a 	mov	r17,r5
   19384:	1880202c 	andhi	r2,r3,128
   19388:	10005926 	beq	r2,zero,194f0 <__subdf3+0x214>
   1938c:	84000044 	addi	r16,r16,1
   19390:	0081ffc4 	movi	r2,2047
   19394:	8080be26 	beq	r16,r2,19690 <__subdf3+0x3b4>
   19398:	017fe034 	movhi	r5,65408
   1939c:	297fffc4 	addi	r5,r5,-1
   193a0:	1946703a 	and	r3,r3,r5
   193a4:	1804977a 	slli	r2,r3,29
   193a8:	1806927a 	slli	r3,r3,9
   193ac:	8822d0fa 	srli	r17,r17,3
   193b0:	8401ffcc 	andi	r16,r16,2047
   193b4:	180ad33a 	srli	r5,r3,12
   193b8:	9100004c 	andi	r4,r18,1
   193bc:	1444b03a 	or	r2,r2,r17
   193c0:	80c1ffcc 	andi	r3,r16,2047
   193c4:	1820953a 	slli	r16,r3,20
   193c8:	20c03fcc 	andi	r3,r4,255
   193cc:	180897fa 	slli	r4,r3,31
   193d0:	00c00434 	movhi	r3,16
   193d4:	18ffffc4 	addi	r3,r3,-1
   193d8:	28c6703a 	and	r3,r5,r3
   193dc:	1c06b03a 	or	r3,r3,r16
   193e0:	1906b03a 	or	r3,r3,r4
   193e4:	dfc00417 	ldw	ra,16(sp)
   193e8:	dcc00317 	ldw	r19,12(sp)
   193ec:	dc800217 	ldw	r18,8(sp)
   193f0:	dc400117 	ldw	r17,4(sp)
   193f4:	dc000017 	ldw	r16,0(sp)
   193f8:	dec00504 	addi	sp,sp,20
   193fc:	f800283a 	ret
   19400:	0101ffc4 	movi	r4,2047
   19404:	813fd626 	beq	r16,r4,19360 <__alt_data_end+0xfc019360>
   19408:	29402034 	orhi	r5,r5,128
   1940c:	01000e04 	movi	r4,56
   19410:	2080a316 	blt	r4,r2,196a0 <__subdf3+0x3c4>
   19414:	010007c4 	movi	r4,31
   19418:	2080c616 	blt	r4,r2,19734 <__subdf3+0x458>
   1941c:	01000804 	movi	r4,32
   19420:	2089c83a 	sub	r4,r4,r2
   19424:	2910983a 	sll	r8,r5,r4
   19428:	308ed83a 	srl	r7,r6,r2
   1942c:	3108983a 	sll	r4,r6,r4
   19430:	2884d83a 	srl	r2,r5,r2
   19434:	41ccb03a 	or	r6,r8,r7
   19438:	2008c03a 	cmpne	r4,r4,zero
   1943c:	310cb03a 	or	r6,r6,r4
   19440:	898dc83a 	sub	r6,r17,r6
   19444:	89a3803a 	cmpltu	r17,r17,r6
   19448:	1887c83a 	sub	r3,r3,r2
   1944c:	1c47c83a 	sub	r3,r3,r17
   19450:	3023883a 	mov	r17,r6
   19454:	1880202c 	andhi	r2,r3,128
   19458:	10002326 	beq	r2,zero,194e8 <__subdf3+0x20c>
   1945c:	04c02034 	movhi	r19,128
   19460:	9cffffc4 	addi	r19,r19,-1
   19464:	1ce6703a 	and	r19,r3,r19
   19468:	98007a26 	beq	r19,zero,19654 <__subdf3+0x378>
   1946c:	9809883a 	mov	r4,r19
   19470:	0019ddc0 	call	19ddc <__clzsi2>
   19474:	113ffe04 	addi	r4,r2,-8
   19478:	00c007c4 	movi	r3,31
   1947c:	19007b16 	blt	r3,r4,1966c <__subdf3+0x390>
   19480:	00800804 	movi	r2,32
   19484:	1105c83a 	sub	r2,r2,r4
   19488:	8884d83a 	srl	r2,r17,r2
   1948c:	9906983a 	sll	r3,r19,r4
   19490:	8922983a 	sll	r17,r17,r4
   19494:	10c4b03a 	or	r2,r2,r3
   19498:	24007816 	blt	r4,r16,1967c <__subdf3+0x3a0>
   1949c:	2421c83a 	sub	r16,r4,r16
   194a0:	80c00044 	addi	r3,r16,1
   194a4:	010007c4 	movi	r4,31
   194a8:	20c09516 	blt	r4,r3,19700 <__subdf3+0x424>
   194ac:	01400804 	movi	r5,32
   194b0:	28cbc83a 	sub	r5,r5,r3
   194b4:	88c8d83a 	srl	r4,r17,r3
   194b8:	8962983a 	sll	r17,r17,r5
   194bc:	114a983a 	sll	r5,r2,r5
   194c0:	10c6d83a 	srl	r3,r2,r3
   194c4:	8804c03a 	cmpne	r2,r17,zero
   194c8:	290ab03a 	or	r5,r5,r4
   194cc:	28a2b03a 	or	r17,r5,r2
   194d0:	0021883a 	mov	r16,zero
   194d4:	003fa206 	br	19360 <__alt_data_end+0xfc019360>
   194d8:	2090b03a 	or	r8,r4,r2
   194dc:	40018e26 	beq	r8,zero,19b18 <__subdf3+0x83c>
   194e0:	1007883a 	mov	r3,r2
   194e4:	2023883a 	mov	r17,r4
   194e8:	888001cc 	andi	r2,r17,7
   194ec:	103f9e1e 	bne	r2,zero,19368 <__alt_data_end+0xfc019368>
   194f0:	1804977a 	slli	r2,r3,29
   194f4:	8822d0fa 	srli	r17,r17,3
   194f8:	1810d0fa 	srli	r8,r3,3
   194fc:	9100004c 	andi	r4,r18,1
   19500:	1444b03a 	or	r2,r2,r17
   19504:	00c1ffc4 	movi	r3,2047
   19508:	80c02826 	beq	r16,r3,195ac <__subdf3+0x2d0>
   1950c:	01400434 	movhi	r5,16
   19510:	297fffc4 	addi	r5,r5,-1
   19514:	80e0703a 	and	r16,r16,r3
   19518:	414a703a 	and	r5,r8,r5
   1951c:	003fa806 	br	193c0 <__alt_data_end+0xfc0193c0>
   19520:	0080630e 	bge	zero,r2,196b0 <__subdf3+0x3d4>
   19524:	48003026 	beq	r9,zero,195e8 <__subdf3+0x30c>
   19528:	0101ffc4 	movi	r4,2047
   1952c:	813f8c26 	beq	r16,r4,19360 <__alt_data_end+0xfc019360>
   19530:	29402034 	orhi	r5,r5,128
   19534:	01000e04 	movi	r4,56
   19538:	2080a90e 	bge	r4,r2,197e0 <__subdf3+0x504>
   1953c:	298cb03a 	or	r6,r5,r6
   19540:	3012c03a 	cmpne	r9,r6,zero
   19544:	0005883a 	mov	r2,zero
   19548:	4c53883a 	add	r9,r9,r17
   1954c:	4c63803a 	cmpltu	r17,r9,r17
   19550:	10c7883a 	add	r3,r2,r3
   19554:	88c7883a 	add	r3,r17,r3
   19558:	4823883a 	mov	r17,r9
   1955c:	1880202c 	andhi	r2,r3,128
   19560:	1000d026 	beq	r2,zero,198a4 <__subdf3+0x5c8>
   19564:	84000044 	addi	r16,r16,1
   19568:	0081ffc4 	movi	r2,2047
   1956c:	8080fe26 	beq	r16,r2,19968 <__subdf3+0x68c>
   19570:	00bfe034 	movhi	r2,65408
   19574:	10bfffc4 	addi	r2,r2,-1
   19578:	1886703a 	and	r3,r3,r2
   1957c:	880ad07a 	srli	r5,r17,1
   19580:	180497fa 	slli	r2,r3,31
   19584:	8900004c 	andi	r4,r17,1
   19588:	2922b03a 	or	r17,r5,r4
   1958c:	1806d07a 	srli	r3,r3,1
   19590:	1462b03a 	or	r17,r2,r17
   19594:	3825883a 	mov	r18,r7
   19598:	003f7106 	br	19360 <__alt_data_end+0xfc019360>
   1959c:	2984b03a 	or	r2,r5,r6
   195a0:	103f6826 	beq	r2,zero,19344 <__alt_data_end+0xfc019344>
   195a4:	39c03fcc 	andi	r7,r7,255
   195a8:	003f6706 	br	19348 <__alt_data_end+0xfc019348>
   195ac:	4086b03a 	or	r3,r8,r2
   195b0:	18015226 	beq	r3,zero,19afc <__subdf3+0x820>
   195b4:	00c00434 	movhi	r3,16
   195b8:	41400234 	orhi	r5,r8,8
   195bc:	18ffffc4 	addi	r3,r3,-1
   195c0:	28ca703a 	and	r5,r5,r3
   195c4:	003f7e06 	br	193c0 <__alt_data_end+0xfc0193c0>
   195c8:	10bfffc4 	addi	r2,r2,-1
   195cc:	1000491e 	bne	r2,zero,196f4 <__subdf3+0x418>
   195d0:	898fc83a 	sub	r7,r17,r6
   195d4:	89e3803a 	cmpltu	r17,r17,r7
   195d8:	1947c83a 	sub	r3,r3,r5
   195dc:	1c47c83a 	sub	r3,r3,r17
   195e0:	3823883a 	mov	r17,r7
   195e4:	003f9b06 	br	19454 <__alt_data_end+0xfc019454>
   195e8:	2988b03a 	or	r4,r5,r6
   195ec:	203f5c26 	beq	r4,zero,19360 <__alt_data_end+0xfc019360>
   195f0:	10bfffc4 	addi	r2,r2,-1
   195f4:	1000931e 	bne	r2,zero,19844 <__subdf3+0x568>
   195f8:	898d883a 	add	r6,r17,r6
   195fc:	3463803a 	cmpltu	r17,r6,r17
   19600:	1947883a 	add	r3,r3,r5
   19604:	88c7883a 	add	r3,r17,r3
   19608:	3023883a 	mov	r17,r6
   1960c:	003fd306 	br	1955c <__alt_data_end+0xfc01955c>
   19610:	1000541e 	bne	r2,zero,19764 <__subdf3+0x488>
   19614:	80800044 	addi	r2,r16,1
   19618:	1081ffcc 	andi	r2,r2,2047
   1961c:	01000044 	movi	r4,1
   19620:	2080a20e 	bge	r4,r2,198ac <__subdf3+0x5d0>
   19624:	8989c83a 	sub	r4,r17,r6
   19628:	8905803a 	cmpltu	r2,r17,r4
   1962c:	1967c83a 	sub	r19,r3,r5
   19630:	98a7c83a 	sub	r19,r19,r2
   19634:	9880202c 	andhi	r2,r19,128
   19638:	10006326 	beq	r2,zero,197c8 <__subdf3+0x4ec>
   1963c:	3463c83a 	sub	r17,r6,r17
   19640:	28c7c83a 	sub	r3,r5,r3
   19644:	344d803a 	cmpltu	r6,r6,r17
   19648:	19a7c83a 	sub	r19,r3,r6
   1964c:	3825883a 	mov	r18,r7
   19650:	983f861e 	bne	r19,zero,1946c <__alt_data_end+0xfc01946c>
   19654:	8809883a 	mov	r4,r17
   19658:	0019ddc0 	call	19ddc <__clzsi2>
   1965c:	10800804 	addi	r2,r2,32
   19660:	113ffe04 	addi	r4,r2,-8
   19664:	00c007c4 	movi	r3,31
   19668:	193f850e 	bge	r3,r4,19480 <__alt_data_end+0xfc019480>
   1966c:	10bff604 	addi	r2,r2,-40
   19670:	8884983a 	sll	r2,r17,r2
   19674:	0023883a 	mov	r17,zero
   19678:	243f880e 	bge	r4,r16,1949c <__alt_data_end+0xfc01949c>
   1967c:	00ffe034 	movhi	r3,65408
   19680:	18ffffc4 	addi	r3,r3,-1
   19684:	8121c83a 	sub	r16,r16,r4
   19688:	10c6703a 	and	r3,r2,r3
   1968c:	003f3406 	br	19360 <__alt_data_end+0xfc019360>
   19690:	9100004c 	andi	r4,r18,1
   19694:	000b883a 	mov	r5,zero
   19698:	0005883a 	mov	r2,zero
   1969c:	003f4806 	br	193c0 <__alt_data_end+0xfc0193c0>
   196a0:	298cb03a 	or	r6,r5,r6
   196a4:	300cc03a 	cmpne	r6,r6,zero
   196a8:	0005883a 	mov	r2,zero
   196ac:	003f6406 	br	19440 <__alt_data_end+0xfc019440>
   196b0:	10009a1e 	bne	r2,zero,1991c <__subdf3+0x640>
   196b4:	82400044 	addi	r9,r16,1
   196b8:	4881ffcc 	andi	r2,r9,2047
   196bc:	02800044 	movi	r10,1
   196c0:	5080670e 	bge	r10,r2,19860 <__subdf3+0x584>
   196c4:	0081ffc4 	movi	r2,2047
   196c8:	4880af26 	beq	r9,r2,19988 <__subdf3+0x6ac>
   196cc:	898d883a 	add	r6,r17,r6
   196d0:	1945883a 	add	r2,r3,r5
   196d4:	3447803a 	cmpltu	r3,r6,r17
   196d8:	1887883a 	add	r3,r3,r2
   196dc:	182297fa 	slli	r17,r3,31
   196e0:	300cd07a 	srli	r6,r6,1
   196e4:	1806d07a 	srli	r3,r3,1
   196e8:	4821883a 	mov	r16,r9
   196ec:	89a2b03a 	or	r17,r17,r6
   196f0:	003f1b06 	br	19360 <__alt_data_end+0xfc019360>
   196f4:	0101ffc4 	movi	r4,2047
   196f8:	813f441e 	bne	r16,r4,1940c <__alt_data_end+0xfc01940c>
   196fc:	003f1806 	br	19360 <__alt_data_end+0xfc019360>
   19700:	843ff844 	addi	r16,r16,-31
   19704:	01400804 	movi	r5,32
   19708:	1408d83a 	srl	r4,r2,r16
   1970c:	19405026 	beq	r3,r5,19850 <__subdf3+0x574>
   19710:	01401004 	movi	r5,64
   19714:	28c7c83a 	sub	r3,r5,r3
   19718:	10c4983a 	sll	r2,r2,r3
   1971c:	88a2b03a 	or	r17,r17,r2
   19720:	8822c03a 	cmpne	r17,r17,zero
   19724:	2462b03a 	or	r17,r4,r17
   19728:	0007883a 	mov	r3,zero
   1972c:	0021883a 	mov	r16,zero
   19730:	003f6d06 	br	194e8 <__alt_data_end+0xfc0194e8>
   19734:	11fff804 	addi	r7,r2,-32
   19738:	01000804 	movi	r4,32
   1973c:	29ced83a 	srl	r7,r5,r7
   19740:	11004526 	beq	r2,r4,19858 <__subdf3+0x57c>
   19744:	01001004 	movi	r4,64
   19748:	2089c83a 	sub	r4,r4,r2
   1974c:	2904983a 	sll	r2,r5,r4
   19750:	118cb03a 	or	r6,r2,r6
   19754:	300cc03a 	cmpne	r6,r6,zero
   19758:	398cb03a 	or	r6,r7,r6
   1975c:	0005883a 	mov	r2,zero
   19760:	003f3706 	br	19440 <__alt_data_end+0xfc019440>
   19764:	80002a26 	beq	r16,zero,19810 <__subdf3+0x534>
   19768:	0101ffc4 	movi	r4,2047
   1976c:	49006626 	beq	r9,r4,19908 <__subdf3+0x62c>
   19770:	0085c83a 	sub	r2,zero,r2
   19774:	18c02034 	orhi	r3,r3,128
   19778:	01000e04 	movi	r4,56
   1977c:	20807e16 	blt	r4,r2,19978 <__subdf3+0x69c>
   19780:	010007c4 	movi	r4,31
   19784:	2080e716 	blt	r4,r2,19b24 <__subdf3+0x848>
   19788:	01000804 	movi	r4,32
   1978c:	2089c83a 	sub	r4,r4,r2
   19790:	1914983a 	sll	r10,r3,r4
   19794:	8890d83a 	srl	r8,r17,r2
   19798:	8908983a 	sll	r4,r17,r4
   1979c:	1884d83a 	srl	r2,r3,r2
   197a0:	5222b03a 	or	r17,r10,r8
   197a4:	2006c03a 	cmpne	r3,r4,zero
   197a8:	88e2b03a 	or	r17,r17,r3
   197ac:	3463c83a 	sub	r17,r6,r17
   197b0:	2885c83a 	sub	r2,r5,r2
   197b4:	344d803a 	cmpltu	r6,r6,r17
   197b8:	1187c83a 	sub	r3,r2,r6
   197bc:	4821883a 	mov	r16,r9
   197c0:	3825883a 	mov	r18,r7
   197c4:	003f2306 	br	19454 <__alt_data_end+0xfc019454>
   197c8:	24d0b03a 	or	r8,r4,r19
   197cc:	40001b1e 	bne	r8,zero,1983c <__subdf3+0x560>
   197d0:	0005883a 	mov	r2,zero
   197d4:	0009883a 	mov	r4,zero
   197d8:	0021883a 	mov	r16,zero
   197dc:	003f4906 	br	19504 <__alt_data_end+0xfc019504>
   197e0:	010007c4 	movi	r4,31
   197e4:	20803a16 	blt	r4,r2,198d0 <__subdf3+0x5f4>
   197e8:	01000804 	movi	r4,32
   197ec:	2089c83a 	sub	r4,r4,r2
   197f0:	2912983a 	sll	r9,r5,r4
   197f4:	3090d83a 	srl	r8,r6,r2
   197f8:	3108983a 	sll	r4,r6,r4
   197fc:	2884d83a 	srl	r2,r5,r2
   19800:	4a12b03a 	or	r9,r9,r8
   19804:	2008c03a 	cmpne	r4,r4,zero
   19808:	4912b03a 	or	r9,r9,r4
   1980c:	003f4e06 	br	19548 <__alt_data_end+0xfc019548>
   19810:	1c48b03a 	or	r4,r3,r17
   19814:	20003c26 	beq	r4,zero,19908 <__subdf3+0x62c>
   19818:	0084303a 	nor	r2,zero,r2
   1981c:	1000381e 	bne	r2,zero,19900 <__subdf3+0x624>
   19820:	3463c83a 	sub	r17,r6,r17
   19824:	28c5c83a 	sub	r2,r5,r3
   19828:	344d803a 	cmpltu	r6,r6,r17
   1982c:	1187c83a 	sub	r3,r2,r6
   19830:	4821883a 	mov	r16,r9
   19834:	3825883a 	mov	r18,r7
   19838:	003f0606 	br	19454 <__alt_data_end+0xfc019454>
   1983c:	2023883a 	mov	r17,r4
   19840:	003f0906 	br	19468 <__alt_data_end+0xfc019468>
   19844:	0101ffc4 	movi	r4,2047
   19848:	813f3a1e 	bne	r16,r4,19534 <__alt_data_end+0xfc019534>
   1984c:	003ec406 	br	19360 <__alt_data_end+0xfc019360>
   19850:	0005883a 	mov	r2,zero
   19854:	003fb106 	br	1971c <__alt_data_end+0xfc01971c>
   19858:	0005883a 	mov	r2,zero
   1985c:	003fbc06 	br	19750 <__alt_data_end+0xfc019750>
   19860:	1c44b03a 	or	r2,r3,r17
   19864:	80008e1e 	bne	r16,zero,19aa0 <__subdf3+0x7c4>
   19868:	1000c826 	beq	r2,zero,19b8c <__subdf3+0x8b0>
   1986c:	2984b03a 	or	r2,r5,r6
   19870:	103ebb26 	beq	r2,zero,19360 <__alt_data_end+0xfc019360>
   19874:	8989883a 	add	r4,r17,r6
   19878:	1945883a 	add	r2,r3,r5
   1987c:	2447803a 	cmpltu	r3,r4,r17
   19880:	1887883a 	add	r3,r3,r2
   19884:	1880202c 	andhi	r2,r3,128
   19888:	2023883a 	mov	r17,r4
   1988c:	103f1626 	beq	r2,zero,194e8 <__alt_data_end+0xfc0194e8>
   19890:	00bfe034 	movhi	r2,65408
   19894:	10bfffc4 	addi	r2,r2,-1
   19898:	5021883a 	mov	r16,r10
   1989c:	1886703a 	and	r3,r3,r2
   198a0:	003eaf06 	br	19360 <__alt_data_end+0xfc019360>
   198a4:	3825883a 	mov	r18,r7
   198a8:	003f0f06 	br	194e8 <__alt_data_end+0xfc0194e8>
   198ac:	1c44b03a 	or	r2,r3,r17
   198b0:	8000251e 	bne	r16,zero,19948 <__subdf3+0x66c>
   198b4:	1000661e 	bne	r2,zero,19a50 <__subdf3+0x774>
   198b8:	2990b03a 	or	r8,r5,r6
   198bc:	40009626 	beq	r8,zero,19b18 <__subdf3+0x83c>
   198c0:	2807883a 	mov	r3,r5
   198c4:	3023883a 	mov	r17,r6
   198c8:	3825883a 	mov	r18,r7
   198cc:	003ea406 	br	19360 <__alt_data_end+0xfc019360>
   198d0:	127ff804 	addi	r9,r2,-32
   198d4:	01000804 	movi	r4,32
   198d8:	2a52d83a 	srl	r9,r5,r9
   198dc:	11008c26 	beq	r2,r4,19b10 <__subdf3+0x834>
   198e0:	01001004 	movi	r4,64
   198e4:	2085c83a 	sub	r2,r4,r2
   198e8:	2884983a 	sll	r2,r5,r2
   198ec:	118cb03a 	or	r6,r2,r6
   198f0:	300cc03a 	cmpne	r6,r6,zero
   198f4:	4992b03a 	or	r9,r9,r6
   198f8:	0005883a 	mov	r2,zero
   198fc:	003f1206 	br	19548 <__alt_data_end+0xfc019548>
   19900:	0101ffc4 	movi	r4,2047
   19904:	493f9c1e 	bne	r9,r4,19778 <__alt_data_end+0xfc019778>
   19908:	2807883a 	mov	r3,r5
   1990c:	3023883a 	mov	r17,r6
   19910:	4821883a 	mov	r16,r9
   19914:	3825883a 	mov	r18,r7
   19918:	003e9106 	br	19360 <__alt_data_end+0xfc019360>
   1991c:	80001f1e 	bne	r16,zero,1999c <__subdf3+0x6c0>
   19920:	1c48b03a 	or	r4,r3,r17
   19924:	20005a26 	beq	r4,zero,19a90 <__subdf3+0x7b4>
   19928:	0084303a 	nor	r2,zero,r2
   1992c:	1000561e 	bne	r2,zero,19a88 <__subdf3+0x7ac>
   19930:	89a3883a 	add	r17,r17,r6
   19934:	1945883a 	add	r2,r3,r5
   19938:	898d803a 	cmpltu	r6,r17,r6
   1993c:	3087883a 	add	r3,r6,r2
   19940:	4821883a 	mov	r16,r9
   19944:	003f0506 	br	1955c <__alt_data_end+0xfc01955c>
   19948:	10002b1e 	bne	r2,zero,199f8 <__subdf3+0x71c>
   1994c:	2984b03a 	or	r2,r5,r6
   19950:	10008026 	beq	r2,zero,19b54 <__subdf3+0x878>
   19954:	2807883a 	mov	r3,r5
   19958:	3023883a 	mov	r17,r6
   1995c:	3825883a 	mov	r18,r7
   19960:	0401ffc4 	movi	r16,2047
   19964:	003e7e06 	br	19360 <__alt_data_end+0xfc019360>
   19968:	3809883a 	mov	r4,r7
   1996c:	0011883a 	mov	r8,zero
   19970:	0005883a 	mov	r2,zero
   19974:	003ee306 	br	19504 <__alt_data_end+0xfc019504>
   19978:	1c62b03a 	or	r17,r3,r17
   1997c:	8822c03a 	cmpne	r17,r17,zero
   19980:	0005883a 	mov	r2,zero
   19984:	003f8906 	br	197ac <__alt_data_end+0xfc0197ac>
   19988:	3809883a 	mov	r4,r7
   1998c:	4821883a 	mov	r16,r9
   19990:	0011883a 	mov	r8,zero
   19994:	0005883a 	mov	r2,zero
   19998:	003eda06 	br	19504 <__alt_data_end+0xfc019504>
   1999c:	0101ffc4 	movi	r4,2047
   199a0:	49003b26 	beq	r9,r4,19a90 <__subdf3+0x7b4>
   199a4:	0085c83a 	sub	r2,zero,r2
   199a8:	18c02034 	orhi	r3,r3,128
   199ac:	01000e04 	movi	r4,56
   199b0:	20806e16 	blt	r4,r2,19b6c <__subdf3+0x890>
   199b4:	010007c4 	movi	r4,31
   199b8:	20807716 	blt	r4,r2,19b98 <__subdf3+0x8bc>
   199bc:	01000804 	movi	r4,32
   199c0:	2089c83a 	sub	r4,r4,r2
   199c4:	1914983a 	sll	r10,r3,r4
   199c8:	8890d83a 	srl	r8,r17,r2
   199cc:	8908983a 	sll	r4,r17,r4
   199d0:	1884d83a 	srl	r2,r3,r2
   199d4:	5222b03a 	or	r17,r10,r8
   199d8:	2006c03a 	cmpne	r3,r4,zero
   199dc:	88e2b03a 	or	r17,r17,r3
   199e0:	89a3883a 	add	r17,r17,r6
   199e4:	1145883a 	add	r2,r2,r5
   199e8:	898d803a 	cmpltu	r6,r17,r6
   199ec:	3087883a 	add	r3,r6,r2
   199f0:	4821883a 	mov	r16,r9
   199f4:	003ed906 	br	1955c <__alt_data_end+0xfc01955c>
   199f8:	2984b03a 	or	r2,r5,r6
   199fc:	10004226 	beq	r2,zero,19b08 <__subdf3+0x82c>
   19a00:	1808d0fa 	srli	r4,r3,3
   19a04:	8822d0fa 	srli	r17,r17,3
   19a08:	1806977a 	slli	r3,r3,29
   19a0c:	2080022c 	andhi	r2,r4,8
   19a10:	1c62b03a 	or	r17,r3,r17
   19a14:	10000826 	beq	r2,zero,19a38 <__subdf3+0x75c>
   19a18:	2812d0fa 	srli	r9,r5,3
   19a1c:	4880022c 	andhi	r2,r9,8
   19a20:	1000051e 	bne	r2,zero,19a38 <__subdf3+0x75c>
   19a24:	300cd0fa 	srli	r6,r6,3
   19a28:	2804977a 	slli	r2,r5,29
   19a2c:	4809883a 	mov	r4,r9
   19a30:	3825883a 	mov	r18,r7
   19a34:	11a2b03a 	or	r17,r2,r6
   19a38:	8806d77a 	srli	r3,r17,29
   19a3c:	200890fa 	slli	r4,r4,3
   19a40:	882290fa 	slli	r17,r17,3
   19a44:	0401ffc4 	movi	r16,2047
   19a48:	1906b03a 	or	r3,r3,r4
   19a4c:	003e4406 	br	19360 <__alt_data_end+0xfc019360>
   19a50:	2984b03a 	or	r2,r5,r6
   19a54:	103e4226 	beq	r2,zero,19360 <__alt_data_end+0xfc019360>
   19a58:	8989c83a 	sub	r4,r17,r6
   19a5c:	8911803a 	cmpltu	r8,r17,r4
   19a60:	1945c83a 	sub	r2,r3,r5
   19a64:	1205c83a 	sub	r2,r2,r8
   19a68:	1200202c 	andhi	r8,r2,128
   19a6c:	403e9a26 	beq	r8,zero,194d8 <__alt_data_end+0xfc0194d8>
   19a70:	3463c83a 	sub	r17,r6,r17
   19a74:	28c5c83a 	sub	r2,r5,r3
   19a78:	344d803a 	cmpltu	r6,r6,r17
   19a7c:	1187c83a 	sub	r3,r2,r6
   19a80:	3825883a 	mov	r18,r7
   19a84:	003e3606 	br	19360 <__alt_data_end+0xfc019360>
   19a88:	0101ffc4 	movi	r4,2047
   19a8c:	493fc71e 	bne	r9,r4,199ac <__alt_data_end+0xfc0199ac>
   19a90:	2807883a 	mov	r3,r5
   19a94:	3023883a 	mov	r17,r6
   19a98:	4821883a 	mov	r16,r9
   19a9c:	003e3006 	br	19360 <__alt_data_end+0xfc019360>
   19aa0:	10003626 	beq	r2,zero,19b7c <__subdf3+0x8a0>
   19aa4:	2984b03a 	or	r2,r5,r6
   19aa8:	10001726 	beq	r2,zero,19b08 <__subdf3+0x82c>
   19aac:	1808d0fa 	srli	r4,r3,3
   19ab0:	8822d0fa 	srli	r17,r17,3
   19ab4:	1806977a 	slli	r3,r3,29
   19ab8:	2080022c 	andhi	r2,r4,8
   19abc:	1c62b03a 	or	r17,r3,r17
   19ac0:	10000726 	beq	r2,zero,19ae0 <__subdf3+0x804>
   19ac4:	2812d0fa 	srli	r9,r5,3
   19ac8:	4880022c 	andhi	r2,r9,8
   19acc:	1000041e 	bne	r2,zero,19ae0 <__subdf3+0x804>
   19ad0:	300cd0fa 	srli	r6,r6,3
   19ad4:	2804977a 	slli	r2,r5,29
   19ad8:	4809883a 	mov	r4,r9
   19adc:	11a2b03a 	or	r17,r2,r6
   19ae0:	8806d77a 	srli	r3,r17,29
   19ae4:	200890fa 	slli	r4,r4,3
   19ae8:	882290fa 	slli	r17,r17,3
   19aec:	3825883a 	mov	r18,r7
   19af0:	1906b03a 	or	r3,r3,r4
   19af4:	0401ffc4 	movi	r16,2047
   19af8:	003e1906 	br	19360 <__alt_data_end+0xfc019360>
   19afc:	000b883a 	mov	r5,zero
   19b00:	0005883a 	mov	r2,zero
   19b04:	003e2e06 	br	193c0 <__alt_data_end+0xfc0193c0>
   19b08:	0401ffc4 	movi	r16,2047
   19b0c:	003e1406 	br	19360 <__alt_data_end+0xfc019360>
   19b10:	0005883a 	mov	r2,zero
   19b14:	003f7506 	br	198ec <__alt_data_end+0xfc0198ec>
   19b18:	0005883a 	mov	r2,zero
   19b1c:	0009883a 	mov	r4,zero
   19b20:	003e7806 	br	19504 <__alt_data_end+0xfc019504>
   19b24:	123ff804 	addi	r8,r2,-32
   19b28:	01000804 	movi	r4,32
   19b2c:	1a10d83a 	srl	r8,r3,r8
   19b30:	11002526 	beq	r2,r4,19bc8 <__subdf3+0x8ec>
   19b34:	01001004 	movi	r4,64
   19b38:	2085c83a 	sub	r2,r4,r2
   19b3c:	1884983a 	sll	r2,r3,r2
   19b40:	1444b03a 	or	r2,r2,r17
   19b44:	1004c03a 	cmpne	r2,r2,zero
   19b48:	40a2b03a 	or	r17,r8,r2
   19b4c:	0005883a 	mov	r2,zero
   19b50:	003f1606 	br	197ac <__alt_data_end+0xfc0197ac>
   19b54:	02000434 	movhi	r8,16
   19b58:	0009883a 	mov	r4,zero
   19b5c:	423fffc4 	addi	r8,r8,-1
   19b60:	00bfffc4 	movi	r2,-1
   19b64:	0401ffc4 	movi	r16,2047
   19b68:	003e6606 	br	19504 <__alt_data_end+0xfc019504>
   19b6c:	1c62b03a 	or	r17,r3,r17
   19b70:	8822c03a 	cmpne	r17,r17,zero
   19b74:	0005883a 	mov	r2,zero
   19b78:	003f9906 	br	199e0 <__alt_data_end+0xfc0199e0>
   19b7c:	2807883a 	mov	r3,r5
   19b80:	3023883a 	mov	r17,r6
   19b84:	0401ffc4 	movi	r16,2047
   19b88:	003df506 	br	19360 <__alt_data_end+0xfc019360>
   19b8c:	2807883a 	mov	r3,r5
   19b90:	3023883a 	mov	r17,r6
   19b94:	003df206 	br	19360 <__alt_data_end+0xfc019360>
   19b98:	123ff804 	addi	r8,r2,-32
   19b9c:	01000804 	movi	r4,32
   19ba0:	1a10d83a 	srl	r8,r3,r8
   19ba4:	11000a26 	beq	r2,r4,19bd0 <__subdf3+0x8f4>
   19ba8:	01001004 	movi	r4,64
   19bac:	2085c83a 	sub	r2,r4,r2
   19bb0:	1884983a 	sll	r2,r3,r2
   19bb4:	1444b03a 	or	r2,r2,r17
   19bb8:	1004c03a 	cmpne	r2,r2,zero
   19bbc:	40a2b03a 	or	r17,r8,r2
   19bc0:	0005883a 	mov	r2,zero
   19bc4:	003f8606 	br	199e0 <__alt_data_end+0xfc0199e0>
   19bc8:	0005883a 	mov	r2,zero
   19bcc:	003fdc06 	br	19b40 <__alt_data_end+0xfc019b40>
   19bd0:	0005883a 	mov	r2,zero
   19bd4:	003ff706 	br	19bb4 <__alt_data_end+0xfc019bb4>

00019bd8 <__fixdfsi>:
   19bd8:	280cd53a 	srli	r6,r5,20
   19bdc:	00c00434 	movhi	r3,16
   19be0:	18ffffc4 	addi	r3,r3,-1
   19be4:	3181ffcc 	andi	r6,r6,2047
   19be8:	01c0ff84 	movi	r7,1022
   19bec:	28c6703a 	and	r3,r5,r3
   19bf0:	280ad7fa 	srli	r5,r5,31
   19bf4:	3980120e 	bge	r7,r6,19c40 <__fixdfsi+0x68>
   19bf8:	00810744 	movi	r2,1053
   19bfc:	11800c16 	blt	r2,r6,19c30 <__fixdfsi+0x58>
   19c00:	00810cc4 	movi	r2,1075
   19c04:	1185c83a 	sub	r2,r2,r6
   19c08:	01c007c4 	movi	r7,31
   19c0c:	18c00434 	orhi	r3,r3,16
   19c10:	38800d16 	blt	r7,r2,19c48 <__fixdfsi+0x70>
   19c14:	31befb44 	addi	r6,r6,-1043
   19c18:	2084d83a 	srl	r2,r4,r2
   19c1c:	1986983a 	sll	r3,r3,r6
   19c20:	1884b03a 	or	r2,r3,r2
   19c24:	28000726 	beq	r5,zero,19c44 <__fixdfsi+0x6c>
   19c28:	0085c83a 	sub	r2,zero,r2
   19c2c:	f800283a 	ret
   19c30:	00a00034 	movhi	r2,32768
   19c34:	10bfffc4 	addi	r2,r2,-1
   19c38:	2885883a 	add	r2,r5,r2
   19c3c:	f800283a 	ret
   19c40:	0005883a 	mov	r2,zero
   19c44:	f800283a 	ret
   19c48:	008104c4 	movi	r2,1043
   19c4c:	1185c83a 	sub	r2,r2,r6
   19c50:	1884d83a 	srl	r2,r3,r2
   19c54:	003ff306 	br	19c24 <__alt_data_end+0xfc019c24>

00019c58 <__floatsidf>:
   19c58:	defffd04 	addi	sp,sp,-12
   19c5c:	dfc00215 	stw	ra,8(sp)
   19c60:	dc400115 	stw	r17,4(sp)
   19c64:	dc000015 	stw	r16,0(sp)
   19c68:	20002b26 	beq	r4,zero,19d18 <__floatsidf+0xc0>
   19c6c:	2023883a 	mov	r17,r4
   19c70:	2020d7fa 	srli	r16,r4,31
   19c74:	20002d16 	blt	r4,zero,19d2c <__floatsidf+0xd4>
   19c78:	8809883a 	mov	r4,r17
   19c7c:	0019ddc0 	call	19ddc <__clzsi2>
   19c80:	01410784 	movi	r5,1054
   19c84:	288bc83a 	sub	r5,r5,r2
   19c88:	01010cc4 	movi	r4,1075
   19c8c:	2149c83a 	sub	r4,r4,r5
   19c90:	00c007c4 	movi	r3,31
   19c94:	1900160e 	bge	r3,r4,19cf0 <__floatsidf+0x98>
   19c98:	00c104c4 	movi	r3,1043
   19c9c:	1947c83a 	sub	r3,r3,r5
   19ca0:	88c6983a 	sll	r3,r17,r3
   19ca4:	00800434 	movhi	r2,16
   19ca8:	10bfffc4 	addi	r2,r2,-1
   19cac:	1886703a 	and	r3,r3,r2
   19cb0:	2941ffcc 	andi	r5,r5,2047
   19cb4:	800d883a 	mov	r6,r16
   19cb8:	0005883a 	mov	r2,zero
   19cbc:	280a953a 	slli	r5,r5,20
   19cc0:	31803fcc 	andi	r6,r6,255
   19cc4:	01000434 	movhi	r4,16
   19cc8:	300c97fa 	slli	r6,r6,31
   19ccc:	213fffc4 	addi	r4,r4,-1
   19cd0:	1906703a 	and	r3,r3,r4
   19cd4:	1946b03a 	or	r3,r3,r5
   19cd8:	1986b03a 	or	r3,r3,r6
   19cdc:	dfc00217 	ldw	ra,8(sp)
   19ce0:	dc400117 	ldw	r17,4(sp)
   19ce4:	dc000017 	ldw	r16,0(sp)
   19ce8:	dec00304 	addi	sp,sp,12
   19cec:	f800283a 	ret
   19cf0:	00c002c4 	movi	r3,11
   19cf4:	1887c83a 	sub	r3,r3,r2
   19cf8:	88c6d83a 	srl	r3,r17,r3
   19cfc:	8904983a 	sll	r2,r17,r4
   19d00:	01000434 	movhi	r4,16
   19d04:	213fffc4 	addi	r4,r4,-1
   19d08:	2941ffcc 	andi	r5,r5,2047
   19d0c:	1906703a 	and	r3,r3,r4
   19d10:	800d883a 	mov	r6,r16
   19d14:	003fe906 	br	19cbc <__alt_data_end+0xfc019cbc>
   19d18:	000d883a 	mov	r6,zero
   19d1c:	000b883a 	mov	r5,zero
   19d20:	0007883a 	mov	r3,zero
   19d24:	0005883a 	mov	r2,zero
   19d28:	003fe406 	br	19cbc <__alt_data_end+0xfc019cbc>
   19d2c:	0123c83a 	sub	r17,zero,r4
   19d30:	003fd106 	br	19c78 <__alt_data_end+0xfc019c78>

00019d34 <__floatunsidf>:
   19d34:	defffe04 	addi	sp,sp,-8
   19d38:	dc000015 	stw	r16,0(sp)
   19d3c:	dfc00115 	stw	ra,4(sp)
   19d40:	2021883a 	mov	r16,r4
   19d44:	20002226 	beq	r4,zero,19dd0 <__floatunsidf+0x9c>
   19d48:	0019ddc0 	call	19ddc <__clzsi2>
   19d4c:	01010784 	movi	r4,1054
   19d50:	2089c83a 	sub	r4,r4,r2
   19d54:	01810cc4 	movi	r6,1075
   19d58:	310dc83a 	sub	r6,r6,r4
   19d5c:	00c007c4 	movi	r3,31
   19d60:	1980120e 	bge	r3,r6,19dac <__floatunsidf+0x78>
   19d64:	00c104c4 	movi	r3,1043
   19d68:	1907c83a 	sub	r3,r3,r4
   19d6c:	80ca983a 	sll	r5,r16,r3
   19d70:	00800434 	movhi	r2,16
   19d74:	10bfffc4 	addi	r2,r2,-1
   19d78:	2101ffcc 	andi	r4,r4,2047
   19d7c:	0021883a 	mov	r16,zero
   19d80:	288a703a 	and	r5,r5,r2
   19d84:	2008953a 	slli	r4,r4,20
   19d88:	00c00434 	movhi	r3,16
   19d8c:	18ffffc4 	addi	r3,r3,-1
   19d90:	28c6703a 	and	r3,r5,r3
   19d94:	8005883a 	mov	r2,r16
   19d98:	1906b03a 	or	r3,r3,r4
   19d9c:	dfc00117 	ldw	ra,4(sp)
   19da0:	dc000017 	ldw	r16,0(sp)
   19da4:	dec00204 	addi	sp,sp,8
   19da8:	f800283a 	ret
   19dac:	00c002c4 	movi	r3,11
   19db0:	188bc83a 	sub	r5,r3,r2
   19db4:	814ad83a 	srl	r5,r16,r5
   19db8:	00c00434 	movhi	r3,16
   19dbc:	18ffffc4 	addi	r3,r3,-1
   19dc0:	81a0983a 	sll	r16,r16,r6
   19dc4:	2101ffcc 	andi	r4,r4,2047
   19dc8:	28ca703a 	and	r5,r5,r3
   19dcc:	003fed06 	br	19d84 <__alt_data_end+0xfc019d84>
   19dd0:	0009883a 	mov	r4,zero
   19dd4:	000b883a 	mov	r5,zero
   19dd8:	003fea06 	br	19d84 <__alt_data_end+0xfc019d84>

00019ddc <__clzsi2>:
   19ddc:	00bfffd4 	movui	r2,65535
   19de0:	11000536 	bltu	r2,r4,19df8 <__clzsi2+0x1c>
   19de4:	00803fc4 	movi	r2,255
   19de8:	11000f36 	bltu	r2,r4,19e28 <__clzsi2+0x4c>
   19dec:	00800804 	movi	r2,32
   19df0:	0007883a 	mov	r3,zero
   19df4:	00000506 	br	19e0c <__clzsi2+0x30>
   19df8:	00804034 	movhi	r2,256
   19dfc:	10bfffc4 	addi	r2,r2,-1
   19e00:	11000c2e 	bgeu	r2,r4,19e34 <__clzsi2+0x58>
   19e04:	00800204 	movi	r2,8
   19e08:	00c00604 	movi	r3,24
   19e0c:	20c8d83a 	srl	r4,r4,r3
   19e10:	00c000b4 	movhi	r3,2
   19e14:	18f16604 	addi	r3,r3,-14952
   19e18:	1909883a 	add	r4,r3,r4
   19e1c:	20c00003 	ldbu	r3,0(r4)
   19e20:	10c5c83a 	sub	r2,r2,r3
   19e24:	f800283a 	ret
   19e28:	00800604 	movi	r2,24
   19e2c:	00c00204 	movi	r3,8
   19e30:	003ff606 	br	19e0c <__alt_data_end+0xfc019e0c>
   19e34:	00800404 	movi	r2,16
   19e38:	1007883a 	mov	r3,r2
   19e3c:	003ff306 	br	19e0c <__alt_data_end+0xfc019e0c>

00019e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19e40:	defffe04 	addi	sp,sp,-8
   19e44:	dfc00115 	stw	ra,4(sp)
   19e48:	df000015 	stw	fp,0(sp)
   19e4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19e50:	d0a00f17 	ldw	r2,-32708(gp)
   19e54:	10000326 	beq	r2,zero,19e64 <alt_get_errno+0x24>
   19e58:	d0a00f17 	ldw	r2,-32708(gp)
   19e5c:	103ee83a 	callr	r2
   19e60:	00000106 	br	19e68 <alt_get_errno+0x28>
   19e64:	d0a6da04 	addi	r2,gp,-25752
}
   19e68:	e037883a 	mov	sp,fp
   19e6c:	dfc00117 	ldw	ra,4(sp)
   19e70:	df000017 	ldw	fp,0(sp)
   19e74:	dec00204 	addi	sp,sp,8
   19e78:	f800283a 	ret

00019e7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19e7c:	defffb04 	addi	sp,sp,-20
   19e80:	dfc00415 	stw	ra,16(sp)
   19e84:	df000315 	stw	fp,12(sp)
   19e88:	df000304 	addi	fp,sp,12
   19e8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19e90:	e0bfff17 	ldw	r2,-4(fp)
   19e94:	10000816 	blt	r2,zero,19eb8 <close+0x3c>
   19e98:	01400304 	movi	r5,12
   19e9c:	e13fff17 	ldw	r4,-4(fp)
   19ea0:	000cefc0 	call	cefc <__mulsi3>
   19ea4:	1007883a 	mov	r3,r2
   19ea8:	008000b4 	movhi	r2,2
   19eac:	10b3e604 	addi	r2,r2,-12392
   19eb0:	1885883a 	add	r2,r3,r2
   19eb4:	00000106 	br	19ebc <close+0x40>
   19eb8:	0005883a 	mov	r2,zero
   19ebc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   19ec0:	e0bffd17 	ldw	r2,-12(fp)
   19ec4:	10001926 	beq	r2,zero,19f2c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19ec8:	e0bffd17 	ldw	r2,-12(fp)
   19ecc:	10800017 	ldw	r2,0(r2)
   19ed0:	10800417 	ldw	r2,16(r2)
   19ed4:	10000626 	beq	r2,zero,19ef0 <close+0x74>
   19ed8:	e0bffd17 	ldw	r2,-12(fp)
   19edc:	10800017 	ldw	r2,0(r2)
   19ee0:	10800417 	ldw	r2,16(r2)
   19ee4:	e13ffd17 	ldw	r4,-12(fp)
   19ee8:	103ee83a 	callr	r2
   19eec:	00000106 	br	19ef4 <close+0x78>
   19ef0:	0005883a 	mov	r2,zero
   19ef4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19ef8:	e13fff17 	ldw	r4,-4(fp)
   19efc:	001a5980 	call	1a598 <alt_release_fd>
    if (rval < 0)
   19f00:	e0bffe17 	ldw	r2,-8(fp)
   19f04:	1000070e 	bge	r2,zero,19f24 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   19f08:	0019e400 	call	19e40 <alt_get_errno>
   19f0c:	1007883a 	mov	r3,r2
   19f10:	e0bffe17 	ldw	r2,-8(fp)
   19f14:	0085c83a 	sub	r2,zero,r2
   19f18:	18800015 	stw	r2,0(r3)
      return -1;
   19f1c:	00bfffc4 	movi	r2,-1
   19f20:	00000706 	br	19f40 <close+0xc4>
    }
    return 0;
   19f24:	0005883a 	mov	r2,zero
   19f28:	00000506 	br	19f40 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19f2c:	0019e400 	call	19e40 <alt_get_errno>
   19f30:	1007883a 	mov	r3,r2
   19f34:	00801444 	movi	r2,81
   19f38:	18800015 	stw	r2,0(r3)
    return -1;
   19f3c:	00bfffc4 	movi	r2,-1
  }
}
   19f40:	e037883a 	mov	sp,fp
   19f44:	dfc00117 	ldw	ra,4(sp)
   19f48:	df000017 	ldw	fp,0(sp)
   19f4c:	dec00204 	addi	sp,sp,8
   19f50:	f800283a 	ret

00019f54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19f54:	defffc04 	addi	sp,sp,-16
   19f58:	df000315 	stw	fp,12(sp)
   19f5c:	df000304 	addi	fp,sp,12
   19f60:	e13ffd15 	stw	r4,-12(fp)
   19f64:	e17ffe15 	stw	r5,-8(fp)
   19f68:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19f6c:	e0bfff17 	ldw	r2,-4(fp)
}
   19f70:	e037883a 	mov	sp,fp
   19f74:	df000017 	ldw	fp,0(sp)
   19f78:	dec00104 	addi	sp,sp,4
   19f7c:	f800283a 	ret

00019f80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19f80:	defffd04 	addi	sp,sp,-12
   19f84:	df000215 	stw	fp,8(sp)
   19f88:	df000204 	addi	fp,sp,8
   19f8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19f90:	0001883a 	nop
   19f94:	e0bfff17 	ldw	r2,-4(fp)
   19f98:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19f9c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19fa0:	10000226 	beq	r2,zero,19fac <_exit+0x2c>
    ALT_SIM_FAIL();
   19fa4:	002af070 	cmpltui	zero,zero,43969
   19fa8:	00000106 	br	19fb0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   19fac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19fb0:	003fff06 	br	19fb0 <__alt_data_end+0xfc019fb0>

00019fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19fb4:	defffe04 	addi	sp,sp,-8
   19fb8:	dfc00115 	stw	ra,4(sp)
   19fbc:	df000015 	stw	fp,0(sp)
   19fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19fc4:	d0a00f17 	ldw	r2,-32708(gp)
   19fc8:	10000326 	beq	r2,zero,19fd8 <alt_get_errno+0x24>
   19fcc:	d0a00f17 	ldw	r2,-32708(gp)
   19fd0:	103ee83a 	callr	r2
   19fd4:	00000106 	br	19fdc <alt_get_errno+0x28>
   19fd8:	d0a6da04 	addi	r2,gp,-25752
}
   19fdc:	e037883a 	mov	sp,fp
   19fe0:	dfc00117 	ldw	ra,4(sp)
   19fe4:	df000017 	ldw	fp,0(sp)
   19fe8:	dec00204 	addi	sp,sp,8
   19fec:	f800283a 	ret

00019ff0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19ff0:	defffb04 	addi	sp,sp,-20
   19ff4:	dfc00415 	stw	ra,16(sp)
   19ff8:	df000315 	stw	fp,12(sp)
   19ffc:	df000304 	addi	fp,sp,12
   1a000:	e13ffe15 	stw	r4,-8(fp)
   1a004:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a008:	e0bffe17 	ldw	r2,-8(fp)
   1a00c:	10000816 	blt	r2,zero,1a030 <fstat+0x40>
   1a010:	01400304 	movi	r5,12
   1a014:	e13ffe17 	ldw	r4,-8(fp)
   1a018:	000cefc0 	call	cefc <__mulsi3>
   1a01c:	1007883a 	mov	r3,r2
   1a020:	008000b4 	movhi	r2,2
   1a024:	10b3e604 	addi	r2,r2,-12392
   1a028:	1885883a 	add	r2,r3,r2
   1a02c:	00000106 	br	1a034 <fstat+0x44>
   1a030:	0005883a 	mov	r2,zero
   1a034:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1a038:	e0bffd17 	ldw	r2,-12(fp)
   1a03c:	10001026 	beq	r2,zero,1a080 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a040:	e0bffd17 	ldw	r2,-12(fp)
   1a044:	10800017 	ldw	r2,0(r2)
   1a048:	10800817 	ldw	r2,32(r2)
   1a04c:	10000726 	beq	r2,zero,1a06c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1a050:	e0bffd17 	ldw	r2,-12(fp)
   1a054:	10800017 	ldw	r2,0(r2)
   1a058:	10800817 	ldw	r2,32(r2)
   1a05c:	e17fff17 	ldw	r5,-4(fp)
   1a060:	e13ffd17 	ldw	r4,-12(fp)
   1a064:	103ee83a 	callr	r2
   1a068:	00000a06 	br	1a094 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a06c:	e0bfff17 	ldw	r2,-4(fp)
   1a070:	00c80004 	movi	r3,8192
   1a074:	10c00115 	stw	r3,4(r2)
      return 0;
   1a078:	0005883a 	mov	r2,zero
   1a07c:	00000506 	br	1a094 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a080:	0019fb40 	call	19fb4 <alt_get_errno>
   1a084:	1007883a 	mov	r3,r2
   1a088:	00801444 	movi	r2,81
   1a08c:	18800015 	stw	r2,0(r3)
    return -1;
   1a090:	00bfffc4 	movi	r2,-1
  }
}
   1a094:	e037883a 	mov	sp,fp
   1a098:	dfc00117 	ldw	ra,4(sp)
   1a09c:	df000017 	ldw	fp,0(sp)
   1a0a0:	dec00204 	addi	sp,sp,8
   1a0a4:	f800283a 	ret

0001a0a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a0a8:	defffe04 	addi	sp,sp,-8
   1a0ac:	dfc00115 	stw	ra,4(sp)
   1a0b0:	df000015 	stw	fp,0(sp)
   1a0b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a0b8:	d0a00f17 	ldw	r2,-32708(gp)
   1a0bc:	10000326 	beq	r2,zero,1a0cc <alt_get_errno+0x24>
   1a0c0:	d0a00f17 	ldw	r2,-32708(gp)
   1a0c4:	103ee83a 	callr	r2
   1a0c8:	00000106 	br	1a0d0 <alt_get_errno+0x28>
   1a0cc:	d0a6da04 	addi	r2,gp,-25752
}
   1a0d0:	e037883a 	mov	sp,fp
   1a0d4:	dfc00117 	ldw	ra,4(sp)
   1a0d8:	df000017 	ldw	fp,0(sp)
   1a0dc:	dec00204 	addi	sp,sp,8
   1a0e0:	f800283a 	ret

0001a0e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a0e4:	deffed04 	addi	sp,sp,-76
   1a0e8:	dfc01215 	stw	ra,72(sp)
   1a0ec:	df001115 	stw	fp,68(sp)
   1a0f0:	df001104 	addi	fp,sp,68
   1a0f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a0f8:	e0bfff17 	ldw	r2,-4(fp)
   1a0fc:	10000816 	blt	r2,zero,1a120 <isatty+0x3c>
   1a100:	01400304 	movi	r5,12
   1a104:	e13fff17 	ldw	r4,-4(fp)
   1a108:	000cefc0 	call	cefc <__mulsi3>
   1a10c:	1007883a 	mov	r3,r2
   1a110:	008000b4 	movhi	r2,2
   1a114:	10b3e604 	addi	r2,r2,-12392
   1a118:	1885883a 	add	r2,r3,r2
   1a11c:	00000106 	br	1a124 <isatty+0x40>
   1a120:	0005883a 	mov	r2,zero
   1a124:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1a128:	e0bfef17 	ldw	r2,-68(fp)
   1a12c:	10000e26 	beq	r2,zero,1a168 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a130:	e0bfef17 	ldw	r2,-68(fp)
   1a134:	10800017 	ldw	r2,0(r2)
   1a138:	10800817 	ldw	r2,32(r2)
   1a13c:	1000021e 	bne	r2,zero,1a148 <isatty+0x64>
    {
      return 1;
   1a140:	00800044 	movi	r2,1
   1a144:	00000d06 	br	1a17c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a148:	e0bff004 	addi	r2,fp,-64
   1a14c:	100b883a 	mov	r5,r2
   1a150:	e13fff17 	ldw	r4,-4(fp)
   1a154:	0019ff00 	call	19ff0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a158:	e0bff117 	ldw	r2,-60(fp)
   1a15c:	10880020 	cmpeqi	r2,r2,8192
   1a160:	10803fcc 	andi	r2,r2,255
   1a164:	00000506 	br	1a17c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a168:	001a0a80 	call	1a0a8 <alt_get_errno>
   1a16c:	1007883a 	mov	r3,r2
   1a170:	00801444 	movi	r2,81
   1a174:	18800015 	stw	r2,0(r3)
    return 0;
   1a178:	0005883a 	mov	r2,zero
  }
}
   1a17c:	e037883a 	mov	sp,fp
   1a180:	dfc00117 	ldw	ra,4(sp)
   1a184:	df000017 	ldw	fp,0(sp)
   1a188:	dec00204 	addi	sp,sp,8
   1a18c:	f800283a 	ret

0001a190 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a190:	defffc04 	addi	sp,sp,-16
   1a194:	df000315 	stw	fp,12(sp)
   1a198:	df000304 	addi	fp,sp,12
   1a19c:	e13ffd15 	stw	r4,-12(fp)
   1a1a0:	e17ffe15 	stw	r5,-8(fp)
   1a1a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a1a8:	e0fffe17 	ldw	r3,-8(fp)
   1a1ac:	e0bffd17 	ldw	r2,-12(fp)
   1a1b0:	18800c26 	beq	r3,r2,1a1e4 <alt_load_section+0x54>
  {
    while( to != end )
   1a1b4:	00000806 	br	1a1d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1a1b8:	e0bffe17 	ldw	r2,-8(fp)
   1a1bc:	10c00104 	addi	r3,r2,4
   1a1c0:	e0fffe15 	stw	r3,-8(fp)
   1a1c4:	e0fffd17 	ldw	r3,-12(fp)
   1a1c8:	19000104 	addi	r4,r3,4
   1a1cc:	e13ffd15 	stw	r4,-12(fp)
   1a1d0:	18c00017 	ldw	r3,0(r3)
   1a1d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a1d8:	e0fffe17 	ldw	r3,-8(fp)
   1a1dc:	e0bfff17 	ldw	r2,-4(fp)
   1a1e0:	18bff51e 	bne	r3,r2,1a1b8 <__alt_data_end+0xfc01a1b8>
    {
      *to++ = *from++;
    }
  }
}
   1a1e4:	0001883a 	nop
   1a1e8:	e037883a 	mov	sp,fp
   1a1ec:	df000017 	ldw	fp,0(sp)
   1a1f0:	dec00104 	addi	sp,sp,4
   1a1f4:	f800283a 	ret

0001a1f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a1f8:	defffe04 	addi	sp,sp,-8
   1a1fc:	dfc00115 	stw	ra,4(sp)
   1a200:	df000015 	stw	fp,0(sp)
   1a204:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a208:	018000b4 	movhi	r6,2
   1a20c:	31b87204 	addi	r6,r6,-7736
   1a210:	014000b4 	movhi	r5,2
   1a214:	2971b304 	addi	r5,r5,-14644
   1a218:	010000b4 	movhi	r4,2
   1a21c:	21387204 	addi	r4,r4,-7736
   1a220:	001a1900 	call	1a190 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a224:	01800034 	movhi	r6,0
   1a228:	31808c04 	addi	r6,r6,560
   1a22c:	01400034 	movhi	r5,0
   1a230:	29400804 	addi	r5,r5,32
   1a234:	01000034 	movhi	r4,0
   1a238:	21000804 	addi	r4,r4,32
   1a23c:	001a1900 	call	1a190 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a240:	018000b4 	movhi	r6,2
   1a244:	31b1b304 	addi	r6,r6,-14644
   1a248:	014000b4 	movhi	r5,2
   1a24c:	2970c904 	addi	r5,r5,-15580
   1a250:	010000b4 	movhi	r4,2
   1a254:	2130c904 	addi	r4,r4,-15580
   1a258:	001a1900 	call	1a190 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a25c:	001b4580 	call	1b458 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a260:	001b6180 	call	1b618 <alt_icache_flush_all>
}
   1a264:	0001883a 	nop
   1a268:	e037883a 	mov	sp,fp
   1a26c:	dfc00117 	ldw	ra,4(sp)
   1a270:	df000017 	ldw	fp,0(sp)
   1a274:	dec00204 	addi	sp,sp,8
   1a278:	f800283a 	ret

0001a27c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a27c:	defffe04 	addi	sp,sp,-8
   1a280:	dfc00115 	stw	ra,4(sp)
   1a284:	df000015 	stw	fp,0(sp)
   1a288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a28c:	d0a00f17 	ldw	r2,-32708(gp)
   1a290:	10000326 	beq	r2,zero,1a2a0 <alt_get_errno+0x24>
   1a294:	d0a00f17 	ldw	r2,-32708(gp)
   1a298:	103ee83a 	callr	r2
   1a29c:	00000106 	br	1a2a4 <alt_get_errno+0x28>
   1a2a0:	d0a6da04 	addi	r2,gp,-25752
}
   1a2a4:	e037883a 	mov	sp,fp
   1a2a8:	dfc00117 	ldw	ra,4(sp)
   1a2ac:	df000017 	ldw	fp,0(sp)
   1a2b0:	dec00204 	addi	sp,sp,8
   1a2b4:	f800283a 	ret

0001a2b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a2b8:	defff904 	addi	sp,sp,-28
   1a2bc:	dfc00615 	stw	ra,24(sp)
   1a2c0:	df000515 	stw	fp,20(sp)
   1a2c4:	df000504 	addi	fp,sp,20
   1a2c8:	e13ffd15 	stw	r4,-12(fp)
   1a2cc:	e17ffe15 	stw	r5,-8(fp)
   1a2d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a2d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a2d8:	e0bffd17 	ldw	r2,-12(fp)
   1a2dc:	10000816 	blt	r2,zero,1a300 <lseek+0x48>
   1a2e0:	01400304 	movi	r5,12
   1a2e4:	e13ffd17 	ldw	r4,-12(fp)
   1a2e8:	000cefc0 	call	cefc <__mulsi3>
   1a2ec:	1007883a 	mov	r3,r2
   1a2f0:	008000b4 	movhi	r2,2
   1a2f4:	10b3e604 	addi	r2,r2,-12392
   1a2f8:	1885883a 	add	r2,r3,r2
   1a2fc:	00000106 	br	1a304 <lseek+0x4c>
   1a300:	0005883a 	mov	r2,zero
   1a304:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1a308:	e0bffc17 	ldw	r2,-16(fp)
   1a30c:	10001026 	beq	r2,zero,1a350 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a310:	e0bffc17 	ldw	r2,-16(fp)
   1a314:	10800017 	ldw	r2,0(r2)
   1a318:	10800717 	ldw	r2,28(r2)
   1a31c:	10000926 	beq	r2,zero,1a344 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a320:	e0bffc17 	ldw	r2,-16(fp)
   1a324:	10800017 	ldw	r2,0(r2)
   1a328:	10800717 	ldw	r2,28(r2)
   1a32c:	e1bfff17 	ldw	r6,-4(fp)
   1a330:	e17ffe17 	ldw	r5,-8(fp)
   1a334:	e13ffc17 	ldw	r4,-16(fp)
   1a338:	103ee83a 	callr	r2
   1a33c:	e0bffb15 	stw	r2,-20(fp)
   1a340:	00000506 	br	1a358 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a344:	00bfde84 	movi	r2,-134
   1a348:	e0bffb15 	stw	r2,-20(fp)
   1a34c:	00000206 	br	1a358 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a350:	00bfebc4 	movi	r2,-81
   1a354:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1a358:	e0bffb17 	ldw	r2,-20(fp)
   1a35c:	1000070e 	bge	r2,zero,1a37c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1a360:	001a27c0 	call	1a27c <alt_get_errno>
   1a364:	1007883a 	mov	r3,r2
   1a368:	e0bffb17 	ldw	r2,-20(fp)
   1a36c:	0085c83a 	sub	r2,zero,r2
   1a370:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a374:	00bfffc4 	movi	r2,-1
   1a378:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1a37c:	e0bffb17 	ldw	r2,-20(fp)
}
   1a380:	e037883a 	mov	sp,fp
   1a384:	dfc00117 	ldw	ra,4(sp)
   1a388:	df000017 	ldw	fp,0(sp)
   1a38c:	dec00204 	addi	sp,sp,8
   1a390:	f800283a 	ret

0001a394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a394:	defffd04 	addi	sp,sp,-12
   1a398:	dfc00215 	stw	ra,8(sp)
   1a39c:	df000115 	stw	fp,4(sp)
   1a3a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a3a4:	0009883a 	mov	r4,zero
   1a3a8:	001a83c0 	call	1a83c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a3ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a3b0:	001a8740 	call	1a874 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a3b4:	018000b4 	movhi	r6,2
   1a3b8:	31b1a904 	addi	r6,r6,-14684
   1a3bc:	014000b4 	movhi	r5,2
   1a3c0:	2971a904 	addi	r5,r5,-14684
   1a3c4:	010000b4 	movhi	r4,2
   1a3c8:	2131a904 	addi	r4,r4,-14684
   1a3cc:	001b9bc0 	call	1b9bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a3d0:	001b5580 	call	1b558 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a3d4:	010000b4 	movhi	r4,2
   1a3d8:	212d6e04 	addi	r4,r4,-19016
   1a3dc:	001c17c0 	call	1c17c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a3e0:	d0a6db17 	ldw	r2,-25748(gp)
   1a3e4:	d0e6dc17 	ldw	r3,-25744(gp)
   1a3e8:	d126dd17 	ldw	r4,-25740(gp)
   1a3ec:	200d883a 	mov	r6,r4
   1a3f0:	180b883a 	mov	r5,r3
   1a3f4:	1009883a 	mov	r4,r2
   1a3f8:	000cce00 	call	cce0 <main>
   1a3fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a400:	01000044 	movi	r4,1
   1a404:	0019e7c0 	call	19e7c <close>
  exit (result);
   1a408:	e13fff17 	ldw	r4,-4(fp)
   1a40c:	000cf240 	call	cf24 <exit>

0001a410 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a410:	defffe04 	addi	sp,sp,-8
   1a414:	df000115 	stw	fp,4(sp)
   1a418:	df000104 	addi	fp,sp,4
   1a41c:	e13fff15 	stw	r4,-4(fp)
}
   1a420:	0001883a 	nop
   1a424:	e037883a 	mov	sp,fp
   1a428:	df000017 	ldw	fp,0(sp)
   1a42c:	dec00104 	addi	sp,sp,4
   1a430:	f800283a 	ret

0001a434 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a434:	defffe04 	addi	sp,sp,-8
   1a438:	df000115 	stw	fp,4(sp)
   1a43c:	df000104 	addi	fp,sp,4
   1a440:	e13fff15 	stw	r4,-4(fp)
}
   1a444:	0001883a 	nop
   1a448:	e037883a 	mov	sp,fp
   1a44c:	df000017 	ldw	fp,0(sp)
   1a450:	dec00104 	addi	sp,sp,4
   1a454:	f800283a 	ret

0001a458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a458:	defffe04 	addi	sp,sp,-8
   1a45c:	dfc00115 	stw	ra,4(sp)
   1a460:	df000015 	stw	fp,0(sp)
   1a464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a468:	d0a00f17 	ldw	r2,-32708(gp)
   1a46c:	10000326 	beq	r2,zero,1a47c <alt_get_errno+0x24>
   1a470:	d0a00f17 	ldw	r2,-32708(gp)
   1a474:	103ee83a 	callr	r2
   1a478:	00000106 	br	1a480 <alt_get_errno+0x28>
   1a47c:	d0a6da04 	addi	r2,gp,-25752
}
   1a480:	e037883a 	mov	sp,fp
   1a484:	dfc00117 	ldw	ra,4(sp)
   1a488:	df000017 	ldw	fp,0(sp)
   1a48c:	dec00204 	addi	sp,sp,8
   1a490:	f800283a 	ret

0001a494 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a494:	defff904 	addi	sp,sp,-28
   1a498:	dfc00615 	stw	ra,24(sp)
   1a49c:	df000515 	stw	fp,20(sp)
   1a4a0:	df000504 	addi	fp,sp,20
   1a4a4:	e13ffd15 	stw	r4,-12(fp)
   1a4a8:	e17ffe15 	stw	r5,-8(fp)
   1a4ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a4b0:	e0bffd17 	ldw	r2,-12(fp)
   1a4b4:	10000816 	blt	r2,zero,1a4d8 <read+0x44>
   1a4b8:	01400304 	movi	r5,12
   1a4bc:	e13ffd17 	ldw	r4,-12(fp)
   1a4c0:	000cefc0 	call	cefc <__mulsi3>
   1a4c4:	1007883a 	mov	r3,r2
   1a4c8:	008000b4 	movhi	r2,2
   1a4cc:	10b3e604 	addi	r2,r2,-12392
   1a4d0:	1885883a 	add	r2,r3,r2
   1a4d4:	00000106 	br	1a4dc <read+0x48>
   1a4d8:	0005883a 	mov	r2,zero
   1a4dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a4e0:	e0bffb17 	ldw	r2,-20(fp)
   1a4e4:	10002226 	beq	r2,zero,1a570 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a4e8:	e0bffb17 	ldw	r2,-20(fp)
   1a4ec:	10800217 	ldw	r2,8(r2)
   1a4f0:	108000cc 	andi	r2,r2,3
   1a4f4:	10800060 	cmpeqi	r2,r2,1
   1a4f8:	1000181e 	bne	r2,zero,1a55c <read+0xc8>
        (fd->dev->read))
   1a4fc:	e0bffb17 	ldw	r2,-20(fp)
   1a500:	10800017 	ldw	r2,0(r2)
   1a504:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a508:	10001426 	beq	r2,zero,1a55c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a50c:	e0bffb17 	ldw	r2,-20(fp)
   1a510:	10800017 	ldw	r2,0(r2)
   1a514:	10800517 	ldw	r2,20(r2)
   1a518:	e0ffff17 	ldw	r3,-4(fp)
   1a51c:	180d883a 	mov	r6,r3
   1a520:	e17ffe17 	ldw	r5,-8(fp)
   1a524:	e13ffb17 	ldw	r4,-20(fp)
   1a528:	103ee83a 	callr	r2
   1a52c:	e0bffc15 	stw	r2,-16(fp)
   1a530:	e0bffc17 	ldw	r2,-16(fp)
   1a534:	1000070e 	bge	r2,zero,1a554 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1a538:	001a4580 	call	1a458 <alt_get_errno>
   1a53c:	1007883a 	mov	r3,r2
   1a540:	e0bffc17 	ldw	r2,-16(fp)
   1a544:	0085c83a 	sub	r2,zero,r2
   1a548:	18800015 	stw	r2,0(r3)
          return -1;
   1a54c:	00bfffc4 	movi	r2,-1
   1a550:	00000c06 	br	1a584 <read+0xf0>
        }
        return rval;
   1a554:	e0bffc17 	ldw	r2,-16(fp)
   1a558:	00000a06 	br	1a584 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a55c:	001a4580 	call	1a458 <alt_get_errno>
   1a560:	1007883a 	mov	r3,r2
   1a564:	00800344 	movi	r2,13
   1a568:	18800015 	stw	r2,0(r3)
   1a56c:	00000406 	br	1a580 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a570:	001a4580 	call	1a458 <alt_get_errno>
   1a574:	1007883a 	mov	r3,r2
   1a578:	00801444 	movi	r2,81
   1a57c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a580:	00bfffc4 	movi	r2,-1
}
   1a584:	e037883a 	mov	sp,fp
   1a588:	dfc00117 	ldw	ra,4(sp)
   1a58c:	df000017 	ldw	fp,0(sp)
   1a590:	dec00204 	addi	sp,sp,8
   1a594:	f800283a 	ret

0001a598 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a598:	defffc04 	addi	sp,sp,-16
   1a59c:	dfc00315 	stw	ra,12(sp)
   1a5a0:	df000215 	stw	fp,8(sp)
   1a5a4:	dc000115 	stw	r16,4(sp)
   1a5a8:	df000204 	addi	fp,sp,8
   1a5ac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1a5b0:	e0bffe17 	ldw	r2,-8(fp)
   1a5b4:	108000d0 	cmplti	r2,r2,3
   1a5b8:	1000111e 	bne	r2,zero,1a600 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a5bc:	040000b4 	movhi	r16,2
   1a5c0:	8433e604 	addi	r16,r16,-12392
   1a5c4:	e0bffe17 	ldw	r2,-8(fp)
   1a5c8:	01400304 	movi	r5,12
   1a5cc:	1009883a 	mov	r4,r2
   1a5d0:	000cefc0 	call	cefc <__mulsi3>
   1a5d4:	8085883a 	add	r2,r16,r2
   1a5d8:	10800204 	addi	r2,r2,8
   1a5dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a5e0:	040000b4 	movhi	r16,2
   1a5e4:	8433e604 	addi	r16,r16,-12392
   1a5e8:	e0bffe17 	ldw	r2,-8(fp)
   1a5ec:	01400304 	movi	r5,12
   1a5f0:	1009883a 	mov	r4,r2
   1a5f4:	000cefc0 	call	cefc <__mulsi3>
   1a5f8:	8085883a 	add	r2,r16,r2
   1a5fc:	10000015 	stw	zero,0(r2)
  }
}
   1a600:	0001883a 	nop
   1a604:	e6ffff04 	addi	sp,fp,-4
   1a608:	dfc00217 	ldw	ra,8(sp)
   1a60c:	df000117 	ldw	fp,4(sp)
   1a610:	dc000017 	ldw	r16,0(sp)
   1a614:	dec00304 	addi	sp,sp,12
   1a618:	f800283a 	ret

0001a61c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a61c:	defff904 	addi	sp,sp,-28
   1a620:	df000615 	stw	fp,24(sp)
   1a624:	df000604 	addi	fp,sp,24
   1a628:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a62c:	0005303a 	rdctl	r2,status
   1a630:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a634:	e0fffe17 	ldw	r3,-8(fp)
   1a638:	00bfff84 	movi	r2,-2
   1a63c:	1884703a 	and	r2,r3,r2
   1a640:	1001703a 	wrctl	status,r2
  
  return context;
   1a644:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a648:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a64c:	d0a01017 	ldw	r2,-32704(gp)
   1a650:	10c000c4 	addi	r3,r2,3
   1a654:	00bfff04 	movi	r2,-4
   1a658:	1884703a 	and	r2,r3,r2
   1a65c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a660:	d0e01017 	ldw	r3,-32704(gp)
   1a664:	e0bfff17 	ldw	r2,-4(fp)
   1a668:	1887883a 	add	r3,r3,r2
   1a66c:	00810034 	movhi	r2,1024
   1a670:	10800004 	addi	r2,r2,0
   1a674:	10c0062e 	bgeu	r2,r3,1a690 <sbrk+0x74>
   1a678:	e0bffb17 	ldw	r2,-20(fp)
   1a67c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a680:	e0bffa17 	ldw	r2,-24(fp)
   1a684:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a688:	00bfffc4 	movi	r2,-1
   1a68c:	00000b06 	br	1a6bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a690:	d0a01017 	ldw	r2,-32704(gp)
   1a694:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1a698:	d0e01017 	ldw	r3,-32704(gp)
   1a69c:	e0bfff17 	ldw	r2,-4(fp)
   1a6a0:	1885883a 	add	r2,r3,r2
   1a6a4:	d0a01015 	stw	r2,-32704(gp)
   1a6a8:	e0bffb17 	ldw	r2,-20(fp)
   1a6ac:	e0bffc15 	stw	r2,-16(fp)
   1a6b0:	e0bffc17 	ldw	r2,-16(fp)
   1a6b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a6b8:	e0bffd17 	ldw	r2,-12(fp)
} 
   1a6bc:	e037883a 	mov	sp,fp
   1a6c0:	df000017 	ldw	fp,0(sp)
   1a6c4:	dec00104 	addi	sp,sp,4
   1a6c8:	f800283a 	ret

0001a6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a6cc:	defffe04 	addi	sp,sp,-8
   1a6d0:	dfc00115 	stw	ra,4(sp)
   1a6d4:	df000015 	stw	fp,0(sp)
   1a6d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a6dc:	d0a00f17 	ldw	r2,-32708(gp)
   1a6e0:	10000326 	beq	r2,zero,1a6f0 <alt_get_errno+0x24>
   1a6e4:	d0a00f17 	ldw	r2,-32708(gp)
   1a6e8:	103ee83a 	callr	r2
   1a6ec:	00000106 	br	1a6f4 <alt_get_errno+0x28>
   1a6f0:	d0a6da04 	addi	r2,gp,-25752
}
   1a6f4:	e037883a 	mov	sp,fp
   1a6f8:	dfc00117 	ldw	ra,4(sp)
   1a6fc:	df000017 	ldw	fp,0(sp)
   1a700:	dec00204 	addi	sp,sp,8
   1a704:	f800283a 	ret

0001a708 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a708:	defff904 	addi	sp,sp,-28
   1a70c:	dfc00615 	stw	ra,24(sp)
   1a710:	df000515 	stw	fp,20(sp)
   1a714:	df000504 	addi	fp,sp,20
   1a718:	e13ffd15 	stw	r4,-12(fp)
   1a71c:	e17ffe15 	stw	r5,-8(fp)
   1a720:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a724:	e0bffd17 	ldw	r2,-12(fp)
   1a728:	10000816 	blt	r2,zero,1a74c <write+0x44>
   1a72c:	01400304 	movi	r5,12
   1a730:	e13ffd17 	ldw	r4,-12(fp)
   1a734:	000cefc0 	call	cefc <__mulsi3>
   1a738:	1007883a 	mov	r3,r2
   1a73c:	008000b4 	movhi	r2,2
   1a740:	10b3e604 	addi	r2,r2,-12392
   1a744:	1885883a 	add	r2,r3,r2
   1a748:	00000106 	br	1a750 <write+0x48>
   1a74c:	0005883a 	mov	r2,zero
   1a750:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a754:	e0bffb17 	ldw	r2,-20(fp)
   1a758:	10002126 	beq	r2,zero,1a7e0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a75c:	e0bffb17 	ldw	r2,-20(fp)
   1a760:	10800217 	ldw	r2,8(r2)
   1a764:	108000cc 	andi	r2,r2,3
   1a768:	10001826 	beq	r2,zero,1a7cc <write+0xc4>
   1a76c:	e0bffb17 	ldw	r2,-20(fp)
   1a770:	10800017 	ldw	r2,0(r2)
   1a774:	10800617 	ldw	r2,24(r2)
   1a778:	10001426 	beq	r2,zero,1a7cc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a77c:	e0bffb17 	ldw	r2,-20(fp)
   1a780:	10800017 	ldw	r2,0(r2)
   1a784:	10800617 	ldw	r2,24(r2)
   1a788:	e0ffff17 	ldw	r3,-4(fp)
   1a78c:	180d883a 	mov	r6,r3
   1a790:	e17ffe17 	ldw	r5,-8(fp)
   1a794:	e13ffb17 	ldw	r4,-20(fp)
   1a798:	103ee83a 	callr	r2
   1a79c:	e0bffc15 	stw	r2,-16(fp)
   1a7a0:	e0bffc17 	ldw	r2,-16(fp)
   1a7a4:	1000070e 	bge	r2,zero,1a7c4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1a7a8:	001a6cc0 	call	1a6cc <alt_get_errno>
   1a7ac:	1007883a 	mov	r3,r2
   1a7b0:	e0bffc17 	ldw	r2,-16(fp)
   1a7b4:	0085c83a 	sub	r2,zero,r2
   1a7b8:	18800015 	stw	r2,0(r3)
        return -1;
   1a7bc:	00bfffc4 	movi	r2,-1
   1a7c0:	00000c06 	br	1a7f4 <write+0xec>
      }
      return rval;
   1a7c4:	e0bffc17 	ldw	r2,-16(fp)
   1a7c8:	00000a06 	br	1a7f4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a7cc:	001a6cc0 	call	1a6cc <alt_get_errno>
   1a7d0:	1007883a 	mov	r3,r2
   1a7d4:	00800344 	movi	r2,13
   1a7d8:	18800015 	stw	r2,0(r3)
   1a7dc:	00000406 	br	1a7f0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a7e0:	001a6cc0 	call	1a6cc <alt_get_errno>
   1a7e4:	1007883a 	mov	r3,r2
   1a7e8:	00801444 	movi	r2,81
   1a7ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a7f0:	00bfffc4 	movi	r2,-1
}
   1a7f4:	e037883a 	mov	sp,fp
   1a7f8:	dfc00117 	ldw	ra,4(sp)
   1a7fc:	df000017 	ldw	fp,0(sp)
   1a800:	dec00204 	addi	sp,sp,8
   1a804:	f800283a 	ret

0001a808 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a808:	defffd04 	addi	sp,sp,-12
   1a80c:	dfc00215 	stw	ra,8(sp)
   1a810:	df000115 	stw	fp,4(sp)
   1a814:	df000104 	addi	fp,sp,4
   1a818:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a81c:	d1600c04 	addi	r5,gp,-32720
   1a820:	e13fff17 	ldw	r4,-4(fp)
   1a824:	001b4b40 	call	1b4b4 <alt_dev_llist_insert>
}
   1a828:	e037883a 	mov	sp,fp
   1a82c:	dfc00117 	ldw	ra,4(sp)
   1a830:	df000017 	ldw	fp,0(sp)
   1a834:	dec00204 	addi	sp,sp,8
   1a838:	f800283a 	ret

0001a83c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a83c:	defffd04 	addi	sp,sp,-12
   1a840:	dfc00215 	stw	ra,8(sp)
   1a844:	df000115 	stw	fp,4(sp)
   1a848:	df000104 	addi	fp,sp,4
   1a84c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   1a850:	001be600 	call	1be60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a854:	00800044 	movi	r2,1
   1a858:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a85c:	0001883a 	nop
   1a860:	e037883a 	mov	sp,fp
   1a864:	dfc00117 	ldw	ra,4(sp)
   1a868:	df000017 	ldw	fp,0(sp)
   1a86c:	dec00204 	addi	sp,sp,8
   1a870:	f800283a 	ret

0001a874 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a874:	defffe04 	addi	sp,sp,-8
   1a878:	dfc00115 	stw	ra,4(sp)
   1a87c:	df000015 	stw	fp,0(sp)
   1a880:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1a884:	01800044 	movi	r6,1
   1a888:	000b883a 	mov	r5,zero
   1a88c:	010000b4 	movhi	r4,2
   1a890:	21345004 	addi	r4,r4,-11968
   1a894:	001aa280 	call	1aa28 <altera_avalon_jtag_uart_init>
   1a898:	010000b4 	movhi	r4,2
   1a89c:	21344604 	addi	r4,r4,-12008
   1a8a0:	001a8080 	call	1a808 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1a8a4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1a8a8:	0001883a 	nop
}
   1a8ac:	0001883a 	nop
   1a8b0:	e037883a 	mov	sp,fp
   1a8b4:	dfc00117 	ldw	ra,4(sp)
   1a8b8:	df000017 	ldw	fp,0(sp)
   1a8bc:	dec00204 	addi	sp,sp,8
   1a8c0:	f800283a 	ret

0001a8c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a8c4:	defffa04 	addi	sp,sp,-24
   1a8c8:	dfc00515 	stw	ra,20(sp)
   1a8cc:	df000415 	stw	fp,16(sp)
   1a8d0:	df000404 	addi	fp,sp,16
   1a8d4:	e13ffd15 	stw	r4,-12(fp)
   1a8d8:	e17ffe15 	stw	r5,-8(fp)
   1a8dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a8e0:	e0bffd17 	ldw	r2,-12(fp)
   1a8e4:	10800017 	ldw	r2,0(r2)
   1a8e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a8ec:	e0bffc17 	ldw	r2,-16(fp)
   1a8f0:	10c00a04 	addi	r3,r2,40
   1a8f4:	e0bffd17 	ldw	r2,-12(fp)
   1a8f8:	10800217 	ldw	r2,8(r2)
   1a8fc:	100f883a 	mov	r7,r2
   1a900:	e1bfff17 	ldw	r6,-4(fp)
   1a904:	e17ffe17 	ldw	r5,-8(fp)
   1a908:	1809883a 	mov	r4,r3
   1a90c:	001aeec0 	call	1aeec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a910:	e037883a 	mov	sp,fp
   1a914:	dfc00117 	ldw	ra,4(sp)
   1a918:	df000017 	ldw	fp,0(sp)
   1a91c:	dec00204 	addi	sp,sp,8
   1a920:	f800283a 	ret

0001a924 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a924:	defffa04 	addi	sp,sp,-24
   1a928:	dfc00515 	stw	ra,20(sp)
   1a92c:	df000415 	stw	fp,16(sp)
   1a930:	df000404 	addi	fp,sp,16
   1a934:	e13ffd15 	stw	r4,-12(fp)
   1a938:	e17ffe15 	stw	r5,-8(fp)
   1a93c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a940:	e0bffd17 	ldw	r2,-12(fp)
   1a944:	10800017 	ldw	r2,0(r2)
   1a948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a94c:	e0bffc17 	ldw	r2,-16(fp)
   1a950:	10c00a04 	addi	r3,r2,40
   1a954:	e0bffd17 	ldw	r2,-12(fp)
   1a958:	10800217 	ldw	r2,8(r2)
   1a95c:	100f883a 	mov	r7,r2
   1a960:	e1bfff17 	ldw	r6,-4(fp)
   1a964:	e17ffe17 	ldw	r5,-8(fp)
   1a968:	1809883a 	mov	r4,r3
   1a96c:	001b1080 	call	1b108 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a970:	e037883a 	mov	sp,fp
   1a974:	dfc00117 	ldw	ra,4(sp)
   1a978:	df000017 	ldw	fp,0(sp)
   1a97c:	dec00204 	addi	sp,sp,8
   1a980:	f800283a 	ret

0001a984 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a984:	defffc04 	addi	sp,sp,-16
   1a988:	dfc00315 	stw	ra,12(sp)
   1a98c:	df000215 	stw	fp,8(sp)
   1a990:	df000204 	addi	fp,sp,8
   1a994:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a998:	e0bfff17 	ldw	r2,-4(fp)
   1a99c:	10800017 	ldw	r2,0(r2)
   1a9a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a9a4:	e0bffe17 	ldw	r2,-8(fp)
   1a9a8:	10c00a04 	addi	r3,r2,40
   1a9ac:	e0bfff17 	ldw	r2,-4(fp)
   1a9b0:	10800217 	ldw	r2,8(r2)
   1a9b4:	100b883a 	mov	r5,r2
   1a9b8:	1809883a 	mov	r4,r3
   1a9bc:	001ad940 	call	1ad94 <altera_avalon_jtag_uart_close>
}
   1a9c0:	e037883a 	mov	sp,fp
   1a9c4:	dfc00117 	ldw	ra,4(sp)
   1a9c8:	df000017 	ldw	fp,0(sp)
   1a9cc:	dec00204 	addi	sp,sp,8
   1a9d0:	f800283a 	ret

0001a9d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a9d4:	defffa04 	addi	sp,sp,-24
   1a9d8:	dfc00515 	stw	ra,20(sp)
   1a9dc:	df000415 	stw	fp,16(sp)
   1a9e0:	df000404 	addi	fp,sp,16
   1a9e4:	e13ffd15 	stw	r4,-12(fp)
   1a9e8:	e17ffe15 	stw	r5,-8(fp)
   1a9ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a9f0:	e0bffd17 	ldw	r2,-12(fp)
   1a9f4:	10800017 	ldw	r2,0(r2)
   1a9f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a9fc:	e0bffc17 	ldw	r2,-16(fp)
   1aa00:	10800a04 	addi	r2,r2,40
   1aa04:	e1bfff17 	ldw	r6,-4(fp)
   1aa08:	e17ffe17 	ldw	r5,-8(fp)
   1aa0c:	1009883a 	mov	r4,r2
   1aa10:	001adfc0 	call	1adfc <altera_avalon_jtag_uart_ioctl>
}
   1aa14:	e037883a 	mov	sp,fp
   1aa18:	dfc00117 	ldw	ra,4(sp)
   1aa1c:	df000017 	ldw	fp,0(sp)
   1aa20:	dec00204 	addi	sp,sp,8
   1aa24:	f800283a 	ret

0001aa28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1aa28:	defffa04 	addi	sp,sp,-24
   1aa2c:	dfc00515 	stw	ra,20(sp)
   1aa30:	df000415 	stw	fp,16(sp)
   1aa34:	df000404 	addi	fp,sp,16
   1aa38:	e13ffd15 	stw	r4,-12(fp)
   1aa3c:	e17ffe15 	stw	r5,-8(fp)
   1aa40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1aa44:	e0bffd17 	ldw	r2,-12(fp)
   1aa48:	00c00044 	movi	r3,1
   1aa4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1aa50:	e0bffd17 	ldw	r2,-12(fp)
   1aa54:	10800017 	ldw	r2,0(r2)
   1aa58:	10800104 	addi	r2,r2,4
   1aa5c:	1007883a 	mov	r3,r2
   1aa60:	e0bffd17 	ldw	r2,-12(fp)
   1aa64:	10800817 	ldw	r2,32(r2)
   1aa68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1aa6c:	e0bffe17 	ldw	r2,-8(fp)
   1aa70:	e0ffff17 	ldw	r3,-4(fp)
   1aa74:	d8000015 	stw	zero,0(sp)
   1aa78:	e1fffd17 	ldw	r7,-12(fp)
   1aa7c:	018000b4 	movhi	r6,2
   1aa80:	31aaba04 	addi	r6,r6,-21784
   1aa84:	180b883a 	mov	r5,r3
   1aa88:	1009883a 	mov	r4,r2
   1aa8c:	001b6380 	call	1b638 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1aa90:	e0bffd17 	ldw	r2,-12(fp)
   1aa94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1aa98:	e0bffd17 	ldw	r2,-12(fp)
   1aa9c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1aaa0:	d0e6df17 	ldw	r3,-25732(gp)
   1aaa4:	e1fffd17 	ldw	r7,-12(fp)
   1aaa8:	018000b4 	movhi	r6,2
   1aaac:	31ab3d04 	addi	r6,r6,-21260
   1aab0:	180b883a 	mov	r5,r3
   1aab4:	1009883a 	mov	r4,r2
   1aab8:	001b32c0 	call	1b32c <alt_alarm_start>
   1aabc:	1000040e 	bge	r2,zero,1aad0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1aac0:	e0fffd17 	ldw	r3,-12(fp)
   1aac4:	00a00034 	movhi	r2,32768
   1aac8:	10bfffc4 	addi	r2,r2,-1
   1aacc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1aad0:	0001883a 	nop
   1aad4:	e037883a 	mov	sp,fp
   1aad8:	dfc00117 	ldw	ra,4(sp)
   1aadc:	df000017 	ldw	fp,0(sp)
   1aae0:	dec00204 	addi	sp,sp,8
   1aae4:	f800283a 	ret

0001aae8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1aae8:	defff804 	addi	sp,sp,-32
   1aaec:	df000715 	stw	fp,28(sp)
   1aaf0:	df000704 	addi	fp,sp,28
   1aaf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1aaf8:	e0bfff17 	ldw	r2,-4(fp)
   1aafc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1ab00:	e0bffb17 	ldw	r2,-20(fp)
   1ab04:	10800017 	ldw	r2,0(r2)
   1ab08:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ab0c:	e0bffc17 	ldw	r2,-16(fp)
   1ab10:	10800104 	addi	r2,r2,4
   1ab14:	10800037 	ldwio	r2,0(r2)
   1ab18:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ab1c:	e0bffd17 	ldw	r2,-12(fp)
   1ab20:	1080c00c 	andi	r2,r2,768
   1ab24:	10006d26 	beq	r2,zero,1acdc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ab28:	e0bffd17 	ldw	r2,-12(fp)
   1ab2c:	1080400c 	andi	r2,r2,256
   1ab30:	10003526 	beq	r2,zero,1ac08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ab34:	00800074 	movhi	r2,1
   1ab38:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ab3c:	e0bffb17 	ldw	r2,-20(fp)
   1ab40:	10800a17 	ldw	r2,40(r2)
   1ab44:	10800044 	addi	r2,r2,1
   1ab48:	1081ffcc 	andi	r2,r2,2047
   1ab4c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1ab50:	e0bffb17 	ldw	r2,-20(fp)
   1ab54:	10c00b17 	ldw	r3,44(r2)
   1ab58:	e0bffe17 	ldw	r2,-8(fp)
   1ab5c:	18801526 	beq	r3,r2,1abb4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ab60:	e0bffc17 	ldw	r2,-16(fp)
   1ab64:	10800037 	ldwio	r2,0(r2)
   1ab68:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ab6c:	e0bff917 	ldw	r2,-28(fp)
   1ab70:	10a0000c 	andi	r2,r2,32768
   1ab74:	10001126 	beq	r2,zero,1abbc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ab78:	e0bffb17 	ldw	r2,-20(fp)
   1ab7c:	10800a17 	ldw	r2,40(r2)
   1ab80:	e0fff917 	ldw	r3,-28(fp)
   1ab84:	1809883a 	mov	r4,r3
   1ab88:	e0fffb17 	ldw	r3,-20(fp)
   1ab8c:	1885883a 	add	r2,r3,r2
   1ab90:	10800e04 	addi	r2,r2,56
   1ab94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ab98:	e0bffb17 	ldw	r2,-20(fp)
   1ab9c:	10800a17 	ldw	r2,40(r2)
   1aba0:	10800044 	addi	r2,r2,1
   1aba4:	10c1ffcc 	andi	r3,r2,2047
   1aba8:	e0bffb17 	ldw	r2,-20(fp)
   1abac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1abb0:	003fe206 	br	1ab3c <__alt_data_end+0xfc01ab3c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1abb4:	0001883a 	nop
   1abb8:	00000106 	br	1abc0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1abbc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1abc0:	e0bff917 	ldw	r2,-28(fp)
   1abc4:	10bfffec 	andhi	r2,r2,65535
   1abc8:	10000f26 	beq	r2,zero,1ac08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1abcc:	e0bffb17 	ldw	r2,-20(fp)
   1abd0:	10c00817 	ldw	r3,32(r2)
   1abd4:	00bfff84 	movi	r2,-2
   1abd8:	1886703a 	and	r3,r3,r2
   1abdc:	e0bffb17 	ldw	r2,-20(fp)
   1abe0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1abe4:	e0bffc17 	ldw	r2,-16(fp)
   1abe8:	10800104 	addi	r2,r2,4
   1abec:	1007883a 	mov	r3,r2
   1abf0:	e0bffb17 	ldw	r2,-20(fp)
   1abf4:	10800817 	ldw	r2,32(r2)
   1abf8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1abfc:	e0bffc17 	ldw	r2,-16(fp)
   1ac00:	10800104 	addi	r2,r2,4
   1ac04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1ac08:	e0bffd17 	ldw	r2,-12(fp)
   1ac0c:	1080800c 	andi	r2,r2,512
   1ac10:	103fbe26 	beq	r2,zero,1ab0c <__alt_data_end+0xfc01ab0c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ac14:	e0bffd17 	ldw	r2,-12(fp)
   1ac18:	1004d43a 	srli	r2,r2,16
   1ac1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ac20:	00001406 	br	1ac74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1ac24:	e0bffc17 	ldw	r2,-16(fp)
   1ac28:	e0fffb17 	ldw	r3,-20(fp)
   1ac2c:	18c00d17 	ldw	r3,52(r3)
   1ac30:	e13ffb17 	ldw	r4,-20(fp)
   1ac34:	20c7883a 	add	r3,r4,r3
   1ac38:	18c20e04 	addi	r3,r3,2104
   1ac3c:	18c00003 	ldbu	r3,0(r3)
   1ac40:	18c03fcc 	andi	r3,r3,255
   1ac44:	18c0201c 	xori	r3,r3,128
   1ac48:	18ffe004 	addi	r3,r3,-128
   1ac4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ac50:	e0bffb17 	ldw	r2,-20(fp)
   1ac54:	10800d17 	ldw	r2,52(r2)
   1ac58:	10800044 	addi	r2,r2,1
   1ac5c:	10c1ffcc 	andi	r3,r2,2047
   1ac60:	e0bffb17 	ldw	r2,-20(fp)
   1ac64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1ac68:	e0bffa17 	ldw	r2,-24(fp)
   1ac6c:	10bfffc4 	addi	r2,r2,-1
   1ac70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ac74:	e0bffa17 	ldw	r2,-24(fp)
   1ac78:	10000526 	beq	r2,zero,1ac90 <altera_avalon_jtag_uart_irq+0x1a8>
   1ac7c:	e0bffb17 	ldw	r2,-20(fp)
   1ac80:	10c00d17 	ldw	r3,52(r2)
   1ac84:	e0bffb17 	ldw	r2,-20(fp)
   1ac88:	10800c17 	ldw	r2,48(r2)
   1ac8c:	18bfe51e 	bne	r3,r2,1ac24 <__alt_data_end+0xfc01ac24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1ac90:	e0bffa17 	ldw	r2,-24(fp)
   1ac94:	103f9d26 	beq	r2,zero,1ab0c <__alt_data_end+0xfc01ab0c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ac98:	e0bffb17 	ldw	r2,-20(fp)
   1ac9c:	10c00817 	ldw	r3,32(r2)
   1aca0:	00bfff44 	movi	r2,-3
   1aca4:	1886703a 	and	r3,r3,r2
   1aca8:	e0bffb17 	ldw	r2,-20(fp)
   1acac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1acb0:	e0bffb17 	ldw	r2,-20(fp)
   1acb4:	10800017 	ldw	r2,0(r2)
   1acb8:	10800104 	addi	r2,r2,4
   1acbc:	1007883a 	mov	r3,r2
   1acc0:	e0bffb17 	ldw	r2,-20(fp)
   1acc4:	10800817 	ldw	r2,32(r2)
   1acc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1accc:	e0bffc17 	ldw	r2,-16(fp)
   1acd0:	10800104 	addi	r2,r2,4
   1acd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1acd8:	003f8c06 	br	1ab0c <__alt_data_end+0xfc01ab0c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1acdc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1ace0:	0001883a 	nop
   1ace4:	e037883a 	mov	sp,fp
   1ace8:	df000017 	ldw	fp,0(sp)
   1acec:	dec00104 	addi	sp,sp,4
   1acf0:	f800283a 	ret

0001acf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1acf4:	defff804 	addi	sp,sp,-32
   1acf8:	df000715 	stw	fp,28(sp)
   1acfc:	df000704 	addi	fp,sp,28
   1ad00:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ad04:	e0bffb17 	ldw	r2,-20(fp)
   1ad08:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ad0c:	e0bff917 	ldw	r2,-28(fp)
   1ad10:	10800017 	ldw	r2,0(r2)
   1ad14:	10800104 	addi	r2,r2,4
   1ad18:	10800037 	ldwio	r2,0(r2)
   1ad1c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ad20:	e0bffa17 	ldw	r2,-24(fp)
   1ad24:	1081000c 	andi	r2,r2,1024
   1ad28:	10000b26 	beq	r2,zero,1ad58 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ad2c:	e0bff917 	ldw	r2,-28(fp)
   1ad30:	10800017 	ldw	r2,0(r2)
   1ad34:	10800104 	addi	r2,r2,4
   1ad38:	1007883a 	mov	r3,r2
   1ad3c:	e0bff917 	ldw	r2,-28(fp)
   1ad40:	10800817 	ldw	r2,32(r2)
   1ad44:	10810014 	ori	r2,r2,1024
   1ad48:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1ad4c:	e0bff917 	ldw	r2,-28(fp)
   1ad50:	10000915 	stw	zero,36(r2)
   1ad54:	00000a06 	br	1ad80 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ad58:	e0bff917 	ldw	r2,-28(fp)
   1ad5c:	10c00917 	ldw	r3,36(r2)
   1ad60:	00a00034 	movhi	r2,32768
   1ad64:	10bfff04 	addi	r2,r2,-4
   1ad68:	10c00536 	bltu	r2,r3,1ad80 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1ad6c:	e0bff917 	ldw	r2,-28(fp)
   1ad70:	10800917 	ldw	r2,36(r2)
   1ad74:	10c00044 	addi	r3,r2,1
   1ad78:	e0bff917 	ldw	r2,-28(fp)
   1ad7c:	10c00915 	stw	r3,36(r2)
   1ad80:	d0a6df17 	ldw	r2,-25732(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1ad84:	e037883a 	mov	sp,fp
   1ad88:	df000017 	ldw	fp,0(sp)
   1ad8c:	dec00104 	addi	sp,sp,4
   1ad90:	f800283a 	ret

0001ad94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1ad94:	defffd04 	addi	sp,sp,-12
   1ad98:	df000215 	stw	fp,8(sp)
   1ad9c:	df000204 	addi	fp,sp,8
   1ada0:	e13ffe15 	stw	r4,-8(fp)
   1ada4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ada8:	00000506 	br	1adc0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1adac:	e0bfff17 	ldw	r2,-4(fp)
   1adb0:	1090000c 	andi	r2,r2,16384
   1adb4:	10000226 	beq	r2,zero,1adc0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1adb8:	00bffd44 	movi	r2,-11
   1adbc:	00000b06 	br	1adec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1adc0:	e0bffe17 	ldw	r2,-8(fp)
   1adc4:	10c00d17 	ldw	r3,52(r2)
   1adc8:	e0bffe17 	ldw	r2,-8(fp)
   1adcc:	10800c17 	ldw	r2,48(r2)
   1add0:	18800526 	beq	r3,r2,1ade8 <altera_avalon_jtag_uart_close+0x54>
   1add4:	e0bffe17 	ldw	r2,-8(fp)
   1add8:	10c00917 	ldw	r3,36(r2)
   1addc:	e0bffe17 	ldw	r2,-8(fp)
   1ade0:	10800117 	ldw	r2,4(r2)
   1ade4:	18bff136 	bltu	r3,r2,1adac <__alt_data_end+0xfc01adac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1ade8:	0005883a 	mov	r2,zero
}
   1adec:	e037883a 	mov	sp,fp
   1adf0:	df000017 	ldw	fp,0(sp)
   1adf4:	dec00104 	addi	sp,sp,4
   1adf8:	f800283a 	ret

0001adfc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1adfc:	defffa04 	addi	sp,sp,-24
   1ae00:	df000515 	stw	fp,20(sp)
   1ae04:	df000504 	addi	fp,sp,20
   1ae08:	e13ffd15 	stw	r4,-12(fp)
   1ae0c:	e17ffe15 	stw	r5,-8(fp)
   1ae10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1ae14:	00bff9c4 	movi	r2,-25
   1ae18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1ae1c:	e0bffe17 	ldw	r2,-8(fp)
   1ae20:	10da8060 	cmpeqi	r3,r2,27137
   1ae24:	1800031e 	bne	r3,zero,1ae34 <altera_avalon_jtag_uart_ioctl+0x38>
   1ae28:	109a80a0 	cmpeqi	r2,r2,27138
   1ae2c:	1000181e 	bne	r2,zero,1ae90 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1ae30:	00002906 	br	1aed8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1ae34:	e0bffd17 	ldw	r2,-12(fp)
   1ae38:	10c00117 	ldw	r3,4(r2)
   1ae3c:	00a00034 	movhi	r2,32768
   1ae40:	10bfffc4 	addi	r2,r2,-1
   1ae44:	18802126 	beq	r3,r2,1aecc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1ae48:	e0bfff17 	ldw	r2,-4(fp)
   1ae4c:	10800017 	ldw	r2,0(r2)
   1ae50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1ae54:	e0bffc17 	ldw	r2,-16(fp)
   1ae58:	10800090 	cmplti	r2,r2,2
   1ae5c:	1000061e 	bne	r2,zero,1ae78 <altera_avalon_jtag_uart_ioctl+0x7c>
   1ae60:	e0fffc17 	ldw	r3,-16(fp)
   1ae64:	00a00034 	movhi	r2,32768
   1ae68:	10bfffc4 	addi	r2,r2,-1
   1ae6c:	18800226 	beq	r3,r2,1ae78 <altera_avalon_jtag_uart_ioctl+0x7c>
   1ae70:	e0bffc17 	ldw	r2,-16(fp)
   1ae74:	00000206 	br	1ae80 <altera_avalon_jtag_uart_ioctl+0x84>
   1ae78:	00a00034 	movhi	r2,32768
   1ae7c:	10bfff84 	addi	r2,r2,-2
   1ae80:	e0fffd17 	ldw	r3,-12(fp)
   1ae84:	18800115 	stw	r2,4(r3)
      rc = 0;
   1ae88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1ae8c:	00000f06 	br	1aecc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1ae90:	e0bffd17 	ldw	r2,-12(fp)
   1ae94:	10c00117 	ldw	r3,4(r2)
   1ae98:	00a00034 	movhi	r2,32768
   1ae9c:	10bfffc4 	addi	r2,r2,-1
   1aea0:	18800c26 	beq	r3,r2,1aed4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1aea4:	e0bffd17 	ldw	r2,-12(fp)
   1aea8:	10c00917 	ldw	r3,36(r2)
   1aeac:	e0bffd17 	ldw	r2,-12(fp)
   1aeb0:	10800117 	ldw	r2,4(r2)
   1aeb4:	1885803a 	cmpltu	r2,r3,r2
   1aeb8:	10c03fcc 	andi	r3,r2,255
   1aebc:	e0bfff17 	ldw	r2,-4(fp)
   1aec0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1aec4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1aec8:	00000206 	br	1aed4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1aecc:	0001883a 	nop
   1aed0:	00000106 	br	1aed8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1aed4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1aed8:	e0bffb17 	ldw	r2,-20(fp)
}
   1aedc:	e037883a 	mov	sp,fp
   1aee0:	df000017 	ldw	fp,0(sp)
   1aee4:	dec00104 	addi	sp,sp,4
   1aee8:	f800283a 	ret

0001aeec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1aeec:	defff304 	addi	sp,sp,-52
   1aef0:	dfc00c15 	stw	ra,48(sp)
   1aef4:	df000b15 	stw	fp,44(sp)
   1aef8:	df000b04 	addi	fp,sp,44
   1aefc:	e13ffc15 	stw	r4,-16(fp)
   1af00:	e17ffd15 	stw	r5,-12(fp)
   1af04:	e1bffe15 	stw	r6,-8(fp)
   1af08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1af0c:	e0bffd17 	ldw	r2,-12(fp)
   1af10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1af14:	00004706 	br	1b034 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1af18:	e0bffc17 	ldw	r2,-16(fp)
   1af1c:	10800a17 	ldw	r2,40(r2)
   1af20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1af24:	e0bffc17 	ldw	r2,-16(fp)
   1af28:	10800b17 	ldw	r2,44(r2)
   1af2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1af30:	e0fff717 	ldw	r3,-36(fp)
   1af34:	e0bff817 	ldw	r2,-32(fp)
   1af38:	18800536 	bltu	r3,r2,1af50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1af3c:	e0fff717 	ldw	r3,-36(fp)
   1af40:	e0bff817 	ldw	r2,-32(fp)
   1af44:	1885c83a 	sub	r2,r3,r2
   1af48:	e0bff615 	stw	r2,-40(fp)
   1af4c:	00000406 	br	1af60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1af50:	00c20004 	movi	r3,2048
   1af54:	e0bff817 	ldw	r2,-32(fp)
   1af58:	1885c83a 	sub	r2,r3,r2
   1af5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1af60:	e0bff617 	ldw	r2,-40(fp)
   1af64:	10001e26 	beq	r2,zero,1afe0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1af68:	e0fffe17 	ldw	r3,-8(fp)
   1af6c:	e0bff617 	ldw	r2,-40(fp)
   1af70:	1880022e 	bgeu	r3,r2,1af7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1af74:	e0bffe17 	ldw	r2,-8(fp)
   1af78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1af7c:	e0bffc17 	ldw	r2,-16(fp)
   1af80:	10c00e04 	addi	r3,r2,56
   1af84:	e0bff817 	ldw	r2,-32(fp)
   1af88:	1885883a 	add	r2,r3,r2
   1af8c:	e1bff617 	ldw	r6,-40(fp)
   1af90:	100b883a 	mov	r5,r2
   1af94:	e13ff517 	ldw	r4,-44(fp)
   1af98:	0012cd00 	call	12cd0 <memcpy>
      ptr   += n;
   1af9c:	e0fff517 	ldw	r3,-44(fp)
   1afa0:	e0bff617 	ldw	r2,-40(fp)
   1afa4:	1885883a 	add	r2,r3,r2
   1afa8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1afac:	e0fffe17 	ldw	r3,-8(fp)
   1afb0:	e0bff617 	ldw	r2,-40(fp)
   1afb4:	1885c83a 	sub	r2,r3,r2
   1afb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1afbc:	e0fff817 	ldw	r3,-32(fp)
   1afc0:	e0bff617 	ldw	r2,-40(fp)
   1afc4:	1885883a 	add	r2,r3,r2
   1afc8:	10c1ffcc 	andi	r3,r2,2047
   1afcc:	e0bffc17 	ldw	r2,-16(fp)
   1afd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1afd4:	e0bffe17 	ldw	r2,-8(fp)
   1afd8:	00bfcf16 	blt	zero,r2,1af18 <__alt_data_end+0xfc01af18>
   1afdc:	00000106 	br	1afe4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1afe0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1afe4:	e0fff517 	ldw	r3,-44(fp)
   1afe8:	e0bffd17 	ldw	r2,-12(fp)
   1afec:	1880141e 	bne	r3,r2,1b040 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1aff0:	e0bfff17 	ldw	r2,-4(fp)
   1aff4:	1090000c 	andi	r2,r2,16384
   1aff8:	1000131e 	bne	r2,zero,1b048 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1affc:	0001883a 	nop
   1b000:	e0bffc17 	ldw	r2,-16(fp)
   1b004:	10c00a17 	ldw	r3,40(r2)
   1b008:	e0bff717 	ldw	r2,-36(fp)
   1b00c:	1880051e 	bne	r3,r2,1b024 <altera_avalon_jtag_uart_read+0x138>
   1b010:	e0bffc17 	ldw	r2,-16(fp)
   1b014:	10c00917 	ldw	r3,36(r2)
   1b018:	e0bffc17 	ldw	r2,-16(fp)
   1b01c:	10800117 	ldw	r2,4(r2)
   1b020:	18bff736 	bltu	r3,r2,1b000 <__alt_data_end+0xfc01b000>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b024:	e0bffc17 	ldw	r2,-16(fp)
   1b028:	10c00a17 	ldw	r3,40(r2)
   1b02c:	e0bff717 	ldw	r2,-36(fp)
   1b030:	18800726 	beq	r3,r2,1b050 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b034:	e0bffe17 	ldw	r2,-8(fp)
   1b038:	00bfb716 	blt	zero,r2,1af18 <__alt_data_end+0xfc01af18>
   1b03c:	00000506 	br	1b054 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1b040:	0001883a 	nop
   1b044:	00000306 	br	1b054 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1b048:	0001883a 	nop
   1b04c:	00000106 	br	1b054 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1b050:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b054:	e0fff517 	ldw	r3,-44(fp)
   1b058:	e0bffd17 	ldw	r2,-12(fp)
   1b05c:	18801826 	beq	r3,r2,1b0c0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b060:	0005303a 	rdctl	r2,status
   1b064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b068:	e0fffb17 	ldw	r3,-20(fp)
   1b06c:	00bfff84 	movi	r2,-2
   1b070:	1884703a 	and	r2,r3,r2
   1b074:	1001703a 	wrctl	status,r2
  
  return context;
   1b078:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b07c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b080:	e0bffc17 	ldw	r2,-16(fp)
   1b084:	10800817 	ldw	r2,32(r2)
   1b088:	10c00054 	ori	r3,r2,1
   1b08c:	e0bffc17 	ldw	r2,-16(fp)
   1b090:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b094:	e0bffc17 	ldw	r2,-16(fp)
   1b098:	10800017 	ldw	r2,0(r2)
   1b09c:	10800104 	addi	r2,r2,4
   1b0a0:	1007883a 	mov	r3,r2
   1b0a4:	e0bffc17 	ldw	r2,-16(fp)
   1b0a8:	10800817 	ldw	r2,32(r2)
   1b0ac:	18800035 	stwio	r2,0(r3)
   1b0b0:	e0bffa17 	ldw	r2,-24(fp)
   1b0b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b0b8:	e0bff917 	ldw	r2,-28(fp)
   1b0bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b0c0:	e0fff517 	ldw	r3,-44(fp)
   1b0c4:	e0bffd17 	ldw	r2,-12(fp)
   1b0c8:	18800426 	beq	r3,r2,1b0dc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1b0cc:	e0fff517 	ldw	r3,-44(fp)
   1b0d0:	e0bffd17 	ldw	r2,-12(fp)
   1b0d4:	1885c83a 	sub	r2,r3,r2
   1b0d8:	00000606 	br	1b0f4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1b0dc:	e0bfff17 	ldw	r2,-4(fp)
   1b0e0:	1090000c 	andi	r2,r2,16384
   1b0e4:	10000226 	beq	r2,zero,1b0f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1b0e8:	00bffd44 	movi	r2,-11
   1b0ec:	00000106 	br	1b0f4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1b0f0:	00bffec4 	movi	r2,-5
}
   1b0f4:	e037883a 	mov	sp,fp
   1b0f8:	dfc00117 	ldw	ra,4(sp)
   1b0fc:	df000017 	ldw	fp,0(sp)
   1b100:	dec00204 	addi	sp,sp,8
   1b104:	f800283a 	ret

0001b108 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b108:	defff304 	addi	sp,sp,-52
   1b10c:	dfc00c15 	stw	ra,48(sp)
   1b110:	df000b15 	stw	fp,44(sp)
   1b114:	df000b04 	addi	fp,sp,44
   1b118:	e13ffc15 	stw	r4,-16(fp)
   1b11c:	e17ffd15 	stw	r5,-12(fp)
   1b120:	e1bffe15 	stw	r6,-8(fp)
   1b124:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b128:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b12c:	e0bffd17 	ldw	r2,-12(fp)
   1b130:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b134:	00003706 	br	1b214 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b138:	e0bffc17 	ldw	r2,-16(fp)
   1b13c:	10800c17 	ldw	r2,48(r2)
   1b140:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1b144:	e0bffc17 	ldw	r2,-16(fp)
   1b148:	10800d17 	ldw	r2,52(r2)
   1b14c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1b150:	e0fff917 	ldw	r3,-28(fp)
   1b154:	e0bff517 	ldw	r2,-44(fp)
   1b158:	1880062e 	bgeu	r3,r2,1b174 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b15c:	e0fff517 	ldw	r3,-44(fp)
   1b160:	e0bff917 	ldw	r2,-28(fp)
   1b164:	1885c83a 	sub	r2,r3,r2
   1b168:	10bfffc4 	addi	r2,r2,-1
   1b16c:	e0bff615 	stw	r2,-40(fp)
   1b170:	00000b06 	br	1b1a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1b174:	e0bff517 	ldw	r2,-44(fp)
   1b178:	10000526 	beq	r2,zero,1b190 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b17c:	00c20004 	movi	r3,2048
   1b180:	e0bff917 	ldw	r2,-28(fp)
   1b184:	1885c83a 	sub	r2,r3,r2
   1b188:	e0bff615 	stw	r2,-40(fp)
   1b18c:	00000406 	br	1b1a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b190:	00c1ffc4 	movi	r3,2047
   1b194:	e0bff917 	ldw	r2,-28(fp)
   1b198:	1885c83a 	sub	r2,r3,r2
   1b19c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1b1a0:	e0bff617 	ldw	r2,-40(fp)
   1b1a4:	10001e26 	beq	r2,zero,1b220 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1b1a8:	e0fffe17 	ldw	r3,-8(fp)
   1b1ac:	e0bff617 	ldw	r2,-40(fp)
   1b1b0:	1880022e 	bgeu	r3,r2,1b1bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1b1b4:	e0bffe17 	ldw	r2,-8(fp)
   1b1b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b1bc:	e0bffc17 	ldw	r2,-16(fp)
   1b1c0:	10c20e04 	addi	r3,r2,2104
   1b1c4:	e0bff917 	ldw	r2,-28(fp)
   1b1c8:	1885883a 	add	r2,r3,r2
   1b1cc:	e1bff617 	ldw	r6,-40(fp)
   1b1d0:	e17ffd17 	ldw	r5,-12(fp)
   1b1d4:	1009883a 	mov	r4,r2
   1b1d8:	0012cd00 	call	12cd0 <memcpy>
      ptr   += n;
   1b1dc:	e0fffd17 	ldw	r3,-12(fp)
   1b1e0:	e0bff617 	ldw	r2,-40(fp)
   1b1e4:	1885883a 	add	r2,r3,r2
   1b1e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1b1ec:	e0fffe17 	ldw	r3,-8(fp)
   1b1f0:	e0bff617 	ldw	r2,-40(fp)
   1b1f4:	1885c83a 	sub	r2,r3,r2
   1b1f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b1fc:	e0fff917 	ldw	r3,-28(fp)
   1b200:	e0bff617 	ldw	r2,-40(fp)
   1b204:	1885883a 	add	r2,r3,r2
   1b208:	10c1ffcc 	andi	r3,r2,2047
   1b20c:	e0bffc17 	ldw	r2,-16(fp)
   1b210:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b214:	e0bffe17 	ldw	r2,-8(fp)
   1b218:	00bfc716 	blt	zero,r2,1b138 <__alt_data_end+0xfc01b138>
   1b21c:	00000106 	br	1b224 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1b220:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b224:	0005303a 	rdctl	r2,status
   1b228:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b22c:	e0fffb17 	ldw	r3,-20(fp)
   1b230:	00bfff84 	movi	r2,-2
   1b234:	1884703a 	and	r2,r3,r2
   1b238:	1001703a 	wrctl	status,r2
  
  return context;
   1b23c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b240:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b244:	e0bffc17 	ldw	r2,-16(fp)
   1b248:	10800817 	ldw	r2,32(r2)
   1b24c:	10c00094 	ori	r3,r2,2
   1b250:	e0bffc17 	ldw	r2,-16(fp)
   1b254:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b258:	e0bffc17 	ldw	r2,-16(fp)
   1b25c:	10800017 	ldw	r2,0(r2)
   1b260:	10800104 	addi	r2,r2,4
   1b264:	1007883a 	mov	r3,r2
   1b268:	e0bffc17 	ldw	r2,-16(fp)
   1b26c:	10800817 	ldw	r2,32(r2)
   1b270:	18800035 	stwio	r2,0(r3)
   1b274:	e0bffa17 	ldw	r2,-24(fp)
   1b278:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b27c:	e0bff817 	ldw	r2,-32(fp)
   1b280:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b284:	e0bffe17 	ldw	r2,-8(fp)
   1b288:	0080100e 	bge	zero,r2,1b2cc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1b28c:	e0bfff17 	ldw	r2,-4(fp)
   1b290:	1090000c 	andi	r2,r2,16384
   1b294:	1000101e 	bne	r2,zero,1b2d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b298:	0001883a 	nop
   1b29c:	e0bffc17 	ldw	r2,-16(fp)
   1b2a0:	10c00d17 	ldw	r3,52(r2)
   1b2a4:	e0bff517 	ldw	r2,-44(fp)
   1b2a8:	1880051e 	bne	r3,r2,1b2c0 <altera_avalon_jtag_uart_write+0x1b8>
   1b2ac:	e0bffc17 	ldw	r2,-16(fp)
   1b2b0:	10c00917 	ldw	r3,36(r2)
   1b2b4:	e0bffc17 	ldw	r2,-16(fp)
   1b2b8:	10800117 	ldw	r2,4(r2)
   1b2bc:	18bff736 	bltu	r3,r2,1b29c <__alt_data_end+0xfc01b29c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1b2c0:	e0bffc17 	ldw	r2,-16(fp)
   1b2c4:	10800917 	ldw	r2,36(r2)
   1b2c8:	1000051e 	bne	r2,zero,1b2e0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1b2cc:	e0bffe17 	ldw	r2,-8(fp)
   1b2d0:	00bfd016 	blt	zero,r2,1b214 <__alt_data_end+0xfc01b214>
   1b2d4:	00000306 	br	1b2e4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1b2d8:	0001883a 	nop
   1b2dc:	00000106 	br	1b2e4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1b2e0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b2e4:	e0fffd17 	ldw	r3,-12(fp)
   1b2e8:	e0bff717 	ldw	r2,-36(fp)
   1b2ec:	18800426 	beq	r3,r2,1b300 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1b2f0:	e0fffd17 	ldw	r3,-12(fp)
   1b2f4:	e0bff717 	ldw	r2,-36(fp)
   1b2f8:	1885c83a 	sub	r2,r3,r2
   1b2fc:	00000606 	br	1b318 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1b300:	e0bfff17 	ldw	r2,-4(fp)
   1b304:	1090000c 	andi	r2,r2,16384
   1b308:	10000226 	beq	r2,zero,1b314 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1b30c:	00bffd44 	movi	r2,-11
   1b310:	00000106 	br	1b318 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1b314:	00bffec4 	movi	r2,-5
}
   1b318:	e037883a 	mov	sp,fp
   1b31c:	dfc00117 	ldw	ra,4(sp)
   1b320:	df000017 	ldw	fp,0(sp)
   1b324:	dec00204 	addi	sp,sp,8
   1b328:	f800283a 	ret

0001b32c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b32c:	defff504 	addi	sp,sp,-44
   1b330:	df000a15 	stw	fp,40(sp)
   1b334:	df000a04 	addi	fp,sp,40
   1b338:	e13ffc15 	stw	r4,-16(fp)
   1b33c:	e17ffd15 	stw	r5,-12(fp)
   1b340:	e1bffe15 	stw	r6,-8(fp)
   1b344:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b348:	e03ff615 	stw	zero,-40(fp)
   1b34c:	d0a6df17 	ldw	r2,-25732(gp)
  
  if (alt_ticks_per_second ())
   1b350:	10003c26 	beq	r2,zero,1b444 <alt_alarm_start+0x118>
  {
    if (alarm)
   1b354:	e0bffc17 	ldw	r2,-16(fp)
   1b358:	10003826 	beq	r2,zero,1b43c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1b35c:	e0bffc17 	ldw	r2,-16(fp)
   1b360:	e0fffe17 	ldw	r3,-8(fp)
   1b364:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b368:	e0bffc17 	ldw	r2,-16(fp)
   1b36c:	e0ffff17 	ldw	r3,-4(fp)
   1b370:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b374:	0005303a 	rdctl	r2,status
   1b378:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b37c:	e0fff917 	ldw	r3,-28(fp)
   1b380:	00bfff84 	movi	r2,-2
   1b384:	1884703a 	and	r2,r3,r2
   1b388:	1001703a 	wrctl	status,r2
  
  return context;
   1b38c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1b390:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b394:	d0a6e017 	ldw	r2,-25728(gp)
      
      current_nticks = alt_nticks();
   1b398:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b39c:	e0fffd17 	ldw	r3,-12(fp)
   1b3a0:	e0bff617 	ldw	r2,-40(fp)
   1b3a4:	1885883a 	add	r2,r3,r2
   1b3a8:	10c00044 	addi	r3,r2,1
   1b3ac:	e0bffc17 	ldw	r2,-16(fp)
   1b3b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b3b4:	e0bffc17 	ldw	r2,-16(fp)
   1b3b8:	10c00217 	ldw	r3,8(r2)
   1b3bc:	e0bff617 	ldw	r2,-40(fp)
   1b3c0:	1880042e 	bgeu	r3,r2,1b3d4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1b3c4:	e0bffc17 	ldw	r2,-16(fp)
   1b3c8:	00c00044 	movi	r3,1
   1b3cc:	10c00405 	stb	r3,16(r2)
   1b3d0:	00000206 	br	1b3dc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1b3d4:	e0bffc17 	ldw	r2,-16(fp)
   1b3d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b3dc:	e0bffc17 	ldw	r2,-16(fp)
   1b3e0:	d0e01204 	addi	r3,gp,-32696
   1b3e4:	e0fffa15 	stw	r3,-24(fp)
   1b3e8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b3ec:	e0bffb17 	ldw	r2,-20(fp)
   1b3f0:	e0fffa17 	ldw	r3,-24(fp)
   1b3f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b3f8:	e0bffa17 	ldw	r2,-24(fp)
   1b3fc:	10c00017 	ldw	r3,0(r2)
   1b400:	e0bffb17 	ldw	r2,-20(fp)
   1b404:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b408:	e0bffa17 	ldw	r2,-24(fp)
   1b40c:	10800017 	ldw	r2,0(r2)
   1b410:	e0fffb17 	ldw	r3,-20(fp)
   1b414:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b418:	e0bffa17 	ldw	r2,-24(fp)
   1b41c:	e0fffb17 	ldw	r3,-20(fp)
   1b420:	10c00015 	stw	r3,0(r2)
   1b424:	e0bff817 	ldw	r2,-32(fp)
   1b428:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b42c:	e0bff717 	ldw	r2,-36(fp)
   1b430:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b434:	0005883a 	mov	r2,zero
   1b438:	00000306 	br	1b448 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1b43c:	00bffa84 	movi	r2,-22
   1b440:	00000106 	br	1b448 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1b444:	00bfde84 	movi	r2,-134
  }
}
   1b448:	e037883a 	mov	sp,fp
   1b44c:	df000017 	ldw	fp,0(sp)
   1b450:	dec00104 	addi	sp,sp,4
   1b454:	f800283a 	ret

0001b458 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b458:	deffff04 	addi	sp,sp,-4
   1b45c:	df000015 	stw	fp,0(sp)
   1b460:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b464:	0001883a 	nop
   1b468:	e037883a 	mov	sp,fp
   1b46c:	df000017 	ldw	fp,0(sp)
   1b470:	dec00104 	addi	sp,sp,4
   1b474:	f800283a 	ret

0001b478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b478:	defffe04 	addi	sp,sp,-8
   1b47c:	dfc00115 	stw	ra,4(sp)
   1b480:	df000015 	stw	fp,0(sp)
   1b484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b488:	d0a00f17 	ldw	r2,-32708(gp)
   1b48c:	10000326 	beq	r2,zero,1b49c <alt_get_errno+0x24>
   1b490:	d0a00f17 	ldw	r2,-32708(gp)
   1b494:	103ee83a 	callr	r2
   1b498:	00000106 	br	1b4a0 <alt_get_errno+0x28>
   1b49c:	d0a6da04 	addi	r2,gp,-25752
}
   1b4a0:	e037883a 	mov	sp,fp
   1b4a4:	dfc00117 	ldw	ra,4(sp)
   1b4a8:	df000017 	ldw	fp,0(sp)
   1b4ac:	dec00204 	addi	sp,sp,8
   1b4b0:	f800283a 	ret

0001b4b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b4b4:	defffa04 	addi	sp,sp,-24
   1b4b8:	dfc00515 	stw	ra,20(sp)
   1b4bc:	df000415 	stw	fp,16(sp)
   1b4c0:	df000404 	addi	fp,sp,16
   1b4c4:	e13ffe15 	stw	r4,-8(fp)
   1b4c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b4cc:	e0bffe17 	ldw	r2,-8(fp)
   1b4d0:	10000326 	beq	r2,zero,1b4e0 <alt_dev_llist_insert+0x2c>
   1b4d4:	e0bffe17 	ldw	r2,-8(fp)
   1b4d8:	10800217 	ldw	r2,8(r2)
   1b4dc:	1000061e 	bne	r2,zero,1b4f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1b4e0:	001b4780 	call	1b478 <alt_get_errno>
   1b4e4:	1007883a 	mov	r3,r2
   1b4e8:	00800584 	movi	r2,22
   1b4ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b4f0:	00bffa84 	movi	r2,-22
   1b4f4:	00001306 	br	1b544 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b4f8:	e0bffe17 	ldw	r2,-8(fp)
   1b4fc:	e0ffff17 	ldw	r3,-4(fp)
   1b500:	e0fffc15 	stw	r3,-16(fp)
   1b504:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b508:	e0bffd17 	ldw	r2,-12(fp)
   1b50c:	e0fffc17 	ldw	r3,-16(fp)
   1b510:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b514:	e0bffc17 	ldw	r2,-16(fp)
   1b518:	10c00017 	ldw	r3,0(r2)
   1b51c:	e0bffd17 	ldw	r2,-12(fp)
   1b520:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b524:	e0bffc17 	ldw	r2,-16(fp)
   1b528:	10800017 	ldw	r2,0(r2)
   1b52c:	e0fffd17 	ldw	r3,-12(fp)
   1b530:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b534:	e0bffc17 	ldw	r2,-16(fp)
   1b538:	e0fffd17 	ldw	r3,-12(fp)
   1b53c:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b540:	0005883a 	mov	r2,zero
}
   1b544:	e037883a 	mov	sp,fp
   1b548:	dfc00117 	ldw	ra,4(sp)
   1b54c:	df000017 	ldw	fp,0(sp)
   1b550:	dec00204 	addi	sp,sp,8
   1b554:	f800283a 	ret

0001b558 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b558:	defffd04 	addi	sp,sp,-12
   1b55c:	dfc00215 	stw	ra,8(sp)
   1b560:	df000115 	stw	fp,4(sp)
   1b564:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b568:	008000b4 	movhi	r2,2
   1b56c:	10b0c804 	addi	r2,r2,-15584
   1b570:	e0bfff15 	stw	r2,-4(fp)
   1b574:	00000606 	br	1b590 <_do_ctors+0x38>
        (*ctor) (); 
   1b578:	e0bfff17 	ldw	r2,-4(fp)
   1b57c:	10800017 	ldw	r2,0(r2)
   1b580:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b584:	e0bfff17 	ldw	r2,-4(fp)
   1b588:	10bfff04 	addi	r2,r2,-4
   1b58c:	e0bfff15 	stw	r2,-4(fp)
   1b590:	e0ffff17 	ldw	r3,-4(fp)
   1b594:	008000b4 	movhi	r2,2
   1b598:	10b0c904 	addi	r2,r2,-15580
   1b59c:	18bff62e 	bgeu	r3,r2,1b578 <__alt_data_end+0xfc01b578>
        (*ctor) (); 
}
   1b5a0:	0001883a 	nop
   1b5a4:	e037883a 	mov	sp,fp
   1b5a8:	dfc00117 	ldw	ra,4(sp)
   1b5ac:	df000017 	ldw	fp,0(sp)
   1b5b0:	dec00204 	addi	sp,sp,8
   1b5b4:	f800283a 	ret

0001b5b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b5b8:	defffd04 	addi	sp,sp,-12
   1b5bc:	dfc00215 	stw	ra,8(sp)
   1b5c0:	df000115 	stw	fp,4(sp)
   1b5c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b5c8:	008000b4 	movhi	r2,2
   1b5cc:	10b0c804 	addi	r2,r2,-15584
   1b5d0:	e0bfff15 	stw	r2,-4(fp)
   1b5d4:	00000606 	br	1b5f0 <_do_dtors+0x38>
        (*dtor) (); 
   1b5d8:	e0bfff17 	ldw	r2,-4(fp)
   1b5dc:	10800017 	ldw	r2,0(r2)
   1b5e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b5e4:	e0bfff17 	ldw	r2,-4(fp)
   1b5e8:	10bfff04 	addi	r2,r2,-4
   1b5ec:	e0bfff15 	stw	r2,-4(fp)
   1b5f0:	e0ffff17 	ldw	r3,-4(fp)
   1b5f4:	008000b4 	movhi	r2,2
   1b5f8:	10b0c904 	addi	r2,r2,-15580
   1b5fc:	18bff62e 	bgeu	r3,r2,1b5d8 <__alt_data_end+0xfc01b5d8>
        (*dtor) (); 
}
   1b600:	0001883a 	nop
   1b604:	e037883a 	mov	sp,fp
   1b608:	dfc00117 	ldw	ra,4(sp)
   1b60c:	df000017 	ldw	fp,0(sp)
   1b610:	dec00204 	addi	sp,sp,8
   1b614:	f800283a 	ret

0001b618 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b618:	deffff04 	addi	sp,sp,-4
   1b61c:	df000015 	stw	fp,0(sp)
   1b620:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1b624:	0001883a 	nop
   1b628:	e037883a 	mov	sp,fp
   1b62c:	df000017 	ldw	fp,0(sp)
   1b630:	dec00104 	addi	sp,sp,4
   1b634:	f800283a 	ret

0001b638 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b638:	defff904 	addi	sp,sp,-28
   1b63c:	dfc00615 	stw	ra,24(sp)
   1b640:	df000515 	stw	fp,20(sp)
   1b644:	df000504 	addi	fp,sp,20
   1b648:	e13ffc15 	stw	r4,-16(fp)
   1b64c:	e17ffd15 	stw	r5,-12(fp)
   1b650:	e1bffe15 	stw	r6,-8(fp)
   1b654:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b658:	e0800217 	ldw	r2,8(fp)
   1b65c:	d8800015 	stw	r2,0(sp)
   1b660:	e1ffff17 	ldw	r7,-4(fp)
   1b664:	e1bffe17 	ldw	r6,-8(fp)
   1b668:	e17ffd17 	ldw	r5,-12(fp)
   1b66c:	e13ffc17 	ldw	r4,-16(fp)
   1b670:	001b7e80 	call	1b7e8 <alt_iic_isr_register>
}  
   1b674:	e037883a 	mov	sp,fp
   1b678:	dfc00117 	ldw	ra,4(sp)
   1b67c:	df000017 	ldw	fp,0(sp)
   1b680:	dec00204 	addi	sp,sp,8
   1b684:	f800283a 	ret

0001b688 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1b688:	defff904 	addi	sp,sp,-28
   1b68c:	df000615 	stw	fp,24(sp)
   1b690:	df000604 	addi	fp,sp,24
   1b694:	e13ffe15 	stw	r4,-8(fp)
   1b698:	e17fff15 	stw	r5,-4(fp)
   1b69c:	e0bfff17 	ldw	r2,-4(fp)
   1b6a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6a4:	0005303a 	rdctl	r2,status
   1b6a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6ac:	e0fffb17 	ldw	r3,-20(fp)
   1b6b0:	00bfff84 	movi	r2,-2
   1b6b4:	1884703a 	and	r2,r3,r2
   1b6b8:	1001703a 	wrctl	status,r2
  
  return context;
   1b6bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b6c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1b6c4:	00c00044 	movi	r3,1
   1b6c8:	e0bffa17 	ldw	r2,-24(fp)
   1b6cc:	1884983a 	sll	r2,r3,r2
   1b6d0:	1007883a 	mov	r3,r2
   1b6d4:	d0a6de17 	ldw	r2,-25736(gp)
   1b6d8:	1884b03a 	or	r2,r3,r2
   1b6dc:	d0a6de15 	stw	r2,-25736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b6e0:	d0a6de17 	ldw	r2,-25736(gp)
   1b6e4:	100170fa 	wrctl	ienable,r2
   1b6e8:	e0bffc17 	ldw	r2,-16(fp)
   1b6ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6f0:	e0bffd17 	ldw	r2,-12(fp)
   1b6f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b6f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1b6fc:	0001883a 	nop
}
   1b700:	e037883a 	mov	sp,fp
   1b704:	df000017 	ldw	fp,0(sp)
   1b708:	dec00104 	addi	sp,sp,4
   1b70c:	f800283a 	ret

0001b710 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1b710:	defff904 	addi	sp,sp,-28
   1b714:	df000615 	stw	fp,24(sp)
   1b718:	df000604 	addi	fp,sp,24
   1b71c:	e13ffe15 	stw	r4,-8(fp)
   1b720:	e17fff15 	stw	r5,-4(fp)
   1b724:	e0bfff17 	ldw	r2,-4(fp)
   1b728:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b72c:	0005303a 	rdctl	r2,status
   1b730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b734:	e0fffb17 	ldw	r3,-20(fp)
   1b738:	00bfff84 	movi	r2,-2
   1b73c:	1884703a 	and	r2,r3,r2
   1b740:	1001703a 	wrctl	status,r2
  
  return context;
   1b744:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b748:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1b74c:	00c00044 	movi	r3,1
   1b750:	e0bffa17 	ldw	r2,-24(fp)
   1b754:	1884983a 	sll	r2,r3,r2
   1b758:	0084303a 	nor	r2,zero,r2
   1b75c:	1007883a 	mov	r3,r2
   1b760:	d0a6de17 	ldw	r2,-25736(gp)
   1b764:	1884703a 	and	r2,r3,r2
   1b768:	d0a6de15 	stw	r2,-25736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b76c:	d0a6de17 	ldw	r2,-25736(gp)
   1b770:	100170fa 	wrctl	ienable,r2
   1b774:	e0bffc17 	ldw	r2,-16(fp)
   1b778:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b77c:	e0bffd17 	ldw	r2,-12(fp)
   1b780:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b784:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1b788:	0001883a 	nop
}
   1b78c:	e037883a 	mov	sp,fp
   1b790:	df000017 	ldw	fp,0(sp)
   1b794:	dec00104 	addi	sp,sp,4
   1b798:	f800283a 	ret

0001b79c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1b79c:	defffc04 	addi	sp,sp,-16
   1b7a0:	df000315 	stw	fp,12(sp)
   1b7a4:	df000304 	addi	fp,sp,12
   1b7a8:	e13ffe15 	stw	r4,-8(fp)
   1b7ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1b7b0:	000530fa 	rdctl	r2,ienable
   1b7b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1b7b8:	00c00044 	movi	r3,1
   1b7bc:	e0bfff17 	ldw	r2,-4(fp)
   1b7c0:	1884983a 	sll	r2,r3,r2
   1b7c4:	1007883a 	mov	r3,r2
   1b7c8:	e0bffd17 	ldw	r2,-12(fp)
   1b7cc:	1884703a 	and	r2,r3,r2
   1b7d0:	1004c03a 	cmpne	r2,r2,zero
   1b7d4:	10803fcc 	andi	r2,r2,255
}
   1b7d8:	e037883a 	mov	sp,fp
   1b7dc:	df000017 	ldw	fp,0(sp)
   1b7e0:	dec00104 	addi	sp,sp,4
   1b7e4:	f800283a 	ret

0001b7e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b7e8:	defff504 	addi	sp,sp,-44
   1b7ec:	dfc00a15 	stw	ra,40(sp)
   1b7f0:	df000915 	stw	fp,36(sp)
   1b7f4:	df000904 	addi	fp,sp,36
   1b7f8:	e13ffc15 	stw	r4,-16(fp)
   1b7fc:	e17ffd15 	stw	r5,-12(fp)
   1b800:	e1bffe15 	stw	r6,-8(fp)
   1b804:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1b808:	00bffa84 	movi	r2,-22
   1b80c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1b810:	e0bffd17 	ldw	r2,-12(fp)
   1b814:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b818:	e0bff817 	ldw	r2,-32(fp)
   1b81c:	10800808 	cmpgei	r2,r2,32
   1b820:	1000271e 	bne	r2,zero,1b8c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b824:	0005303a 	rdctl	r2,status
   1b828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b82c:	e0fffb17 	ldw	r3,-20(fp)
   1b830:	00bfff84 	movi	r2,-2
   1b834:	1884703a 	and	r2,r3,r2
   1b838:	1001703a 	wrctl	status,r2
  
  return context;
   1b83c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1b840:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1b844:	008000b4 	movhi	r2,2
   1b848:	10804a04 	addi	r2,r2,296
   1b84c:	e0fff817 	ldw	r3,-32(fp)
   1b850:	180690fa 	slli	r3,r3,3
   1b854:	10c5883a 	add	r2,r2,r3
   1b858:	e0fffe17 	ldw	r3,-8(fp)
   1b85c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1b860:	008000b4 	movhi	r2,2
   1b864:	10804a04 	addi	r2,r2,296
   1b868:	e0fff817 	ldw	r3,-32(fp)
   1b86c:	180690fa 	slli	r3,r3,3
   1b870:	10c5883a 	add	r2,r2,r3
   1b874:	10800104 	addi	r2,r2,4
   1b878:	e0ffff17 	ldw	r3,-4(fp)
   1b87c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1b880:	e0bffe17 	ldw	r2,-8(fp)
   1b884:	10000526 	beq	r2,zero,1b89c <alt_iic_isr_register+0xb4>
   1b888:	e0bff817 	ldw	r2,-32(fp)
   1b88c:	100b883a 	mov	r5,r2
   1b890:	e13ffc17 	ldw	r4,-16(fp)
   1b894:	001b6880 	call	1b688 <alt_ic_irq_enable>
   1b898:	00000406 	br	1b8ac <alt_iic_isr_register+0xc4>
   1b89c:	e0bff817 	ldw	r2,-32(fp)
   1b8a0:	100b883a 	mov	r5,r2
   1b8a4:	e13ffc17 	ldw	r4,-16(fp)
   1b8a8:	001b7100 	call	1b710 <alt_ic_irq_disable>
   1b8ac:	e0bff715 	stw	r2,-36(fp)
   1b8b0:	e0bffa17 	ldw	r2,-24(fp)
   1b8b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8b8:	e0bff917 	ldw	r2,-28(fp)
   1b8bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1b8c0:	e0bff717 	ldw	r2,-36(fp)
}
   1b8c4:	e037883a 	mov	sp,fp
   1b8c8:	dfc00117 	ldw	ra,4(sp)
   1b8cc:	df000017 	ldw	fp,0(sp)
   1b8d0:	dec00204 	addi	sp,sp,8
   1b8d4:	f800283a 	ret

0001b8d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b8d8:	defff804 	addi	sp,sp,-32
   1b8dc:	dfc00715 	stw	ra,28(sp)
   1b8e0:	df000615 	stw	fp,24(sp)
   1b8e4:	dc000515 	stw	r16,20(sp)
   1b8e8:	df000604 	addi	fp,sp,24
   1b8ec:	e13ffb15 	stw	r4,-20(fp)
   1b8f0:	e17ffc15 	stw	r5,-16(fp)
   1b8f4:	e1bffd15 	stw	r6,-12(fp)
   1b8f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1b8fc:	e1bffe17 	ldw	r6,-8(fp)
   1b900:	e17ffd17 	ldw	r5,-12(fp)
   1b904:	e13ffc17 	ldw	r4,-16(fp)
   1b908:	001bb600 	call	1bb60 <open>
   1b90c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1b910:	e0bffa17 	ldw	r2,-24(fp)
   1b914:	10002216 	blt	r2,zero,1b9a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b918:	040000b4 	movhi	r16,2
   1b91c:	8433e604 	addi	r16,r16,-12392
   1b920:	e0bffa17 	ldw	r2,-24(fp)
   1b924:	01400304 	movi	r5,12
   1b928:	1009883a 	mov	r4,r2
   1b92c:	000cefc0 	call	cefc <__mulsi3>
   1b930:	8085883a 	add	r2,r16,r2
   1b934:	10c00017 	ldw	r3,0(r2)
   1b938:	e0bffb17 	ldw	r2,-20(fp)
   1b93c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b940:	040000b4 	movhi	r16,2
   1b944:	8433e604 	addi	r16,r16,-12392
   1b948:	e0bffa17 	ldw	r2,-24(fp)
   1b94c:	01400304 	movi	r5,12
   1b950:	1009883a 	mov	r4,r2
   1b954:	000cefc0 	call	cefc <__mulsi3>
   1b958:	8085883a 	add	r2,r16,r2
   1b95c:	10800104 	addi	r2,r2,4
   1b960:	10c00017 	ldw	r3,0(r2)
   1b964:	e0bffb17 	ldw	r2,-20(fp)
   1b968:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b96c:	040000b4 	movhi	r16,2
   1b970:	8433e604 	addi	r16,r16,-12392
   1b974:	e0bffa17 	ldw	r2,-24(fp)
   1b978:	01400304 	movi	r5,12
   1b97c:	1009883a 	mov	r4,r2
   1b980:	000cefc0 	call	cefc <__mulsi3>
   1b984:	8085883a 	add	r2,r16,r2
   1b988:	10800204 	addi	r2,r2,8
   1b98c:	10c00017 	ldw	r3,0(r2)
   1b990:	e0bffb17 	ldw	r2,-20(fp)
   1b994:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b998:	e13ffa17 	ldw	r4,-24(fp)
   1b99c:	001a5980 	call	1a598 <alt_release_fd>
  }
} 
   1b9a0:	0001883a 	nop
   1b9a4:	e6ffff04 	addi	sp,fp,-4
   1b9a8:	dfc00217 	ldw	ra,8(sp)
   1b9ac:	df000117 	ldw	fp,4(sp)
   1b9b0:	dc000017 	ldw	r16,0(sp)
   1b9b4:	dec00304 	addi	sp,sp,12
   1b9b8:	f800283a 	ret

0001b9bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b9bc:	defffb04 	addi	sp,sp,-20
   1b9c0:	dfc00415 	stw	ra,16(sp)
   1b9c4:	df000315 	stw	fp,12(sp)
   1b9c8:	df000304 	addi	fp,sp,12
   1b9cc:	e13ffd15 	stw	r4,-12(fp)
   1b9d0:	e17ffe15 	stw	r5,-8(fp)
   1b9d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b9d8:	01c07fc4 	movi	r7,511
   1b9dc:	01800044 	movi	r6,1
   1b9e0:	e17ffd17 	ldw	r5,-12(fp)
   1b9e4:	010000b4 	movhi	r4,2
   1b9e8:	2133e904 	addi	r4,r4,-12380
   1b9ec:	001b8d80 	call	1b8d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b9f0:	01c07fc4 	movi	r7,511
   1b9f4:	000d883a 	mov	r6,zero
   1b9f8:	e17ffe17 	ldw	r5,-8(fp)
   1b9fc:	010000b4 	movhi	r4,2
   1ba00:	2133e604 	addi	r4,r4,-12392
   1ba04:	001b8d80 	call	1b8d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1ba08:	01c07fc4 	movi	r7,511
   1ba0c:	01800044 	movi	r6,1
   1ba10:	e17fff17 	ldw	r5,-4(fp)
   1ba14:	010000b4 	movhi	r4,2
   1ba18:	2133ec04 	addi	r4,r4,-12368
   1ba1c:	001b8d80 	call	1b8d8 <alt_open_fd>
}  
   1ba20:	0001883a 	nop
   1ba24:	e037883a 	mov	sp,fp
   1ba28:	dfc00117 	ldw	ra,4(sp)
   1ba2c:	df000017 	ldw	fp,0(sp)
   1ba30:	dec00204 	addi	sp,sp,8
   1ba34:	f800283a 	ret

0001ba38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ba38:	defffe04 	addi	sp,sp,-8
   1ba3c:	dfc00115 	stw	ra,4(sp)
   1ba40:	df000015 	stw	fp,0(sp)
   1ba44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ba48:	d0a00f17 	ldw	r2,-32708(gp)
   1ba4c:	10000326 	beq	r2,zero,1ba5c <alt_get_errno+0x24>
   1ba50:	d0a00f17 	ldw	r2,-32708(gp)
   1ba54:	103ee83a 	callr	r2
   1ba58:	00000106 	br	1ba60 <alt_get_errno+0x28>
   1ba5c:	d0a6da04 	addi	r2,gp,-25752
}
   1ba60:	e037883a 	mov	sp,fp
   1ba64:	dfc00117 	ldw	ra,4(sp)
   1ba68:	df000017 	ldw	fp,0(sp)
   1ba6c:	dec00204 	addi	sp,sp,8
   1ba70:	f800283a 	ret

0001ba74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1ba74:	defffb04 	addi	sp,sp,-20
   1ba78:	dfc00415 	stw	ra,16(sp)
   1ba7c:	df000315 	stw	fp,12(sp)
   1ba80:	dc000215 	stw	r16,8(sp)
   1ba84:	df000304 	addi	fp,sp,12
   1ba88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1ba8c:	e0bffe17 	ldw	r2,-8(fp)
   1ba90:	10800217 	ldw	r2,8(r2)
   1ba94:	10d00034 	orhi	r3,r2,16384
   1ba98:	e0bffe17 	ldw	r2,-8(fp)
   1ba9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1baa0:	e03ffd15 	stw	zero,-12(fp)
   1baa4:	00002306 	br	1bb34 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1baa8:	040000b4 	movhi	r16,2
   1baac:	8433e604 	addi	r16,r16,-12392
   1bab0:	e0bffd17 	ldw	r2,-12(fp)
   1bab4:	01400304 	movi	r5,12
   1bab8:	1009883a 	mov	r4,r2
   1babc:	000cefc0 	call	cefc <__mulsi3>
   1bac0:	8085883a 	add	r2,r16,r2
   1bac4:	10c00017 	ldw	r3,0(r2)
   1bac8:	e0bffe17 	ldw	r2,-8(fp)
   1bacc:	10800017 	ldw	r2,0(r2)
   1bad0:	1880151e 	bne	r3,r2,1bb28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1bad4:	040000b4 	movhi	r16,2
   1bad8:	8433e604 	addi	r16,r16,-12392
   1badc:	e0bffd17 	ldw	r2,-12(fp)
   1bae0:	01400304 	movi	r5,12
   1bae4:	1009883a 	mov	r4,r2
   1bae8:	000cefc0 	call	cefc <__mulsi3>
   1baec:	8085883a 	add	r2,r16,r2
   1baf0:	10800204 	addi	r2,r2,8
   1baf4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1baf8:	10000b0e 	bge	r2,zero,1bb28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1bafc:	01400304 	movi	r5,12
   1bb00:	e13ffd17 	ldw	r4,-12(fp)
   1bb04:	000cefc0 	call	cefc <__mulsi3>
   1bb08:	1007883a 	mov	r3,r2
   1bb0c:	008000b4 	movhi	r2,2
   1bb10:	10b3e604 	addi	r2,r2,-12392
   1bb14:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1bb18:	e0bffe17 	ldw	r2,-8(fp)
   1bb1c:	18800226 	beq	r3,r2,1bb28 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1bb20:	00bffcc4 	movi	r2,-13
   1bb24:	00000806 	br	1bb48 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1bb28:	e0bffd17 	ldw	r2,-12(fp)
   1bb2c:	10800044 	addi	r2,r2,1
   1bb30:	e0bffd15 	stw	r2,-12(fp)
   1bb34:	d0a00e17 	ldw	r2,-32712(gp)
   1bb38:	1007883a 	mov	r3,r2
   1bb3c:	e0bffd17 	ldw	r2,-12(fp)
   1bb40:	18bfd92e 	bgeu	r3,r2,1baa8 <__alt_data_end+0xfc01baa8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1bb44:	0005883a 	mov	r2,zero
}
   1bb48:	e6ffff04 	addi	sp,fp,-4
   1bb4c:	dfc00217 	ldw	ra,8(sp)
   1bb50:	df000117 	ldw	fp,4(sp)
   1bb54:	dc000017 	ldw	r16,0(sp)
   1bb58:	dec00304 	addi	sp,sp,12
   1bb5c:	f800283a 	ret

0001bb60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1bb60:	defff604 	addi	sp,sp,-40
   1bb64:	dfc00915 	stw	ra,36(sp)
   1bb68:	df000815 	stw	fp,32(sp)
   1bb6c:	df000804 	addi	fp,sp,32
   1bb70:	e13ffd15 	stw	r4,-12(fp)
   1bb74:	e17ffe15 	stw	r5,-8(fp)
   1bb78:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1bb7c:	00bfffc4 	movi	r2,-1
   1bb80:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1bb84:	00bffb44 	movi	r2,-19
   1bb88:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1bb8c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1bb90:	d1600c04 	addi	r5,gp,-32720
   1bb94:	e13ffd17 	ldw	r4,-12(fp)
   1bb98:	001be840 	call	1be84 <alt_find_dev>
   1bb9c:	e0bff815 	stw	r2,-32(fp)
   1bba0:	e0bff817 	ldw	r2,-32(fp)
   1bba4:	1000051e 	bne	r2,zero,1bbbc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1bba8:	e13ffd17 	ldw	r4,-12(fp)
   1bbac:	001bf140 	call	1bf14 <alt_find_file>
   1bbb0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1bbb4:	00800044 	movi	r2,1
   1bbb8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1bbbc:	e0bff817 	ldw	r2,-32(fp)
   1bbc0:	10002b26 	beq	r2,zero,1bc70 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1bbc4:	e13ff817 	ldw	r4,-32(fp)
   1bbc8:	001c01c0 	call	1c01c <alt_get_fd>
   1bbcc:	e0bff915 	stw	r2,-28(fp)
   1bbd0:	e0bff917 	ldw	r2,-28(fp)
   1bbd4:	1000030e 	bge	r2,zero,1bbe4 <open+0x84>
    {
      status = index;
   1bbd8:	e0bff917 	ldw	r2,-28(fp)
   1bbdc:	e0bffa15 	stw	r2,-24(fp)
   1bbe0:	00002506 	br	1bc78 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1bbe4:	01400304 	movi	r5,12
   1bbe8:	e13ff917 	ldw	r4,-28(fp)
   1bbec:	000cefc0 	call	cefc <__mulsi3>
   1bbf0:	1007883a 	mov	r3,r2
   1bbf4:	008000b4 	movhi	r2,2
   1bbf8:	10b3e604 	addi	r2,r2,-12392
   1bbfc:	1885883a 	add	r2,r3,r2
   1bc00:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1bc04:	e0fffe17 	ldw	r3,-8(fp)
   1bc08:	00900034 	movhi	r2,16384
   1bc0c:	10bfffc4 	addi	r2,r2,-1
   1bc10:	1886703a 	and	r3,r3,r2
   1bc14:	e0bffc17 	ldw	r2,-16(fp)
   1bc18:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1bc1c:	e0bffb17 	ldw	r2,-20(fp)
   1bc20:	1000051e 	bne	r2,zero,1bc38 <open+0xd8>
   1bc24:	e13ffc17 	ldw	r4,-16(fp)
   1bc28:	001ba740 	call	1ba74 <alt_file_locked>
   1bc2c:	e0bffa15 	stw	r2,-24(fp)
   1bc30:	e0bffa17 	ldw	r2,-24(fp)
   1bc34:	10001016 	blt	r2,zero,1bc78 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1bc38:	e0bff817 	ldw	r2,-32(fp)
   1bc3c:	10800317 	ldw	r2,12(r2)
   1bc40:	10000826 	beq	r2,zero,1bc64 <open+0x104>
   1bc44:	e0bff817 	ldw	r2,-32(fp)
   1bc48:	10800317 	ldw	r2,12(r2)
   1bc4c:	e1ffff17 	ldw	r7,-4(fp)
   1bc50:	e1bffe17 	ldw	r6,-8(fp)
   1bc54:	e17ffd17 	ldw	r5,-12(fp)
   1bc58:	e13ffc17 	ldw	r4,-16(fp)
   1bc5c:	103ee83a 	callr	r2
   1bc60:	00000106 	br	1bc68 <open+0x108>
   1bc64:	0005883a 	mov	r2,zero
   1bc68:	e0bffa15 	stw	r2,-24(fp)
   1bc6c:	00000206 	br	1bc78 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1bc70:	00bffb44 	movi	r2,-19
   1bc74:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1bc78:	e0bffa17 	ldw	r2,-24(fp)
   1bc7c:	1000090e 	bge	r2,zero,1bca4 <open+0x144>
  {
    alt_release_fd (index);  
   1bc80:	e13ff917 	ldw	r4,-28(fp)
   1bc84:	001a5980 	call	1a598 <alt_release_fd>
    ALT_ERRNO = -status;
   1bc88:	001ba380 	call	1ba38 <alt_get_errno>
   1bc8c:	1007883a 	mov	r3,r2
   1bc90:	e0bffa17 	ldw	r2,-24(fp)
   1bc94:	0085c83a 	sub	r2,zero,r2
   1bc98:	18800015 	stw	r2,0(r3)
    return -1;
   1bc9c:	00bfffc4 	movi	r2,-1
   1bca0:	00000106 	br	1bca8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1bca4:	e0bff917 	ldw	r2,-28(fp)
}
   1bca8:	e037883a 	mov	sp,fp
   1bcac:	dfc00117 	ldw	ra,4(sp)
   1bcb0:	df000017 	ldw	fp,0(sp)
   1bcb4:	dec00204 	addi	sp,sp,8
   1bcb8:	f800283a 	ret

0001bcbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1bcbc:	defffa04 	addi	sp,sp,-24
   1bcc0:	df000515 	stw	fp,20(sp)
   1bcc4:	df000504 	addi	fp,sp,20
   1bcc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bccc:	0005303a 	rdctl	r2,status
   1bcd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bcd4:	e0fffc17 	ldw	r3,-16(fp)
   1bcd8:	00bfff84 	movi	r2,-2
   1bcdc:	1884703a 	and	r2,r3,r2
   1bce0:	1001703a 	wrctl	status,r2
  
  return context;
   1bce4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1bce8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1bcec:	e0bfff17 	ldw	r2,-4(fp)
   1bcf0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1bcf4:	e0bffd17 	ldw	r2,-12(fp)
   1bcf8:	10800017 	ldw	r2,0(r2)
   1bcfc:	e0fffd17 	ldw	r3,-12(fp)
   1bd00:	18c00117 	ldw	r3,4(r3)
   1bd04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1bd08:	e0bffd17 	ldw	r2,-12(fp)
   1bd0c:	10800117 	ldw	r2,4(r2)
   1bd10:	e0fffd17 	ldw	r3,-12(fp)
   1bd14:	18c00017 	ldw	r3,0(r3)
   1bd18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1bd1c:	e0bffd17 	ldw	r2,-12(fp)
   1bd20:	e0fffd17 	ldw	r3,-12(fp)
   1bd24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1bd28:	e0bffd17 	ldw	r2,-12(fp)
   1bd2c:	e0fffd17 	ldw	r3,-12(fp)
   1bd30:	10c00015 	stw	r3,0(r2)
   1bd34:	e0bffb17 	ldw	r2,-20(fp)
   1bd38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd3c:	e0bffe17 	ldw	r2,-8(fp)
   1bd40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1bd44:	0001883a 	nop
   1bd48:	e037883a 	mov	sp,fp
   1bd4c:	df000017 	ldw	fp,0(sp)
   1bd50:	dec00104 	addi	sp,sp,4
   1bd54:	f800283a 	ret

0001bd58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1bd58:	defffb04 	addi	sp,sp,-20
   1bd5c:	dfc00415 	stw	ra,16(sp)
   1bd60:	df000315 	stw	fp,12(sp)
   1bd64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1bd68:	d0a01217 	ldw	r2,-32696(gp)
   1bd6c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1bd70:	d0a6e017 	ldw	r2,-25728(gp)
   1bd74:	10800044 	addi	r2,r2,1
   1bd78:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bd7c:	00002e06 	br	1be38 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1bd80:	e0bffd17 	ldw	r2,-12(fp)
   1bd84:	10800017 	ldw	r2,0(r2)
   1bd88:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1bd8c:	e0bffd17 	ldw	r2,-12(fp)
   1bd90:	10800403 	ldbu	r2,16(r2)
   1bd94:	10803fcc 	andi	r2,r2,255
   1bd98:	10000426 	beq	r2,zero,1bdac <alt_tick+0x54>
   1bd9c:	d0a6e017 	ldw	r2,-25728(gp)
   1bda0:	1000021e 	bne	r2,zero,1bdac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1bda4:	e0bffd17 	ldw	r2,-12(fp)
   1bda8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1bdac:	e0bffd17 	ldw	r2,-12(fp)
   1bdb0:	10800217 	ldw	r2,8(r2)
   1bdb4:	d0e6e017 	ldw	r3,-25728(gp)
   1bdb8:	18801d36 	bltu	r3,r2,1be30 <alt_tick+0xd8>
   1bdbc:	e0bffd17 	ldw	r2,-12(fp)
   1bdc0:	10800403 	ldbu	r2,16(r2)
   1bdc4:	10803fcc 	andi	r2,r2,255
   1bdc8:	1000191e 	bne	r2,zero,1be30 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1bdcc:	e0bffd17 	ldw	r2,-12(fp)
   1bdd0:	10800317 	ldw	r2,12(r2)
   1bdd4:	e0fffd17 	ldw	r3,-12(fp)
   1bdd8:	18c00517 	ldw	r3,20(r3)
   1bddc:	1809883a 	mov	r4,r3
   1bde0:	103ee83a 	callr	r2
   1bde4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1bde8:	e0bfff17 	ldw	r2,-4(fp)
   1bdec:	1000031e 	bne	r2,zero,1bdfc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1bdf0:	e13ffd17 	ldw	r4,-12(fp)
   1bdf4:	001bcbc0 	call	1bcbc <alt_alarm_stop>
   1bdf8:	00000d06 	br	1be30 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1bdfc:	e0bffd17 	ldw	r2,-12(fp)
   1be00:	10c00217 	ldw	r3,8(r2)
   1be04:	e0bfff17 	ldw	r2,-4(fp)
   1be08:	1887883a 	add	r3,r3,r2
   1be0c:	e0bffd17 	ldw	r2,-12(fp)
   1be10:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1be14:	e0bffd17 	ldw	r2,-12(fp)
   1be18:	10c00217 	ldw	r3,8(r2)
   1be1c:	d0a6e017 	ldw	r2,-25728(gp)
   1be20:	1880032e 	bgeu	r3,r2,1be30 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1be24:	e0bffd17 	ldw	r2,-12(fp)
   1be28:	00c00044 	movi	r3,1
   1be2c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1be30:	e0bffe17 	ldw	r2,-8(fp)
   1be34:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1be38:	e0fffd17 	ldw	r3,-12(fp)
   1be3c:	d0a01204 	addi	r2,gp,-32696
   1be40:	18bfcf1e 	bne	r3,r2,1bd80 <__alt_data_end+0xfc01bd80>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1be44:	0001883a 	nop
}
   1be48:	0001883a 	nop
   1be4c:	e037883a 	mov	sp,fp
   1be50:	dfc00117 	ldw	ra,4(sp)
   1be54:	df000017 	ldw	fp,0(sp)
   1be58:	dec00204 	addi	sp,sp,8
   1be5c:	f800283a 	ret

0001be60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1be60:	deffff04 	addi	sp,sp,-4
   1be64:	df000015 	stw	fp,0(sp)
   1be68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1be6c:	000170fa 	wrctl	ienable,zero
}
   1be70:	0001883a 	nop
   1be74:	e037883a 	mov	sp,fp
   1be78:	df000017 	ldw	fp,0(sp)
   1be7c:	dec00104 	addi	sp,sp,4
   1be80:	f800283a 	ret

0001be84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1be84:	defffa04 	addi	sp,sp,-24
   1be88:	dfc00515 	stw	ra,20(sp)
   1be8c:	df000415 	stw	fp,16(sp)
   1be90:	df000404 	addi	fp,sp,16
   1be94:	e13ffe15 	stw	r4,-8(fp)
   1be98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1be9c:	e0bfff17 	ldw	r2,-4(fp)
   1bea0:	10800017 	ldw	r2,0(r2)
   1bea4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1bea8:	e13ffe17 	ldw	r4,-8(fp)
   1beac:	000d09c0 	call	d09c <strlen>
   1beb0:	10800044 	addi	r2,r2,1
   1beb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1beb8:	00000d06 	br	1bef0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1bebc:	e0bffc17 	ldw	r2,-16(fp)
   1bec0:	10800217 	ldw	r2,8(r2)
   1bec4:	e0fffd17 	ldw	r3,-12(fp)
   1bec8:	180d883a 	mov	r6,r3
   1becc:	e17ffe17 	ldw	r5,-8(fp)
   1bed0:	1009883a 	mov	r4,r2
   1bed4:	001c1900 	call	1c190 <memcmp>
   1bed8:	1000021e 	bne	r2,zero,1bee4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1bedc:	e0bffc17 	ldw	r2,-16(fp)
   1bee0:	00000706 	br	1bf00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1bee4:	e0bffc17 	ldw	r2,-16(fp)
   1bee8:	10800017 	ldw	r2,0(r2)
   1beec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bef0:	e0fffc17 	ldw	r3,-16(fp)
   1bef4:	e0bfff17 	ldw	r2,-4(fp)
   1bef8:	18bff01e 	bne	r3,r2,1bebc <__alt_data_end+0xfc01bebc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1befc:	0005883a 	mov	r2,zero
}
   1bf00:	e037883a 	mov	sp,fp
   1bf04:	dfc00117 	ldw	ra,4(sp)
   1bf08:	df000017 	ldw	fp,0(sp)
   1bf0c:	dec00204 	addi	sp,sp,8
   1bf10:	f800283a 	ret

0001bf14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1bf14:	defffb04 	addi	sp,sp,-20
   1bf18:	dfc00415 	stw	ra,16(sp)
   1bf1c:	df000315 	stw	fp,12(sp)
   1bf20:	df000304 	addi	fp,sp,12
   1bf24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1bf28:	d0a00a17 	ldw	r2,-32728(gp)
   1bf2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bf30:	00003106 	br	1bff8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1bf34:	e0bffd17 	ldw	r2,-12(fp)
   1bf38:	10800217 	ldw	r2,8(r2)
   1bf3c:	1009883a 	mov	r4,r2
   1bf40:	000d09c0 	call	d09c <strlen>
   1bf44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1bf48:	e0bffd17 	ldw	r2,-12(fp)
   1bf4c:	10c00217 	ldw	r3,8(r2)
   1bf50:	e0bffe17 	ldw	r2,-8(fp)
   1bf54:	10bfffc4 	addi	r2,r2,-1
   1bf58:	1885883a 	add	r2,r3,r2
   1bf5c:	10800003 	ldbu	r2,0(r2)
   1bf60:	10803fcc 	andi	r2,r2,255
   1bf64:	1080201c 	xori	r2,r2,128
   1bf68:	10bfe004 	addi	r2,r2,-128
   1bf6c:	10800bd8 	cmpnei	r2,r2,47
   1bf70:	1000031e 	bne	r2,zero,1bf80 <alt_find_file+0x6c>
    {
      len -= 1;
   1bf74:	e0bffe17 	ldw	r2,-8(fp)
   1bf78:	10bfffc4 	addi	r2,r2,-1
   1bf7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bf80:	e0bffe17 	ldw	r2,-8(fp)
   1bf84:	e0ffff17 	ldw	r3,-4(fp)
   1bf88:	1885883a 	add	r2,r3,r2
   1bf8c:	10800003 	ldbu	r2,0(r2)
   1bf90:	10803fcc 	andi	r2,r2,255
   1bf94:	1080201c 	xori	r2,r2,128
   1bf98:	10bfe004 	addi	r2,r2,-128
   1bf9c:	10800be0 	cmpeqi	r2,r2,47
   1bfa0:	1000081e 	bne	r2,zero,1bfc4 <alt_find_file+0xb0>
   1bfa4:	e0bffe17 	ldw	r2,-8(fp)
   1bfa8:	e0ffff17 	ldw	r3,-4(fp)
   1bfac:	1885883a 	add	r2,r3,r2
   1bfb0:	10800003 	ldbu	r2,0(r2)
   1bfb4:	10803fcc 	andi	r2,r2,255
   1bfb8:	1080201c 	xori	r2,r2,128
   1bfbc:	10bfe004 	addi	r2,r2,-128
   1bfc0:	10000a1e 	bne	r2,zero,1bfec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1bfc4:	e0bffd17 	ldw	r2,-12(fp)
   1bfc8:	10800217 	ldw	r2,8(r2)
   1bfcc:	e0fffe17 	ldw	r3,-8(fp)
   1bfd0:	180d883a 	mov	r6,r3
   1bfd4:	e17fff17 	ldw	r5,-4(fp)
   1bfd8:	1009883a 	mov	r4,r2
   1bfdc:	001c1900 	call	1c190 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bfe0:	1000021e 	bne	r2,zero,1bfec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bfe4:	e0bffd17 	ldw	r2,-12(fp)
   1bfe8:	00000706 	br	1c008 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1bfec:	e0bffd17 	ldw	r2,-12(fp)
   1bff0:	10800017 	ldw	r2,0(r2)
   1bff4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bff8:	e0fffd17 	ldw	r3,-12(fp)
   1bffc:	d0a00a04 	addi	r2,gp,-32728
   1c000:	18bfcc1e 	bne	r3,r2,1bf34 <__alt_data_end+0xfc01bf34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c004:	0005883a 	mov	r2,zero
}
   1c008:	e037883a 	mov	sp,fp
   1c00c:	dfc00117 	ldw	ra,4(sp)
   1c010:	df000017 	ldw	fp,0(sp)
   1c014:	dec00204 	addi	sp,sp,8
   1c018:	f800283a 	ret

0001c01c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c01c:	defffa04 	addi	sp,sp,-24
   1c020:	dfc00515 	stw	ra,20(sp)
   1c024:	df000415 	stw	fp,16(sp)
   1c028:	dc000315 	stw	r16,12(sp)
   1c02c:	df000404 	addi	fp,sp,16
   1c030:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c034:	00bffa04 	movi	r2,-24
   1c038:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c03c:	e03ffc15 	stw	zero,-16(fp)
   1c040:	00001d06 	br	1c0b8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1c044:	040000b4 	movhi	r16,2
   1c048:	8433e604 	addi	r16,r16,-12392
   1c04c:	e0bffc17 	ldw	r2,-16(fp)
   1c050:	01400304 	movi	r5,12
   1c054:	1009883a 	mov	r4,r2
   1c058:	000cefc0 	call	cefc <__mulsi3>
   1c05c:	8085883a 	add	r2,r16,r2
   1c060:	10800017 	ldw	r2,0(r2)
   1c064:	1000111e 	bne	r2,zero,1c0ac <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1c068:	040000b4 	movhi	r16,2
   1c06c:	8433e604 	addi	r16,r16,-12392
   1c070:	e0bffc17 	ldw	r2,-16(fp)
   1c074:	01400304 	movi	r5,12
   1c078:	1009883a 	mov	r4,r2
   1c07c:	000cefc0 	call	cefc <__mulsi3>
   1c080:	8085883a 	add	r2,r16,r2
   1c084:	e0fffe17 	ldw	r3,-8(fp)
   1c088:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1c08c:	d0e00e17 	ldw	r3,-32712(gp)
   1c090:	e0bffc17 	ldw	r2,-16(fp)
   1c094:	1880020e 	bge	r3,r2,1c0a0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1c098:	e0bffc17 	ldw	r2,-16(fp)
   1c09c:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   1c0a0:	e0bffc17 	ldw	r2,-16(fp)
   1c0a4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1c0a8:	00000606 	br	1c0c4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c0ac:	e0bffc17 	ldw	r2,-16(fp)
   1c0b0:	10800044 	addi	r2,r2,1
   1c0b4:	e0bffc15 	stw	r2,-16(fp)
   1c0b8:	e0bffc17 	ldw	r2,-16(fp)
   1c0bc:	10800810 	cmplti	r2,r2,32
   1c0c0:	103fe01e 	bne	r2,zero,1c044 <__alt_data_end+0xfc01c044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c0c4:	e0bffd17 	ldw	r2,-12(fp)
}
   1c0c8:	e6ffff04 	addi	sp,fp,-4
   1c0cc:	dfc00217 	ldw	ra,8(sp)
   1c0d0:	df000117 	ldw	fp,4(sp)
   1c0d4:	dc000017 	ldw	r16,0(sp)
   1c0d8:	dec00304 	addi	sp,sp,12
   1c0dc:	f800283a 	ret

0001c0e0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1c0e0:	defffe04 	addi	sp,sp,-8
   1c0e4:	df000115 	stw	fp,4(sp)
   1c0e8:	df000104 	addi	fp,sp,4
   1c0ec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1c0f0:	e0bfff17 	ldw	r2,-4(fp)
   1c0f4:	10bffe84 	addi	r2,r2,-6
   1c0f8:	10c00428 	cmpgeui	r3,r2,16
   1c0fc:	18001a1e 	bne	r3,zero,1c168 <alt_exception_cause_generated_bad_addr+0x88>
   1c100:	100690ba 	slli	r3,r2,2
   1c104:	008000b4 	movhi	r2,2
   1c108:	10b04604 	addi	r2,r2,-16104
   1c10c:	1885883a 	add	r2,r3,r2
   1c110:	10800017 	ldw	r2,0(r2)
   1c114:	1000683a 	jmp	r2
   1c118:	0001c158 	cmpnei	zero,zero,1797
   1c11c:	0001c158 	cmpnei	zero,zero,1797
   1c120:	0001c168 	cmpgeui	zero,zero,1797
   1c124:	0001c168 	cmpgeui	zero,zero,1797
   1c128:	0001c168 	cmpgeui	zero,zero,1797
   1c12c:	0001c158 	cmpnei	zero,zero,1797
   1c130:	0001c160 	cmpeqi	zero,zero,1797
   1c134:	0001c168 	cmpgeui	zero,zero,1797
   1c138:	0001c158 	cmpnei	zero,zero,1797
   1c13c:	0001c158 	cmpnei	zero,zero,1797
   1c140:	0001c168 	cmpgeui	zero,zero,1797
   1c144:	0001c158 	cmpnei	zero,zero,1797
   1c148:	0001c160 	cmpeqi	zero,zero,1797
   1c14c:	0001c168 	cmpgeui	zero,zero,1797
   1c150:	0001c168 	cmpgeui	zero,zero,1797
   1c154:	0001c158 	cmpnei	zero,zero,1797
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1c158:	00800044 	movi	r2,1
   1c15c:	00000306 	br	1c16c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1c160:	0005883a 	mov	r2,zero
   1c164:	00000106 	br	1c16c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1c168:	0005883a 	mov	r2,zero
  }
}
   1c16c:	e037883a 	mov	sp,fp
   1c170:	df000017 	ldw	fp,0(sp)
   1c174:	dec00104 	addi	sp,sp,4
   1c178:	f800283a 	ret

0001c17c <atexit>:
   1c17c:	200b883a 	mov	r5,r4
   1c180:	000f883a 	mov	r7,zero
   1c184:	000d883a 	mov	r6,zero
   1c188:	0009883a 	mov	r4,zero
   1c18c:	001c20c1 	jmpi	1c20c <__register_exitproc>

0001c190 <memcmp>:
   1c190:	01c000c4 	movi	r7,3
   1c194:	3980192e 	bgeu	r7,r6,1c1fc <memcmp+0x6c>
   1c198:	2144b03a 	or	r2,r4,r5
   1c19c:	11c4703a 	and	r2,r2,r7
   1c1a0:	10000f26 	beq	r2,zero,1c1e0 <memcmp+0x50>
   1c1a4:	20800003 	ldbu	r2,0(r4)
   1c1a8:	28c00003 	ldbu	r3,0(r5)
   1c1ac:	10c0151e 	bne	r2,r3,1c204 <memcmp+0x74>
   1c1b0:	31bfff84 	addi	r6,r6,-2
   1c1b4:	01ffffc4 	movi	r7,-1
   1c1b8:	00000406 	br	1c1cc <memcmp+0x3c>
   1c1bc:	20800003 	ldbu	r2,0(r4)
   1c1c0:	28c00003 	ldbu	r3,0(r5)
   1c1c4:	31bfffc4 	addi	r6,r6,-1
   1c1c8:	10c00e1e 	bne	r2,r3,1c204 <memcmp+0x74>
   1c1cc:	21000044 	addi	r4,r4,1
   1c1d0:	29400044 	addi	r5,r5,1
   1c1d4:	31fff91e 	bne	r6,r7,1c1bc <__alt_data_end+0xfc01c1bc>
   1c1d8:	0005883a 	mov	r2,zero
   1c1dc:	f800283a 	ret
   1c1e0:	20c00017 	ldw	r3,0(r4)
   1c1e4:	28800017 	ldw	r2,0(r5)
   1c1e8:	18bfee1e 	bne	r3,r2,1c1a4 <__alt_data_end+0xfc01c1a4>
   1c1ec:	31bfff04 	addi	r6,r6,-4
   1c1f0:	21000104 	addi	r4,r4,4
   1c1f4:	29400104 	addi	r5,r5,4
   1c1f8:	39bff936 	bltu	r7,r6,1c1e0 <__alt_data_end+0xfc01c1e0>
   1c1fc:	303fe91e 	bne	r6,zero,1c1a4 <__alt_data_end+0xfc01c1a4>
   1c200:	003ff506 	br	1c1d8 <__alt_data_end+0xfc01c1d8>
   1c204:	10c5c83a 	sub	r2,r2,r3
   1c208:	f800283a 	ret

0001c20c <__register_exitproc>:
   1c20c:	defffa04 	addi	sp,sp,-24
   1c210:	dc000315 	stw	r16,12(sp)
   1c214:	040000b4 	movhi	r16,2
   1c218:	84386204 	addi	r16,r16,-7800
   1c21c:	80c00017 	ldw	r3,0(r16)
   1c220:	dc400415 	stw	r17,16(sp)
   1c224:	dfc00515 	stw	ra,20(sp)
   1c228:	18805217 	ldw	r2,328(r3)
   1c22c:	2023883a 	mov	r17,r4
   1c230:	10003726 	beq	r2,zero,1c310 <__register_exitproc+0x104>
   1c234:	10c00117 	ldw	r3,4(r2)
   1c238:	010007c4 	movi	r4,31
   1c23c:	20c00e16 	blt	r4,r3,1c278 <__register_exitproc+0x6c>
   1c240:	1a000044 	addi	r8,r3,1
   1c244:	8800221e 	bne	r17,zero,1c2d0 <__register_exitproc+0xc4>
   1c248:	18c00084 	addi	r3,r3,2
   1c24c:	18c7883a 	add	r3,r3,r3
   1c250:	18c7883a 	add	r3,r3,r3
   1c254:	12000115 	stw	r8,4(r2)
   1c258:	10c7883a 	add	r3,r2,r3
   1c25c:	19400015 	stw	r5,0(r3)
   1c260:	0005883a 	mov	r2,zero
   1c264:	dfc00517 	ldw	ra,20(sp)
   1c268:	dc400417 	ldw	r17,16(sp)
   1c26c:	dc000317 	ldw	r16,12(sp)
   1c270:	dec00604 	addi	sp,sp,24
   1c274:	f800283a 	ret
   1c278:	00800034 	movhi	r2,0
   1c27c:	10800004 	addi	r2,r2,0
   1c280:	10002626 	beq	r2,zero,1c31c <__register_exitproc+0x110>
   1c284:	01006404 	movi	r4,400
   1c288:	d9400015 	stw	r5,0(sp)
   1c28c:	d9800115 	stw	r6,4(sp)
   1c290:	d9c00215 	stw	r7,8(sp)
   1c294:	00000000 	call	0 <__reset>
   1c298:	d9400017 	ldw	r5,0(sp)
   1c29c:	d9800117 	ldw	r6,4(sp)
   1c2a0:	d9c00217 	ldw	r7,8(sp)
   1c2a4:	10001d26 	beq	r2,zero,1c31c <__register_exitproc+0x110>
   1c2a8:	81000017 	ldw	r4,0(r16)
   1c2ac:	10000115 	stw	zero,4(r2)
   1c2b0:	02000044 	movi	r8,1
   1c2b4:	22405217 	ldw	r9,328(r4)
   1c2b8:	0007883a 	mov	r3,zero
   1c2bc:	12400015 	stw	r9,0(r2)
   1c2c0:	20805215 	stw	r2,328(r4)
   1c2c4:	10006215 	stw	zero,392(r2)
   1c2c8:	10006315 	stw	zero,396(r2)
   1c2cc:	883fde26 	beq	r17,zero,1c248 <__alt_data_end+0xfc01c248>
   1c2d0:	18c9883a 	add	r4,r3,r3
   1c2d4:	2109883a 	add	r4,r4,r4
   1c2d8:	1109883a 	add	r4,r2,r4
   1c2dc:	21802215 	stw	r6,136(r4)
   1c2e0:	01800044 	movi	r6,1
   1c2e4:	12406217 	ldw	r9,392(r2)
   1c2e8:	30cc983a 	sll	r6,r6,r3
   1c2ec:	4992b03a 	or	r9,r9,r6
   1c2f0:	12406215 	stw	r9,392(r2)
   1c2f4:	21c04215 	stw	r7,264(r4)
   1c2f8:	01000084 	movi	r4,2
   1c2fc:	893fd21e 	bne	r17,r4,1c248 <__alt_data_end+0xfc01c248>
   1c300:	11006317 	ldw	r4,396(r2)
   1c304:	218cb03a 	or	r6,r4,r6
   1c308:	11806315 	stw	r6,396(r2)
   1c30c:	003fce06 	br	1c248 <__alt_data_end+0xfc01c248>
   1c310:	18805304 	addi	r2,r3,332
   1c314:	18805215 	stw	r2,328(r3)
   1c318:	003fc606 	br	1c234 <__alt_data_end+0xfc01c234>
   1c31c:	00bfffc4 	movi	r2,-1
   1c320:	003fd006 	br	1c264 <__alt_data_end+0xfc01c264>
